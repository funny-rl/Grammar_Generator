{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n — the number of cards with digits that you have (1 ≤ n ≤ 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, …, s_n. The string will not contain any other characters, such as leading or trailing spaces."}
{"name": "1208_D. Restore Permutation", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^{5}) — the size of the permutation.\n\nThe second line contains n integers s_{1}, s_{2}, …, s_{n} (0 ≤ s_{i} ≤ (n(n-1))/(2)).\n\nIt is guaranteed that the array s corresponds to a valid permutation of length n."}
{"name": "1227_D1. Optimal Subsequences (Easy Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence a.\n\nThe second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line contains an integer m (1 ≤ m ≤ 100) — the number of requests.\n\nThe following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests."}
{"name": "1291_E. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 3 ⋅ 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 ≤ c ≤ n) — the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, …, x_c (1 ≤ x_i ≤ n) — the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations."}
{"name": "1311_F. Moving Points", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of points.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^8), where x_i is the initial coordinate of the i-th point. It is guaranteed that all x_i are distinct.\n\nThe third line of the input contains n integers v_1, v_2, ..., v_n (-10^8 ≤ v_i ≤ 10^8), where v_i is the speed of the i-th point."}
{"name": "1398_A. Bad Triangle", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains one integer n (3 ≤ n ≤ 5 ⋅ 10^4) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9; a_{i - 1} ≤ a_i) — the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "143_A. Help Vasilisa the Wise 2", "description": "Input\n\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 ≤ r1, r2, c1, c2, d1, d2 ≤ 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\n<image>"}
{"name": "1466_F. Euclid's nightmare", "description": "Input\n\nIn the first line of input, there are two integers n, m (1 ≤ n, m ≤ 5 ⋅ 10^5) denoting the number of vectors in S and the number of dimensions. \n\nNext n lines contain the description of the vectors in S. In each of them there is an integer k (1 ≤ k ≤ 2) and then follow k distinct integers x_1, ... x_k (1 ≤ x_i ≤ m). This encodes an m-dimensional vector having 1s on coordinates x_1, ... x_k and 0s on the rest of them.\n\nAmong the n vectors, no two are the same."}
{"name": "1490_G. Old Floppy Drive ", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of two positive integers n, m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of numbers on the disk and the number of asked questions.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9).\n\nThe third line of each test case contains m positive integers x_1, x_2, …, x_m (1 ≤ x ≤ 10^9).\n\nIt is guaranteed that the sums of n and m over all test cases do not exceed 2 ⋅ 10^5."}
{"name": "1540_C1. Converging Array (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100).\n\nThe second line contains n integers c_1, c_2 …, c_n (0 ≤ c_i ≤ 100).\n\nThe third line contains n-1 integers b_1, b_2, …, b_{n-1} (0 ≤ b_i ≤ 100).\n\nThe fourth line contains a single integer q (q=1).\n\nThe fifth line contains q space separated integers x_1, x_2, …, x_q (-10^5 ≤ x_i ≤ 10^5)."}
{"name": "284_B. Cows and Poker Game", "description": "Input\n\nThe first line contains a single integer, n (2 ≤ n ≤ 2·105). The second line contains n characters, each either \"A\", \"I\", or \"F\". The i-th character is \"A\" if the i-th player's status is \"ALLIN\", \"I\" if the i-th player's status is \"IN\", or \"F\" if the i-th player's status is \"FOLDED\"."}
{"name": "519_B. A and B and Compilation Errors", "description": "Input\n\nThe first line of the input contains integer n (3 ≤ n ≤ 105) — the initial number of compilation errors.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the errors the compiler displayed for the first time. \n\nThe third line contains n - 1 space-separated integers b1, b2, ..., bn - 1 — the errors displayed at the second compilation. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. \n\nThe fourth line contains n - 2 space-separated integers с1, с2, ..., сn - 2 — the errors displayed at the third compilation. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one."}
{"name": "593_C. Beautiful Function", "description": "Input\n\nThe first line of the input contains number n (1 ≤ n ≤ 50) — the number of circles Ruslan thinks of. Next follow n lines, each of them containing three integers xi, yi and ri (0 ≤ xi, yi ≤ 50, 2 ≤ ri ≤ 50) — the coordinates of the center and the raduis of the i-th circle."}
{"name": "663_A. Rebus", "description": "Input\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks."}
{"name": "730_J. Bottles", "description": "Input\n\nThe first line contains positive integer n (1 ≤ n ≤ 100) — the number of bottles.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai is the amount of soda remaining in the i-th bottle.\n\nThe third line contains n positive integers b1, b2, ..., bn (1 ≤ bi ≤ 100), where bi is the volume of the i-th bottle.\n\nIt is guaranteed that ai ≤ bi for any i."}
{"name": "776_A. A Serial Killer", "description": "Input\n\nFirst line of input contains two names (length of each of them doesn't exceed 10), the two initials potential victims. Next line contains integer n (1 ≤ n ≤ 1000), the number of days.\n\nNext n lines contains two names (length of each of them doesn't exceed 10), first being the person murdered on this day and the second being the one who replaced that person.\n\nThe input format is consistent, that is, a person murdered is guaranteed to be from the two potential victims at that time. Also, all the names are guaranteed to be distinct and consists of lowercase English letters."}
{"name": "846_E. Chemistry in Berland", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 105) — the number of materials discovered by Berland chemists.\n\nThe second line contains n integer numbers b1, b2... bn (1 ≤ bi ≤ 1012) — supplies of BerSU laboratory.\n\nThe third line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 1012) — the amounts required for the experiment.\n\nThen n - 1 lines follow. j-th of them contains two numbers xj + 1 and kj + 1 that denote transformation of (j + 1)-th material (1 ≤ xj + 1 ≤ j, 1 ≤ kj + 1 ≤ 109)."}
{"name": "868_A. Bark to Unlock", "description": "Input\n\nThe first line contains two lowercase English letters — the password on the phone.\n\nThe second line contains single integer n (1 ≤ n ≤ 100) — the number of words Kashtanka knows.\n\nThe next n lines contain two lowercase English letters each, representing the words Kashtanka knows. The words are guaranteed to be distinct."}
{"name": "893_D. Credit Card", "description": "Input\n\nThe first line contains two integers n, d (1 ≤ n ≤ 105, 1 ≤ d ≤ 109) —the number of days and the money limitation.\n\nThe second line contains n integer numbers a1, a2, ... an ( - 104 ≤ ai ≤ 104), where ai represents the transaction in i-th day."}
{"name": "915_A. Garden", "description": "Input\n\nThe first line of input contains two integer numbers n and k (1 ≤ n, k ≤ 100) — the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers ai (1 ≤ ai ≤ 100) — the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket."}
{"name": "938_B. Run For Your Prize", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 105) — the number of prizes.\n\nThe second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 106 - 1) — the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order."}
{"name": "963_B. Destruction of a Tree", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2·105) — number of vertices in a tree.\n\nThe second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ n). If pi ≠ 0 there is an edge between vertices i and pi. It is guaranteed that the given graph is a tree."}
{"name": "990_E. Post Lamps", "description": "Input\n\nThe first line contains three integer numbers n, m and k (1 ≤ k ≤ n ≤ 10^6, 0 ≤ m ≤ n) — the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available.\n\nThe second line contains m integer numbers s_1, s_2, ..., s_m (0 ≤ s_1 < s_2 < ... s_m < n) — the blocked positions.\n\nThe third line contains k integer numbers a_1, a_2, ..., a_k (1 ≤ a_i ≤ 10^6) — the costs of the post lamps."}
{"name": "p01694 Step Aerobics", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 150 or less. The format of each data set is as follows.\n\n> $ n $\n> $ f_1 $ $ f_2 $ ... $ f_n $\n\nIn the first line, the integer $ n $ ($ 1 \\ le n \\ le 100 $) representing the number of times the foot is moved is given. In the second line, $ f_i $, which is a character string representing the movement of the foot, is given in chronological order by $ n $, separated by spaces. $ f_i $ is one of the following four types of character strings.\n\n* \"lu\": Raise your left foot to the platform.\n* \"ru\": Raise your right foot to the platform.\n* \"ld\": Lower your left foot to the floor.\n* \"rd\": Lower your right foot to the floor.\n\n\n\nIt can be assumed that no action is input that lowers the foot on the floor or raises the foot on the platform.\n\nThe line where $ n $ is 0 indicates the end of input. Do not process this data."}
{"name": "1043_A. Elections", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of students in the school.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100) — the number of votes each student gives to Elodreip."}
{"name": "1136_D. Nastya Is Buying Lunch", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 3 ⋅ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}) — the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second.\n\nThe second line contains n integers p_1, p_2, ..., p_n — the initial arrangement of pupils in the queue, from the queue start to its end (1 ≤ p_i ≤ n, p is a permutation of integers from 1 to n). In other words, p_i is the number of the pupil who stands on the i-th position in the queue.\n\nThe i-th of the following m lines contains two integers u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting that the pupil with number u_i agrees to change places with the pupil with number v_i if u_i is directly in front of v_i. It is guaranteed that if i ≠ j, than v_i ≠ v_j or u_i ≠ u_j. Note that it is possible that in some pairs both pupils agree to change places with each other.\n\nNastya is the last person in the queue, i.e. the pupil with number p_n."}
{"name": "1155_A. Reverse a Substring", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the length of s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters."}
{"name": "1195_D2. Submarine in the Rybinsk Sea (hard edition)", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1382_A. Common Subsequence", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 3t lines contain descriptions of test cases.\n\nThe first line of each test case contains two integers n and m (1≤ n,m≤ 1000) — the lengths of the two arrays.\n\nThe second line of each test case contains n integers a_1,…,a_n (1≤ a_i≤ 1000) — the elements of the first array.\n\nThe third line of each test case contains m integers b_1,…,b_m (1≤ b_i≤ 1000) — the elements of the second array.\n\nIt is guaranteed that the sum of n and the sum of m across all test cases does not exceed 1000 (∑_{i=1}^t n_i, ∑_{i=1}^t m_i≤ 1000)."}
{"name": "1497_D. Genius", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. \n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 5000) — the number of problems.\n\nThe second line of each test case contains n integers tag_1, tag_2, …, tag_n (1 ≤ tag_i ≤ n) — tags of the problems.\n\nThe third line of each test case contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ 10^9) — scores of the problems.\n\nIt's guaranteed that sum of n over all test cases does not exceed 5000."}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 ≤ q ≤ 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator."}
{"name": "1547_C. Pair Programming", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 1000). Then t test cases follow. Before each test case, there is an empty line.\n\nEach test case contains three lines. The first line contains three integers k, n, m (0 ≤ k ≤ 100, 1 ≤ n, m ≤ 100) — the initial number of lines in file and lengths of Monocarp's and Polycarp's sequences of changes respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 300).\n\nThe third line contains m integers b_1, b_2, ..., b_m (0 ≤ b_j ≤ 300)."}
{"name": "219_A. k-String", "description": "Input\n\nThe first input line contains integer k (1 ≤ k ≤ 1000). The second line contains s, all characters in s are lowercase English letters. The string length s satisfies the inequality 1 ≤ |s| ≤ 1000, where |s| is the length of string s."}
{"name": "242_C. King's Path", "description": "Input\n\nThe first line contains four space-separated integers x0, y0, x1, y1 (1 ≤ x0, y0, x1, y1 ≤ 109), denoting the initial and the final positions of the king.\n\nThe second line contains a single integer n (1 ≤ n ≤ 105), denoting the number of segments of allowed cells. Next n lines contain the descriptions of these segments. The i-th line contains three space-separated integers ri, ai, bi (1 ≤ ri, ai, bi ≤ 109, ai ≤ bi), denoting that cells in columns from number ai to number bi inclusive in the ri-th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily.\n\nIt is guaranteed that the king's initial and final position are allowed cells. It is guaranteed that the king's initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn't exceed 105."}
{"name": "290_D. Orange", "description": "Input\n\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\n\nThe second line of the input is an integer between 0 and 26, inclusive."}
{"name": "316_B2. EKG", "description": "Input\n\nThe first line contains two integers n (1 ≤ n ≤ 103) and x (1 ≤ x ≤ n) — the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n) — the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary."}
{"name": "361_C. Levko and Array Recovery", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the size of the array and the number of operations in Levko's records, correspondingly.\n\nNext m lines describe the operations, the i-th line describes the i-th operation. The first integer in the i-th line is integer ti (1 ≤ ti ≤ 2) that describes the operation type. If ti = 1, then it is followed by three integers li, ri and di (1 ≤ li ≤ ri ≤ n,  - 104 ≤ di ≤ 104) — the description of the operation of the first type. If ti = 2, then it is followed by three integers li, ri and mi (1 ≤ li ≤ ri ≤ n,  - 5·107 ≤ mi ≤ 5·107) — the description of the operation of the second type.\n\nThe operations are given in the order Levko performed them on his array."}
{"name": "385_A. Bear and Raspberry", "description": "Input\n\nThe first line contains two space-separated integers, n and c (2 ≤ n ≤ 100, 0 ≤ c ≤ 100), — the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 ≤ xi ≤ 100), the price of a honey barrel on day i."}
{"name": "433_A. Kitahara Haruki's Gift", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple."}
{"name": "500_C. New Year Book Reading", "description": "Input\n\nThe first line contains two space-separated integers n (2 ≤ n ≤ 500) and m (1 ≤ m ≤ 1000) — the number of books, and the number of days for which Jaehyun would read books.\n\nThe second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 100) — the weight of each book.\n\nThe third line contains m space separated integers b1, b2, ..., bm (1 ≤ bj ≤ n) — the order of books that he would read. Note that he can read the same book more than once."}
{"name": "551_B. ZgukistringZ", "description": "Input\n\nThe first line contains string a, the second line contains string b, and the third line contains string c (1 ≤ |a|, |b|, |c| ≤ 105, where |s| denotes the length of string s).\n\nAll three strings consist only of lowercase English letters. \n\nIt is possible that b and c coincide."}
{"name": "578_C. Weakness and Poorness", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 200 000), the length of a sequence.\n\nThe second line contains n integers a1, a2, ..., an (|ai| ≤ 10 000)."}
{"name": "5_A. Chat Server's Outgoing Traffic", "description": "Input\n\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n  * +<name> for 'Add' command. \n  * -<name> for 'Remove' command. \n  * <sender_name>:<message_text> for 'Send' command. \n\n\n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive."}
{"name": "643_B. Bear and Two Paths", "description": "Input\n\nThe first line of the input contains two integers n and k (4 ≤ n ≤ 1000, n - 1 ≤ k ≤ 2n - 2) — the number of cities and the maximum allowed number of roads, respectively.\n\nThe second line contains four distinct integers a, b, c and d (1 ≤ a, b, c, d ≤ n)."}
{"name": "670_B. Game of Robots", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ min(2·109, n·(n + 1) / 2).\n\nThe second line contains the sequence id1, id2, ..., idn (1 ≤ idi ≤ 109) — identifiers of roborts. It is guaranteed that all identifiers are different."}
{"name": "691_D. Swaps in Permutation", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 106) — the length of the permutation p and the number of pairs of positions.\n\nThe second line contains n distinct integers pi (1 ≤ pi ≤ n) — the elements of the permutation p.\n\nEach of the last m lines contains two integers (aj, bj) (1 ≤ aj, bj ≤ n) — the pairs of positions to swap. Note that you are given a positions, not the values to swap."}
{"name": "830_A. Office Keys", "description": "Input\n\nThe first line contains three integers n, k and p (1 ≤ n ≤ 1 000, n ≤ k ≤ 2 000, 1 ≤ p ≤ 109) — the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) — positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 ≤ bj ≤ 109) — positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point."}
{"name": "949_C. Data Center Maintenance", "description": "Input\n\nThe first line of input contains three integers n, m and h (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000, 2 ≤ h ≤ 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \n\nThe second line of input contains n integers u1, u2, ..., un (0 ≤ uj < h), j-th of these numbers is an index of a maintenance hour for data center j. \n\nEach of the next m lines contains two integers ci, 1 and ci, 2 (1 ≤ ci, 1, ci, 2 ≤ n, ci, 1 ≠ ci, 2), defining the data center indices containing the data of client i.\n\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day."}
{"name": "977_B. Two-gram", "description": "Input\n\nThe first line of the input contains integer number n (2 ≤ n ≤ 100) — the length of string s. The second line of the input contains the string s consisting of n capital Latin letters."}
{"name": "p01422 Beautiful Currency", "description": "Input\n\nEach dataset contains two lines. The first line contains a single integer, N, and the second line contains N integers, {a_i}.\n\nYou may assume the following constraints:\n\n1 \\leq N \\leq 20\n\n1 \\leq a_1 \\lt a_2 \\lt... \\lt a_N \\lt 10^5"}
{"name": "1037_B. Reach Median", "description": "Input\n\nThe first line contains two integers n and s (1≤ n≤ 2⋅ 10^5-1, 1≤ s≤ 10^9) — the length of the array and the required value of median.\n\nThe second line contains n integers a_1, a_2, …, a_n (1≤ a_i ≤ 10^9) — the elements of the array a.\n\nIt is guaranteed that n is odd."}
{"name": "1081_D. Maximum Distance", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ k ≤ n ≤ 10^5, n-1 ≤ m ≤ 10^5) — the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains k distinct integers x_1, x_2, …, x_k (1 ≤ x_i ≤ n).\n\nEach of the following m lines contains three integers u, v and w (1 ≤ u,v ≤ n, 1 ≤ w ≤ 10^9), denoting there is an edge between u and v of weight w. The given graph is undirected, so an edge (u, v) can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected."}
{"name": "1189_A. Keanu Reeves", "description": "Input\n\nThe first line of the input contains a single integer n (1≤ n ≤ 100) — the length of the string s.\n\nThe second line contains the string s of length n consisting only from zeros and ones."}
{"name": "1269_B. Modulo Equality", "description": "Input\n\nThe first line contains two integers n,m (1 ≤ n ≤ 2000, 1 ≤ m ≤ 10^9): number of elemens in arrays and m.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i < m).\n\nThe third line contains n integers b_1, b_2, …, b_n (0 ≤ b_i < m).\n\nIt is guaranteed that there exists some non-negative integer x, such that it would be possible to find some permutation p_1, p_2, …, p_n such that (a_i + x) mod m = b_{p_i}."}
{"name": "1291_B. Array Sharpening", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 15\\ 000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5).\n\nThe second line of each test case contains a sequence of n non-negative integers a_1, …, a_n (0 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i < n) — the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ m ≤ 2 ⋅ 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 ⋅ 10^9."}
{"name": "1397_C. Multiples of Length", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9)."}
{"name": "1439_C. Greedy Shopping", "description": "Input\n\nThe first line contains two integers n, q (1 ≤ n, q ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_{1},a_{2}, …, a_{n} (1 ≤ a_{i} ≤ 10^9) — the costs of the meals. It is guaranteed, that a_1 ≥ a_2 ≥ … ≥ a_n.\n\nEach of the next q lines contains three integers t, x, y (1 ≤ t ≤ 2, 1≤ x ≤ n, 1 ≤ y ≤ 10^9), each describing the next query.\n\nIt is guaranteed that there exists at least one query of type 2."}
{"name": "449_D. Jzzhu and Numbers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 106). The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 106)."}
{"name": "571_B. Minimization", "description": "Input\n\nThe first line contains two integers n, k (2 ≤ n ≤ 3·105, 1 ≤ k ≤ min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 109 ≤ A[i] ≤ 109), separate by spaces — elements of the array A."}
{"name": "687_A. NP-Hard Problem", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers ui and vi (1 ≤ ui, vi ≤ n), denoting an undirected edge between ui and vi. It's guaranteed the graph won't contain any self-loops or multiple edges."}
{"name": "754_B. Ilya and tic-tac-toe game", "description": "Input\n\nThe tic-tac-toe position is given in four lines.\n\nEach of these lines contains four characters. Each character is '.' (empty cell), 'x' (lowercase English letter x), or 'o' (lowercase English letter o). It is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now (in particular, it means that the game is not finished). It is possible that all the cells are empty, it means that the friends left without making single turn."}
{"name": "774_K. Stepan and Vowels", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 100 000) — the number of letters in the word written by Stepan.\n\nThe second line contains the string s which has length that equals to n and contains only lowercase English letters — the word written by Stepan."}
{"name": "79_D. Password", "description": "Input\n\nThe first line contains three integers n, k and l (1 ≤ n ≤ 10000, 1 ≤ k ≤ 10, 1 ≤ l ≤ 100), separated by single spaces.\n\nThe second line contains k integers x1, ..., xk (1 ≤ x1 < x2 < ... < xk ≤ n), separated by single spaces.\n\nThe third line contains l integers a1, ..., al (1 ≤ ai ≤ n), separated by single spaces. It is possible that some elements of the array ai are equal value."}
{"name": "846_B. Math Show", "description": "Input\n\nThe first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·109).\n\nThe second line contains k integer numbers, values tj (1 ≤ tj ≤ 1000000), where tj is the time in minutes required to solve j-th subtask of any task."}
{"name": "962_F. Simple Cycles Edges", "description": "Input\n\nThe first line contain two integers n and m (1 ≤ n ≤ 100 000, 0 ≤ m ≤ min(n ⋅ (n - 1) / 2, 100 000)) — the number of vertices and the number of edges.\n\nEach of the following m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the description of the edges."}
{"name": "990_B. Micro-World", "description": "Input\n\nThe first line contains two space separated positive integers n and K (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ K ≤ 10^6) — number of bacteria and intergalactic constant K.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — sizes of bacteria you have."}
{"name": "p00032 Plastic Board", "description": "Input\n\nThe input is given in the following format:\n\n\na1, b1, c1\na2, b2, c2\n::\n\n\nThe data to be entered into the machine is given in multiple lines. On line i, the integers ai, bi, which represent the lengths of two adjacent sides of the i-th parallelogram, and the integer ci, which represents the length of the diagonal, are given, separated by commas (1 ≤ ai, bi, ci ≤ 1000). , ai + bi> ci). The number of data does not exceed 100."}
{"name": "p00163 Highway Toll", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nd\nhd md\na\nha ma\n\n\nThe first line gives the departure IC number d (1 ≤ d ≤ 7), and the second line gives the time hd (0 ≤ hd ≤ 23) and minutes md (0 ≤ md ≤ 59) of the departure IC transit time. ..\n\nThe arrival IC number a (1 ≤ a ≤ 7) is given on the third line, and the time ha (0 ≤ ha ≤ 23) and minute ma (0 ≤ ma ≤ 59) of the arrival IC transit time are given on the fourth line. .."}
{"name": "p01353 Rabbit Plays Games!", "description": "Input\n\n1 ≤ n ≤ 40 000\n1 ≤ hi, ai, di, si ≤ 1 000 000 000 (integer)\nsi are all different."}
{"name": "p01970 The Diversity of Prime Factorization", "description": "Input\n\n\nN\nq_1 q_2 $ \\ cdots $ q_N\n\n\nIn the first line, the number of the output of the machine is given. In the second line, the output of the machine is given.\n\nConstraints\n\n* 1 \\ leq N \\ leq 10 ^ 5\n* 2 \\ leq q_i \\ leq 10 ^ 6 (1 \\ leq i \\ leq N)"}
{"name": "1030_E. Vasya and Good Sequences", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5) — length of the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{18}) — the sequence a."}
{"name": "1053_C. Putting Boxes Together", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of boxes and the number of queries.\n\nThe second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9) — the positions of the boxes. All a_i are distinct, a_{i - 1} < a_i holds for all valid i.\n\nThe third line contains n integers w_1, w_2, ... w_n (1 ≤ w_i ≤ 10^9) — the initial weights of the boxes.\n\nNext q lines describe queries, one query per line.\n\nEach query is described in a single line, containing two integers x and y. If x < 0, then this query is of the first type, where id = -x, nw = y (1 ≤ id ≤ n, 1 ≤ nw ≤ 10^9). If x > 0, then the query is of the second type, where l = x and r = y (1 ≤ l_j ≤ r_j ≤ n). x can not be equal to 0."}
{"name": "1075_D. Intersecting Subtrees", "description": "Input\n\n1\n3\n1 2\n2 3\n1\n1\n1\n2\n2\n1"}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2000) — the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6), where a_i is the i-th element of a."}
{"name": "1165_A. Remainder", "description": "Input\n\nThe first line of the input contains three integers n, x, y (0 ≤ y < x < n ≤ 2 ⋅ 10^5) — the length of the number and the integers x and y, respectively.\n\nThe second line of the input contains one decimal number consisting of n digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1."}
{"name": "1264_A. Beautiful Regional Contest", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 4⋅10^5) — the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 ≥ p_2 ≥ ... ≥ p_n.\n\nThe sum of n over all test cases in the input does not exceed 4⋅10^5."}
{"name": "1328_F. Make k Equal", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a and the required number of equal elements.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a."}
{"name": "1455_F. String and Operations", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 ≤ n ≤ 500; 2 ≤ k ≤ 26). \n\nThe second line contains a string s consisting of n characters. Each character is one of the k first letters of the Latin alphabet (in lower case)."}
{"name": "1506_F. Triangular Paths", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) is the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 2 ⋅ 10^5) is the number of points to visit.\n\nThe second line contains n numbers r_1, r_2, …, r_n (1 ≤ r_i ≤ 10^9), where r_i is the number of the layer in which i-th point is located.\n\nThe third line contains n numbers c_1, c_2, …, c_n (1 ≤ c_i ≤ r_i), where c_i is the number of the i-th point in the r_i layer.\n\nIt is guaranteed that all n points are distinct.\n\nIt is guaranteed that there is always at least one way to traverse all n points.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "180_D. Name", "description": "Input\n\nThe first line contains a non-empty string s (1 ≤ |s| ≤ 5000), where |s| is its length. The second line contains a non-empty string t (1 ≤ |t| ≤ 5000), where |t| is its length. Both strings consist of lowercase Latin letters."}
{"name": "252_B. Unsorting Array", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105). The second line contains n non-negative space-separated integers a1, a2, ..., an — the elements of the array that Petya's mother presented him. All integers in the input do not exceed 109."}
{"name": "348_A. Mafia", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the i-th number in the list is the number of rounds the i-th person wants to play."}
{"name": "392_D. Three Arrays", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105). The second line contains n space-separated integers a1, a2, ..., an — array a. The third line contains the description of array b in the same format. The fourth line contains the description of array c in the same format. The following constraint holds: 1 ≤ ai, bi, ci ≤ 109."}
{"name": "488_C. Fight the Monster", "description": "Input\n\nThe first line contains three integers HPY, ATKY, DEFY, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\n\nThe second line contains three integers HPM, ATKM, DEFM, separated by a space, denoting the HP, ATK and DEF of the monster.\n\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1 HP, 1 ATK and 1 DEF.\n\nAll numbers in input are integer and lie between 1 and 100 inclusively."}
{"name": "512_B. Fox And Jumping", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300), number of cards.\n\nThe second line contains n numbers li (1 ≤ li ≤ 109), the jump lengths of cards.\n\nThe third line contains n numbers ci (1 ≤ ci ≤ 105), the costs of cards."}
{"name": "560_D. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length."}
{"name": "609_B. The Best Gift", "description": "Input\n\nThe first line contains two positive integers n and m (2 ≤ n ≤ 2·105, 2 ≤ m ≤ 10) — the number of books in the bookstore and the number of genres.\n\nThe second line contains a sequence a1, a2, ..., an, where ai (1 ≤ ai ≤ m) equals the genre of the i-th book.\n\nIt is guaranteed that for each genre there is at least one book of that genre."}
{"name": "702_E. Analysis of Pathes in Functional Graph", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 105, 1 ≤ k ≤ 1010). The second line contains the sequence f0, f1, ..., fn - 1 (0 ≤ fi < n) and the third — the sequence w0, w1, ..., wn - 1 (0 ≤ wi ≤ 108)."}
{"name": "76_B. Mice", "description": "Input\n\nThe first line of the input contains four integer numbers N (1 ≤ N ≤ 105), M (0 ≤ M ≤ 105), Y0 (0 ≤ Y0 ≤ 107), Y1 (0 ≤ Y1 ≤ 107, Y0 ≠ Y1). The second line contains a strictly increasing sequence of N numbers — x coordinates of mice. Third line contains a strictly increasing sequence of M numbers — x coordinates of cheese. All coordinates are integers and do not exceed 107 by absolute value."}
{"name": "814_C. An impassioned circulation of affection", "description": "Input\n\nThe first line of input contains a positive integer n (1 ≤ n ≤ 1 500) — the length of the garland.\n\nThe second line contains n lowercase English letters s1s2... sn as a string — the initial colours of paper pieces on the garland.\n\nThe third line contains a positive integer q (1 ≤ q ≤ 200 000) — the number of plans Nadeko has.\n\nThe next q lines describe one plan each: the i-th among them contains an integer mi (1 ≤ mi ≤ n) — the maximum amount of pieces to repaint, followed by a space, then by a lowercase English letter ci — Koyomi's possible favourite colour."}
{"name": "83_C. Track", "description": "Input\n\nThe first input line contains three integers n, m and k (1 ≤ n, m ≤ 50, n·m ≥ 2, 1 ≤ k ≤ 4). Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T.\n\nPretest 12 is one of the maximal tests for this problem."}
{"name": "909_D. Colorful Points", "description": "Input\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 106."}
{"name": "931_A. Friends Meeting", "description": "Input\n\nThe first line contains a single integer a (1 ≤ a ≤ 1000) — the initial position of the first friend. \n\nThe second line contains a single integer b (1 ≤ b ≤ 1000) — the initial position of the second friend.\n\nIt is guaranteed that a ≠ b."}
{"name": "985_A. Chess Placing", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 100, n is even) — the size of the chessboard. \n\nThe second line of the input contains <image> integer numbers <image> (1 ≤ pi ≤ n) — initial positions of the pieces. It is guaranteed that all the positions are distinct."}
{"name": "p00127 Pocket Pager Input", "description": "Input\n\nMultiple messages are given. One message (up to 200 characters) is given on each line. The total number of messages does not exceed 50."}
{"name": "p00914 Equal Sum Sets", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets does not exceed 100.\n\nEach of the datasets has three integers n, k and s in one line, separated by a space. You may assume 1 ≤ n ≤ 20, 1 ≤ k ≤ 10 and 1 ≤ s ≤ 155.\n\nThe end of the input is indicated by a line containing three zeros."}
{"name": "1003_D. Coins and Queries", "description": "Input\n\nThe first line of the input contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of coins and the number of queries.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n — values of coins (1 ≤ a_i ≤ 2 ⋅ 10^9). It is guaranteed that all a_i are integer powers of 2 (i.e. a_i = 2^d for some non-negative integer number d).\n\nThe next q lines contain one integer each. The j-th line contains one integer b_j — the value of the j-th query (1 ≤ b_j ≤ 10^9)."}
{"name": "1110_E. Magic Stones", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 10^5) — the number of magic stones.\n\nThe second line contains integers c_1, c_2, …, c_n (0 ≤ c_i ≤ 2 ⋅ 10^9) — the charges of Grigory's stones.\n\nThe second line contains integers t_1, t_2, …, t_n (0 ≤ t_i ≤ 2 ⋅ 10^9) — the charges of Andrew's stones."}
{"name": "1140_B. Good String", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case is represented by two lines.\n\nThe first line of i-th test case contains one integer n (1 ≤ n ≤ 100) – the length of string s.\n\nThe second line of i-th test case contains string s, consisting of only characters > and <."}
{"name": "1199_E. Matching vs Independent Set", "description": "Input\n\nThe first line contains a single integer T ≥ 1 — the number of graphs you need to process. The description of T graphs follows.\n\nThe first line of description of a single graph contains two integers n and m, where 3 ⋅ n is the number of vertices, and m is the number of edges in the graph (1 ≤ n ≤ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}).\n\nEach of the next m lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ 3 ⋅ n), meaning that there is an edge between vertices v_i and u_i.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^{5}, and the sum of all m over all graphs in a single test does not exceed 5 ⋅ 10^{5}."}
{"name": "1216_D. Swords", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^{5}) — the number of types of swords.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{9}), where a_i equals to the number of swords of the i-th type, which have remained in the basement after the theft. It is guaranteed that there exists at least one such pair of indices (j, k) that a_j ≠ a_k."}
{"name": "1239_E. Turtle", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 25) — the length of the field.\n\nThe second line contains n integers a_{1, i} (0 ≤ a_{1, i} ≤ 50 000), the energetic cost of lettuce leaves in the first row of the field.\n\nThe third line contains n integers a_{2, i} (0 ≤ a_{2, i} ≤ 50 000), the energetic cost of lettuce leaves in the second row of the field."}
{"name": "1257_G. Divisor Set", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of prime divisors in representation of x.\n\nThe second line contains n integers p_1, p_2, ..., p_n (2 ≤ p_i ≤ 3 ⋅ 10^6) — the prime factorization of x."}
{"name": "1301_B. Motarack's Birthday", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 10^{5}) — the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-1 ≤ a_i ≤ 10 ^ {9}). If a_i = -1, then the i-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 4 ⋅ 10 ^ {5}."}
{"name": "1325_B. CopyCopyCopyCopyCopy", "description": "Input\n\nThe first line contains an integer t — the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 10^9) — the elements of the array a.\n\nThe sum of n across the test cases doesn't exceed 10^5."}
{"name": "1344_A. Hilbert's Hotel", "description": "Input\n\nEach test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 10^4) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 2⋅ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_0,a_1,…,a_{n-1} (-10^9≤ a_i≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5."}
{"name": "1408_A. Circle Coloring", "description": "Input\n\nThe first line of input contains one integer t (1 ≤ t ≤ 100): the number of test cases.\n\nThe first line of each test case contains one integer n (3 ≤ n ≤ 100): the number of elements in the given sequences.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100).\n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 100).\n\nThe fourth line contains n integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 100).\n\nIt is guaranteed that a_i ≠ b_i, a_i ≠ c_i, b_i ≠ c_i for all i."}
{"name": "1475_D. Cleaning the Phone", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 10^9) — the number of applications on Polycarp's phone and the number of memory units to be freed.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the number of memory units used by applications.\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 2) — the convenience points of each application.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1500_B. Two chandeliers", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n, m ≤ 500 000; 1 ≤ k ≤ 10^{12}) — the number of colors in the first and the second chandeliers and how many times colors should differ to anger Vasya.\n\nThe second line contains n different integers a_i (1 ≤ a_i ≤ 2 ⋅ max(n, m)) that describe the first chandelier's sequence of colors.\n\nThe third line contains m different integers b_j (1 ≤ b_i ≤ 2 ⋅ max(n, m)) that describe the second chandelier's sequence of colors.\n\nAt the i-th day, the first chandelier has a color a_x, where x = ((i - 1) mod n) + 1) and the second one has a color b_y, where y = ((i - 1) mod m) + 1).\n\nIt's guaranteed that sequence a differs from sequence b, so there are will be days when colors of chandeliers differs."}
{"name": "1525_D. Armchairs", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 5000) — the number of armchairs.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1). a_i = 1 means that the i-th armchair is initially occupied, a_i = 0 means that it is initially free. The number of occupied armchairs is at most n/2."}
{"name": "272_B. Dima and Sequence", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109).\n\nThe numbers in the lines are separated by single spaces."}
{"name": "319_B. Psychos in a Line", "description": "Input\n\nThe first line of input contains integer n denoting the number of psychos, (1 ≤ n ≤ 105). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive — ids of the psychos in the line from left to right."}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 ≤ n ≤ 100000). The i-th (1 ≤ i ≤ n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise."}
{"name": "40_B. Repaintings", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109)."}
{"name": "438_A. The Child and Toy", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 2000). The second line contains n integers: v1, v2, ..., vn (0 ≤ vi ≤ 105). Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi (1 ≤ xi, yi ≤ n; xi ≠ yi).\n\nConsider all the parts are numbered from 1 to n."}
{"name": "582_A. GCD Table", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 500) — the length of array a. The second line contains n2 space-separated numbers — the elements of the GCD table of G for array a. \n\nAll the numbers in the table are positive integers, not exceeding 109. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a."}
{"name": "604_A. Uncowed Forces", "description": "Input\n\nThe first line of the input contains five space-separated integers m1, m2, m3, m4, m5, where mi (0 ≤ mi ≤ 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w1, w2, w3, w4, w5, where wi (0 ≤ wi ≤ 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers hs and hu (0 ≤ hs, hu ≤ 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively."}
{"name": "626_D. Jerry's Protest", "description": "Input\n\nThe first line of input contains a single integer n (2 ≤ n ≤ 2000) — the number of balls in the jar.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 5000) — the number written on the ith ball. It is guaranteed that no two balls have the same number."}
{"name": "675_E. Trains and Statistic", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of stations.\n\nThe second line contains n - 1 integer ai (i + 1 ≤ ai ≤ n), the i-th of them means that at the i-th station one may buy tickets to each station from i + 1 to ai inclusive."}
{"name": "765_D. Artsem and Saunders", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers — values f(1), ..., f(n) (1 ≤ f(i) ≤ n)."}
{"name": "789_A. Anastasia and pebbles", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the number of different pebble types and number of pebbles Anastasia can place in one pocket.\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 104) — number of pebbles of each type."}
{"name": "903_D. Almost Difference", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 200000) — the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — elements of the array."}
{"name": "9_E. Interesting Graph and Apples", "description": "Input\n\nThe first line of the input data contains a pair of integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2500) — the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 ≤ xi, yi ≤ n) — the vertices that are already connected by edges. The initial graph may contain multiple edges and loops."}
{"name": "p00748 Pollock's conjecture", "description": "Input\n\nThe input is a sequence of lines each of which contains a single positive integer less than 106. The end of the input is indicated by a line containing a single zero."}
{"name": "1011_A. Stages", "description": "Input\n\nThe first line of input contains two integers — n and k (1 ≤ k ≤ n ≤ 50) – the number of available stages and the number of stages to use in the rocket.\n\nThe second line contains string s, which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once."}
{"name": "1080_C. Masha and two friends", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases.\n\nEach of them is described in the following format:\n\nThe first line contains two integers n and m (1 ≤ n,m ≤ 10^9) — the size of the board.\n\nThe second line contains four integers x_1, y_1, x_2, y_2 (1 ≤ x_1 ≤ x_2 ≤ m, 1 ≤ y_1 ≤ y_2 ≤ n) — the coordinates of the rectangle, the white paint was spilled on.\n\nThe third line contains four integers x_3, y_3, x_4, y_4 (1 ≤ x_3 ≤ x_4 ≤ m, 1 ≤ y_3 ≤ y_4 ≤ n) — the coordinates of the rectangle, the black paint was spilled on."}
{"name": "10_B. Cinema Cashier", "description": "Input\n\nThe first line contains two integers N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 99) — the amount of requests and the hall size respectively. The second line contains N space-separated integers Mi from the range [1, K] — requests to the program."}
{"name": "1121_A. Technogoblet of Fire", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 100, 1 ≤ m, k ≤ n) — the total number of students, the number of schools and the number of the Chosen Ones.\n\nThe second line contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n), where p_i denotes the power of i-th student. The bigger the power, the stronger the student.\n\nThe third line contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ m), where s_i denotes the school the i-th student goes to. At least one student studies in each of the schools. \n\nThe fourth line contains k different integers c_1, c_2, …, c_k (1 ≤ c_i ≤ n) — the id's of the Chosen Ones."}
{"name": "1148_C. Crazy Diamond", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 3 ⋅ 10^5, n is even) — the length of the permutation. \n\nThe second line contains n distinct integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n) — the given permutation."}
{"name": "1225_B1. TV Subscriptions (Easy Version)", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.\n\nThe first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.\n\nIt is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100."}
{"name": "1249_D1. Too Many Segments (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 200) — the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next n lines contain segments. The i-th line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 200) — the endpoints of the i-th segment."}
{"name": "1290_A. Mind Control", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers n, m and k (1 ≤ m ≤ n ≤ 3500, 0 ≤ k ≤ n - 1) — the number of elements in the array, your position in line and the number of people whose choices you can fix.\n\nThe second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3500."}
{"name": "1332_G. No Monotone Triples", "description": "Input\n\nThe first line contains two integers n, q (3 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5) — the length of sequence a and the number of queries.\n\nThe second line contains n integers a_1,a_2,…, a_n (1 ≤ a_i ≤ 10^{9}), representing the sequence a.\n\nThen each of the following q lines contains two integers L, R (1 ≤ L,R ≤ n, R-L≥ 2)."}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nOnly line of each test case contains one string s (1 ≤ |s| ≤ 100), consisting of only characters 0 and 1."}
{"name": "1396_A. Multiples of Length", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9)."}
{"name": "141_C. Queue", "description": "Input\n\nThe first input line contains integer n — the number of people in the queue (1 ≤ n ≤ 3000). Then n lines contain descriptions of the people as \"namei ai\" (one description on one line), where namei is a non-empty string consisting of lowercase Latin letters whose length does not exceed 10 characters (the i-th person's name), ai is an integer (0 ≤ ai ≤ n - 1), that represents the number of people who are higher and stand in the queue in front of person i. It is guaranteed that all names are different."}
{"name": "1463_B. Find The Array", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 ≤ n ≤ 50).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "259_B. Little Elephant and Magic Square", "description": "Input\n\nThe first three lines of the input contain the Little Elephant's notes. The first line contains elements of the first row of the magic square. The second line contains the elements of the second row, the third line is for the third row. The main diagonal elements that have been forgotten by the Elephant are represented by zeroes.\n\nIt is guaranteed that the notes contain exactly three zeroes and they are all located on the main diagonal. It is guaranteed that all positive numbers in the table do not exceed 105."}
{"name": "305_A. Strange Addition", "description": "Input\n\nThe first input line contains integer k (1 ≤ k ≤ 100) — the number of integers.\n\nThe second line contains k distinct space-separated integers d1, d2, ..., dk (0 ≤ di ≤ 100)."}
{"name": "331_A2. Oh Sweet Beaverette", "description": "Input\n\nThe first line contains a single integer n — the initial number of trees in the woodland belt, 2 ≤ n. The second line contains space-separated integers ai — the esthetic appeals of each tree. All esthetic appeals do not exceed 109 in their absolute value.\n\n  * to get 30 points, you need to solve the problem with constraints: n ≤ 100 (subproblem A1); \n  * to get 100 points, you need to solve the problem with constraints: n ≤ 3·105 (subproblems A1+A2)."}
{"name": "399_C. Cards", "description": "Input\n\nThe first line contains two space-separated integers a and b (0 ≤ a, b ≤ 105; a + b ≥ 1) — the number of \"o\" cards and the number of \"x\" cards."}
{"name": "448_B. Suffix Structures", "description": "Input\n\nThe first line contains a non-empty word s. The second line contains a non-empty word t. Words s and t are different. Each word consists only of lowercase English letters. Each word contains at most 100 letters."}
{"name": "46_C. Hamsters and Tigers", "description": "Input\n\nThe first line contains number n (2 ≤ n ≤ 1000) which indicates the total number of animals in the arena. The second line contains the description of the animals' positions. The line consists of n symbols \"H\" and \"T\". The \"H\"s correspond to hamsters and the \"T\"s correspond to tigers. It is guaranteed that at least one hamster and one tiger are present on the arena. The animals are given in the order in which they are located circle-wise, in addition, the last animal stands near the first one."}
{"name": "516_C. Drazil and Park", "description": "Input\n\nThe first line contains two integer n and m (3 ≤ n ≤ 105, 1 ≤ m ≤ 105), denoting number of trees and number of days, respectively. \n\nThe second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 109), the distances between consecutive trees.\n\nThe third line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109), the heights of trees.\n\nEach of following m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) describing each new day. There are always at least two different trees Drazil can choose that are not affected by children."}
{"name": "774_D. Lie or Truth", "description": "Input\n\nThe first line contains three integers n, l, r (1 ≤ n ≤ 105, 1 ≤ l ≤ r ≤ n) — the number of Vasya's cubes and the positions told by Stepan.\n\nThe second line contains the sequence a1, a2, ..., an (1 ≤ ai ≤ n) — the sequence of integers written on cubes in the Vasya's order.\n\nThe third line contains the sequence b1, b2, ..., bn (1 ≤ bi ≤ n) — the sequence of integers written on cubes after Stepan rearranged their order.\n\nIt is guaranteed that Stepan did not remove or add other cubes, he only rearranged Vasya's cubes."}
{"name": "799_D. Field expansion", "description": "Input\n\nThe first line contains five integers a, b, h, w and n (1 ≤ a, b, h, w, n ≤ 100 000) — the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 100 000), where ai equals the integer a side multiplies by when the i-th extension is applied."}
{"name": "845_B. Luba And The Ticket", "description": "Input\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) — this string denotes Luba's ticket. The ticket can start with the digit 0."}
{"name": "961_F. k-substrings", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 106) — the length s.\n\nThe second line contains the string s consisting of n lowercase Latin letters."}
{"name": "p00313 Secret Investigation", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nX a1 a2 ... aX\nY b1 b2 ... bY\nZ c1 c2 ... cZ\n\n\nThe input is 4 lines, and the number of people to be surveyed N (1 ≤ N ≤ 100) is given in the first line. On the second line, the number X (0 ≤ X ≤ N) of those who belong to the organization $ A $, followed by the identification number ai (1 ≤ ai ≤ N) of those who belong to the organization $ A $. Given. On the third line, the number Y (0 ≤ Y ≤ N) of those who belong to the organization $ B $, followed by the identification number bi (1 ≤ bi ≤ N) of those who belong to the organization $ B $. Given. On the fourth line, the number Z (0 ≤ Z ≤ N) of the person who owns the product $ C $, followed by the identification number ci (1 ≤ ci ≤ N) of the person who owns the product $ C $. ) Is given."}
{"name": "p00812 Equals are Equals", "description": "Input\n\nThe input to your program is a sequence of blocks of lines. A block consists of lines, each containing an expression, and a terminating line. After the last block, there is another terminating line. A terminating line is a line solely consisting of a period symbol.\n\nThe first expression of a block is one prepared by Mr. Simpson; all that follow in a block are answers by the students. An expression consists of lowercase letters, digits, operators `+', `-' and `^', parentheses `(' and `)', and spaces. A line containing an expression has no more than 80 characters."}
{"name": "1016_C. Vasya And The Mushrooms", "description": "Input\n\nThe first line contains the number n (1 ≤ n ≤ 3·105) — the length of the glade.\n\nThe second line contains n numbers a1, a2, ..., an (1 ≤ ai ≤ 106) — the growth rate of mushrooms in the first row of the glade.\n\nThe third line contains n numbers b1, b2, ..., bn (1 ≤ bi ≤ 106) is the growth rate of mushrooms in the second row of the glade."}
{"name": "1152_A. Neko Finds Grapes", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 10^5) — the number of chests and the number of keys.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the numbers written on the treasure chests.\n\nThe third line contains m integers b_1, b_2, …, b_m (1 ≤ b_i ≤ 10^9) — the numbers written on the keys."}
{"name": "1191_C. Tokitsukaze and Discard Items", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 10^{18}, 1 ≤ m ≤ 10^5, 1 ≤ m, k ≤ n) — the number of items, the number of special items to be discarded and the number of positions in each page.\n\nThe second line contains m distinct integers p_1, p_2, …, p_m (1 ≤ p_1 < p_2 < … < p_m ≤ n) — the indices of special items which should be discarded."}
{"name": "120_C. Winnie-the-Pooh and honey", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100). The second line contains n integers a1, a2, ..., an, separated by spaces (1 ≤ ai ≤ 100)."}
{"name": "1271_C. Shawarma Tent", "description": "Input\n\nThe first line contains three integers n, s_x, s_y (1 ≤ n ≤ 200 000, 0 ≤ s_x, s_y ≤ 10^{9}) — the number of students and the coordinates of the school, respectively.\n\nThen n lines follow. The i-th of them contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 10^{9}) — the location of the house where the i-th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated."}
{"name": "1315_D. Recommendations", "description": "Input\n\nThe first line of input consists of single integer n — the number of news categories (1 ≤ n ≤ 200 000).\n\nThe second line of input consists of n integers a_i — the number of publications of i-th category selected by the batch algorithm (1 ≤ a_i ≤ 10^9).\n\nThe third line of input consists of n integers t_i — time it takes for targeted algorithm to find one new publication of category i (1 ≤ t_i ≤ 10^5)."}
{"name": "1359_D. Yet Another Yet Another Task", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of cards.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-30 ≤ a_i ≤ 30) — the values on the cards."}
{"name": "1493_C. K-beautiful Strings", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 10 000) — the number of test cases.\n\nThe next 2 ⋅ T lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of the description contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of string s and number k respectively.\n\nThe second line contains string s consisting of lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1543_B. Customising the Track", "description": "Input\n\nThe first line of input contains a single integer t (1≤ t≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 2⋅ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0≤ a_i≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5."}
{"name": "381_A. Sereja and Dima", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1000) — the number of cards on the table. The second line contains space-separated numbers on the cards from left to right. The numbers on the cards are distinct integers from 1 to 1000."}
{"name": "521_C. Pluses everywhere", "description": "Input\n\nThe first line contains two integers, n and k (0 ≤ k < n ≤ 105).\n\nThe second line contains a string consisting of n digits."}
{"name": "733_C. Epidemic in Monstropolis", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 500) — the number of monsters in the initial queue.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the initial weights of the monsters.\n\nThe third line contains single integer k (1 ≤ k ≤ n) — the number of monsters in the queue after the joke. \n\nThe fourth line contains k integers b1, b2, ..., bk (1 ≤ bj ≤ 5·108) — the weights of the monsters after the joke. \n\nMonsters are listed in the order from the beginning of the queue to the end."}
{"name": "779_A. Pupils Redistribution", "description": "Input\n\nThe first line of the input contains integer number n (1 ≤ n ≤ 100) — number of students in both groups.\n\nThe second line contains sequence of integer numbers a1, a2, ..., an (1 ≤ ai ≤ 5), where ai is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b1, b2, ..., bn (1 ≤ bi ≤ 5), where bi is academic performance of the i-th student of the group B."}
{"name": "870_A. Search for Pretty Integers", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 9) — the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a1, a2, ..., an (1 ≤ ai ≤ 9) — the elements of the first list.\n\nThe third line contains m distinct digits b1, b2, ..., bm (1 ≤ bi ≤ 9) — the elements of the second list."}
{"name": "896_E. Welcome home, Chtholly", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105).\n\nThe second line contains n integers, i-th of them is ai (1 ≤ ai ≤ 105).\n\nThe next m lines are the m operations described above. It is guaranteed that 1 ≤ l ≤ r ≤ n and 1 ≤ x ≤ 105."}
{"name": "918_A. Eleven", "description": "Input\n\nThe first and only line of input contains an integer n (1 ≤ n ≤ 1000)."}
{"name": "940_A. Points on the line", "description": "Input\n\nThe first line contains two integers n and d (1 ≤ n ≤ 100, 0 ≤ d ≤ 100) — the amount of points and the maximum allowed diameter respectively.\n\nThe second line contains n space separated integers (1 ≤ xi ≤ 100) — the coordinates of the points."}
{"name": "967_D. Resource Distribution", "description": "Input\n\nThe first line contains three integers n, x_1, x_2 (2 ≤ n ≤ 300 000, 1 ≤ x_1, x_2 ≤ 10^9) — the number of servers that the department may use, and resource units requirements for each of the services.\n\nThe second line contains n space-separated integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 10^9) — the number of resource units provided by each of the servers."}
{"name": "993_D. Compute Power", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the number of tasks.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 108), where ai represents the amount of power required for the i-th task.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100), where bi is the number of processors that i-th task will utilize."}
{"name": "1031_B. Curiosity Has No Limits", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the length of the sequence t_i. \n\nThe second line contains n - 1 integers a_1, a_2, …, a_{n-1} (0 ≤ a_i ≤ 3) — the first sequence on the blackboard.\n\nThe third line contains n - 1 integers b_1, b_2, …, b_{n-1} (0 ≤ b_i ≤ 3) — the second sequence on the blackboard."}
{"name": "1054_B. Appending Mex", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of steps Ildar made.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the array Ildar obtained."}
{"name": "1118_C. Palindromic Matrix", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 20).\n\nThe second line contains n^2 integers a_1, a_2, ..., a_{n^2} (1 ≤ a_i ≤ 1000) — the numbers to put into a matrix of n rows and n columns."}
{"name": "1165_E. Two Arrays and Sum of Functions", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a and b.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 ≤ b_j ≤ 10^6), where b_j is the j-th element of b."}
{"name": "1203_A. Circle of Students", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 200) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 200) — the number of students.\n\nThe second line of the query contains a permutation of indices p_1, p_2, ..., p_n (1 ≤ p_i ≤ n), where p_i is the index of the i-th student (in clockwise order). It is guaranteed that all p_i are distinct integers from 1 to n (i. e. they form a permutation)."}
{"name": "1244_G. Running in Pairs", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ n^2) — the number of runners on each track and the maximum possible duration of the competition, respectively."}
{"name": "1286_A. Garland", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.\n\nThe second line contains n integers p_1,\\ p_2,\\ …,\\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed."}
{"name": "1349_D. Slime and Biscuits", "description": "Input\n\nThe first line contains one integer n\\ (2≤ n≤ 100 000): the number of people playing the game.\n\nThe second line contains n non-negative integers a_1,a_2,...,a_n\\ (1≤ a_1+a_2+...+a_n≤ 300 000), where a_i represents the number of biscuits the i-th person own at the beginning."}
{"name": "1392_B. Omkar and Infinity Clock", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 10^{18}) – the length of your array and the number of operations to perform.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (-10^9 ≤ a_{i} ≤ 10^9) – the initial contents of your array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1416_D. Graph and Queries", "description": "Input\n\nThe first line contains three integers n, m and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ m ≤ 3 ⋅ 10^5; 1 ≤ q ≤ 5 ⋅ 10^5).\n\nThe second line contains n distinct integers p_1, p_2, ..., p_n, where p_i is the number initially written on vertex i (1 ≤ p_i ≤ n).\n\nThen m lines follow, the i-th of them contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) and means that the i-th edge connects vertices a_i and b_i. It is guaranteed that the graph does not contain multi-edges.\n\nThen q lines follow, which describe the queries. Each line is given by one of the following formats:\n\n  * 1 v — denotes a query of the first type with a vertex v (1 ≤ v ≤ n). \n  * 2 i — denotes a query of the second type with an edge i (1 ≤ i ≤ m). For each query of the second type, it is guaranteed that the corresponding edge is not deleted from the graph yet."}
{"name": "1433_C. Dominant Piranha", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of piranhas in the aquarium. The second line of the test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), where a_i is the size of the i-th piranha.\n\nIt is guaranteed that the sum of n does not exceed 3 ⋅ 10^5 (∑ n ≤ 3 ⋅ 10^5)."}
{"name": "1481_B. New Colony", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nEach test case consists of two lines. The first line in each test case contains two integers n and k (1 ≤ n ≤ 100; 1 ≤ k ≤ 10^9) — the number of mountains and the number of boulders.\n\nThe second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 100) — the height of the mountains.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100."}
{"name": "204_D. Little Elephant and Retro Strings", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 106). The second line contains string s. String s has length n and only consists of characters \"W\", \"B\" and \"X\"."}
{"name": "253_A. Boys and Girls", "description": "Input\n\nThe single line of the input contains two integers n and m (1 ≤ n, m ≤ 100), separated by a space."}
{"name": "300_A. Array", "description": "Input\n\nThe first line of the input contains integer n (3 ≤ n ≤ 100). The second line contains n space-separated distinct integers a1, a2, ..., an (|ai| ≤ 103) — the array elements."}
{"name": "416_D. Population Size", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 2·105) — the number of elements in the sequence. The second line contains integer values a1, a2, ..., an separated by a space (1 ≤ ai ≤ 109 or ai = - 1)."}
{"name": "443_B. Kolya and Tandem Repeat", "description": "Input\n\nThe first line contains s (1 ≤ |s| ≤ 200). This string contains only small English letters. The second line contains number k (1 ≤ k ≤ 200) — the number of the added characters."}
{"name": "465_C. No to Palindromes!", "description": "Input\n\nThe first line contains two space-separated integers: n and p (1 ≤ n ≤ 1000; 1 ≤ p ≤ 26). The second line contains string s, consisting of n small English letters. It is guaranteed that the string is tolerable (according to the above definition)."}
{"name": "489_B. BerSU Ball", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of boys. The second line contains sequence a1, a2, ..., an (1 ≤ ai ≤ 100), where ai is the i-th boy's dancing skill.\n\nSimilarly, the third line contains an integer m (1 ≤ m ≤ 100) — the number of girls. The fourth line contains sequence b1, b2, ..., bm (1 ≤ bj ≤ 100), where bj is the j-th girl's dancing skill."}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 106)."}
{"name": "658_B. Bear and Displayed Friends", "description": "Input\n\nThe first line contains three integers n, k and q (1 ≤ n, q ≤ 150 000, 1 ≤ k ≤ min(6, n)) — the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 ≤ typei ≤ 2, 1 ≤ idi ≤ n) — the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty."}
{"name": "794_C. Naming Company", "description": "Input\n\nThe first line of input contains a string s of length n (1 ≤ n ≤ 3·105). All characters of the string are lowercase English letters. This string denotes the set of letters Oleg has initially.\n\nThe second line of input contains a string t of length n. All characters of the string are lowercase English letters. This string denotes the set of letters Igor has initially."}
{"name": "840_B. Leha and another game about graph", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 3·105, n - 1 ≤ m ≤ 3·105) — number of vertices and edges.\n\nThe second line contains n integers d1, d2, ..., dn ( - 1 ≤ di ≤ 1) — numbers on the vertices.\n\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — edges. It's guaranteed, that graph in the input is connected."}
{"name": "985_E. Pencils and Boxes", "description": "Input\n\nThe first line contains three integer numbers n, k and d (1 ≤ k ≤ n ≤ 5·105, 0 ≤ d ≤ 109) — the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 109) — saturation of color of each pencil."}
{"name": "1025_D. Recovering BST", "description": "Input\n\nThe first line contains the number of vertices n (2 ≤ n ≤ 700).\n\nThe second line features n distinct integers a_i (2 ≤ a_i ≤ 10^9) — the values of vertices in ascending order."}
{"name": "1090_J. Two Prefixes", "description": "Input\n\nThe first line contains the string s consisting of lowercase English letters. The second line contains the string t consisting of lowercase English letters.\n\nThe lengths of both string do not exceed 105."}
{"name": "1139_E. Maximize Mex", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 5000), the number of students and the number of clubs in college.\n\nThe second line contains n integers p_1, p_2, …, p_n (0 ≤ p_i < 5000), where p_i is the potential of the i-th student.\n\nThe third line contains n integers c_1, c_2, …, c_n (1 ≤ c_i ≤ m), which means that i-th student is initially a member of the club with index c_i.\n\nThe fourth line contains an integer d (1 ≤ d ≤ n), number of days for which the director wants to know the maximum possible strength of the team. \n\nEach of the next d lines contains an integer k_i (1 ≤ k_i ≤ n), which means that k_i-th student lefts their club on the i-th day. It is guaranteed, that the k_i-th student has not left their club earlier."}
{"name": "1157_E. Minimum Array", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a, b and c.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i < n), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (0 ≤ b_i < n), where b_i is the i-th element of b."}
{"name": "1198_C. Matching vs Independent Set", "description": "Input\n\nThe first line contains a single integer T ≥ 1 — the number of graphs you need to process. The description of T graphs follows.\n\nThe first line of description of a single graph contains two integers n and m, where 3 ⋅ n is the number of vertices, and m is the number of edges in the graph (1 ≤ n ≤ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}).\n\nEach of the next m lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ 3 ⋅ n), meaning that there is an edge between vertices v_i and u_i.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^{5}, and the sum of all m over all graphs in a single test does not exceed 5 ⋅ 10^{5}."}
{"name": "1215_B. The Number of Products", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^{5}) — the number of elements in the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^{9} ≤ a_i ≤ 10^{9}; a_i ≠ 0) — the elements of the sequence."}
{"name": "1238_D. AB-string", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the length of the string s.\n\nThe second line contains the string s, consisting of letters A and B."}
{"name": "1256_E. Yet Another Division Into Teams", "description": "Input\n\nThe first line of the input contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of students.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the programming skill of the i-th student."}
{"name": "12_D. Ball", "description": "Input\n\nThe first line contains one integer N (1 ≤ N ≤ 500000). The second line contains N integer numbers Bi, separated by single spaces. The third and the fourth lines contain sequences Ii and Ri in the same format. It is guaranteed that 0 ≤ Bi, Ii, Ri ≤ 109."}
{"name": "1364_E. X-OR", "description": "Input\n\nThe only line contains the integer n (3 ≤ n ≤ 2048) — the length of the permutation.\n\nInteraction\n\nTo ask a question, print \"? i j\" (without quotes, i ≠ j) Then, you should read the answer, which will be (p_i|p_j).\n\nIf we answer with -1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query.\n\nExit immediately after receiving -1 and you will see wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nTo print the answer, print \"! p_1 p_2 … p_n\" (without quotes). Note that answering doesn't count as one of the 4269 queries.\n\nAfter printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * See the documentation for other languages.\n\n\n\nHacks:\n\nThe first line should contain the integer n (3 ≤ n ≤ 2^{11}) — the length of the permutation p.\n\nThe second line should contain n space-separated integers p_1, p_2, …, p_n (0 ≤ p_i < n) — the elements of the permutation p.\n\nExample\n\nInput\n\n\n3\n1\n3\n2"}
{"name": "1406_C. Link Cut Centroids", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (3≤ n≤ 10^5) — the number of vertices.\n\nEach of the next n-1 lines contains two integers x, y (1≤ x,y≤ n). It means, that there exists an edge connecting vertices x and y.\n\nIt's guaranteed that the given graph is a tree.\n\nIt's guaranteed that the sum of n for all test cases does not exceed 10^5."}
{"name": "1427_D. Unshuffling a Deck", "description": "Input\n\nThe first line of the input contains one integer n (1≤ n≤ 52) — the number of cards in the deck.\n\nThe second line contains n integers c_1, c_2, ..., c_n — the cards in the deck. The first card is c_1, the second is c_2 and so on.\n\nIt is guaranteed that for all i=1,...,n there is exactly one j∈\\{1,...,n\\} such that c_j = i."}
{"name": "1450_D. Rating Compression", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 10^4) — the number of test cases.\n\nThe first line of the description of each test case contains a single integer n (1≤ n≤ 3⋅ 10^5) — the length of the array.\n\nThe second line of the description of each test case contains n integers a_1,…,a_n (1≤ a_i≤ n) — the elements of the array.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 3⋅ 10^5."}
{"name": "245_F. Log Stream Analysis", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 10000).\n\nThe second and the remaining lines of the input represent the log stream. The second line of the input contains the first record of the log stream, the third line contains the second record and so on. Each record of the log stream has the above described format. All records are given in the chronological order, that is, the warning records are given in the order, in which the warnings appeared in the program. \n\nIt is guaranteed that the log has at least one record. It is guaranteed that the total length of all lines of the log stream doesn't exceed 5·106 (in particular, this means that the length of some line does not exceed 5·106 characters). It is guaranteed that all given dates and times are correct, and the string 'MESSAGE\" in all records is non-empty."}
{"name": "580_D. Kefa and Dishes", "description": "Input\n\nThe first line of the input contains three space-separated numbers, n, m and k (1 ≤ m ≤ n ≤ 18, 0 ≤ k ≤ n * (n - 1)) — the number of dishes on the menu, the number of portions Kefa needs to eat to get full and the number of eating rules.\n\nThe second line contains n space-separated numbers ai, (0 ≤ ai ≤ 109) — the satisfaction he gets from the i-th dish.\n\nNext k lines contain the rules. The i-th rule is described by the three numbers xi, yi and ci (1 ≤ xi, yi ≤ n, 0 ≤ ci ≤ 109). That means that if you eat dish xi right before dish yi, then the Kefa's satisfaction increases by ci. It is guaranteed that there are no such pairs of indexes i and j (1 ≤ i < j ≤ k), that xi = xj and yi = yj."}
{"name": "673_C. Bear and Colors", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 5000) — the number of balls.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ n) where ti is the color of the i-th ball."}
{"name": "740_B. Alyona and flowers", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of flowers and the number of subarrays suggested by the mother.\n\nThe second line contains the flowers moods — n integers a1, a2, ..., an ( - 100 ≤ ai ≤ 100).\n\nThe next m lines contain the description of the subarrays suggested by the mother. The i-th of these lines contain two integers li and ri (1 ≤ li ≤ ri ≤ n) denoting the subarray a[li], a[li + 1], ..., a[ri].\n\nEach subarray can encounter more than once."}
{"name": "787_C. Berzerk", "description": "Input\n\nThe first line of input contains a single integer n (2 ≤ n ≤ 7000) — number of objects in game.\n\nThe second line contains integer k1 followed by k1 distinct integers s1, 1, s1, 2, ..., s1, k1 — Rick's set.\n\nThe third line contains integer k2 followed by k2 distinct integers s2, 1, s2, 2, ..., s2, k2 — Morty's set\n\n1 ≤ ki ≤ n - 1 and 1 ≤ si, 1, si, 2, ..., si, ki ≤ n - 1 for 1 ≤ i ≤ 2."}
{"name": "808_G. Anthem of Berland", "description": "Input\n\nThe first line contains string of small Latin letters and question marks s (1 ≤ |s| ≤ 105).\n\nThe second line contains string of small Latin letters t (1 ≤ |t| ≤ 105).\n\nProduct of lengths of strings |s|·|t| won't exceed 107."}
{"name": "924_C. Riverside Curio", "description": "Input\n\nThe first line contains a single positive integer n (1 ≤ n ≤ 105) — the number of days.\n\nThe second line contains n space-separated integers m1, m2, ..., mn (0 ≤ mi < i) — the number of marks strictly above the water on each day."}
{"name": "p00092 Square Searching", "description": "Input\n\nMultiple datasets are given in the above format. When n is 0, it is the last input. n is 1000 or less. The input data string does not contain any characters other than periods, asterisks, and line breaks. The number of datasets does not exceed 50."}
{"name": "p00224 Bicycle Diet", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by four 0 lines. Each dataset is given in the following format:\n\n\nm n k d\nc1 c2 ... cm\ns1 t1 e1\ns2 t2 e2\n::\nsd td ed\n\n\nNumber of cake shops m (1 ≤ m ≤ 6), number of landmarks n (1 ≤ n ≤ 100), calories burned per unit distance k (1 ≤ k ≤ 5), distance data on the first line The total number d (5 ≤ d ≤ 256) is given.\n\nThe second line gives the calories ci (1 ≤ ci ≤ 100) of the cake you buy at each cake shop.\n\nThe following d line is given the distance data si, ti, ei (1 ≤ ei ≤ 20) between the i-th two points.\n\nThe number of datasets does not exceed 100."}
{"name": "p02033 Arrow", "description": "Input\n\n5 1\n2\n1\n3"}
{"name": "1157_C2. Increasing Subsequence (hard version)", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1238_B. Kill 'Em All", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe first line of each query contains two integers n and r (1 ≤ n, r ≤ 10^5) — the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion.\n\nThe second line of each query contains n integers x_i (1 ≤ x_i ≤ 10^5) — the initial positions of the monsters.\n\nIt is guaranteed that sum of all n over all queries does not exceed 10^5."}
{"name": "1256_C. Platforms Jumping", "description": "Input\n\nThe first line of the input contains three integers n, m and d (1 ≤ n, m, d ≤ 1000, m ≤ n) — the width of the river, the number of platforms and the maximum distance of your jump, correspondingly.\n\nThe second line of the input contains m integers c_1, c_2, ..., c_m (1 ≤ c_i ≤ n, ∑_{i=1}^{m} c_i ≤ n), where c_i is the length of the i-th platform."}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 ≤ n ≤ 109) without leading zeroes. The second lines contains one integer m (0 ≤ m ≤ 109) — Bob's answer, possibly with leading zeroes."}
{"name": "1323_D. Present", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.\n\nThe second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7)."}
{"name": "1364_C. Ehab and Prefix MEXs", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ i) — the elements of the array a. It's guaranteed that a_i ≤ a_{i+1} for 1≤ i < n."}
{"name": "1384_D. GameGame", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains the integer n (1 ≤ n ≤ 10^5) — the length of a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — elements of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1406_A. Subset Mex", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1≤ n≤ 100) — the size of the set.\n\nThe second line of each testcase contains n integers a_1,a_2,... a_n (0≤ a_i≤ 100) — the numbers in the set."}
{"name": "1427_B. Chess Cheater", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1≤ t ≤ 20,000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers n, k (1≤ n≤ 100,000, 0≤ k≤ n) – the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string s of length n containing only the characters W and L. If you have won the i-th game then s_i= W, if you have lost the i-th game then s_i= L.\n\nIt is guaranteed that the sum of n over all testcases does not exceed 200,000."}
{"name": "1523_B. Lord of the Values", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 20). Description of the test cases follows.\n\nThe first line of each test case contains a single even integer n (2 ≤ n ≤ 10^3), which is the number of internal variables.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), which are initial values of internal variables."}
{"name": "177_C1. Party", "description": "Input\n\nThe first line of input contains an integer n — the number of the Beaver's acquaintances. \n\nThe second line contains an integer k <image> — the number of pairs of friends. Next k lines contain space-separated pairs of integers ui, vi <image> — indices of people who form the i-th pair of friends.\n\nThe next line contains an integer m <image> — the number of pairs of people who dislike each other. Next m lines describe pairs of people who dislike each other in the same format as the pairs of friends were described.\n\nEach pair of people is mentioned in the input at most once <image>. In particular, two persons cannot be friends and dislike each other at the same time.\n\nThe input limitations for getting 30 points are: \n\n  * 2 ≤ n ≤ 14\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 2 ≤ n ≤ 2000"}
{"name": "198_B. Jumping on Walls", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 105) — the height of the canyon and the height of ninja's jump, correspondingly.\n\nThe second line contains the description of the left wall — a string with the length of n characters. The i-th character represents the state of the i-th wall area: character \"X\" represents a dangerous area and character \"-\" represents a safe area.\n\nThe third line describes the right wall in the same format.\n\nIt is guaranteed that the first area of the left wall is not dangerous."}
{"name": "364_D. Ghd", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 106) showing how many numbers are in set a. The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1012). Please note, that given set can contain equal numbers.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the %I64d specifier."}
{"name": "409_A. The Great Game", "description": "Input\n\nThe input contains two strings of equal length (between 2 and 20 characters, inclusive). Each line describes the actions of one team."}
{"name": "480_B. Long Jumps", "description": "Input\n\nThe first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 105, 2 ≤ l ≤ 109, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (0 = a1 < a2 < ... < an = l), where ai shows the distance from the i-th mark to the origin."}
{"name": "602_A. Two Bases", "description": "Input\n\nThe first line of the input contains two space-separated integers n and bx (1 ≤ n ≤ 10, 2 ≤ bx ≤ 40), where n is the number of digits in the bx-based representation of X. \n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 ≤ xi < bx) — the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and by (1 ≤ m ≤ 10, 2 ≤ by ≤ 40, bx ≠ by), where m is the number of digits in the by-based representation of Y, and the fourth line contains m space-separated integers y1, y2, ..., ym (0 ≤ yi < by) — the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system."}
{"name": "673_A. Bear and Game", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 90) — the number of interesting minutes.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ t1 < t2 < ... tn ≤ 90), given in the increasing order."}
{"name": "698_B. Fix a Tree", "description": "Input\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n)."}
{"name": "719_B. Anatoly and Cockroaches", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of cockroaches.\n\nThe second line contains a string of length n, consisting of characters 'b' and 'r' that denote black cockroach and red cockroach respectively."}
{"name": "787_A. The Monster", "description": "Input\n\nThe first line of input contains two integers a and b (1 ≤ a, b ≤ 100). \n\nThe second line contains two integers c and d (1 ≤ c, d ≤ 100)."}
{"name": "878_B. Teams Formation", "description": "Input\n\nThe first line contains three integers n, k and m (1 ≤ n ≤ 105, 2 ≤ k ≤ 109, 1 ≤ m ≤ 109).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105), where ai is the number of city, person from which must take seat i in the bus."}
{"name": "952_C. Ravioli Sort", "description": "Input\n\nThe first line of input contains a single number n (1 ≤ n ≤ 10) — the size of the array.\n\nThe second line of input contains n space-separated integers ai (1 ≤ ai ≤ 100) — the elements of the array."}
{"name": "979_E. Kuro and Topological Parity", "description": "Input\n\nThe first line contains two integers n and p (1 ≤ n ≤ 50, 0 ≤ p ≤ 1) — the number of pieces and Kuro's wanted parity.\n\nThe second line contains n integers c_{1}, c_{2}, ..., c_{n} (-1 ≤ c_{i} ≤ 1) — the colors of the pieces."}
{"name": "999_F. Cards and Joy", "description": "Input\n\nThe first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.\n\nThe second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.\n\nThe third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.\n\nThe fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k]."}
{"name": "p00736 How can I satisfy thee? Let me count the ways...", "description": "Input\n\nThe input consists of one or more lines. Each line contains a formula. A formula is a string which consists of 0, 1, 2, P, Q, R, -, *, +, (, ). Other characters such as spaces are not contained. The grammar of formulas is given by the following BNF.\n\n\n<formula> ::= 0 | 1 | 2 | P | Q | R |\n-<formula> | (<formula>*<formula>) | (<formula>+<formula>)\n\n\nAll the formulas obey this syntax and thus you do not have to care about grammatical errors. Input lines never exceed 80 characters.\n\nFinally, a line which contains only a \".\" (period) comes, indicating the end of the input."}
{"name": "p00876 Swimming Jam", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nn\nt1 c1\n...\ntn cn\n\n\nn is an integer (1 ≤ n ≤ 50) that represents the number of swimmers. ti and ci are integers (1 ≤ ti ≤ 300, 1 ≤ ci ≤ 250) that represent the natural pace in times to swim from one end to the other and the number of planned laps for the i-th swimmer, respectively. ti and ci are separated by a space.\n\nThe end of the input is indicated by a line containing one zero."}
{"name": "1070_D. Garbage Disposal", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 2⋅10^5, 1 ≤ k ≤ 10^9) — number of days to consider and bag's capacity. The second line contains n space separated integers a_i (0 ≤ a_i ≤ 10^9) — the number of units of garbage produced on the i-th day."}
{"name": "1281_C. Cut and Paste", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 1000) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nThe first line of each test case contains a single integer x (1 ≤ x ≤ 10^6). The second line of each test case consists of the initial string s (1 ≤ |s| ≤ 500). It is guaranteed, that s consists of the characters \"1\", \"2\", \"3\".\n\nIt is guaranteed that the sum of x in a single file is at most 10^6. It is guaranteed that in each test case before the procedure will stop it will be true that ℓ ≤ |s| at any time."}
{"name": "1408_B. Arrays Sum", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100): the number of test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ n).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_1 ≤ a_2 ≤ … ≤ a_n ≤ 100, a_n > 0)."}
{"name": "1475_E. Advertising Agency", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of bloggers and how many of them you can sign a contract with.\n\nThe second line of each test case contains n integers a_1, a_2, … a_n (1 ≤ a_i ≤ n) — the number of followers of each blogger.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000."}
{"name": "157_B. Trace", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 100). The second line contains n space-separated integers ri (1 ≤ ri ≤ 1000) — the circles' radii. It is guaranteed that all circles are different."}
{"name": "19_C. Deletion of Repeats", "description": "Input\n\nThe first input line contains integer n (1 ≤ n ≤ 105) — length of the string. The following line contains n space-separated integer numbers from 0 to 109 inclusive — numbers that stand for the letters of the string. It's guaranteed that each letter can be met in the string at most 10 times."}
{"name": "272_C. Dima and Staircase", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of stairs in the staircase. The second line contains a non-decreasing sequence, consisting of n integers, a1, a2, ..., an (1 ≤ ai ≤ 109; ai ≤ ai + 1).\n\nThe next line contains integer m (1 ≤ m ≤ 105) — the number of boxes. Each of the following m lines contains a pair of integers wi, hi (1 ≤ wi ≤ n; 1 ≤ hi ≤ 109) — the size of the i-th thrown box.\n\nThe numbers in the lines are separated by spaces."}
{"name": "319_C. Kalila and Dimna in the Logging Industry", "description": "Input\n\nThe first line of input contains an integer n (1 ≤ n ≤ 105). The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The third line of input contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 109).\n\nIt's guaranteed that a1 = 1, bn = 0, a1 < a2 < ... < an and b1 > b2 > ... > bn."}
{"name": "343_C. Read Time", "description": "Input\n\nThe first line of the input contains two space-separated integers n, m (1 ≤ n, m ≤ 105) — the number of disk heads and the number of tracks to read, accordingly. The second line contains n distinct integers hi in ascending order (1 ≤ hi ≤ 1010, hi < hi + 1) — the initial positions of the heads. The third line contains m distinct integers pi in ascending order (1 ≤ pi ≤ 1010, pi < pi + 1) - the numbers of tracks to read.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is recommended to use the cin, cout streams or the %I64d specifier."}
{"name": "438_B. The Child and Zoo", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 105; 0 ≤ m ≤ 105). The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 105). Then follow m lines, each line contains two integers xi and yi (1 ≤ xi, yi ≤ n; xi ≠ yi), denoting the road between areas xi and yi.\n\nAll roads are bidirectional, each pair of areas is connected by at most one road."}
{"name": "507_C. Guess Your Way Out!", "description": "Input\n\nInput consists of two integers h, n (1 ≤ h ≤ 50, 1 ≤ n ≤ 2h)."}
{"name": "556_D. Case of Fugitive", "description": "Input\n\nThe first line contains integers n (2 ≤ n ≤ 2·105) and m (1 ≤ m ≤ 2·105) — the number of islands and bridges.\n\nNext n lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ 1018) — the coordinates of the island endpoints.\n\nThe last line contains m integer numbers a1, a2, ..., am (1 ≤ ai ≤ 1018) — the lengths of the bridges that Andrewid got."}
{"name": "582_B. Once Again...", "description": "Input\n\nThe first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300)."}
{"name": "626_E. Simple Skewness", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of elements in the list.\n\nThe second line contains n integers xi (0 ≤ xi ≤ 1 000 000) — the ith element of the list."}
{"name": "676_A. Nicholas and Permutation", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100) — the size of the permutation.\n\nThe second line of the input contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai is equal to the element at the i-th position."}
{"name": "789_B. Masha and geometric depression", "description": "Input\n\nThe first line of input contains four integers b1, q, l, m (-109 ≤ b1, q ≤ 109, 1 ≤ l ≤ 109, 1 ≤ m ≤ 105) — the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a1, a2, ..., am (-109 ≤ ai ≤ 109) — numbers that will never be written on the board."}
{"name": "835_B. The number on the board", "description": "Input\n\nThe first line contains integer k (1 ≤ k ≤ 109).\n\nThe second line contains integer n (1 ≤ n < 10100000).\n\nThere are no leading zeros in n. It's guaranteed that this situation is possible."}
{"name": "954_G. Castle Defense", "description": "Input\n\nThe first line of the input contains three integers n, r and k (1 ≤ n ≤ 500 000, 0 ≤ r ≤ n, 0 ≤ k ≤ 1018) — the number of sections of the wall, the maximum distance to other section archers can still shoot and the number of archers yet to be distributed along the wall. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the current number of archers at each section."}
{"name": "p00234 Aizu Buried Treasure", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two zero lines. Each dataset is given in the following format.\n\n\nW H\nf m o\nc1,1 c2,1 ... cW,1\nc1,2 c2,2 ... cW,2\n...\nc1, H c2, H ... cW, H\n\n\nThe horizontal size W of the formation and the vertical size H (3 ≤ W, H ≤ 10) are given in the first line. The second line is the integer f (1 ≤ f ≤ 10000) that represents your excavation cost, the integer m (3 ≤ m ≤ 50) that represents the capacity of the oxygen cylinder, and the integer o that represents the amount of oxygen you have in the initial state. o ≤ m) is given.\n\nThe following H line is given the geological information ci, j. ci, j represents the cell information for coordinates (i, j) and is given in the following format:\nIf the value is negative, the cell is full of soil and the value represents the cost.\nIf the value is positive, it is a cell filled with oxygen, and the value represents the amount of oxygen.\nHowever, there are no more than 50 cells in which oxygen has accumulated.\n\nThe number of datasets does not exceed 50."}
{"name": "p00749 Off Balance", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset, which represents a front view of a building, is formatted as follows.\n\n> w h\n>  p0(h-1)p1(h-1)...p(w-1)(h-1)\n>  ...\n>  p01p11...p(w-1)1\n>  p00p10...p(w-1)0\n>\n\nThe integers w and h separated by a space are the numbers of columns and rows of the layout, respectively. You may assume 1 ≤ w ≤ 10 and 1 ≤ h ≤ 60. The next h lines specify the placement of the pieces. The character pxy indicates the status of a block at (x,y), either ``.`', meaning empty, or one digit character between ``1`' and ``9`', inclusive, meaning a block of a piece. (As mentioned earlier, we denote a location of a block by xy-coordinates of its left-bottom corner.)\n\nWhen two blocks with the same number touch each other by any of their top, bottom, left or right face, those blocks are of the same piece. (Note that there might be two different pieces that are denoted by the same number.) The bottom of a block at (x,0) touches the ground.\n\nYou may assume that the pieces in each dataset are stacked in a tree-like form."}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 10^9) — the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i means the number of names you will write in the notebook during the i-th day."}
{"name": "103_A. Testing Pants for Sadness", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100). It is the number of questions in the test. The second line contains space-separated n positive integers ai (1 ≤ ai ≤ 109), the number of answer variants to question i."}
{"name": "1084_A. The Fair Nut and Elevator", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of floors.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 100) — the number of people on each floor."}
{"name": "1131_C. Birthday", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of the children who came to the cowboy Vlad's birthday.\n\nThe second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) denoting heights of every child."}
{"name": "1151_E. Number of Components", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of vertices in the tree.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the values of the vertices."}
{"name": "120_A. Elevator", "description": "Input\n\nThe first line indicates the door through which the very important person entered the elevator. It contains \"front\" if the person enters the elevator through the front door and \"back\" if he entered the elevator through the back door. The second line contains integer a (1 ≤ a ≤ 2) which denotes the number of the rail at which the person was holding."}
{"name": "122_D. Lucky Transformation", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 109) — the number of digits in the number and the number of completed operations. The second line contains n digits without spaces representing the array of digits d, starting with d1. It is guaranteed that the first digit of the number does not equal zero."}
{"name": "1271_A. Suits", "description": "Input\n\nThe first line contains one integer a (1 ≤ a ≤ 100 000) — the number of ties.\n\nThe second line contains one integer b (1 ≤ b ≤ 100 000) — the number of scarves.\n\nThe third line contains one integer c (1 ≤ c ≤ 100 000) — the number of vests.\n\nThe fourth line contains one integer d (1 ≤ d ≤ 100 000) — the number of jackets.\n\nThe fifth line contains one integer e (1 ≤ e ≤ 1 000) — the cost of one suit of the first type.\n\nThe sixth line contains one integer f (1 ≤ f ≤ 1 000) — the cost of one suit of the second type."}
{"name": "1315_B. Homecoming", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4).\n\nThe first line of each test case consists of three integers a, b, p (1 ≤ a, b, p ≤ 10^5) — the cost of bus ticket, the cost of tram ticket and the amount of money Petya has.\n\nThe second line of each test case consists of one string s, where s_i = A, if there is a bus station at i-th crossroad, and s_i = B, if there is a tram station at i-th crossroad (2 ≤ |s| ≤ 10^5).\n\nIt is guaranteed, that the sum of the length of strings s by all test cases in one test doesn't exceed 10^5."}
{"name": "1336_E1. Chiori and Doll Picking (easy version)", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 35) — the number of dolls and the maximum value of the picking way.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i < 2^m) — the values of dolls."}
{"name": "1442_E. Black, White and Grey Tree", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 200 000): the number of vertices in the tree.\n\nThe second line of each test case contains n integers a_v (0 ≤ a_v ≤ 2): colours of vertices. Gray vertices have a_v=0, white have a_v=1, black have a_v=2.\n\nEach of the next n-1 lines contains two integers u, v (1 ≤ u, v ≤ n): tree edges.\n\nThe sum of all n throughout the test is guaranteed to not exceed 200 000."}
{"name": "1493_A. Anti-knapsack", "description": "Input\n\nThe first line contains the number of test cases T (1 ≤ T ≤ 100).\n\nEach of the next T lines contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the description of test cases."}
{"name": "190_D. Non-Secret Cypher", "description": "Input\n\nThe first line contains two space-separated integers n, k (1 ≤ k ≤ n ≤ 4·105), showing how many numbers an array has and how many equal numbers the subarrays are required to have, correspondingly. \n\nThe second line contains n space-separated integers ai (1 ≤ ai ≤ 109) — elements of the array."}
{"name": "238_D. Tape Programming", "description": "Input\n\nThe first line of input contains two integers n and q (1 ≤ n, q ≤ 105) — represents the length of the sequence s and the number of queries. \n\nThe second line contains s, a sequence of \"<\", \">\" and digits (0..9) written from left to right. Note, that the characters of s are not separated with spaces. \n\nThe next q lines each contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the i-th query."}
{"name": "263_B. Squares", "description": "Input\n\nThe first line contains two space-separated integers n, k (1 ≤ n, k ≤ 50). The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109).\n\nIt is guaranteed that all given squares are distinct."}
{"name": "380_D. Sereja and Cinema", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers, the i-th integer shows either the index of the person (index in the entering queue) with the ticket for the i-th seat or a 0, if his index is not known. It is guaranteed that all positive numbers in the second line are distinct.\n\nYou can assume that the index of the person who enters the cinema hall is a unique integer from 1 to n. The person who has index 1 comes first to the hall, the person who has index 2 comes second and so on."}
{"name": "451_B. Sort the Array", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 105) — the size of array a.\n\nThe second line contains n distinct space-separated integers: a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109)."}
{"name": "474_A. Keyboard", "description": "Input\n\nFirst line of the input contains one letter describing direction of shifting ('L' or 'R' respectively for left or right).\n\nSecond line contains a sequence of characters written by Mole. The size of this sequence will be no more than 100. Sequence contains only symbols that appear on Mole's keyboard. It doesn't contain spaces as there is no space on Mole's keyboard.\n\nIt is guaranteed that even though Mole hands are moved, he is still pressing buttons on keyboard and not hitting outside it."}
{"name": "521_A. DNA Alignment", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 105).\n\nThe second line of the input contains a single string of length n, consisting of characters \"ACGT\"."}
{"name": "617_E. XOR and Favorite Number", "description": "Input\n\nThe first line of the input contains integers n, m and k (1 ≤ n, m ≤ 100 000, 0 ≤ k ≤ 1 000 000) — the length of the array, the number of queries and Bob's favorite number respectively.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 1 000 000) — Bob's array.\n\nThen m lines follow. The i-th line contains integers li and ri (1 ≤ li ≤ ri ≤ n) — the parameters of the i-th query."}
{"name": "802_G. Fake News (easy)", "description": "Input\n\nThe first and only line of input contains a single nonempty string s of length at most 1000 composed of lowercase letters (a-z)."}
{"name": "825_C. Multi-judge Solving", "description": "Input\n\nThe first line contains two integer numbers n, k (1 ≤ n ≤ 103, 1 ≤ k ≤ 109).\n\nThe second line contains n space-separated integer numbers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "848_A. From Y to Y", "description": "Input\n\nThe first and only line of input contains a non-negative integer k (0 ≤ k ≤ 100 000) — the required minimum cost."}
{"name": "967_B. Watering System", "description": "Input\n\nThe first line contains three integers n, A, B (1 ≤ n ≤ 100 000, 1 ≤ B ≤ A ≤ 10^4) — the number of holes, the volume of water Arkady will pour into the system, and the volume he wants to get out of the first hole.\n\nThe second line contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ 10^4) — the sizes of the holes."}
{"name": "993_B. Open Communication", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.\n\nThe third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number."}
{"name": "p00182 Beaker", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\nc1 c2 ... cn\n\n\nThe number of beakers n (1 ≤ n ≤ 50) is given on the first line. The second line is given the integer ci (1 ≤ ci ≤ 100), which represents the capacity of the i-th beaker.\n\nThe number of datasets does not exceed 105."}
{"name": "p01101 Taro's Shopping", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n\nn m\na1 a2 ... an\n\n\nA dataset consists of two lines. In the first line, the number of items n and the maximum payment allowed m are given. n is an integer satisfying 2 ≤ n ≤ 1000. m is an integer satisfying 2 ≤ m ≤ 2,000,000. In the second line, prices of n items are given. ai (1 ≤ i ≤ n) is the price of the i-th item. This value is an integer greater than or equal to 1 and less than or equal to 1,000,000.\n\nThe end of the input is indicated by a line containing two zeros. The sum of n's of all the datasets does not exceed 50,000."}
{"name": "p01400 Seishun 18 Kippu", "description": "Input\n\nA sequence of multiple datasets is given as input. The number of datasets is guaranteed to be 50 or less. Each dataset has the following format:\n\n\nn m\ns p g\na1 b1 d1 t1\n...\nai bi di ti\n...\nam bm dm tm\n\n\nThe integers n (3 ≤ n ≤ 500) and m (2 ≤ m ≤ 5000) represent the total number of stations and the number of tracks between each station, respectively. s, p, and g are character strings that indicate the location of the station where sirokurostone rides, the station where a person who likes 2D rides, and the station where Atsu University is located, respectively. s, p, and g are different character strings.\n\nThe following m line represents the information between stations. ai and bi are character strings indicating stations connected by railroad tracks. ai and bi can go back and forth in both directions. ai and bi never match. The integer di (40 ≤ di ≤ 10000) represents the distance between ai and bi. di is guaranteed to be a multiple of 40. The integer ti (0 ≤ ti ≤ 20) indicates the estimated delay time between ai and bi.\n\nThe character string representing the station name is represented by a character string of 20 characters or less consisting of all lowercase and uppercase letters of the alphabet. There is at most one track between stations.\n\nThe end of the input is represented by a line containing two zeros."}
{"name": "1027_A. Palindromic Twist", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 50) — the number of strings in a testcase.\n\nThen 2T lines follow — lines (2i - 1) and 2i of them describe the i-th string. The first line of the pair contains a single integer n (2 ≤ n ≤ 100, n is even) — the length of the corresponding string. The second line of the pair contains a string s, consisting of n lowercase Latin letters."}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2≤ b≤ 100, 1≤ k≤ 10^5) — the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, …, a_k (0≤ a_i < b) — the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1."}
{"name": "1199_A. City Day", "description": "Input\n\nThe first line contains three integers n, x and y (1 ≤ n ≤ 100 000, 0 ≤ x, y ≤ 7) — the number of days in summer, the number of days citizens watch the weather before the celebration and the number of days they do that after.\n\nThe second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i denotes the rain amount on the i-th day."}
{"name": "1215_F. Radio Stations", "description": "Input\n\nThe first line contains 4 integers n, p, M and m (2 ≤ n, p, M, m ≤ 4 ⋅ 10^5) — the number of complaints, the number of radio stations, maximum signal power and the number of interfering pairs, respectively.\n\nThen n lines follow, which describe the complains. Each line contains two integers x_i and y_i (1 ≤ x_i < y_i ≤ p) — the indices of the radio stations mentioned in the i-th complaint). All complaints are distinct.\n\nThen p lines follow, which describe the radio stations. Each line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ M) — the constrains on signal power that should be satisfied if the city establishes a contract with the i-th station.\n\nThen m lines follow, which describe the pairs of interfering radio stations. Each line contains two integers u_i and v_i (1 ≤ u_i < v_i ≤ p) — the indices of interfering radio stations. All these pairs are distinct."}
{"name": "1257_C. Dominated Subarray", "description": "Input\n\nThe first line contains single integer T (1 ≤ T ≤ 1000) — the number of test cases. Each test case consists of two lines.\n\nThe first line contains single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the corresponding values of the array a.\n\nIt's guaranteed that the total length of all arrays in one test doesn't exceed 2 ⋅ 10^5."}
{"name": "1300_C. Anu Has a Function", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9). Elements of the array are not guaranteed to be different."}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), where b_i is the interestingness of the i-th topic for the students."}
{"name": "1343_C. Alternating Subsequence", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a. The second line of the test case contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9, a_i ≠ 0), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1385_D. a-Good String", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 131~072) — the length of s. It is guaranteed that n = 2^k for some integer k ≥ 0. The second line of the test case contains the string s consisting of n lowercase Latin letters.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1407_B. Big Vova", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^3) — the length of the sequence a.\n\nThe second line of each test case contains n integers a_1,...,a_n (1 ≤ a_i ≤ 10^3) — the sequence a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^3."}
{"name": "1474_F. 1 2 3 4 ...", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the length of the sequence d.\n\nThe second line contains a single integer x (-10^9 ≤ x ≤ 10^9) — the integer on the blackboard.\n\nThe third line contains n integers d_1, d_2, …, d_n (-10^9 ≤ d_i ≤ 10^9)."}
{"name": "177_F1. Script Generation", "description": "Input\n\nThe first input line contains integers n, k and t (1 ≤ k ≤ min(100, n2), 1 ≤ t ≤ 2·105), separated by single spaces. Next k lines contain triples of integers (h, w, r) (1 ≤ h, w ≤ n; 1 ≤ r ≤ 1000), separated by single spaces, which describe the possible marriages. It is guaranteed that the input data is correct: t doesn't exceed the total number of acceptable sets, and each pair (h, w) is present in at most one triple.\n\nThe input limitations for getting 30 points are: \n\n  * 1 ≤ n ≤ 5\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 ≤ n ≤ 20"}
{"name": "222_D. Olympiad", "description": "Input\n\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.\n\nThe second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.\n\nThe third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.\n\nThe participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x."}
{"name": "246_B. Increase and Decrease", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the array size. The second line contains space-separated integers a1, a2, ..., an (|ai| ≤ 104) — the original array."}
{"name": "581_C. Developing Skills", "description": "Input\n\nThe first line of the input contains two positive integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 107) — the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of n integers ai (0 ≤ ai ≤ 100), where ai characterizes the level of the i-th skill of the character."}
{"name": "625_E. Frog Fights", "description": "Input\n\nFirst line of the input contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 109, n ≤ m) — number of frogs and gameboard size, respectively.\n\nFollowing n lines contains frogs descriptions — two integers pi and ai (1 ≤ pi, ai ≤ m) — the number of cell occupied by i-th frog initially and initial jump length. All pi are guaranteed to be distinct."}
{"name": "699_B. One Bomb", "description": "Input\n\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the depot field. \n\nThe next n lines contain m symbols \".\" and \"*\" each — the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to \".\", then the corresponding cell is empty, otherwise it equals \"*\" and the corresponding cell is occupied by a wall."}
{"name": "71_D. Solitaire", "description": "Input\n\nThe first line contains integers n and m (3 ≤ n, m ≤ 17, n × m ≤ 52). Next n lines contain m words each. Each word consists of two letters. The jokers are defined as \"J1\" and \"J2\" correspondingly. For the rest of the cards, the first letter stands for the rank and the second one — for the suit. The possible ranks are: \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\" and \"A\". The possible suits are: \"C\", \"D\", \"H\" and \"S\". All the cards are different."}
{"name": "741_A. Arpa's loud Owf and Mehrdad's evil plan", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 100) — the number of people in Arpa's land.\n\nThe second line contains n integers, i-th of them is crushi (1 ≤ crushi ≤ n) — the number of i-th person's crush."}
{"name": "764_E. Timofey and remoduling", "description": "Input\n\nThe first line contains two integers m and n (2 ≤ m ≤ 109 + 7, 1 ≤ n ≤ 105, m is prime) — Timofey's favorite prime module and the length of the sequence.\n\nThe second line contains n distinct integers a1, a2, ..., an (0 ≤ ai < m) — the elements of the sequence."}
{"name": "834_B. The Festive Evening", "description": "Input\n\nTwo integers are given in the first string: the number of guests n and the number of guards k (1 ≤ n ≤ 106, 1 ≤ k ≤ 26).\n\nIn the second string, n uppercase English letters s1s2... sn are given, where si is the entrance used by the i-th guest."}
{"name": "925_A. Stairs and Elevators", "description": "Input\n\nThe first line contains five integers n, m, c_l, c_e, v (2 ≤ n, m ≤ 10^8, 0 ≤ c_l, c_e ≤ 10^5, 1 ≤ c_l + c_e ≤ m - 1, 1 ≤ v ≤ n - 1) — the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains c_l integers l_1, …, l_{c_l} in increasing order (1 ≤ l_i ≤ m), denoting the positions of the stairs. If c_l = 0, the second line is empty.\n\nThe third line contains c_e integers e_1, …, e_{c_e} in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers l_i and e_i are distinct.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines describe queries. Each of these lines contains four integers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i. e. y_1 and y_2 are not among l_i and e_i."}
{"name": "954_B. String Typing", "description": "Input\n\nThe first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters."}
{"name": "p00390 A Round Table for Sages", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$\n$a_1$ $a_2$ $...$ $a_N$\n$w_1$ $w_2$ $...$ $w_N$\n\n\nThe first line provides the number of sages $N$ ($3 \\leq N \\leq 10$). The second line provides an array of integers $a_i$ (0 or 1) which indicate if the $i$-th sage is right-handed (0) or left-handed (1). The third line provides an array of integers $w_i$ ($1 \\leq w_i \\leq 1000$) which indicate the level of frustration the $i$-th sage bears."}
{"name": "p00743 Discrete Speed", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n  m\n>  s  g\n>  x 1 y 1 d 1 c 1\n>  ...\n>  xm ym dm cm\n>\n\nEvery input item in a dataset is a non-negative integer. Input items in the same line are separated by a space.\n\nThe first line gives the size of the road network. n  is the number of cities in the network. You can assume that the number of cities is between 2 and 30, inclusive. m  is the number of roads between cities, which may be zero.\n\nThe second line gives the trip. s  is the city index of the starting city. g  is the city index of the goal city. s  is not equal to g . You can assume that all city indices in a dataset (including the above two) are between 1 and n , inclusive.\n\nThe following m  lines give the details of roads between cities. The i -th road connects two cities with city indices xi and yi , and has a distance di (1 ≤ i ≤ m ). You can assume that the distance is between 1 and 100, inclusive. The speed limit of the road is specified by ci . You can assume that the speed limit is between 1 and 30, inclusive.\n\nNo two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions.\n\nThe last dataset is followed by a line containing two zeros (separated by a space)."}
{"name": "p01900 Mod!Mod!", "description": "Input\n\n6\n2 5 2 5 2 1"}
{"name": "1003_C. Intense Heat", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 5000) — the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5000) — the temperature measures during given n days."}
{"name": "1027_D. Mouse Hunt", "description": "Input\n\nThe first line contains as single integers n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of rooms in the dormitory.\n\nThe second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^4) — c_i is the cost of setting the trap in room number i.\n\nThe third line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — a_i is the room the mouse will run to the next second after being in room i."}
{"name": "1046_C. Space Formula", "description": "Input\n\nThe first line contains two integer numbers N (1 ≤ N ≤ 200000) representing number of F1 astronauts, and current position of astronaut D (1 ≤ D ≤ N) you want to calculate best ranking for (no other competitor will have the same number of points before the race).\n\nThe second line contains N integer numbers S_k (0 ≤ S_k ≤ 10^8, k=1...N), separated by a single space, representing current ranking of astronauts. Points are sorted in non-increasing order.\n\nThe third line contains N integer numbers P_k (0 ≤ P_k ≤ 10^8, k=1...N), separated by a single space, representing point awards for the next race. Points are sorted in non-increasing order, so winner of the race gets the maximum number of points."}
{"name": "1091_F. New Year and the Mallard Expedition", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of segments of terrain. \n\nThe second line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 10^{12}). The l_i represents the length of the i-th terrain segment in meters.\n\nThe third line contains a string s consisting of n characters \"G\", \"W\", \"L\", representing Grass, Water and Lava, respectively. \n\nIt is guaranteed that the first segment is not Lava."}
{"name": "1110_D. Jongmah", "description": "Input\n\nThe first line contains two integers integer n and m (1 ≤ n, m ≤ 10^6) — the number of tiles in your hand and the number of tiles types.\n\nThe second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ m), where a_i denotes the number written on the i-th tile."}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 10^4) — the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i ≤ a_i ≤ n), where a_i is the number of page which contains the explanation of the mystery on page i."}
{"name": "1216_C. White Sheet", "description": "Input\n\nThe first line of the input contains four integers x_1, y_1, x_2, y_2 (0 ≤ x_1 < x_2 ≤ 10^{6}, 0 ≤ y_1 < y_2 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the white sheet.\n\nThe second line of the input contains four integers x_3, y_3, x_4, y_4 (0 ≤ x_3 < x_4 ≤ 10^{6}, 0 ≤ y_3 < y_4 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the first black sheet.\n\nThe third line of the input contains four integers x_5, y_5, x_6, y_6 (0 ≤ x_5 < x_6 ≤ 10^{6}, 0 ≤ y_5 < y_6 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the second black sheet.\n\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes."}
{"name": "1239_D. Catowice City", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100 000), the number of test cases. Then description of t test cases follow, where each description is as follows:\n\nThe first line contains integers n and m (1 ≤ n ≤ m ≤ 10^6), the number of Catowice residents and the number of friendship pairs between residents and cats.\n\nEach of the next m lines contains integers a_i and b_i (1 ≤ a_i, b_i ≤ n), denoting that a_i-th resident is acquaintances with b_i-th cat. It's guaranteed that each pair of some resident and some cat is listed at most once.\n\nIt's guaranteed, that for every i there exists a pair between i-th resident and i-th cat.\n\nDifferent test cases are separated with an empty line.\n\nIt's guaranteed, that the sum of n over all test cases is at most 10^6 and that the sum of m over all test cases is at most 10^6."}
{"name": "1257_F. Make Them Similar", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 100).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2^{30} - 1)."}
{"name": "1301_A. Three Strings", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a string of lowercase English letters a.\n\nThe second line of each test case contains a string of lowercase English letters b.\n\nThe third line of each test case contains a string of lowercase English letters c.\n\nIt is guaranteed that in each test case these three strings are non-empty and have the same length, which is not exceeding 100."}
{"name": "1385_G. Columns Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of columns in the table. The second line of the test case contains n integers a_{1, 1}, a_{1, 2}, ..., a_{1, n} (1 ≤ a_{1, i} ≤ n), where a_{1, i} is the i-th element of the first row of the table. The third line of the test case contains n integers a_{2, 1}, a_{2, 2}, ..., a_{2, n} (1 ≤ a_{2, i} ≤ n), where a_{2, i} is the i-th element of the second row of the table.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1407_E. Egor in the Republic of Dagestan", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 500000, 0 ≤ m ≤ 500000) — the number of cities and the number of roads.\n\nThe i-th of next m lines contains three integers — u_i, v_i and t_i (1 ≤ u_i, v_i ≤ n, t_i ∈ \\{0, 1\\}) — numbers of cities connected by road and its type, respectively (0 — night road, 1 — morning road)."}
{"name": "1451_C. String Equality", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The description of each test case is as follows.\n\nThe first line of each test case contains two integers n (2 ≤ n ≤ 10^6) and k (1 ≤ k ≤ n).\n\nThe second line of each test case contains the string a of length n consisting of lowercase English letters.\n\nThe third line of each test case contains the string b of length n consisting of lowercase English letters.\n\nIt is guaranteed that the sum of values n among all test cases does not exceed 10^6."}
{"name": "1475_C. Ball in Berland", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers a, b and k (1 ≤ a, b, k ≤ 2 ⋅ 10^5) — the number of boys and girls in the class and the number of couples ready to dance together.\n\nThe second line of each test case contains k integers a_1, a_2, … a_k. (1 ≤ a_i ≤ a), where a_i is the number of the boy in the pair with the number i.\n\nThe third line of each test case contains k integers b_1, b_2, … b_k. (1 ≤ b_i ≤ b), where b_i is the number of the girl in the pair with the number i.\n\nIt is guaranteed that the sums of a, b, and k over all test cases do not exceed 2 ⋅ 10^5.\n\nIt is guaranteed that each pair is specified at most once in one test case."}
{"name": "1500_A. Going Home", "description": "Input\n\nThe first line contains the single integer n (4 ≤ n ≤ 200 000) — the size of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2.5 ⋅ 10^6)."}
{"name": "1525_C. Robot Collisions", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n ≤ 3 ⋅ 10^5; 2 ≤ m ≤ 10^8) — the number of robots and the coordinate of the right wall.\n\nThe second line of each testcase contains n integers x_1, x_2, ..., x_n (0 < x_i < m) — the starting coordinates of the robots.\n\nThe third line of each testcase contains n space-separated characters 'L' or 'R' — the starting directions of the robots ('L' stands for left and 'R' stands for right).\n\nAll coordinates x_i in the testcase are distinct.\n\nThe sum of n over all testcases doesn't exceed 3 ⋅ 10^5."}
{"name": "19_A. World Football Cup", "description": "Input\n\nThe first input line contains the only integer n (1 ≤ n ≤ 50) — amount of the teams, taking part in the final tournament of World Cup. The following n lines contain the names of these teams, a name is a string of lower-case and upper-case Latin letters, its length doesn't exceed 30 characters. The following n·(n - 1) / 2 lines describe the held matches in the format name1-name2 num1:num2, where name1, name2 — names of the teams; num1, num2 (0 ≤ num1, num2 ≤ 100) — amount of the goals, scored by the corresponding teams. Accuracy of the descriptions is guaranteed: there are no two team names coinciding accurate to the letters' case; there is no match, where a team plays with itself; each match is met in the descriptions only once."}
{"name": "223_B. Two Strings", "description": "Input\n\nThe first line contains string s, the second line contains string t. Each line consists only of lowercase English letters. The given strings are non-empty, the length of each string does not exceed 2·105."}
{"name": "272_A. Dima and Friends", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show. \n\nThe numbers in the lines are separated by a single space."}
{"name": "295_C. Greg and Friends", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 50, 1 ≤ k ≤ 5000) — the number of people, including Greg, and the boat's weight limit. The next line contains n integers — the people's weights. A person's weight is either 50 kilos or 100 kilos.\n\nYou can consider Greg and his friends indexed in some way."}
{"name": "366_C. Dima and Salad", "description": "Input\n\nThe first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi."}
{"name": "507_A. Amr and Music", "description": "Input\n\nThe first line contains two numbers n, k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10 000), the number of instruments and number of days respectively.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 100), representing number of days required to learn the i-th instrument."}
{"name": "556_B. Case of Fake Numbers", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1000) — the number of gears.\n\nThe second line contains n digits a1, a2, ..., an (0 ≤ ai ≤ n - 1) — the sequence of active teeth: the active tooth of the i-th gear contains number ai."}
{"name": "675_D. Tree Construction", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the length of the sequence a.\n\nThe second line contains n distinct integers a_i (1 ≤ a_i ≤ 10^9) — the sequence a itself."}
{"name": "903_C. Boxes Packing", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5000) — the number of boxes Mishka has got.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the side length of i-th box."}
{"name": "954_E. Water Taps", "description": "Input\n\nThe first line contains two integers n and T (1 ≤ n ≤ 200000, 1 ≤ T ≤ 106) — the number of water taps and the desired temperature of water, respectively.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) where ai is the maximum amount of water i-th tap can deliver per second.\n\nThe third line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 106) — the temperature of water each tap delivers."}
{"name": "980_D. Perfect Groups", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 5000), the size of the array.\n\nThe second line contains n integers a_1,a_2,...,a_n (-10^8 ≤ a_i ≤ 10^8), the values of the array."}
{"name": "1053_D. Linear Congruential Generator", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the tuple.\n\nThe second line contains n space separated prime numbers — the modules p_1, p_2, …, p_n (2 ≤ p_i ≤ 2 ⋅ 10^6)."}
{"name": "1096_F. Inversion Expectation", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence.\n\nThe second line contains n integers p_1, p_2, ..., p_n (-1 ≤ p_i ≤ n, p_i ≠ 0) — the initial sequence.\n\nIt is guaranteed that all elements not equal to -1 are pairwise distinct."}
{"name": "1144_C. Two Shuffled Sequences", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1165_B. Polycarp Training", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of contests.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the number of problems in the i-th contest."}
{"name": "1244_D. Paint the Tree", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 100 000) — the number of vertices.\n\nThe second line contains a sequence of integers c_{1, 1}, c_{1, 2}, ..., c_{1, n} (1 ≤ c_{1, i} ≤ 10^{9}), where c_{1, i} is the cost of painting the i-th vertex into the first color.\n\nThe third line contains a sequence of integers c_{2, 1}, c_{2, 2}, ..., c_{2, n} (1 ≤ c_{2, i} ≤ 10^{9}), where c_{2, i} is the cost of painting the i-th vertex into the second color.\n\nThe fourth line contains a sequence of integers c_{3, 1}, c_{3, 2}, ..., c_{3, n} (1 ≤ c_{3, i} ≤ 10^{9}), where c_{3, i} is the cost of painting the i-th vertex into the third color.\n\nThen (n - 1) lines follow, each containing two integers u_j and v_j (1 ≤ u_j, v_j ≤ n, u_j ≠ v_j) — the numbers of vertices connected by the j-th undirected edge. It is guaranteed that these edges denote a tree."}
{"name": "1264_B. Beautiful Sequence", "description": "Input\n\nThe only input line contains four non-negative integers a, b, c and d (0 < a+b+c+d ≤ 10^5)."}
{"name": "1285_D. Dr. Evil Underscores", "description": "Input\n\nThe first line contains integer n (1≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2^{30}-1)."}
{"name": "1329_A. Dreamoon Likes Coloring", "description": "Input\n\nThe first line contains two integers n,m (1 ≤ m ≤ n ≤ 100 000).\n\nThe second line contains m integers l_1, l_2, …, l_m (1 ≤ l_i ≤ n)."}
{"name": "1349_A. Orac and LCM", "description": "Input\n\nThe first line contains one integer n\\ (2≤ n≤ 100 000).\n\nThe second line contains n integers, a_1, a_2, …, a_n (1 ≤ a_i ≤ 200 000)."}
{"name": "1369_E. DeadLee", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5; 1 ≤ m ≤ 2 ⋅ 10^5) — the number of different food types and the number of Lee's friends. \n\nThe second line contains n integers w_1, w_2, …, w_n (0 ≤ w_i ≤ 10^6) — the number of plates of each food type.\n\nThe i-th line of the next m lines contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i) — the favorite types of food of the i-th friend."}
{"name": "1416_A. k-Amazing Numbers", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the elements of the array. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 ≤ li ≤ ri ≤ 109, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1."}
{"name": "180_E. Cubes", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 2·105, 1 ≤ m ≤ 105, 0 ≤ k < n). The second line contains n integers from 1 to m — the numbers of cube colors. The numbers of colors are separated by single spaces."}
{"name": "228_E. The Road to Berland is Paved With Good Intentions", "description": "Input\n\nThe first line contains two space-separated integers n, m <image> — the number of cities and roads in Berland, correspondingly. Next m lines contain the descriptions of roads in Berland: the i-th line contains three space-separated integers ai, bi, ci (1 ≤ ai, bi ≤ n; ai ≠ bi; 0 ≤ ci ≤ 1). The first two integers (ai, bi) are indexes of the cities that are connected by the i-th road, the third integer (ci) equals 1, if the road was initially asphalted, and 0 otherwise. \n\nConsider the cities in Berland indexed from 1 to n, and the roads indexed from 1 to m. It is guaranteed that between two Berlandian cities there is not more than one road."}
{"name": "371_C. Hamburgers", "description": "Input\n\nThe first line of the input contains a non-empty string that describes the recipe of \"Le Hamburger de Polycarpus\". The length of the string doesn't exceed 100, the string contains only letters 'B' (uppercase English B), 'S' (uppercase English S) and 'C' (uppercase English C).\n\nThe second line contains three integers nb, ns, nc (1 ≤ nb, ns, nc ≤ 100) — the number of the pieces of bread, sausage and cheese on Polycarpus' kitchen. The third line contains three integers pb, ps, pc (1 ≤ pb, ps, pc ≤ 100) — the price of one piece of bread, sausage and cheese in the shop. Finally, the fourth line contains integer r (1 ≤ r ≤ 1012) — the number of rubles Polycarpus has.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "464_E. The Classic Problem", "description": "Input\n\nThe first line of the input contains two space-separated integers — n and m (1 ≤ n ≤ 105; 0 ≤ m ≤ 105).\n\nNext m lines contain the description of the graph edges. The i-th line contains three space-separated integers — ui, vi, xi (1 ≤ ui, vi ≤ n; 0 ≤ xi ≤ 105). That means that vertices with numbers ui and vi are connected by edge of length 2xi (2 to the power of xi).\n\nThe last line contains two space-separated integers — the numbers of vertices s and t.\n\nThe vertices are numbered from 1 to n. The graph contains no multiple edges and self-loops."}
{"name": "488_D. Strip", "description": "Input\n\nThe first line contains three space-separated integers n, s, l (1 ≤ n ≤ 105, 0 ≤ s ≤ 109, 1 ≤ l ≤ 105).\n\nThe second line contains n integers ai separated by spaces ( - 109 ≤ ai ≤ 109)."}
{"name": "512_C. Fox And Dinner", "description": "Input\n\nThe first line contains single integer n (3 ≤ n ≤ 200): the number of foxes in this party. \n\nThe second line contains n integers ai (2 ≤ ai ≤ 104)."}
{"name": "587_A. Duff and Weight Lifting", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 106), the number of weights.\n\nThe second line contains n integers w1, ..., wn separated by spaces (0 ≤ wi ≤ 106 for each 1 ≤ i ≤ n), the powers of two forming the weights values."}
{"name": "609_C. Load Balancing", "description": "Input\n\nThe first line contains positive number n (1 ≤ n ≤ 105) — the number of the servers. \n\nThe second line contains the sequence of non-negative integers m1, m2, ..., mn (0 ≤ mi ≤ 2·104), where mi is the number of tasks assigned to the i-th server."}
{"name": "746_G. New Roads", "description": "Input\n\nThe first line contains three positive numbers n, t and k (2 ≤ n ≤ 2·105, 1 ≤ t, k < n) — the distance to the most distant city from the capital and the number of cities which should be dead-ends (the capital in this number is not taken into consideration). \n\nThe second line contains a sequence of t integers a1, a2, ..., at (1 ≤ ai < n), the i-th number is the number of cities which should be at the distance i from the capital. It is guaranteed that the sum of all the values ai equals n - 1."}
{"name": "p01317 Mr. Rito Post Office", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> N M\n> x1 y1 t1 sl1\n> x2 y2 t2 sl2\n> ...\n> xM yM tM slM\n> R\n> z1 z2 ... zR\n>\n\nThe input items in the dataset are all non-negative integers. The input items in the line are separated by one blank.\n\nThe first line defines the size of the land and sea networks.\n\nN (2 ≤ N ≤ 200) is the number of towns or villages. Each town or village is assigned a unique number from 1 to N. M (1 ≤ M ≤ 10000) is the total number of land and sea routes.\n\nThe 2nd to 1 + M lines are descriptions of land or sea routes. xi and yi (1 ≤ xi, yi ≤ N) represent the town or village numbers at both ends. ti (1 ≤ ti ≤ 1000) represents the travel time of the land or sea route. sli is either'L'or'S', where L stands for land and S stands for sea.\n\nThere may be more than one land or sea route that directly connects two towns or villages. Each land or sea route is bidirectional, that is, it can move in either direction.\n\nR (1 ≤ R ≤ 1000) on the second line of M + represents the number of collection and delivery destinations that Mr. Toshito is in charge of. On the M + 3rd line, R numbers of the town or village number zi (1 ≤ zi ≤ N) of the collection / delivery destination are arranged in the order of collection / delivery.\n\nIn the initial state, both Mr. Toto and the ship exist in the port town z1. You can always move from the initial state to the destination town or village in some way.\n\nThe end of the input is indicated by a single line containing two zeros separated by blanks."}
{"name": "1012_A. Photo of The Sky", "description": "Input\n\nThe first line of the input contains an only integer n (1 ≤ n ≤ 100 000), the number of points in Pavel's records.\n\nThe second line contains 2 ⋅ n integers a_1, a_2, ..., a_{2 ⋅ n} (1 ≤ a_i ≤ 10^9), coordinates, written by Pavel in some order."}
{"name": "1188_E. Problem from Red Panda", "description": "Input\n\nThe first line contains a single integer k (2 ≤ k ≤ 10^5) —the number of colors.\n\nThe second line contains k integers a_1, a_2, …, a_k (0 ≤ a_i) —initial configuration of balloons. a_i is number of balloons of color i. The total number of balloons doesn't exceed 10^6. In other words,\n\na_1 + a_2 + a_3 + … + a_k ≤ 10^6."}
{"name": "1225_G. To Make 1", "description": "Input\n\nThe first line contains two integers n and k — the initial number of integers on the blackboard, and the chosen number (2 ≤ n ≤ 16, 2 ≤ k ≤ 2000).\n\nThe second line contains n positive integers a_1, …, a_n initially written on the blackboard. It is guaranteed that none of the numbers a_i is divisible by k, and the sum of all a_i does not exceed 2000."}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 ≤ |s| ≤ 1000)."}
{"name": "1291_A. Even But Not Even", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 3000) — the number of digits in the original number.\n\nThe second line of each test case contains a non-negative integer number s, consisting of n digits.\n\nIt is guaranteed that s does not contain leading zeros and the sum of n over all test cases does not exceed 3000."}
{"name": "1311_B. WeirdSort", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThen t test cases follow. The first line of each test case contains two integers n and m (1 ≤ m < n ≤ 100) — the number of elements in a and the number of elements in p. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). The third line of the test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i < n, all p_i are distinct) — the set of positions described in the problem statement."}
{"name": "1397_B. Power Sequence", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9)."}
{"name": "1420_C2. Pokémon Army (hard version)", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and q (1 ≤ n ≤ 3 ⋅ 10^5, 0 ≤ q ≤ 3 ⋅ 10^5) denoting the number of pokémon and number of operations respectively.\n\nThe second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) denoting the strengths of the pokémon.\n\ni-th of the last q lines contains two positive integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) denoting the indices of pokémon that were swapped in the i-th operation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5, and the sum of q over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "1439_B. Graph Subset Problem", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The next lines contain descriptions of test cases.\n\nThe first line of the description of each test case contains three integers n, m, k (1 ≤ n, m, k ≤ 10^5, k ≤ n).\n\nEach of the next m lines contains two integers u, v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between vertices u and v.\n\nIt is guaranteed that there are no self-loops or multiple edges. It is guaranteed that the sum of n for all test cases and the sum of m for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1512_F. Education", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains two integers n and c (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ c ≤ 10^9) — the number of positions in the company and the cost of a new computer.\n\nThe second line of each test case contains n integers a_1 ≤ a_2 ≤ … ≤ a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line of each test case contains n - 1 integer b_1, b_2, …, b_{n-1} (1 ≤ b_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "167_B. Wizards and Huge Prize", "description": "Input\n\nThe first line contains three integers n, l, k (1 ≤ n ≤ 200, 0 ≤ l, k ≤ 200) — the number of tours, the minimum number of tours to win, and the number of prizes that you can fit in the bags brought from home, correspondingly.\n\nThe second line contains n space-separated integers, pi (0 ≤ pi ≤ 100) — the probability to win the i-th tour, in percents.\n\nThe third line contains n space-separated integers, ai (1 ≤ ai ≤ 200) — the capacity of the bag that will be awarded to you for winning the i-th tour, or else -1, if the prize for the i-th tour is a huge prize and not a bag."}
{"name": "306_B. Optimizer", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n ≤ 2·106, 1 ≤ m ≤ 2·105) — the number of bytes (memory cells) and the number of instructions in Polycarpus's code. Then m lines follow, each line contains a pair of integers ai, li (1 ≤ ai ≤ n, 1 ≤ li ≤ n - ai + 1)."}
{"name": "354_A. Vasya and Robot", "description": "Input\n\nThe first line contains five integers n, l, r, Ql, Qr (1 ≤ n ≤ 105; 1 ≤ l, r ≤ 100; 1 ≤ Ql, Qr ≤ 104).\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 100)."}
{"name": "378_B. Semifinals", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of participants in each semifinal.\n\nEach of the next n lines contains two integers ai and bi (1 ≤ ai, bi ≤ 109) — the results of the i-th participant (the number of milliseconds he needs to cover the semifinals distance) of the first and second semifinals, correspondingly. All results are distinct. Sequences a1, a2, ..., an and b1, b2, ..., bn are sorted in ascending order, i.e. in the order the participants finished in the corresponding semifinal."}
{"name": "39_D. Cubical Planet", "description": "Input\n\nThe first line contains three space-separated integers (0 or 1) — the coordinates of the first fly, the second line analogously contains the coordinates of the second fly."}
{"name": "614_B. Gena's Code", "description": "Input\n\nThe first line of the input contains the number of countries n (1 ≤ n ≤ 100 000). The second line contains n non-negative integers ai without leading zeroes — the number of tanks of the i-th country.\n\nIt is guaranteed that the second line contains at least n - 1 beautiful numbers and the total length of all these number's representations doesn't exceed 100 000."}
{"name": "730_F. Ber Patio", "description": "Input\n\nThe first line contains two integer numbers n and b (1 ≤ n ≤ 5000, 0 ≤ b ≤ 105) — number of days and initial number of bonuses Polycarp has.\n\nThe second line contains the integer sequence a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the amount of burles in the i-th day's receipt.\n\nIt is guaranteed that the sum of all receipts does not exceed 105 burles."}
{"name": "774_J. Stepan's Series", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — the number of episodes in the series and the dissatisfaction which should be checked. \n\nThe second line contains the sequence which consists of n symbols \"Y\", \"N\" and \"?\". If the i-th symbol equals \"Y\", Stepan remembers that he has watched the episode number i. If the i-th symbol equals \"N\", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals \"?\", Stepan doesn't exactly remember if he has watched the episode number i or not."}
{"name": "79_C. Beaver", "description": "Input\n\nIn the first line there is a string s. The length of s will be between 1 and 105, inclusive.\n\nIn the second line there is a single integer n (1 ≤ n ≤ 10). Next n lines, there is a string bi (1 ≤ i ≤ n). Each length of bi will be between 1 and 10, inclusive.\n\nEach character of the given strings will be either a English alphabet (both lowercase and uppercase) or a underscore ('_') or a digit. Assume that these strings are case-sensitive."}
{"name": "846_A. Curriculum Vitae", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 100).\n\nThe second line contains n space-separated integer numbers s1, s2, ..., sn (0 ≤ si ≤ 1). 0 corresponds to an unsuccessful game, 1 — to a successful one."}
{"name": "101_E. Candies and Stones", "description": "Input\n\nThe first line contains three integers n, m, p (1 ≤ n, m ≤ 20000, 1 ≤ p ≤ 109). The second line contains n integers x0, x1, ..., xn - 1 (0 ≤ xi ≤ 20000). The third line contains m integers y0, y1, ..., ym - 1 (0 ≤ yi ≤ 20000). The value of f(a, b) is calculated as a remainder of the division of the sum xa + yb by number p."}
{"name": "1088_F. Ehab and a weird weight formula", "description": "Input\n\nThe first line contains the integer n (2 ≤ n ≤ 5 ⋅ 10^5), the number of nodes in the tree.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), the weights of the nodes.\n\nThe next n-1 lines, each contains 2 space-separated integers u and v (1 ≤ u,v ≤ n) which means there's an edge between u and v."}
{"name": "1137_A. Skyscrapers", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\n\nEach of the following n lines contains m integers a_{i,1}, a_{i,2}, ..., a_{i,m} (1 ≤ a_{i,j} ≤ 10^9). The integer a_{i,j}, located on j-th position in the i-th line denotes the height of the skyscraper at the intersection of the i-th Eastern street and j-th Southern direction."}
{"name": "1155_C. Alarm Clocks Everywhere", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ m ≤ 3 ⋅ 10^5) — the number of events and the number of possible settings for the interval between signals.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^{18}), where x_i is the minute when i-th event starts. It is guaranteed that all x_i are given in increasing order (i. e. the condition x_1 < x_2 < ... < x_n holds).\n\nThe third line of the input contains m integers p_1, p_2, ..., p_m (1 ≤ p_j ≤ 10^{18}), where p_j is the j-th option for the interval between two consecutive signals."}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10000) — the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 ≤ n ≤ 150000) — the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000."}
{"name": "1254_B1. Send Boxes to Alice (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of chocolate boxes.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — the number of chocolate pieces in the i-th box.\n\nIt is guaranteed that at least one of a_1, a_2, …, a_n is positive."}
{"name": "1278_A. Shuffle Hashing", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a non-empty string p, consisting of lowercase Latin letters. The length of p does not exceed 100.\n\nThe second line of each test case contains a non-empty string h, consisting of lowercase Latin letters. The length of h does not exceed 100."}
{"name": "1321_B. Journey Planning", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of cities in Berland.\n\nThe second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 4 ⋅ 10^5), where b_i is the beauty value of the i-th city."}
{"name": "1340_A. Nastya and Strange Generator", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of the test case contains a single integer n (1 ≤ n ≤ 10^5) — the size of the permutation.\n\nThe second line of the test case contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n) — the permutation written by Denis.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1547_E. Air Conditioners", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases in the input. Then test cases follow. Before each test case, there is an empty line.\n\nEach test case contains three lines. The first line contains two integers n (1 ≤ n ≤ 3 ⋅ 10^5) and k (1 ≤ k ≤ n) — the length of the strip of land and the number of air conditioners respectively.\n\nThe second line contains k integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — positions of air conditioners on the strip of land.\n\nThe third line contains k integers t_1, t_2, …, t_k (1 ≤ t_i ≤ 10^9) — temperatures of air conditioners.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "219_C. Color Stripe", "description": "Input\n\nThe first input line contains two integers n and k (1 ≤ n ≤ 5·105; 2 ≤ k ≤ 26). The second line contains n uppercase English letters. Letter \"A\" stands for the first color, letter \"B\" stands for the second color and so on. The first k English letters may be used. Each letter represents the color of the corresponding cell of the stripe."}
{"name": "242_E. XOR on Segment", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 106) — the original array.\n\nThe third line contains integer m (1 ≤ m ≤ 5·104) — the number of operations with the array. The i-th of the following m lines first contains an integer ti (1 ≤ ti ≤ 2) — the type of the i-th query. If ti = 1, then this is the query of the sum, if ti = 2, then this is the query to change array elements. If the i-th operation is of type 1, then next follow two integers li, ri (1 ≤ li ≤ ri ≤ n). If the i-th operation is of type 2, then next follow three integers li, ri, xi (1 ≤ li ≤ ri ≤ n, 1 ≤ xi ≤ 106). The numbers on the lines are separated by single spaces."}
{"name": "339_C. Xenia and Weights", "description": "Input\n\nThe first line contains a string consisting of exactly ten zeroes and ones: the i-th (i ≥ 1) character in the line equals \"1\" if Xenia has i kilo weights, otherwise the character equals \"0\". The second line contains integer m (1 ≤ m ≤ 1000)."}
{"name": "361_E. Levko and Strings", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2000, 0 ≤ k ≤ 2000).\n\nThe second line contains a non-empty string s of length n. String s consists only of lowercase English letters."}
{"name": "385_C. Bear and Prime Numbers", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106). The second line contains n integers x1, x2, ..., xn (2 ≤ xi ≤ 107). The numbers are not necessarily distinct.\n\nThe third line contains integer m (1 ≤ m ≤ 50000). Each of the following m lines contains a pair of space-separated integers, li and ri (2 ≤ li ≤ ri ≤ 2·109) — the numbers that characterize the current query."}
{"name": "578_E. Walking!", "description": "Input\n\nOnly one line containing the string S (1 ≤ |S| ≤ 100 000) containing all footprints in order along the trail from entrance to exit.\n\nIt is guaranteed that there is at least one possible footprint history."}
{"name": "643_D. Bearish Fanpages", "description": "Input\n\nThe first line of the input contains two integers n and q (3 ≤ n ≤ 100 000, 1 ≤ q ≤ 100 000) — the number of fanpages and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1012) where ti denotes the number of people subscribing the i-th fanpage.\n\nThe third line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ n). Initially, fanpage i follows fanpage fi.\n\nThen, q lines follow. The i-th of them describes the i-th query. The first number in the line is an integer typei (1 ≤ typei ≤ 3) — the type of the query.\n\nThere will be at most 50 000 queries of the first type. There will be at least one query of the second or the third type (so, the output won't be empty).\n\nIt's guaranteed that at each moment a fanpage doesn't follow itself, and that no two fanpages follow each other."}
{"name": "670_D1. Magic Powder - 1", "description": "Input\n\nThe first line of the input contains two positive integers n and k (1 ≤ n, k ≤ 1000) — the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a1, a2, ..., an (1 ≤ ai ≤ 1000), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b1, b2, ..., bn (1 ≤ bi ≤ 1000), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has."}
{"name": "737_C. Subordinates", "description": "Input\n\nThe first line contains two positive integers n and s (1 ≤ n ≤ 2·105, 1 ≤ s ≤ n) — the number of workers and the id of the chief.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n - 1), where ai is the number of superiors (not only immediate) the worker with id i reported about."}
{"name": "761_B. Dasha and friends", "description": "Input\n\nThe first line contains two integers n and L (1 ≤ n ≤ 50, n ≤ L ≤ 100) — the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order — the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order — the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively."}
{"name": "830_C. Bamboo Partition", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1011) — the number of bamboos and the maximum total length of cut parts, in meters.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the required heights of bamboos, in meters."}
{"name": "949_E. Binary Cards", "description": "Input\n\nThe first line of input contains an integer n (1 ≤ n ≤ 100 000), the number of rounds in the game.\n\nThe second line of input contains n integers a1, a2, ..., an ( - 100 000 ≤ ai ≤ 100 000), the numbers that jury is going to tell in each round."}
{"name": "977_D. Divide by three, multiply by two", "description": "Input\n\nThe first line of the input contatins an integer number n (2 ≤ n ≤ 100) — the number of the elements in the sequence. The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 3 ⋅ 10^{18}) — rearranged (reordered) sequence that Polycarp can wrote down on the board."}
{"name": "p00722 Dirichlet's Theorem on Arithmetic Progressions", "description": "Input\n\nThe input is a sequence of datasets. A dataset is a line containing three positive integers a, d, and n separated by a space. a and d are relatively prime. You may assume a <= 9307, d <= 346, and n <= 210.\n\nThe end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset."}
{"name": "1056_D. Decorate Apple Tree", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of junctions in the tree.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_n (1 ≤ p_i < i), where p_i means there is a branch between junctions i and p_i. It is guaranteed that this set of branches forms a tree."}
{"name": "1147_A. Hide and Seek", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n,k ≤ 10^5) — the number of cells and the number of questions Bob asked.\n\nThe second line contains k integers x_1, x_2, …, x_k (1 ≤ x_i ≤ n) — Bob's questions."}
{"name": "1248_D2. The World Is Just a Programming Task (Hard Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300 000), the length of the string.\n\nThe second line contains a string, consisting of exactly n characters, where each of the characters is either \"(\" or \")\"."}
{"name": "1371_F. Raging Thunder", "description": "Input\n\nThe first line contains two integers n, q (1 ≤ n ≤ 5 × 10^5 , 1 ≤ q ≤ 10^5).\n\nThe second line contains a string s of length n. It consists of characters \"<\" and \">\". \n\nNext q lines contain the descriptions of the queries, i-th of them contains two integers l, r (1 ≤ l ≤ r ≤ n), describing the i-th query."}
{"name": "1437_B. Reverse Binary Strings", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5; n is even) — the length of string s.\n\nThe second line of each test case contains a binary string s of length n (s_i ∈ {0, 1}). String s has exactly n/2 zeroes and n/2 ones.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 10^5."}
{"name": "1461_F. Mathematical Expression", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the amount of numbers on the paper.\n\nThe second line of the input contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 9), where a_i is the i-th element of a.\n\nThe third line of the input contains the string s (1 ≤ |s| ≤ 3) — symbols allowed in the expression. It is guaranteed that the string may only consist of symbols \"-\", \"+\" and \"*\". It is also guaranteed that all symbols in the string are distinct."}
{"name": "1487_A. Arena", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 ≤ n ≤ 100) — the number of heroes. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the initial level of the i-th hero."}
{"name": "1538_C. Number of Pairs", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains three integers n, l, r (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ l ≤ r ≤ 10^9) — the length of the array and the limits on the sum in the pair.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n overall test cases does not exceed 2 ⋅ 10^5."}
{"name": "257_D. Sum", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the original array. \n\nIt is guaranteed that the condition ai ≤ ai + 1 ≤ 2·ai fulfills for any positive integer i (i < n)."}
{"name": "397_E. On Changing Tree", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the number of vertices in the tree. The second line contains n - 1 integers p2, p3, ... pn (1 ≤ pi < i), where pi is the number of the vertex that is the parent of vertex i in the tree.\n\nThe third line contains integer q (1 ≤ q ≤ 3·105) — the number of queries. Next q lines contain the queries, one per line. The first number in the line is type. It represents the type of the query. If type = 1, then next follow space-separated integers v, x, k (1 ≤ v ≤ n; 0 ≤ x < 109 + 7; 0 ≤ k < 109 + 7). If type = 2, then next follows integer v (1 ≤ v ≤ n) — the vertex where you need to find the value of the number."}
{"name": "542_A. Place Your Ad Here", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2·105) — the number of commercial videos and channels, respectively.\n\nEach of the following n lines contains two integers li, ri (0 ≤ li ≤ ri ≤ 109) — the segment of time when it is possible to show the corresponding video.\n\nEach of the following m lines contains three integers aj, bj, cj (0 ≤ aj ≤ bj ≤ 109, 1 ≤ cj ≤ 109), characterizing the TV channel."}
{"name": "569_B. Inventory", "description": "Input\n\nThe first line contains a single integer n — the number of items (1 ≤ n ≤ 105).\n\nThe second line contains n numbers a1, a2, ..., an (1 ≤ ai ≤ 105) — the initial inventory numbers of the items."}
{"name": "58_E. Expression", "description": "Input\n\nThe first and only input line contains the expression a + b = c (1 ≤ a, b, c ≤ 106, a, b and c don't contain leading zeroes) which is the expression Vasya wrote down."}
{"name": "631_D. Messenger", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 200 000) — the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"li-ci\" (1 ≤ li ≤ 1 000 000) — the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"li-ci\" (1 ≤ li ≤ 1 000 000) — the length of the i-th part and the corresponding lowercase English letter."}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 ≤ |s| ≤ 15)."}
{"name": "818_C. Sofa Thief", "description": "Input\n\nThe first line contains one integer number d (1 ≤ d ≤ 105) — the number of sofas in the storehouse.\n\nThe second line contains two integer numbers n, m (1 ≤ n, m ≤ 105) — the size of the storehouse.\n\nNext d lines contains four integer numbers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — coordinates of the i-th sofa. It is guaranteed that cells (x1, y1) and (x2, y2) have common side, (x1, y1)  ≠  (x2, y2) and no cell is covered by more than one sofa.\n\nThe last line contains four integer numbers cntl, cntr, cntt, cntb (0 ≤ cntl, cntr, cntt, cntb ≤ d - 1)."}
{"name": "864_B. Polycarp and Letters", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.\n\nThe second line contains a string s consisting of lowercase and uppercase Latin letters."}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 ≤ p ≤ 1018, 2 ≤ k ≤ 2 000)."}
{"name": "988_C. Equal Sums", "description": "Input\n\nThe first line contains an integer k (2 ≤ k ≤ 2 ⋅ 10^5) — the number of sequences.\n\nThen k pairs of lines follow, each pair containing a sequence.\n\nThe first line in the i-th pair contains one integer n_i (1 ≤ n_i < 2 ⋅ 10^5) — the length of the i-th sequence. The second line of the i-th pair contains a sequence of n_i integers a_{i, 1}, a_{i, 2}, ..., a_{i, n_i}.\n\nThe elements of sequences are integer numbers from -10^4 to 10^4.\n\nThe sum of lengths of all given sequences don't exceed 2 ⋅ 10^5, i.e. n_1 + n_2 + ... + n_k ≤ 2 ⋅ 10^5."}
{"name": "p00148 Candy and Class Flag", "description": "Input\n\nMultiple test cases are given. Each test case is given in the following format. For each test case, an integer a (1 ≤ a ≤ 10000) representing the number of candies is given on one line. Process until the end of input (EOF).\n\nThe number of datasets does not exceed 20."}
{"name": "1077_E. Thematic Contests", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of problems Polycarp has prepared.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) where a_i is the topic of the i-th problem."}
{"name": "1119_E. Pavel and Triangles", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 300 000) — the number of different lengths of sticks.\n\nThe second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9), where a_i is the number of sticks with the length equal to 2^i."}
{"name": "1204_C. Anna, Svyatoslav and Maps", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of vertexes in a graph. \n\nThe next n lines define the graph by an adjacency matrix: the j-th character in the i-st line is equal to 1 if there is an arc from vertex i to the vertex j else it is equal to 0. It is guaranteed that the graph doesn't contain loops.\n\nThe next line contains a single integer m (2 ≤ m ≤ 10^6) — the number of vertexes in the path. \n\nThe next line contains m integers p_1, p_2, …, p_m (1 ≤ p_i ≤ n) — the sequence of vertexes in the path. It is guaranteed that for any 1 ≤ i < m there is an arc from p_i to p_{i+1}."}
{"name": "1221_A. 2048 Game", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 100) – the number of queries.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 100) — the number of elements in multiset.\n\nThe second line of each query contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 2^{29}) — the description of the multiset. It is guaranteed that all elements of the multiset are powers of two."}
{"name": "1266_B. Dice Tower", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of favourite integers of Bob. \n\nThe second line contains t space-separated integers x_i (1 ≤ x_i ≤ 10^{18}) — Bob's favourite integers."}
{"name": "1287_D. Numbers on Tree", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2000) — the number of vertices in the tree.\n\nThe next n lines contain descriptions of vertices: the i-th line contains two integers p_i and c_i (0 ≤ p_i ≤ n; 0 ≤ c_i ≤ n-1), where p_i is the parent of vertex i or 0 if vertex i is root, and c_i is the number of vertices j in the subtree of vertex i, such that a_j < a_i.\n\nIt is guaranteed that the values of p_i describe a rooted tree with n vertices."}
{"name": "1307_D. Cow and Fields", "description": "Input\n\nThe first line contains integers n, m, and k (2 ≤ n ≤ 2 ⋅ 10^5, n-1 ≤ m ≤ 2 ⋅ 10^5, 2 ≤ k ≤ n) — the number of fields on the farm, the number of roads, and the number of special fields. \n\nThe second line contains k integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — the special fields. All a_i are distinct.\n\nThe i-th of the following m lines contains integers x_i and y_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i), representing a bidirectional road between fields x_i and y_i. \n\nIt is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them."}
{"name": "1350_D. Orac and Medians", "description": "Input\n\nThe first line of the input is a single integer t: the number of queries.\n\nThe first line of each query contains two integers n\\ (1≤ n≤ 100 000) and k\\ (1≤ k≤ 10^9), the second line contains n positive integers a_1,a_2,...,a_n\\ (1≤ a_i≤ 10^9)\n\nThe total sum of n is at most 100 000."}
{"name": "1370_F2. The Hidden Pair (Hard Version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Please note, how the interaction process is organized.\n\nThe first line of each test case consists of a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree.\n\nThe next n - 1 lines consist of two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nInteraction\n\nTo ask a query print a single line: \n\n  * In the beginning print \"? c \" (without quotes) where c (1 ≤ c ≤ n) denotes the number of nodes being queried, followed by c distinct integers in the range [1, n] — the indices of nodes from the list. \n\n\n\nFor each query, you will receive two integers x, d — the node (among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = -1. In this case, you should terminate the program immediately.\n\nWhen you have guessed the hidden nodes, print a single line \"! \" (without quotes), followed by two integers in the range [1, n] — the hidden nodes. You can output the hidden nodes in any order.\n\nAfter this, you should read a string. If you guess the nodes correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.\n\nGuessing the hidden nodes does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The hidden nodes do not change with queries.\n\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the hidden nodes.\n\nYou need to solve each test case before receiving the input for the next test case.\n\nThe limit of 11 queries applies to each test case and not to the entire input.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see the documentation for other languages.\n\n\n\nHacks\n\nTo hack the solution, use the following test format:\n\nThe first line should contain a single integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case should contain a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. The second line should contain two distinct integers in the range [1, n] — the hidden nodes. The next n - 1 lines should contain two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nExample\n\nInput\n\n\n1\n3\n1 2\n1 3\n\n1 1\n\n2 3\n\n3 1\n\n3 1\n\nCorrect"}
{"name": "1393_C. Pinkie Pie Eats Patty-cakes", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100): the number of bags for which you need to solve the problem.\n\nThe first line of each bag description contains a single integer n (2 ≤ n ≤ 10^5): the number of patty-cakes in it. The second line of the bag description contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): the information of patty-cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty-cakes with the same filling. \n\nIt is guaranteed that the sum of n over all bags does not exceed 10^5."}
{"name": "1418_B. Negative Prefixes", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen t testcases follow.\n\nThe first line of each testcase contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array a.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (-10^5 ≤ a_i ≤ 10^5) — the initial array a.\n\nThe third line of each testcase contains n integers l_1, l_2, ..., l_n (0 ≤ l_i ≤ 1), where l_i = 0 means that the position i is unlocked and l_i = 1 means that the position i is locked."}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^6). The second line contains integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^6) — the elements of the array."}
{"name": "1485_F. Copy or Prefix Sum", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains n integers b_1, b_2, …, b_n (-10^9 ≤ b_i ≤ 10^9).\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1536_B. Prinzessin der Verurteilung", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the length of the word. The second line for each test case contains a single string of n lowercase Latin letters.\n\nThe sum of n over all test cases will not exceed 1000."}
{"name": "163_A. Substring and Subsequence", "description": "Input\n\nThe input consists of two lines. The first of them contains s (1 ≤ |s| ≤ 5000), and the second one contains t (1 ≤ |t| ≤ 5000). Both strings consist of lowercase Latin letters."}
{"name": "302_A. Eugeny and Array", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 2·105). The second line contains n integers a1, a2, ..., an (ai = -1, 1). Next m lines contain Eugene's queries. The i-th line contains integers li, ri (1 ≤ li ≤ ri ≤ n)."}
{"name": "467_C. George and Job", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ (m × k) ≤ n ≤ 5000). The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 109)."}
{"name": "53_D. Physical Education", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300) which is the number of students. The second line contains n space-separated integers ai (1 ≤ ai ≤ 109) which represent the height of the student occupying the i-th place must possess. The third line contains n space-separated integers bi (1 ≤ bi ≤ 109) which represent the height of the student occupying the i-th place in the initial arrangement. It is possible that some students possess similar heights. It is guaranteed that it is possible to arrange the children in the required order, i.e. a and b coincide as multisets."}
{"name": "610_E. Alphabet Permutations", "description": "Input\n\nThe first line contains three positive integers n, m and k (1 ≤ n ≤ 200 000, 1 ≤ m ≤ 20000, 1 ≤ k ≤ 10) — the length of the string s, the number of operations and the size of the alphabet respectively. The second line contains the string s itself.\n\nEach of the following lines m contains a description of some operation: \n\n  1. Operation of the first type starts with 1 followed by a triple li, ri and ci, that denotes replacement of all characters at positions from li to ri by character ci (1 ≤ li ≤ ri ≤ n, ci is one of the first k lowercase English letters). \n  2. Operation of the second type starts with 2 followed by a permutation of the first k lowercase English letters."}
{"name": "659_G. Fence Divercity", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1 000 000) — the number of boards in Vasily's fence.\n\nThe second line contains n space-separated numbers h1, h2, ..., hn (1 ≤ hi ≤ 109), where hi equals the height of the i-th board to the left."}
{"name": "682_D. Alyona and Strings", "description": "Input\n\nIn the first line of the input three integers n, m, k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 10) are given — the length of the string s, the length of the string t and Alyona's favourite number respectively.\n\nThe second line of the input contains string s, consisting of lowercase English letters.\n\nThe third line of the input contains string t, consisting of lowercase English letters."}
{"name": "727_F. Polycarp's problems", "description": "Input\n\nThe first line of input contains two integers n and m (1 ≤ n ≤ 750, 1 ≤ m ≤ 200 000) — the number of problems in the problemset and the number of guesses about the current coordinator's mood.\n\nThe second line of input contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the qualities of the problems in order of increasing difficulty.\n\nThe third line of input contains m integers b1, b2, ..., bm (0 ≤ bi ≤ 1015) — the guesses of the current coordinator's mood q."}
{"name": "749_A. Bachgold Problem", "description": "Input\n\nThe only line of the input contains a single integer n (2 ≤ n ≤ 100 000)."}
{"name": "817_B. Makes And The Product", "description": "Input\n\nThe first line of input contains a positive integer number n (3 ≤ n ≤ 105) — the number of elements in array a. The second line contains n positive integer numbers ai (1 ≤ ai ≤ 109) — the elements of a given array."}
{"name": "863_B. Kayaking", "description": "Input\n\nThe first line contains one number n (2 ≤ n ≤ 50).\n\nThe second line contains 2·n integer numbers w1, w2, ..., w2n, where wi is weight of person i (1 ≤ wi ≤ 1000)."}
{"name": "911_D. Inversion Counting", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 1500) — the size of the permutation. \n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the elements of the permutation. These integers are pairwise distinct.\n\nThe third line contains one integer m (1 ≤ m ≤ 2·105) — the number of queries to process.\n\nThen m lines follow, i-th line containing two integers li, ri (1 ≤ li ≤ ri ≤ n) denoting that i-th query is to reverse a segment [li, ri] of the permutation. All queries are performed one after another."}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 ≤ p ≤ 1018, 2 ≤ k ≤ 2 000)."}
{"name": "p01946 Slimming Plan", "description": "Input\n\nThe input consists of a single test case formatted as follows.\n\n\n$S$ $T$ $D$\n$w_0 ... w_{D-1}$\n\n\nThe first line consists of three integers $S$, $T$, $D$ ($1 \\leq S, T, D \\leq 100,000, S > T$). The second line consists of $D$ integers $w_0, ..., w_{D-1}$ ($-100,000 \\leq w_i \\leq 100,000$ for each $i$)."}
{"name": "1019_B. The hat", "description": "Input\n\nAt the beginning the even integer n (2 ≤ n ≤ 100 000) is given — the total number of students.\n\nYou are allowed to ask no more than 60 questions."}
{"name": "1042_A. Benches", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of benches in the park.\n\nThe second line contains a single integer m (1 ≤ m ≤ 10 000) — the number of people additionally coming to the park.\n\nEach of the next n lines contains a single integer a_i (1 ≤ a_i ≤ 100) — the initial number of people on the i-th bench."}
{"name": "1086_D. Rock-Paper-Scissors Champion", "description": "Input\n\nThe first line contains two integers n and q — the number of players and requests respectively (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ q ≤ 2 ⋅ 10^5).\n\nThe second line contains a string of n characters. The i-th of these characters is \"R\", \"P\", or \"S\" if the player i was going to play \"rock\", \"paper\", or \"scissors\" before all requests respectively.\n\nThe following q lines describe the requests. The j-th of these lines contain an integer p_j and a character c_j meaning that the player p_j is going to use the shape described by the character c_j from this moment (1 ≤ p_j ≤ n)."}
{"name": "1133_E. K Balanced Teams", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 5000) — the number of students and the maximum number of teams, correspondingly.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is a programming skill of the i-th student."}
{"name": "1154_B. Make Them Equal", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the sequence a."}
{"name": "1194_F. Crossword Expert", "description": "Input\n\nThe first line contains two integers n and T (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ T ≤ 2 ⋅ 10^{14}) — the number of crosswords and the time Adilbek has to spend, respectively.\n\nThe second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^9), where t_i is the time it takes a crossword expert to solve the i-th crossword.\n\nNote that Adilbek solves the crosswords in the order they are given in the input without skipping any of them."}
{"name": "1234_B1. Social Network (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 200) — the number of messages and the number of conversations your smartphone can show.\n\nThe second line of the input contains n integers id_1, id_2, ..., id_n (1 ≤ id_i ≤ 10^9), where id_i is the ID of the friend which sends you the i-th message."}
{"name": "1276_E. Four Stones", "description": "Input\n\nThe first line contains four integers a_1, …, a_4 (-10^9 ≤ a_i ≤ 10^9) — initial coordinates of the stones. There may be multiple stones sharing the same coordinate.\n\nThe second line contains four integers b_1, …, b_4 (-10^9 ≤ b_i ≤ 10^9) — target coordinates of the stones. There may be multiple targets sharing the same coordinate."}
{"name": "1296_E2. String Coloring (hard version)", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of s.\n\nThe second line of the input contains the string s consisting of exactly n lowercase Latin letters."}
{"name": "1339_C. Powered Addition", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^{4}) — the number of test cases.\n\nThe first line of each test case contains single integer n (1 ≤ n ≤ 10^{5}) — the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, …, a_{n} (-10^{9} ≤ a_{i} ≤ 10^{9})."}
{"name": "1445_D. Divide and Sum", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 150 000).\n\nThe second line contains 2n integers a_1, a_2, …, a_{2n} (1 ≤ a_i ≤ 10^9) — elements of array a."}
{"name": "1519_C. Berland Regional", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of universities and the number of students.\n\nThe second line of each testcase contains n integers u_1, u_2, ..., u_n (1 ≤ u_i ≤ n) — the university the i-th student is enrolled at.\n\nThe third line of each testcase contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the programming skill of the i-th student.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5."}
{"name": "1546_C. AquaMoon and Strange Sort", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of Aquamoon's friends.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the numbers, written on the T-shirts.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 10^5."}
{"name": "217_E. Alien DNA", "description": "Input\n\nThe first line of input contains the original DNA sequence, consisting only of letters \"A\", \"C\", \"T\" and \"G\" and not exceeding 3·106 in length. \n\nThe second line contains a single integer k (1 ≤ k ≤ 3·106).\n\nThe third line contains a single integer n (0 ≤ n ≤ 5000) — the number of mutations. The next n lines describe the mutations in chronological order — each mutation is described by two numbers li and ri (1 ≤ li ≤ ri ≤ 109), meaning that the continuous subsequence [li, ri] has become active and cloned itself, joining itself with the mangled copy. \n\nIt is guaranteed that the input data is correct, that is, no mutation acts on non-existing elements of the DNA sequence, and the resulting DNA sequence has at least k elements.\n\nAssume that the DNA elements are indexed starting from 1 and that the notation [l, r] meaning the continuous subsequence of DNA sequence that consists of r - l + 1 elements starting at the l-th DNA sequence element and ending at the r-th DNA sequence element."}
{"name": "28_C. Bath Queue", "description": "Input\n\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 50) — the amount of students and the amount of rooms. The second line contains m integers a1, a2, ... , am (1 ≤ ai ≤ 50). ai means the amount of wash basins in the i-th room."}
{"name": "315_C. Sereja and Contest", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 2·105, - 109 ≤ k ≤ 0). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — ratings of the participants in the initial table."}
{"name": "454_B. Little Pony and Sort by Shift", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105). The second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105)."}
{"name": "476_E. Dreamoon and Strings", "description": "Input\n\nThe first line of the input contains the string s (1 ≤ |s| ≤ 2 000).\n\nThe second line of the input contains the string p (1 ≤ |p| ≤ 500).\n\nBoth strings will only consist of lower case English letters."}
{"name": "577_B. Modulo Sum", "description": "Input\n\nThe first line contains two numbers, n and m (1 ≤ n ≤ 106, 2 ≤ m ≤ 103) — the size of the original sequence and the number such that sum should be divisible by it.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109)."}
{"name": "620_D. Professor GukiZ and Two Arrays", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2000) — the number of elements in the array a.\n\nThe second line contains n integers ai ( - 109 ≤ ai ≤ 109) — the elements of the array a.\n\nThe third line contains integer m (1 ≤ m ≤ 2000) — the number of elements in the array b.\n\nThe fourth line contains m integers bj ( - 109 ≤ bj ≤ 109) — the elements of the array b."}
{"name": "75_E. Ship's Shortest Path", "description": "Input\n\nThe first line contains 4 integers, xStart, yStart, xEnd and yEnd ( - 100 ≤ xStart, yStart, xEnd, yEnd ≤ 100). The second line contains an integer n, which is the number of points in the polygon (3 ≤ n ≤ 30), followed by a line containing n pairs of integers x and y, which are the coordinates of the points ( - 100 ≤ x, y ≤ 100), the polygon points will be distinct."}
{"name": "899_C. Dividing the numbers", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 60 000) — the number of integers Petya has."}
{"name": "p00355 Reservation System", "description": "Input\n\nThe input is given in the following format.\n\n\na b\nN\ns_1 f_1\ns_2 f_2\n:\ns_N f_N\n\n\nThe first line provides new reservation information, i.e., the start time a and end time b (0 ≤ a < b ≤ 1000) in integers. The second line specifies the number of existing reservations N (0 ≤ N ≤ 100). Subsequent N lines provide temporal information for the i-th reservation: start time s_i and end time f_i (0 ≤ s_i < f_i ≤ 1000) in integers. No two existing reservations overlap."}
{"name": "p00854 And Then There Was One", "description": "Input\n\nThe input consists of multiple datasets each of which is formatted as follows.\n\n\nn k m\n\n\nThe last dataset is followed by a line containing three zeros. Numbers in a line are separated by a single space. A dataset satisfies the following conditions.\n\n2 ≤ n ≤ 10000, 1 ≤ k ≤ 10000, 1 ≤ m ≤ n\n\nThe number of datasets is less than 100."}
{"name": "1007_C. Guess two numbers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nInteraction\n\nFirst, you need to read the number n, after that you can make queries.\n\nTo make a query, print two integers: x and y (1 ≤ x, y ≤ n), then flush the output.\n\nAfter each query, read a single integer ans (0 ≤ ans ≤ 3).\n\nIf ans > 0, then it is the number of the phrase said by Vasya.\n\nIf ans = 0, it means that you win and your program should terminate.\n\nIf you make more than 600 queries or make an incorrect query, you will get Wrong Answer.\n\nYour solution will get Idleness Limit Exceeded, if you don't print anything or forget to flush the output.\n\nTo flush you need to do the following right after printing a query and a line end: \n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * For other languages see documentation. \n\n\n\nHacks format\n\nFor hacks, use the following format:\n\nIn the first line, print a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nIn the second line, print two integers a and b (1 ≤ a, b ≤ n) — the numbers which Vasya thought of.\n\nIn the third line, print a single integer m (1 ≤ m ≤ 10^5) — the number of instructions for the interactor.\n\nIn each of the next m lines, print five integers: x_i, y_i, r^{12}_i, r^{13}_i, and r^{23}_i (1 ≤ x_i, y_i ≤ n), where r^{ST}_i equals to either number S or number T.\n\nWhile answering the query x   y, the interactor finds a number i from 1 to n with the minimal value |x-x_i| + |y-y_i|. If multiple numbers can be chosen, the least i is preferred. Then the interactor answers to the query, but if there are two phrases S and T that can be given, then r^{ST}_i is chosen.\n\nFor example, the sample test data file contains the following: \n    \n    \n      \n    5  \n    2 4  \n    2  \n    2 5 1 1 2  \n    4 1 2 3 3  \n    \n\nExample\n\nInput\n\n5\n3\n3\n2\n1\n0"}
{"name": "1030_C. Vasya and Golden Ticket", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 100) — the number of digits in the ticket.\n\nThe second line contains n digits a_1 a_2 ... a_n (0 ≤ a_i ≤ 9) — the golden ticket. Digits are printed without spaces."}
{"name": "1075_B. Taxi drivers and Lyft", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n,m ≤ 10^5) — number of riders and taxi drivers.\n\nThe second line contains n + m integers x_1, x_2, …, x_{n+m} (1 ≤ x_1 < x_2 < … < x_{n+m} ≤ 10^9), where x_i is the coordinate where the i-th resident lives. \n\nThe third line contains n + m integers t_1, t_2, …, t_{n+m} (0 ≤ t_i ≤ 1). If t_i = 1, then the i-th resident is a taxi driver, otherwise t_i = 0.\n\nIt is guaranteed that the number of i such that t_i = 1 is equal to m."}
{"name": "1184_B1. The Doctor Meets Vader (Easy)", "description": "Input\n\nThe first line contains integers s and b (1 ≤ s, b ≤ 10^5), the number of spaceships and the number of bases, respectively.\n\nThe second line contains s integers a (0 ≤ a ≤ 10^9), the attacking power of each spaceship.\n\nThe next b lines contain integers d, g (0 ≤ d ≤ 10^9, 0 ≤ g ≤ 10^4), the defensive power and the gold of each base, respectively."}
{"name": "1202_A. You Are Given Two Binary Strings...", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100) — the number of queries.\n\nNext 2T lines contain a description of queries: two lines per query. The first line contains one binary string x, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nThe second line contains one binary string y, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nIt's guaranteed, that 1 ≤ f(y) ≤ f(x) (where f(x) is the integer represented by x, and f(y) is the integer represented by y), both representations don't have any leading zeroes, the total length of x over all queries doesn't exceed 10^5, and the total length of y over all queries doesn't exceed 10^5."}
{"name": "1263_E. Editor", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^6) — the number of commands. \n\nThe second line contains s — a sequence of commands. The string s consists of n characters. It is guaranteed that all characters in a string are valid commands."}
{"name": "1285_A. Mezo Playing Zoma", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 10^5) — the number of commands Mezo sends.\n\nThe second line contains a string s of n commands, each either 'L' (Left) or 'R' (Right)."}
{"name": "1328_D. Carousel", "description": "Input\n\nThe input contains one or more test cases.\n\nThe first line contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases in the test. Then q test cases follow. One test case is given on two lines.\n\nThe first line of the test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of figures in the carousel. Figures are numbered from 1 to n in order of carousel moving. Assume that after the n-th figure the figure 1 goes.\n\nThe second line of the test case contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 2 ⋅ 10^5), where t_i is the type of the animal of the i-th figure.\n\nThe sum of n over all test cases does not exceed 2⋅10^5."}
{"name": "1369_B. AccurateLee", "description": "Input\n\nThe first line contains the integer t (1 ≤ t ≤ 10^4) — the number of test cases. \n\nNext 2t lines contain test cases — one per two lines.\n\nThe first line of each test case contains the integer n (1 ≤ n ≤ 10^5) — the length of the string s.\n\nThe second line contains the binary string s. The string s is a string of length n which consists only of zeroes and ones.\n\nIt's guaranteed that sum of n over test cases doesn't exceed 10^5."}
{"name": "1413_D. Shurikens", "description": "Input\n\nThe first line contains the only integer n (1≤ n≤ 10^5) standing for the number of shurikens. \n\nThe following 2n lines describe the events in the format described above. It's guaranteed that there are exactly n events of the first type, and each price from 1 to n occurs exactly once in the events of the second type."}
{"name": "1455_D. Sequence and Swaps", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and x (1 ≤ n ≤ 500, 0 ≤ x ≤ 500) — the number of elements in the sequence and the initial value of x.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 500).\n\nThe sum of values of n over all test cases in the input does not exceed 500."}
{"name": "1506_D. Epic Transformation", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) is length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "203_C. Photographer", "description": "Input\n\nThe first line contains two integers n and d (1 ≤ n ≤ 105, 1 ≤ d ≤ 109) — the number of clients and the camera memory size, correspondingly. The second line contains two integers a and b (1 ≤ a ≤ b ≤ 104) — the size of one low quality photo and of one high quality photo, correspondingly. \n\nNext n lines describe the clients. The i-th line contains two integers xi and yi (0 ≤ xi, yi ≤ 105) — the number of low quality photos and high quality photos the i-th client wants, correspondingly. \n\nAll numbers on all lines are separated by single spaces."}
{"name": "347_D. Lucky Common Subsequence", "description": "Input\n\nThe input contains three strings in three separate lines: s1, s2 and virus (1 ≤ |s1|, |s2|, |virus| ≤ 100). Each string consists only of uppercase English letters."}
{"name": "510_E. Fox And Dinner", "description": "Input\n\nThe first line contains single integer n (3 ≤ n ≤ 200): the number of foxes in this party. \n\nThe second line contains n integers ai (2 ≤ ai ≤ 104)."}
{"name": "608_E. Marbles", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 1 000 000) — the length of the paths.\n\nThe second line of the input contains a string consisting of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string \"NNESWW\".\n\nThe third line of the input contains a string of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the second grid path."}
{"name": "702_C. Cellular Network", "description": "Input\n\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 105) — the number of cities and the number of cellular towers.\n\nThe second line contains a sequence of n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the coordinates of cities. It is allowed that there are any number of cities in the same point. All coordinates ai are given in non-decreasing order.\n\nThe third line contains a sequence of m integers b1, b2, ..., bm ( - 109 ≤ bj ≤ 109) — the coordinates of cellular towers. It is allowed that there are any number of towers in the same point. All coordinates bj are given in non-decreasing order."}
{"name": "724_D. Dense Subsequence", "description": "Input\n\nThe first line of the input contains a single integer m (1 ≤ m ≤ 100 000).\n\nThe second line contains the string s consisting of lowercase English letters. It is guaranteed that this string is non-empty and its length doesn't exceed 100 000. It is also guaranteed that the number m doesn't exceed the length of the string s."}
{"name": "769_D. k-Interesting Pairs Of Integers", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 105, 0 ≤ k ≤ 14) — the number of integers in Vasya's sequence and the number of bits in which integers in k-interesting pair should differ.\n\nThe second line contains the sequence a1, a2, ..., an (0 ≤ ai ≤ 104), which Vasya has."}
{"name": "793_D. Presents in Bankopolis", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 80) — the number of crossroads (and offices) and the number of offices Oleg wants to visit.\n\nThe second line contains single integer m (0 ≤ m ≤ 2000) — the number of bicycle lanes in Bankopolis.\n\nThe next m lines contain information about the lanes.\n\nThe i-th of these lines contains three integers ui, vi and ci (1 ≤ ui, vi ≤ n, 1 ≤ ci ≤ 1000), denoting the crossroads connected by the i-th road and its difficulty."}
{"name": "814_A. An abandoned sentiment from past", "description": "Input\n\nThe first line of input contains two space-separated positive integers n (2 ≤ n ≤ 100) and k (1 ≤ k ≤ n) — the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 200) — Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b1, b2, ..., bk (1 ≤ bi ≤ 200) — the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total."}
{"name": "83_A. Magical Array", "description": "Input\n\nThe first line of the input data contains an integer n (1 ≤ n ≤ 105). The second line contains an array of original integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109)."}
{"name": "85_B. Embassy Queue", "description": "Input\n\nThe first line contains three space-separated integers k1, k2, k3 (1 ≤ ki ≤ 109), they are the number of windows of the first, second and third type correspondingly.\n\nThe second line contains three space-separated integers t1, t2, t3 (1 ≤ ti ≤ 105), they are the periods of time needed to serve one person in the window of the first, second and third type correspondingly. \n\nThe third line contains an integer n (1 ≤ n ≤ 105), it is the number of people.\n\nThe fourth line contains n space-separated integers ci (1 ≤ ci ≤ 109) in the non-decreasing order; ci is the time when the person number i comes to the embassy."}
{"name": "984_D. XOR-pyramid", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 5000) — the length of a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2^{30}-1) — the elements of the array.\n\nThe third line contains a single integer q (1 ≤ q ≤ 100 000) — the number of queries.\n\nEach of the next q lines contains a query represented as two integers l, r (1 ≤ l ≤ r ≤ n)."}
{"name": "p01314 Sum of Consecutive Integers", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is a line of one integer N. Where 1 ≤ N ≤ 1000.\n\nThe end of the input is indicated by a single line of zeros."}
{"name": "1041_C. Coffee Break", "description": "Input\n\nThe first line contains three integers n, m, d (1 ≤ n ≤ 2⋅10^{5}, n ≤ m ≤ 10^{9}, 1 ≤ d ≤ m) — the number of coffee breaks Monocarp wants to have, the length of each working day, and the minimum number of minutes between any two consecutive coffee breaks.\n\nThe second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ m), where a_i is some minute when Monocarp wants to have a coffee break."}
{"name": "1133_A. Middle of the Contest", "description": "Input\n\nThe first line of the input contains two integers h_1 and m_1 in the format hh:mm.\n\nThe second line of the input contains two integers h_2 and m_2 in the same format (hh:mm).\n\nIt is guaranteed that 0 ≤ h_1, h_2 ≤ 23 and 0 ≤ m_1, m_2 ≤ 59.\n\nIt is guaranteed that the contest lasts an even number of minutes (i.e. m_1 \\% 2 = m_2 \\% 2, where x \\% y is x modulo y). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes."}
{"name": "1153_D. Serval and Rooted Tree", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 3⋅ 10^5), the size of the tree.\n\nThe second line contains n integers, the i-th of them represents the operation in the node i. 0 represents min and 1 represents max. If the node is a leaf, there is still a number of 0 or 1, but you can ignore it.\n\nThe third line contains n-1 integers f_2, f_3, …, f_n (1 ≤ f_i ≤ i-1), where f_i represents the parent of the node i."}
{"name": "1175_C. Electrification", "description": "Input\n\nThe first line contains single integer T ( 1 ≤ T ≤ 2 ⋅ 10^5) — number of queries. Next 2 ⋅ T lines contain descriptions of queries. All queries are independent. \n\nThe first line of each query contains two integers n, k (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k < n) — the number of points and constant k.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_1 < a_2 < ... < a_n ≤ 10^9) — points in ascending order.\n\nIt's guaranteed that ∑{n} doesn't exceed 2 ⋅ 10^5."}
{"name": "1231_E. Middle-Out", "description": "Input\n\nThe first line contains integer q (1 ≤ q ≤ 100) — the number of independent test cases in the input.\n\nEach test case is given in three lines. The first line of a test case contains n (1 ≤ n ≤ 100) — the length of the strings s and t. The second line contains s, the third line contains t. Both strings s and t have length n and contain only lowercase Latin letters.\n\nThere are no constraints on the sum of n in the test (i.e. the input with q=100 and all n=100 is allowed)."}
{"name": "1276_A. As Simple as One and Two", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Next, the test cases are given.\n\nEach test case consists of one non-empty string s. Its length does not exceed 1.5⋅10^5. The string s consists only of lowercase Latin letters.\n\nIt is guaranteed that the sum of lengths of all lines for all input data in the test does not exceed 1.5⋅10^6."}
{"name": "131_B. Opposites Attract", "description": "Input\n\nThe first line of the input data contains an integer n (1 ≤ n ≤ 105) which represents the number of registered clients of the \"Couple Matching\". The second line contains a sequence of integers t1, t2, ..., tn ( - 10 ≤ ti ≤ 10), ti — is the parameter of the i-th customer that has been assigned to the customer by the result of the analysis of his interests."}
{"name": "1360_C. Similar Pairs", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nEach test case consists of two lines.\n\nThe first line contains an even positive integer n (2 ≤ n ≤ 50) — length of array a.\n\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100)."}
{"name": "1380_D. Berserk And Fireball", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of sequence a and the length of sequence b respectively.\n\nThe second line contains three integers x, k, y (1 ≤ x, y, ≤ 10^9; 1 ≤ k ≤ n) — the cost of fireball, the range of fireball and the cost of berserk respectively.\n\nThe third line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n). It is guaranteed that all integers a_i are pairwise distinct.\n\nThe fourth line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ n). It is guaranteed that all integers b_i are pairwise distinct."}
{"name": "1400_D. Zigzags", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a single integer n (4 ≤ n ≤ 3000) — the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the array a.\n\nIt's guaranteed that the sum of n in one test doesn't exceed 3000."}
{"name": "1469_F. Power Sockets", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 2 ≤ k ≤ 10^9) — the number of chains and the minimum number of white vertices a tree should have to have a value.\n\nThe second line contains n integers l_1, l_2, ..., l_n (3 ≤ l_i ≤ 2 ⋅ 10^5) — the lengths of the chains."}
{"name": "1495_B. Let's Go Hiking", "description": "Input\n\nThe first line contains a single integer n (2≤ n≤ 10^5) — the length of the permutation.\n\nThe second line contains n distinct integers p_1,p_2,...,p_n (1≤ p_i≤ n) — the permutation."}
{"name": "240_A. Cinema", "description": "Input\n\nThe first line of the input contains two integers m and k (1 ≤ m ≤ 100, 1 ≤ k ≤ m) — the number of actors in Berland and the number of Vasya's favourite actors. \n\nThe second line contains k distinct integers ai (1 ≤ ai ≤ m) — the identifiers of Vasya's favourite actors.\n\nThe third line contains a single integer n (1 ≤ n ≤ 100) — the number of movies in Vasya's list.\n\nThen follow n blocks of lines, each block contains a movie's description. The i-th movie's description contains three lines: \n\n  * the first line contains string si (si consists of lowercase English letters and can have the length of from 1 to 10 characters, inclusive) — the movie's title, \n  * the second line contains a non-negative integer di (1 ≤ di ≤ m) — the number of actors who starred in this movie,\n  * the third line has di integers bi, j (0 ≤ bi, j ≤ m) — the identifiers of the actors who star in this movie. If bi, j = 0, than Vasya doesn't remember the identifier of the j-th actor. It is guaranteed that the list of actors for a movie doesn't contain the same actors. \n\n\n\nAll movies have distinct names. The numbers on the lines are separated by single spaces."}
{"name": "265_D. Good Sequences", "description": "Input\n\nThe input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of good integers. The second line contains a single-space separated list of good integers a1, a2, ..., an in strictly increasing order (1 ≤ ai ≤ 105; ai < ai + 1)."}
{"name": "337_A. Puzzles", "description": "Input\n\nThe first line contains space-separated integers n and m (2 ≤ n ≤ m ≤ 50). The second line contains m space-separated integers f1, f2, ..., fm (4 ≤ fi ≤ 1000) — the quantities of pieces in the puzzles sold in the shop."}
{"name": "383_A. Milking cows", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 200000). The second line contains n integers a1, a2, ..., an, where ai is 0 if the cow number i is facing left, and 1 if it is facing right."}
{"name": "431_A. Black Square", "description": "Input\n\nThe first line contains four space-separated integers a1, a2, a3, a4 (0 ≤ a1, a2, a3, a4 ≤ 104).\n\nThe second line contains string s (1 ≤ |s| ≤ 105), where the і-th character of the string equals \"1\", if on the i-th second of the game the square appears on the first strip, \"2\", if it appears on the second strip, \"3\", if it appears on the third strip, \"4\", if it appears on the fourth strip."}
{"name": "49_B. Sum", "description": "Input\n\nThe first letter contains two space-separated numbers a and b (1 ≤ a, b ≤ 1000) which represent the given summands."}
{"name": "54_B. Cutting Jigsaw Puzzle", "description": "Input\n\nThe first line contains two numbers A and B which are the sizes of the picture. They are positive integers not exceeding 20.\n\nThen follow A lines containing B symbols each, describing the actual picture. The lines only contain uppercase English letters."}
{"name": "63_D. Dividing Island", "description": "Input\n\nThe first line contains 5 space-separated integers — a, b, c, d and n (1 ≤ a, b, c, d ≤ 50, b ≠ d, 1 ≤ n ≤ 26). The second line contains n space-separated numbers. The i-th of them is equal to number xi (1 ≤ xi ≤ a × b + c × d). It is guaranteed that <image>."}
{"name": "714_D. Searching Rectangles", "description": "Input\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 216) — size of the field.\n\nFor each query an integer between 0 and 2 is returned — the number of initial rectangles that lie fully inside the query rectangle."}
{"name": "735_A. Ostap and Grasshopper", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ n - 1) — the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once."}
{"name": "75_A. Life Without Zeros", "description": "Input\n\nThe input will consist of two lines, the first line will contain the integer a, and the second line will contain the integer b which are in the equation as described above (1 ≤ a, b ≤ 109). There won't be any leading zeros in both. The value of c should be calculated as c = a + b."}
{"name": "803_D. Magazine Ad", "description": "Input\n\nThe first line contains number k (1 ≤ k ≤ 105).\n\nThe second line contains the text of the ad — non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters."}
{"name": "84_C. Biathlon", "description": "Input\n\nThe first line of the input file contains the integer n (1 ≤ n ≤ 104), which is the number of targets. The next n lines contain descriptions of the targets. Each target is a circle whose center is located on the Ox axis. Each circle is given by its coordinate of the center x ( - 2·104 ≤ x ≤ 2·104) and its radius r (1 ≤ r ≤ 1000). It is guaranteed that no two targets coincide, intersect or are nested into each other, but they can touch each other.\n\nThe next line contains integer m (1 ≤ m ≤ 2·105), which is the number of shots. Next m lines contain descriptions of the shots, which are points on the plane, given by their coordinates x and y ( - 2·104 ≤ x, y ≤ 2·104).\n\nAll the numbers in the input are integers. \n\nTargets and shots are numbered starting from one in the order of the input."}
{"name": "975_C. Valhalla Siege", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 200 000) — the number of warriors and the number of minutes in the battle.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) that represent the warriors' strengths.\n\nThe third line contains q integers k_1, k_2, …, k_q (1 ≤ k_i ≤ 10^{14}), the i-th of them represents Lagertha's order at the i-th minute: k_i arrows will attack the warriors."}
{"name": "995_B. Suit and Tie", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100), the number of pairs of people.\n\nThe second line contains 2n integers a_1, a_2, ..., a_{2n}. For each i with 1 ≤ i ≤ n, i appears exactly twice. If a_j = a_k = i, that means that the j-th and k-th people in the line form a couple."}
{"name": "p00064 Secret Number", "description": "Input\n\nSentences with embedded positive integers are given over multiple lines. Each line is a character string containing single-byte alphanumeric characters, symbols, and spaces, or a blank line. However, you are guaranteed to enter no more than 80 characters per line and a PIN of 10,000 or less."}
{"name": "p00350 String Game", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nU\nQ\nquery1\nquery2\n::\nqueryQ\n\n\nThe string length N (1 ≤ N ≤ 200000) is given on the first line, and the string U (string containing only lowercase letters) is given on the second line. The number of instructions Q (1 ≤ Q ≤ 100000) is given on the third line. The following Q line is given the i-th instruction queryi. Each queryi is given in one of the following formats:\n\n\nset x y z\n\n\nOr\n\n\ncomp a b c d\n\n\nset x y z means to replace the xth to yth characters of the string U with the specified character z. Where 1 ≤ x ≤ y ≤ N and z is lowercase.\n\ncomp abcd is a string S and a string, where S is the substring from the a to b of the string U and T is the substring of the string U from the c to the d. Represents comparing T in lexical order. Where 1 ≤ a ≤ b ≤ N and 1 ≤ c ≤ d ≤ N."}
{"name": "p00710 Hanafuda Shuffle", "description": "Input\n\nThe input consists of multiple data sets. Each data set starts with a line containing two positive integers n (1 <= n <= 50) and r (1 <= r <= 50); n and r are the number of cards in the deck and the number of cutting operations, respectively.\n\nThere are r more lines in the data set, each of which represents a cutting operation. These cutting operations are performed in the listed order. Each line contains two positive integers p and c (p + c <= n + 1). Starting from the p-th card from the top of the deck, c cards should be pulled out and put on the top.\n\nThe end of the input is indicated by a line which contains two zeros.\n\nEach input line contains exactly two integers separated by a space character. There are no other characters in the line."}
{"name": "p02288 Maximum Heap", "description": "Input\n\nIn the first line, an integer $H$ is given. In the second line, $H$ integers which represent elements in the binary heap are given in order of node id (from $1$ to $H$)."}
{"name": "1145_D. Pigeon d'Or", "description": "Input\n\nThe first line of input data contains a single integer n (5 ≤ n ≤ 10).\n\nThe second line of input data contains n space-separated integers a_i (1 ≤ a_i ≤ 32)."}
{"name": "1166_C. A Tale of Two Lands", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of choices.\n\nThe second line contains n pairwise distinct integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the choices Jose is considering."}
{"name": "1265_C. Beautiful Regional Contest", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 4⋅10^5) — the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 ≥ p_2 ≥ ... ≥ p_n.\n\nThe sum of n over all test cases in the input does not exceed 4⋅10^5."}
{"name": "1305_G. Kuroni and Antihype", "description": "Input\n\nThe first line contains a single integer n (1≤ n ≤ 2⋅ 10^5) — the number of people.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0≤ a_i ≤ 2⋅ 10^5) — the ages of the people."}
{"name": "1370_B. GCD Compression", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 1000).\n\nThe second line of each test case contains 2n integers a_1, a_2, …, a_{2n} (1 ≤ a_i ≤ 1000) — the elements of the array a."}
{"name": "1417_C. k-Amazing Numbers", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the elements of the array. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "1434_A. Perform Easily", "description": "Input\n\nThe first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.\n\nThe second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.\n\nThe third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string."}
{"name": "1509_B. TMT Document", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 5000) — the number of test cases.\n\nThe first line of each test case contains an integer n (3 ≤ n < 10^5), the number of characters in the string entered in the document. It is guaranteed that n is divisible by 3.\n\nThe second line of each test case contains a string of length n consisting of only the characters T and M.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "182_B. Vasya's Calendar", "description": "Input\n\nThe first line contains the single number d — the maximum number of the day that Vasya's clock can show (1 ≤ d ≤ 106).\n\nThe second line contains a single integer n — the number of months in the year (1 ≤ n ≤ 2000).\n\nThe third line contains n space-separated integers: ai (1 ≤ ai ≤ d) — the number of days in each month in the order in which they follow, starting from the first one."}
{"name": "279_B. Books", "description": "Input\n\nThe first line contains two integers n and t (1 ≤ n ≤ 105; 1 ≤ t ≤ 109) — the number of books and the number of free minutes Valera's got. The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 104), where number ai shows the number of minutes that the boy needs to read the i-th book."}
{"name": "301_A. Yaroslav and Sequence", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100). The second line contains (2·n - 1) integers — the array elements. The array elements do not exceed 1000 in their absolute value."}
{"name": "466_C. Number of Ways", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 5·105), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| ≤ 109) — the elements of array a."}
{"name": "567_A. Lineland Mail", "description": "Input\n\nThe first line of the input contains integer n (2 ≤ n ≤ 105) — the number of cities in Lineland. The second line contains the sequence of n distinct integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109), where xi is the x-coordinate of the i-th city. All the xi's are distinct and follow in ascending order."}
{"name": "588_C. Duff and Weight Lifting", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 106), the number of weights.\n\nThe second line contains n integers w1, ..., wn separated by spaces (0 ≤ wi ≤ 106 for each 1 ≤ i ≤ n), the powers of two forming the weights values."}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 ≤ a < b ≤ 109) — the number which Vasily has and the number he wants to have."}
{"name": "796_A. Buying A House", "description": "Input\n\nThe first line contains three integers n, m, and k (2 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ 100) — the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100) — denoting the availability and the prices of the houses.\n\nIt is guaranteed that am = 0 and that it is possible to purchase some house with no more than k dollars."}
{"name": "862_C. Mahmoud and Ehab and the xor", "description": "Input\n\nThe only line contains two integers n and x (1 ≤ n ≤ 105, 0 ≤ x ≤ 105) — the number of elements in the set and the desired bitwise-xor, respectively."}
{"name": "888_A. Local Extrema", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in array a.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of array a."}
{"name": "910_B. Door Frames", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.\n\nThe second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.\n\nThe third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame."}
{"name": "986_C. AND Graph", "description": "Input\n\nIn the first line of input there are two integers n and m (0 ≤ n ≤ 22, 1 ≤ m ≤ 2^{n}).\n\nIn the second line there are m integers a_1, a_2, …, a_m (0 ≤ a_{i} < 2^{n}) — the elements of the set. All a_{i} are distinct."}
{"name": "p00136 Frequency Distribution of Height", "description": "Input\n\nThe input is given in the following format:\n\n\nn\nh1\nh2\n::\nhn\n\n\nThe number of students n (1 ≤ n ≤ 40) is given to the first line, and the real number hi (150.0 ≤ hi ≤ 190.0, up to the first decimal place) representing the height of the i-th person is given to each line after the second line. .."}
{"name": "p01325 The Melancholy of Thomas Right", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nSum of the first line Sum of the second line ...\nSum of the first column Sum of the second column ...\n\n\nWhere N is an integer that satisfies 1 ≤ N ≤ 10000."}
{"name": "p01806 Dice Stamp", "description": "Input\n\nThe input consists of 40 or less datasets. Each data set is represented in the following format.\n\n> N\n> Information on the first dice\n> ...\n> Information on the Nth dice\n\nThe first line of input consists of one integer N representing the number of dice. You can assume that 1 ≤ N ≤ 15. After that, the information of N dice continues.\n\nThe information on each dice is expressed in the following format.\n\n> x y\n> l r f b d u\n> rot\n\nThe first line consists of two integers x and y and represents the coordinates (x, y) of the center of the square where the dice are dropped when ejected. You can assume that -1,000 ≤ x, y ≤ 1,000.\n\nThe second line consists of six integers l, r, f, b, d, u and represents the number written on each side. When dropped, l, r, f, b, d, and u face the x-axis negative direction, the x-axis positive direction, the y-axis negative direction, the y-axis positive direction, the z-axis negative direction, and the z-axis positive direction, respectively. It is the number written on the surface. We can assume that 1 ≤ l, r, f, b, d, u ≤ 100.\n\nThe third line consists of the string rot, which indicates how to rotate. rot is a character string consisting of only'L',' R',' F', and'B', and is 1 or more characters and 30 or less characters. The jth character of rot indicates the direction of the jth rotation, and when the characters are'L',' R',' F', and'B', the x-axis negative direction, the x-axis positive direction, and y, respectively. It shows that it rotates in the negative direction of the axis and the positive direction of the y-axis.\n\nThe end of the input is indicated by one line containing one zero."}
{"name": "1051_E. Vasya and Big Integers", "description": "Input\n\nThe first line contains a single integer a~(1 ≤ a ≤ 10^{1000000}).\n\nThe second line contains a single integer l~(0 ≤ l ≤ 10^{1000000}).\n\nThe third line contains a single integer r~(0 ≤ r ≤ 10^{1000000}).\n\nIt is guaranteed that l ≤ r.\n\nIt is also guaranteed that numbers a, l, r contain no leading zeros."}
{"name": "1095_F. Make It Connected", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices in the graph and the number of special offers, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{12}) — the numbers written on the vertices.\n\nThen m lines follow, each containing three integers x, y and w (1 ≤ x, y ≤ n, 1 ≤ w ≤ 10^{12}, x ≠ y) denoting a special offer: you may add an edge connecting vertex x and vertex y, and this edge will cost w coins."}
{"name": "1117_A. Best Subsegment", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 10^5) — length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the array a."}
{"name": "1479_B2. Painting the Array II", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n)."}
{"name": "1529_B. Sifid and Strange Subsequences", "description": "Input\n\nThe first line contains an integer t (1≤ t≤ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1≤ n≤ 10^5) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-10^9≤ a_i ≤ 10^9) — the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "160_B. Unlucky Ticket", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100). The second line contains a string that consists of 2n digits and defines your ticket."}
{"name": "227_D. Naughty Stone Piles", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of stone piles. The second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 109) — the initial sizes of the stone piles. \n\nThe third line contains integer q (1 ≤ q ≤ 105) — the number of queries. The last line contains q space-separated integers k1, k2, ..., kq (1 ≤ ki ≤ 105) — the values of number k for distinct queries. Note that numbers ki can repeat."}
{"name": "251_B. Playing with Permutations", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100). The second line contains n space-separated integers q1, q2, ..., qn (1 ≤ qi ≤ n) — the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\n\nIt is guaranteed that the given sequences q and s are correct permutations."}
{"name": "322_C. Ciel and Robot", "description": "Input\n\nThe first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command."}
{"name": "347_A. Difference Row", "description": "Input\n\nThe first line of the input contains integer n (2 ≤ n ≤ 100). The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 1000)."}
{"name": "586_A. Alena's Schedule", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 100) — the number of lessons at the university. \n\nThe second line contains n numbers ai (0 ≤ ai ≤ 1). Number ai equals 0, if Alena doesn't have the i-th pairs, otherwise it is equal to 1. Numbers a1, a2, ..., an are separated by spaces."}
{"name": "608_B. Hamming Distance Sum", "description": "Input\n\nThe first line of the input contains binary string a (1 ≤ |a| ≤ 200 000).\n\nThe second line of the input contains binary string b (|a| ≤ |b| ≤ 200 000).\n\nBoth strings are guaranteed to consist of characters '0' and '1' only."}
{"name": "62_A. A Student's Dream", "description": "Input\n\nThe first line contains two positive integers not exceeding 100. They are the number of fingers on the Venusian girl's left and right hand correspondingly. The second line contains two integers not exceeding 100. They are the number of fingers on the Marsian boy's left and right hands correspondingly."}
{"name": "653_G. Move by Prime", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 300 000) — the size of the array.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 300 000) — elements of the array."}
{"name": "724_A. Checking the Calendar", "description": "Input\n\nThe input consists of two lines, each of them containing the name of exactly one day of the week. It's guaranteed that each string in the input is from the set \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"."}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 ≤ a ≤ 1000) — the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 ≤ b ≤ 1000) — the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 ≤ c ≤ 1000) — the number of pears Nikolay has."}
{"name": "793_A. Oleg and shares", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the number of share prices, and the amount of rubles some price decreases each second.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the initial prices."}
{"name": "813_D. Two Melodies", "description": "Input\n\nThe first line contains one integer number n (2 ≤ n ≤ 5000).\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105) — notes written on a sheet."}
{"name": "984_A. Game", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 1000) — the number of numbers on the board.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6)."}
{"name": "p00122 Summer of Pyonkichi", "description": "Input\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\npx py\nn\nx1 y1 x2 y2 ... xn yn\n\n\nThe first line gives the abscissa px and ordinate py of the initial position of Pyonkichi. The second line gives the number of sprinklers n. The third line gives the abscissa xi and the ordinate yi of the sprinkler that operates third.\n\nThe input ends with two zero lines. The number of datasets does not exceed 20."}
{"name": "p00776 Encryption System", "description": "Input\n\nThe input consists of at most 100 datasets. Each dataset is a line containing an encrypted string. The encrypted string consists only of lowercase letters, and contains at least 1 and at most 20 characters.\n\nThe input ends with a line with a single '#' symbol."}
{"name": "p01926 Game Balance", "description": "Input\n\n> The input consists of multiple datasets. The maximum number of datasets does not exceed 50. Each dataset is represented in the following format.\n\n> N M\n> s1 s2 ... sN\n>\n\nThe first line consists of two integers N and M separated by blanks. N is the number of types of enemy monsters prepared, M is the minimum number of battles required to clear the game, and 1 ≤ N ≤ 100,000, 2 ≤ M ≤ 1,000,000.\n\n> The second line consists of N integers s1, s2, ..., sN separated by blanks, and represents the strength of each of the N types of enemy monsters. Each si satisfies 1 ≤ si ≤ 1,000,000 and si <si + 1 (1 ≤ i ≤ N-1).\n\n> The end of the input is represented by a line of two zeros separated by a blank.\n\n> ### Output\n\n> For each dataset, output the maximum value Xmax of the parameter X that requires M or more battles to clear the game as an integer. In the case of a test case where the game can be cleared in less than M battles no matter how X is set, or the game cannot be cleared, output a line consisting of only -1.\n\n> ### Sample Input\n\n\n3 4\n1 5 9\n1 2\n1\n2 10\n1 1000000\ntwenty four\n1 10\n0 0\n\n\nOutput for Sample Input\n\n\n3\n-1\n499996\nFour\n\nIn the second test case, setting X = 1 allows you to clear the game in one battle. In this case, the number of battles required is M or more, and X cannot be set so that the game can be cleared. Therefore, it outputs a line consisting of only -1.\n\n\n\n\n\nExample\n\nInput\n\n3 4\n1 5 9\n1 2\n1\n2 10\n1 1000000\n2 4\n1 10\n0 0"}
{"name": "1045_B. Space Isaac", "description": "Input\n\nThe first line contains two positive integer N (1 ≤ N ≤ 200 000) and M (N+1 ≤ M ≤ 10^{9}), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains N nonnegative integers a_1,a_2,…,a_N (0 ≤ a_1<a_2< …< a_N<M), the contents of the first bag."}
{"name": "1139_A. Even Substrings", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 65000) — the length of the string s.\n\nThe second line contains a string s of length n. The string s consists only of digits 1, 2, ..., 9."}
{"name": "1157_B. Long Number", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of digits in a.\n\nThe second line contains a string of n characters, denoting the number a. Each character is a decimal digit from 1 to 9.\n\nThe third line contains exactly 9 integers f(1), f(2), ..., f(9) (1 ≤ f(i) ≤ 9)."}
{"name": "1179_C. Serge and Dining Room", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 300\\ 000) — number of dishes and pupils respectively. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^{6}) — elements of array a. The third line contains m integers b_1, b_2, …, b_{m} (1 ≤ b_i ≤ 10^{6}) — elements of array b. The fourth line conatins integer q (1 ≤ q ≤ 300\\ 000) — number of queries.\n\nEach of the following q lines contains as follows: \n\n  * if a query changes price of some dish, it contains 1, and two integers i and x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^{6}), what means a_i becomes x. \n  * if a query changes number of togrogs of some pupil, it contains 2, and two integers i and x (1 ≤ i ≤ m, 1 ≤ x ≤ 10^{6}), what means b_i becomes x."}
{"name": "1214_F. Employment", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 200 000) — the number of cities on Earth and the number of vacancies.\n\nThe second line contains n integers a_1, a_2, a_3, …, a_n (1 ≤ a_i ≤ m) — the cities where vacancies are located.\n\nThe third line contains n integers b_1, b_2, b_3, …, b_n (1 ≤ b_i ≤ m) — the cities where the candidates live."}
{"name": "1237_H. Balanced Reversals", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000), denoting the number of test cases.\n\nEach test case consists of two lines. The first line contains a string a of length n, and the second line contains a string b of the same length (2 ≤ n ≤ 4000; n mod 2 = 0). Both strings consist of characters 0 and 1.\n\nThe sum of n over all t test cases doesn't exceed 4000."}
{"name": "1323_B. Count Subrectangles", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n, m ≤ 40 000, 1 ≤ k ≤ n ⋅ m), length of array a, length of array b and required size of subrectangles.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1), elements of a.\n\nThe third line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 1), elements of b."}
{"name": "1342_A. Road To Zero", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of testcases.\n\nThe first line of each test case contains two integers x and y (0 ≤ x, y ≤ 10^9).\n\nThe second line of each test case contains two integers a and b (1 ≤ a, b ≤ 10^9)."}
{"name": "1364_A. XXXXX", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 5) — the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains 2 integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^4) — the number of elements in the array a and the number that Ehab hates.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_{n} (0 ≤ a_i ≤ 10^4) — the elements of the array a."}
{"name": "1384_B2. Koa and the Beach (Hard Version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers n, k and l (1 ≤ n ≤ 3 ⋅ 10^5; 1 ≤ k ≤ 10^9; 1 ≤ l ≤ 10^9) — the number of meters of sea Koa measured and parameters k and l.\n\nThe second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 10^9) — the depths of each meter of sea Koa measured.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "1426_F. Number of Subsequences", "description": "Input\n\nThe first line of the input contains one integer n (3 ≤ n ≤ 200 000) — the length of s.\n\nThe second line of the input contains the string s of length n consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks\"?\"."}
{"name": "1521_E. Nastia and a Beautiful Matrix", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains 2 integers m and k (1 ≤ m, k ≤ 10^5) — how many numbers Nastia gave you and the length of the array a, respectively.\n\nThe second line of each test case contains k integers a_1, a_2, …, a_{k} (0 ≤ a_i ≤ m, a_1 + a_2 + … + a_{k} = m), where a_i is how many numbers i you have.\n\nIt's guaranteed that the sum of m and k in one test doesn't exceed 2 ⋅ 10^5."}
{"name": "1550_E. Stringforces", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 17) — the length of the string and the number of first Latin letters used.\n\nThe second line contains a string s, consisting of n characters. Each character is either one of the first k lowercase Latin letters or a question mark."}
{"name": "26_E. Multithreading", "description": "Input\n\nIn the first line of the input you will be given two space separated integers N (1 ≤ N ≤ 100) and W ( - 109 ≤ W ≤ 109). In the second line there are N space separated integers ni (1 ≤ ni ≤ 1000)."}
{"name": "340_E. Iahub and Permutations", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 2000). On the second line, there are n integers, representing Iahub's important permutation after Iahubina replaces some values with -1. \n\nIt's guaranteed that there are no fixed points in the given permutation. Also, the given sequence contains at least two numbers -1 and each positive number occurs in the sequence at most once. It's guaranteed that there is at least one suitable permutation."}
{"name": "408_D. Long Path", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 103) — the number of rooms. The second line contains n integers pi (1 ≤ pi ≤ i). Each pi denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room."}
{"name": "47_E. Cannon", "description": "Input\n\nThe first line contains integers n and V (1 ≤ n ≤ 104, 1 ≤ V ≤ 1000) which represent the number of shots and the initial speed of every ball. The second line contains n space-separated real numbers alphai (0 < alphai < π / 4) which represent the angles in radians at which the cannon will fire. The third line contains integer m (1 ≤ m ≤ 105) which represents the number of walls. Then follow m lines, each containing two real numbers xi and yi (1 ≤ xi ≤ 1000, 0 ≤ yi ≤ 1000) which represent the wall’s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide."}
{"name": "601_D. Acyclic Organic Compounds", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 300 000) — the number of vertices of the tree.\n\nThe second line contains n space-separated integers ci (0 ≤ ci ≤ 109).\n\nThe third line contains a string s consisting of n lowercase English letters — the i-th character of this string is the letter in vertex i.\n\nThe following n - 1 lines describe the tree T. Each of them contains two space-separated integers u and v (1 ≤ u, v ≤ n) indicating an edge between vertices u and v.\n\nIt's guaranteed that the input will describe a tree."}
{"name": "672_D. Robin Hood", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 500 000, 0 ≤ k ≤ 109) — the number of citizens in Kekoland and the number of days left till Robin Hood's retirement.\n\nThe second line contains n integers, the i-th of them is ci (1 ≤ ci ≤ 109) — initial wealth of the i-th person."}
{"name": "697_F. Legen...", "description": "Input\n\nThe first line of input contains two integers n and l (1 ≤ n ≤ 200, 1 ≤ l ≤ 1014) — the number of pickup lines and the maximum length of Barney's text.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), meaning that Nora's happiness level increases by ai after every time seeing i-th pickup line.\n\nThe next n lines contain the pickup lines. i-th of them contains a single string si consisting of only English lowercase letter. Summary length of all pickup lines does not exceed 200.\n\nAll strings are not empty."}
{"name": "808_C. Tea Party", "description": "Input\n\nThe first line contains two integer numbers n and w (1 ≤ n ≤ 100, <image>).\n\nThe second line contains n numbers a1, a2, ..., an (1 ≤ ai ≤ 100)."}
{"name": "832_D. Misha, Grisha and Underground", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of stations and the number of days.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 ≤ pi ≤ n). The integer pi means that there is a route between stations pi and i. It is guaranteed that it's possible to reach every station from any other.\n\nThe next q lines contains three integers a, b and c each (1 ≤ a, b, c ≤ n) — the ids of stations chosen by boys for some day. Note that some of these ids could be same."}
{"name": "877_F. Ann and Books", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000,  - 109 ≤ k ≤ 109) — the number of books and the needed difference between the number of math problems and the number of economics problems.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 2), where ti is 1 if the i-th book is on math or 2 if the i-th is on economics.\n\nThe third line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), where ai is the number of problems in the i-th book.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 100 000) — the number of assumptions.\n\nEach of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) describing the i-th Ann's assumption."}
{"name": "901_B. GCD of Polynomials", "description": "Input\n\nYou are given a single integer n (1 ≤ n ≤ 150) — the number of steps of the algorithm you need to reach."}
{"name": "999_D. Equalize the Remainders", "description": "Input\n\nThe first line of input contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ n). It is guaranteed that m is a divisor of n.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), the elements of the array."}
{"name": "p00220 Binary Digit A Doctor Loved", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single negative real line. One real number n is given to one row for each dataset.\n\nThe number of datasets does not exceed 1200."}
{"name": "p00874 Cubist Artwork", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\nw d\nh1 h2 ... hw\nh'1 h'2 ... h'd\n\n\nThe integers w and d separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 ≤ w ≤ 10 and 1 ≤ d ≤ 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers hi (1 ≤ hi ≤ 20, 1 ≤ i ≤ w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front). The integers hi (1 ≤ hi ≤ 20, 1 ≤ i ≤ d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side)."}
{"name": "p01137 Space Coconut Grab", "description": "Input\n\nThe input consists of multiple datasets. Each dataset consists of only one row and contains one positive integer e (e ≤ 1,000,000). This represents the energy when the space coconut crab rushes into hyperspace. The input ends when e = 0, which is not included in the dataset."}
{"name": "1004_D. Sonya and Matrix", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 10^6) — the number of cells in the matrix.\n\nThe second line contains t integers a_1, a_2, …, a_t (0≤ a_i< t) — the values in the cells in arbitrary order."}
{"name": "1092_D2. Great Vova Wall (Version 2)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of parts in the wall.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial heights of the parts of the wall."}
{"name": "1111_C. Creative Snap", "description": "Input\n\nThe first line contains four integers n, k, A and B (1 ≤ n ≤ 30, 1 ≤ k ≤ 10^5, 1 ≤ A,B ≤ 10^4), where 2^n is the length of the base, k is the number of avengers and A and B are the constants explained in the question.\n\nThe second line contains k integers a_{1}, a_{2}, a_{3}, …, a_{k} (1 ≤ a_{i} ≤ 2^n), where a_{i} represents the position of avenger in the base."}
{"name": "1282_B1. K for the Price of One (Easy Version)", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test.\n\nThe next lines contain a description of t test cases. \n\nThe first line of each test case contains three integers n, p, k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ p ≤ 2⋅10^9, k=2) — the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them.\n\nThe second line of each test case contains n integers a_i (1 ≤ a_i ≤ 10^4) — the prices of goods.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5. It is guaranteed that in this version of the problem k=2 for all test cases."}
{"name": "1366_G. Construct the String", "description": "Input\n\nThe input consists of two lines: the first one contains s — a string consisting of lowercase Latin letters and dots, the second one contains t — a string consisting of lowercase Latin letters (1 ≤ |t| ≤ |s| ≤ 10000).\n\nAdditional constraint on the input: it is possible to remove some number of characters from s so that f(s) = t."}
{"name": "1476_C. Longest Simple Cycle", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (2 ≤ n ≤ 10^5) — the number of chains you have.\n\nThe second line of each test case contains n integers c_1, c_2, ..., c_n (2 ≤ c_i ≤ 10^9) — the number of vertices in the corresponding chains.\n\nThe third line of each test case contains n integers a_1, a_2, ..., a_n (a_1 = -1; 1 ≤ a_i ≤ c_{i - 1}).\n\nThe fourth line of each test case contains n integers b_1, b_2, ..., b_n (b_1 = -1; 1 ≤ b_i ≤ c_{i - 1}).\n\nBoth a_1 and b_1 are equal to -1, they aren't used in graph building and given just for index consistency. It's guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1501_B. Napoleon Cake", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 20 000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of layers in the cake.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ n) — the amount of cream poured on the cake after adding each layer.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "158_B. Taxi", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of groups of schoolchildren. The second line contains a sequence of integers s1, s2, ..., sn (1 ≤ si ≤ 4). The integers are separated by a space, si is the number of children in the i-th group."}
{"name": "224_D. Two Strings", "description": "Input\n\nThe first line contains string s, the second line contains string t. Each line consists only of lowercase English letters. The given strings are non-empty, the length of each string does not exceed 2·105."}
{"name": "249_B. Sweets for Everyone!", "description": "Input\n\nThe first line of the input contains two space-separated integers n and t (2 ≤ n ≤ 5·105, 1 ≤ t ≤ 109). The second line of the input contains n characters, the i-th of them equals \"H\" (if the i-th segment contains a house), \"S\" (if the i-th segment contains a shop) or \".\" (if the i-th segment doesn't contain a house or a shop). \n\nIt is guaranteed that there is at least one segment with a house."}
{"name": "296_E. Greg and Friends", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 50, 1 ≤ k ≤ 5000) — the number of people, including Greg, and the boat's weight limit. The next line contains n integers — the people's weights. A person's weight is either 50 kilos or 100 kilos.\n\nYou can consider Greg and his friends indexed in some way."}
{"name": "31_C. Schedule", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 5000) — amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 ≤ li < ri ≤ 106) — starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1)."}
{"name": "583_B. Robot's Task", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 1000). The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai < n), separated by a space. It is guaranteed that there exists a way for robot to collect all pieces of the information."}
{"name": "677_A. Vanya and Fence", "description": "Input\n\nThe first line of the input contains two integers n and h (1 ≤ n ≤ 1000, 1 ≤ h ≤ 1000) — the number of friends and the height of the fence, respectively.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 2h), the i-th of them is equal to the height of the i-th person."}
{"name": "721_C. Journey", "description": "Input\n\nThe first line of the input contains three integers n, m and T (2 ≤ n ≤ 5000, 1 ≤ m ≤ 5000, 1 ≤ T ≤ 109) — the number of showplaces, the number of roads between them and the time of Irina's stay in Berlatov respectively.\n\nThe next m lines describes roads in Berlatov. i-th of them contains 3 integers ui, vi, ti (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ti ≤ 109), meaning that there is a road starting from showplace ui and leading to showplace vi, and Irina spends ti time units to pass it. It is guaranteed that the roads do not form cyclic routes.\n\nIt is guaranteed, that there is at most one road between each pair of showplaces."}
{"name": "743_A. Vladik and flights", "description": "Input\n\nThe first line contains three integers n, a, and b (1 ≤ n ≤ 105, 1 ≤ a, b ≤ n) — the number of airports, the id of the airport from which Vladik starts his route and the id of the airport which he has to reach. \n\nThe second line contains a string with length n, which consists only of characters 0 and 1. If the i-th character in this string is 0, then i-th airport belongs to first company, otherwise it belongs to the second."}
{"name": "766_C. Mahmoud and a Message", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 103) denoting the length of the message.\n\nThe second line contains the message s of length n that consists of lowercase English letters.\n\nThe third line contains 26 integers a1, a2, ..., a26 (1 ≤ ax ≤ 103) — the maximum lengths of substring each letter can appear in."}
{"name": "810_D. Glad to see you!", "description": "Input\n\nThere are two numbers n and k (2 ≤ k ≤ n ≤ 105) in the single line of input denoting the number of dishes in the menu and the number of dishes Noora ordered."}
{"name": "837_A. Text Volume", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 200) — length of the text.\n\nThe second line contains text of single-space separated words s1, s2, ..., si, consisting only of small and capital Latin letters."}
{"name": "856_C. Eleventh Birthday", "description": "Input\n\nInput data contains multiple test cases. The first line of the input data contains an integer t — the number of test cases (1 ≤ t ≤ 100). The descriptions of test cases follow.\n\nEach test is described by two lines.\n\nThe first line contains an integer n (1 ≤ n ≤ 2000) — the number of cards in Borya's present.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — numbers written on the cards.\n\nIt is guaranteed that the total number of cards in all tests of one input data doesn't exceed 2000."}
{"name": "883_C. Downloading B++", "description": "Input\n\nThe first line contains three integer numbers f, T and t0 (1 ≤ f, T, t0 ≤ 107) — size of the file to download (in bytes), maximal time to download the file (in milliseconds) and number of milliseconds to download one byte using the regular internet tariff.\n\nThe second line contains a description of the first additional package. The line contains three integer numbers a1, t1 and p1 (1 ≤ a1, t1, p1 ≤ 107), where a1 is maximal sizes of downloaded data (in bytes), t1 is time to download one byte (in milliseconds), p1 is price of the package (in burles).\n\nThe third line contains a description of the second additional package. The line contains three integer numbers a2, t2 and p2 (1 ≤ a2, t2, p2 ≤ 107), where a2 is maximal sizes of downloaded data (in bytes), t2 is time to download one byte (in milliseconds), p2 is price of the package (in burles).\n\nPolycarp can buy any package many times. Once package is bought it replaces the regular tariff until package data limit is completely used. While a package is in use Polycarp can't buy another package or switch back to the regular internet tariff."}
{"name": "906_C. Party", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 22; <image>) — the number of guests at the party (including Arseny) and the number of pairs of people which are friends.\n\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected."}
{"name": "926_E. Merge Equal Elements", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 2·105) — the number of elements in the sequence.\n\nThe second line contains the sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "p00892 Intersection of Two Prisms", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is less than 200.\n\nEach dataset is formatted as follows.\n\nm n\nx11 y11\nx12 y12\n.\n.\n.\nx1m y1m\nx21 z21\nx22 z22\n.\n.\n.\nx2n z2n\n\n\nm and n are integers (3 ≤ m ≤ 100, 3 ≤ n ≤ 100) which represent the numbers of the vertices of the polygons, C1 and C2, respectively.\n\nx1i, y1i, x2j and z2j are integers between -100 and 100, inclusive. (x1i, y1i) and (x2j , z2j) mean the i-th and j-th vertices' positions of C1 and C2 respectively.\n\nThe sequences of these vertex positions are given in the counterclockwise order either on the xy-plane or the xz-plane as in Figure I.1.\n\nYou may assume that all the polygons are convex, that is, all the interior angles of the polygons are less than 180 degrees. You may also assume that all the polygons are simple, that is, each polygon's boundary does not cross nor touch itself.\n\nThe end of the input is indicated by a line containing two zeros."}
{"name": "p01624 Ononokomachi's Edit War", "description": "Input\n\nThe input consists of multiple datasets. Each dataset represents the number of edits and formulas determined by the servant in one game, and the format is as follows.\n\n\nN Expression\n\n\nN is the number of edits decided by the servant, and 1 ≤ N ≤ 11 can be assumed. Expression is the formula decided by the servant, \"(\", \")\", \"*\", \"+\", It is given as a non-empty string of 7 characters or less, consisting of only 18 characters of \"-\", \"&\", \"^\", \"|\", \"0\"-\"9\". It can be assumed that only valid formulas are given, not invalid formulas.\n\nAt the end of the input,\n\n\n0 #\n\n\nRepresented by.\n\nIt can be assumed that the number of data sets is 99 or less."}
{"name": "1130_A. Be Positive", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_n (-10^3 ≤ a_i ≤ 10^3)."}
{"name": "1172_C1. Nauuo and Pictures (easy version)", "description": "Input\n\nThe first line contains two integers n and m (1≤ n≤ 50, 1≤ m≤ 50) — the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,…,a_n (a_i is either 0 or 1) — if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n integers w_1,w_2,…,w_n (1≤ w_i≤50) — the initial weights of the pictures."}
{"name": "1228_B. Filling the Grid", "description": "Input\n\nThe first line contains two integers h and w (1 ≤ h, w ≤ 10^{3}) — the height and width of the grid.\n\nThe second line contains h integers r_{1}, r_{2}, …, r_{h} (0 ≤ r_{i} ≤ w) — the values of r.\n\nThe third line contains w integers c_{1}, c_{2}, …, c_{w} (0 ≤ c_{j} ≤ h) — the values of c."}
{"name": "1270_B. Interesting Subarray", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 10 000). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (2≤ n ≤ 2⋅ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0≤ a_i ≤ 10^9) — the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1292_F. Nora's Toy Boxes", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 60), denoting the number of boxes.\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 60), where a_i is the label of the i-th box."}
{"name": "1399_A. Remove Smallest", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the i-th element of a."}
{"name": "1467_D. Sum of Paths", "description": "Input\n\nThe first line of the input contains three space-separated integers n, k and q (2 ≤ n ≤ 5000; 1 ≤ k ≤ 5000; 1 ≤ q ≤ 2 ⋅ 10^5).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nq lines follow. Each line contains two space-separated integers i and x (1 ≤ i ≤ n; 1 ≤ x ≤ 10^9) indicating that you must change the value of a_i to x."}
{"name": "1491_G. Switch and Flip", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of coins.\n\nThe second line contains n integers c_1,c_2,...,c_n (1 ≤ c_i ≤ n, c_i ≠ c_j for i≠ j)."}
{"name": "1514_D. Cut and Stick", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n,q ≤ 3 ⋅ 10^5) — the length of the array a and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_i ≤ n) — the elements of the array a.\n\nEach of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the range of this query."}
{"name": "356_B. Xenia and Hamming", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1012). The second line contains a non-empty string x. The third line contains a non-empty string y. Both strings consist of at most 106 lowercase English letters.\n\nIt is guaranteed that strings a and b that you obtain from the input have the same length."}
{"name": "37_A. Towers", "description": "Input\n\nThe first line contains an integer N (1 ≤ N ≤ 1000) — the number of bars at Vasya’s disposal. The second line contains N space-separated integers li — the lengths of the bars. All the lengths are natural numbers not exceeding 1000."}
{"name": "51_D. Geometrical problem", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the given sequence. The second line contains the given sequence. The numbers are space-separated. All the elements of the given sequence are integers and their absolute value does not exceed 104."}
{"name": "573_B. Bear and Blocks", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers."}
{"name": "689_A. Mike and Cellphone", "description": "Input\n\nThe first line of the input contains the only integer n (1 ≤ n ≤ 9) — the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in."}
{"name": "731_E. Funny Game", "description": "Input\n\nThe first line of input contains a single integer n (2 ≤ n ≤ 200 000) — the number of stickers, initially located on the wall.\n\nThe second line contains n integers a1, a2, ..., an ( - 10 000 ≤ ai ≤ 10 000) — the numbers on stickers in order from left to right."}
{"name": "777_A. Shell Game", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 2·109) — the number of movements made by the operator.\n\nThe second line contains a single integer x (0 ≤ x ≤ 2) — the index of the shell where the ball was found after n movements."}
{"name": "847_F. Berland Elections", "description": "Input\n\nThe first line contains four integers n, k, m and a (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ a ≤ m) — the number of candidates, the number of seats in the parliament, the number of Berland citizens and the number of citizens who already have voted.\n\nThe second line contains a sequence of a integers g1, g2, ..., ga (1 ≤ gj ≤ n), where gj is the candidate for which the j-th citizen has voted. Citizens who already voted are numbered in increasing order of voting times."}
{"name": "869_A. The Artful Expedient", "description": "Input\n\nThe first line of input contains a positive integer n (1 ≤ n ≤ 2 000) — the length of both sequences.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (1 ≤ xi ≤ 2·106) — the integers finally chosen by Koyomi.\n\nThe third line contains n space-separated integers y1, y2, ..., yn (1 ≤ yi ≤ 2·106) — the integers finally chosen by Karen.\n\nInput guarantees that the given 2n integers are pairwise distinct, that is, no pair (i, j) (1 ≤ i, j ≤ n) exists such that one of the following holds: xi = yj; i ≠ j and xi = xj; i ≠ j and yi = yj."}
{"name": "916_A. Jamie and Alarm Snooze", "description": "Input\n\nThe first line contains a single integer x (1 ≤ x ≤ 60).\n\nThe second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59)."}
{"name": "939_B. Hamster Farm", "description": "Input\n\nThe first line contains two integers N and K (0 ≤ N ≤ 1018, 1 ≤ K ≤ 105) — the number of hamsters that will grow up on Dima's farm and the number of types of boxes that the factory produces.\n\nThe second line contains K integers a1, a2, ..., aK (1 ≤ ai ≤ 1018 for all i) — the capacities of boxes."}
{"name": "p00042 A Thief", "description": "Input\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nW\nN\nv1, w1\nv2, w2\n::\nvN, wN\n\n\nThe first line gives the integer W (W ≤ 1,000), which represents the weight that the furoshiki can bear, and the second line gives the number of treasures N (1 ≤ N ≤ 1,000). The next N lines are given a set of the integer vi (0 ≤ vi ≤ 10,000) representing the value of the i-th treasure and the integer wi (0 ≤ wi ≤ W) representing its weight.\n\nWhen W is 0, it is the last input. The number of datasets does not exceed 50."}
{"name": "p01093 Selection of Participants of an Experiment", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\nn\na1 a2 … an\n\nA dataset consists of two lines. The number of students n is given in the first line. n is an integer satisfying 2 ≤ n ≤ 1000. The second line gives scores of n students. ai (1 ≤ i ≤ n) is the score of the i-th student, which is a non-negative integer not greater than 1,000,000.\n\nThe end of the input is indicated by a line containing a zero. The sum of n's of all the datasets does not exceed 50,000."}
{"name": "106_A. Card Game", "description": "Input\n\nThe first line contains the tramp suit. It is \"S\", \"H\", \"D\" or \"C\".\n\nThe second line contains the description of the two different cards. Each card is described by one word consisting of two symbols. The first symbol stands for the rank (\"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\" and \"A\"), and the second one stands for the suit (\"S\", \"H\", \"D\" and \"C\")."}
{"name": "1139_F. Dish Shopping", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the number of dishes available in the city and the number of people living in the city.\n\nThe second line contains n integers p_i (1 ≤ p_i ≤ 10^9), the price of each dish.\n\nThe third line contains n integers s_i (1 ≤ s_i ≤ 10^9), the standard of each dish.\n\nThe fourth line contains n integers b_i (1 ≤ b_i ≤ 10^9), the beauty of each dish.\n\nThe fifth line contains m integers inc_j (1 ≤ inc_j ≤ 10^9), the income of every person.\n\nThe sixth line contains m integers pref_j (1 ≤ pref_j ≤ 10^9), the preferred beauty of every person.\n\nIt is guaranteed that for all integers i from 1 to n, the following condition holds: p_i ≤ s_i."}
{"name": "1157_F. Maximum Balanced Circle", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of people.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the height of the i-th person."}
{"name": "1215_C. Swap Letters", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^{5}) — the length of s and t.\n\nThe second line contains one string s consisting of n characters \"a\" and \"b\". \n\nThe third line contains one string t consisting of n characters \"a\" and \"b\"."}
{"name": "1238_E. Keyboard Purchase", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 20).\n\nThe second line contains the string s consisting of n characters. Each character is one of the first m Latin letters (lowercase)."}
{"name": "1256_F. Equalizing Two Strings", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases. Then q test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of s and t.\n\nThe second line of the test case contains one string s consisting of n lowercase Latin letters.\n\nThe third line of the test case contains one string t consisting of n lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1280_A. Cut and Paste", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 1000) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nThe first line of each test case contains a single integer x (1 ≤ x ≤ 10^6). The second line of each test case consists of the initial string s (1 ≤ |s| ≤ 500). It is guaranteed, that s consists of the characters \"1\", \"2\", \"3\".\n\nIt is guaranteed that the sum of x in a single file is at most 10^6. It is guaranteed that in each test case before the procedure will stop it will be true that ℓ ≤ |s| at any time."}
{"name": "1324_A. Yet Another Tetris Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe next 2t lines describe test cases. The first line of the test case contains one integer n (1 ≤ n ≤ 100) — the number of columns in the Tetris field. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the initial height of the i-th column of the Tetris field."}
{"name": "1342_F. Make It Ascending", "description": "Input\n\nThe first line contains one integer T (1 ≤ T ≤ 10000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 15) — the number of elements in the initial array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nIt is guaranteed that: \n\n  * the number of test cases having n ≥ 5 is not greater than 5000; \n  * the number of test cases having n ≥ 8 is not greater than 500; \n  * the number of test cases having n ≥ 10 is not greater than 100; \n  * the number of test cases having n ≥ 11 is not greater than 50; \n  * the number of test cases having n ≥ 12 is not greater than 25; \n  * the number of test cases having n ≥ 13 is not greater than 10; \n  * the number of test cases having n ≥ 14 is not greater than 3; \n  * the number of test cases having n ≥ 15 is not greater than 1."}
{"name": "1385_A. Three Pairwise Maximums", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains three integers x, y, and z (1 ≤ x, y, z ≤ 10^9)."}
{"name": "1474_C. Array Destruction", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (1 ≤ n ≤ 1000).\n\nThe second line of each test case contains 2n integers a_1, a_2, ..., a_{2n} (1 ≤ a_i ≤ 10^6) — the initial array a.\n\nIt is guaranteed that the total sum of n over all test cases doesn't exceed 1000."}
{"name": "149_E. Martian Strings", "description": "Input\n\nThe first line contains a non-empty string s consisting of uppercase Latin letters. The strings' length is n (2 ≤ n ≤ 105). The second line contains an integer m (1 ≤ m ≤ 100) — the number of beautiful words. Next m lines contain the beautiful words pi, consisting of uppercase Latin letters. Their length is from 1 to 1000. All beautiful strings are pairwise different."}
{"name": "222_A. Shooshuns and Sequence ", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 105).\n\nThe second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 105) — the sequence that the shooshuns found."}
{"name": "317_E. Princess and Her Shadow", "description": "Input\n\nFirst line of the input contains the coordinates of the characters vx, vy, sx, sy and the number of trees m (0 ≤ m ≤ 400). The following m lines contain the coordinates of the trees.\n\nAll the coordinates are integers between -100 and 100, inclusive. The Princess, The Shadow and the trees are located in the different cells."}
{"name": "365_B. The Fibonacci Segment", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains integers: a1, a2, ..., an (0 ≤ ai ≤ 109)."}
{"name": "389_A. Fox and Number Game", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100). Then the second line contains n integers: x1, x2, ..., xn (1 ≤ xi ≤ 100)."}
{"name": "580_E. Kefa and Watch", "description": "Input\n\nThe first line of the input contains three positive integers n, m and k (1 ≤ n ≤ 105, 1 ≤ m + k ≤ 105) — the length of the serial number, the number of change made by Kefa and the number of quality checks.\n\nThe second line contains a serial number consisting of n digits.\n\nThen m + k lines follow, containing either checks or changes. \n\nThe changes are given as 1 l r c (1 ≤ l ≤ r ≤ n, 0 ≤ c ≤ 9). That means that Kefa changed all the digits from the l-th to the r-th to be c. \n\nThe checks are given as 2 l r d (1 ≤ l ≤ r ≤ n, 1 ≤ d ≤ r - l + 1)."}
{"name": "673_D. Bear and Two Paths", "description": "Input\n\nThe first line of the input contains two integers n and k (4 ≤ n ≤ 1000, n - 1 ≤ k ≤ 2n - 2) — the number of cities and the maximum allowed number of roads, respectively.\n\nThe second line contains four distinct integers a, b, c and d (1 ≤ a, b, c, d ≤ n)."}
{"name": "740_C. Alyona and mex", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105).\n\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), that describe the subarray a[li], a[li + 1], ..., a[ri]."}
{"name": "764_B. Timofey and cubes", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 2·105) — the number of cubes.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109), where ai is the number written on the i-th cube after Dima has changed their order."}
{"name": "809_A. Do you want a date?", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3·105) denoting the number of hacked computers.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 109) denoting the coordinates of hacked computers. It is guaranteed that all xi are distinct."}
{"name": "902_B. Coloring a Tree", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 104) — the number of vertices in the tree.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 ≤ pi < i), where pi means that there is an edge between vertices i and pi.\n\nThe third line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ n), where ci is the color you should color the i-th vertex into.\n\nIt is guaranteed that the given graph is a tree."}
{"name": "p00603 Riffle Shuffle", "description": "Input\n\nThe input consists of multiple data sets. Each data set starts with a line containing two positive integers n(1 ≤ n ≤ 50) and r(1 ≤ r ≤ 50); n and r are the number of cards in the deck and the number of riffle operations, respectively.\n\nr more positive integers follow, each of which represents a riffle operation. These riffle operations are performed in the listed order. Each integer represents c, which is explained above.\n\nThe end of the input is indicated by EOF. The number of data sets is less than 100."}
{"name": "p00740 Next Mayor", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is a line containing two integers n and p separated by a single space. The integer n is the number of the candidates including the current mayor, and the integer p is the total number of the pebbles initially put in the bowl. You may assume 3 ≤ n ≤ 50 and 2 ≤ p ≤ 50.\n\nWith the settings given in the input datasets, the game will end within 1000000 (one million) steps.\n\nThe end of the input is indicated by a line containing two zeros separated by a single space."}
{"name": "p01757 Tournament", "description": "Input\n\nThe \"ranking table received from the manager\" is given to the input in the following format.\n\n\nn m\na0 a1 .. .am\nb0 b1 ... bm−1\n\n\n* The first line consists of two integers, n and m, where 2n is the \"number of participating teams in the district tournament\" and m is the \"number of sections in which consecutive rankings are lined up in the\" standings received from the manager \"\". Represents.\n* The second line consists of m + 1 integers of ai (0 ≤ i ≤ m), and each ai represents \"the division position of the section where consecutive rankings are lined up in the'ranking table received from the manager'\". ..\n* The third line consists of m integers of bi (0 ≤ i <m), and each 2bi represents \"the ranking of teams whose team numbers are greater than or equal to ai and less than ai + 1 in the standings received from the manager\". ..\n\n\n\nConstraints\n\n* 1 ≤ n ≤ 30\n* 1 ≤ m ≤ 10,000\n* 0 = a0 <a1 ≤ ... ≤ am−1 <am = 2n\n* 0 ≤ bi ≤ n"}
{"name": "1055_E. Segments on the Line", "description": "Input\n\nThe first line contains four integers n, s, m and k (1 ≤ m ≤ s ≤ 1500, 1 ≤ k ≤ n ≤ 1500) — the size of the list, the number of segments, the number of segments to choose and the statistic number.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the values of the numbers in the list.\n\nEach of the next s lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — the endpoints of the segments.\n\nIt is possible that some segments coincide."}
{"name": "1077_F1. Pictures with Kittens (easy version)", "description": "Input\n\nThe first line of the input contains three integers n, k and x (1 ≤ k, x ≤ n ≤ 200) — the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the beauty of the i-th picture."}
{"name": "1146_C. Tree Diameter", "description": "Input\n\n\n2\n5\n9\n6\n10\n9\n10\n2\n99"}
{"name": "1307_E. Cow and Treats", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 5000, 1 ≤ m ≤ 5000) — the number of units of grass and the number of cows. \n\nThe second line contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ n) — the sweetness values of the grass.\n\nThe i-th of the following m lines contains two integers f_i and h_i (1 ≤ f_i, h_i ≤ n) — the favorite sweetness and hunger value of the i-th cow. No two cows have the same hunger and favorite sweetness simultaneously."}
{"name": "1330_E. Drazil Likes Heap", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 70 000): the number of test cases.\n\nEach test case contain two lines. The first line contains two integers h and g (1 ≤ g < h ≤ 20). The second line contains n = 2^h-1 distinct positive integers a[1], a[2], …, a[n] (1 ≤ a[i] < 2^{20}). For all i from 2 to 2^h - 1, a[i] < a[\\left ⌊{i/2}\\right ⌋].\n\nThe total sum of n is less than 2^{20}."}
{"name": "1418_C. Mortal Kombat Tower", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of bosses. The second line of the test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1), where a_i is the type of the i-th boss.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "145_E. Lucky Queries", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 106, 1 ≤ m ≤ 3·105) — the length of the string s and the number of queries correspondingly. The second line contains n lucky digits without spaces — Petya's initial string. Next m lines contain queries in the form described in the statement."}
{"name": "1486_A. Shifting Stacks", "description": "Input\n\nFirst line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100). The second line of each test case contains n integers h_i (0 ≤ h_i ≤ 10^9) — starting heights of the stacks.\n\nIt's guaranteed that the sum of all n does not exceed 10^4."}
{"name": "1536_C. Diluc and Kaeya", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the length of the wood.\n\nThe second line of each test case contains a string s of length n. Every character of s will be either 'D' or 'K'.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 ⋅ 10^5."}
{"name": "163_B. Lemmings", "description": "Input\n\nThe first line contains space-separated integers n, k and h (1 ≤ k ≤ n ≤ 105, 1 ≤ h ≤ 104) — the total number of lemmings, the number of ledges and the distance between adjacent ledges.\n\nThe second line contains n space-separated integers m1, m2, ..., mn (1 ≤ mi ≤ 109), where mi is the weight of i-th lemming.\n\nThe third line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 109), where vi is the speed of i-th lemming."}
{"name": "27_C. Unordered Subsequence", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 105). The second line contains n space-separated integers — the given sequence. All numbers in this sequence do not exceed 106 by absolute value."}
{"name": "350_A. TL", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 100). The second line contains n space-separated positive integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b1, b2, ..., bm (1 ≤ bi ≤ 100) — the running time of each of m wrong solutions in seconds."}
{"name": "445_C. DZY Loves Physics", "description": "Input\n\nThe first line contains two space-separated integers n (1 ≤ n ≤ 500), <image>. Integer n represents the number of nodes of the graph G, m represents the number of edges.\n\nThe second line contains n space-separated integers xi (1 ≤ xi ≤ 106), where xi represents the value of the i-th node. Consider the graph nodes are numbered from 1 to n.\n\nEach of the next m lines contains three space-separated integers ai, bi, ci (1 ≤ ai < bi ≤ n; 1 ≤ ci ≤ 103), denoting an edge between node ai and bi with value ci. The graph won't contain multiple edges."}
{"name": "467_D. Fedor and Essay", "description": "Input\n\nThe first line contains a single integer m (1 ≤ m ≤ 105) — the number of words in the initial essay. The second line contains words of the essay. The words are separated by a single space. It is guaranteed that the total length of the words won't exceed 105 characters.\n\nThe next line contains a single integer n (0 ≤ n ≤ 105) — the number of pairs of words in synonym dictionary. The i-th of the next n lines contains two space-separated non-empty words xi and yi. They mean that word xi can be replaced with word yi (but not vise versa). It is guaranteed that the total length of all pairs of synonyms doesn't exceed 5·105 characters.\n\nAll the words at input can only consist of uppercase and lowercase letters of the English alphabet."}
{"name": "705_D. Ant Man", "description": "Input\n\nThe first line of the input contains three integers n, s and e (2 ≤ n ≤ 5000, 1 ≤ s, e ≤ n, s ≠ e) — the total number of chairs, starting and ending positions of Scott.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ x1 < x2 < ... < xn ≤ 109).\n\nThe third line contains n integers a1, a2, ..., an (1 ≤ a1, a2, ..., an ≤ 109).\n\nThe fourth line contains n integers b1, b2, ..., bn (1 ≤ b1, b2, ..., bn ≤ 109).\n\nThe fifth line contains n integers c1, c2, ..., cn (1 ≤ c1, c2, ..., cn ≤ 109).\n\nThe sixth line contains n integers d1, d2, ..., dn (1 ≤ d1, d2, ..., dn ≤ 109)."}
{"name": "729_A. Interview with Oleg", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters."}
{"name": "888_G. Xor-MST", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 200000) — the number of vertices in the graph.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai < 230) — the numbers assigned to the vertices."}
{"name": "911_E. Stack Sorting", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p1, p2, ..., pk (1 ≤ pi ≤ n) — the first k elements of p. These integers are pairwise distinct."}
{"name": "987_C. Three displays", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 3 000) — the number of displays.\n\nThe second line contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ 10^9) — the font sizes on the displays in the order they stand along the road.\n\nThe third line contains n integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 10^8) — the rent costs for each display."}
{"name": "1012_D. AB-Strings", "description": "Input\n\nThe first line contains a string s (1 ≤ |s| ≤ 2·105).\n\nThe second line contains a string t (1 ≤ |t| ≤ 2·105).\n\nHere |s| and |t| denote the lengths of s and t, respectively. It is guaranteed that at least one of the strings contains at least one a letter and at least one of the strings contains at least one b letter."}
{"name": "1189_C. Candies!", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence.\n\nThe second line contains n digits s_1, s_2, …, s_n (0 ≤ s_i ≤ 9).\n\nThe third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nEach of the next q lines contains two integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n) — i-th query. It is guaranteed that r_i-l_i+1 is a nonnegative integer power of 2."}
{"name": "1227_C. Messy", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains two integers n and k (1 ≤ k ≤ n/2, 2 ≤ n ≤ 2000, n is even) — length of s and required number of regular prefixes.\n\nThe second line of a test case contains s of length n — the given bracket sequence. It contains only '(' and ')'.\n\nIt is guaranteed that there are exactly n/2 characters '(' and exactly n/2 characters ')' in the given string.\n\nThe sum of all values n over all the test cases in the input doesn't exceed 2000."}
{"name": "1291_D. Irreducible Anagrams", "description": "Input\n\nThe first line contains a string s, consisting of lowercase English characters (1 ≤ |s| ≤ 2 ⋅ 10^5).\n\nThe second line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nEach of the following q lines contain two integers l and r (1 ≤ l ≤ r ≤ |s|), representing a query for the substring of s formed by characters from the l-th to the r-th."}
{"name": "1311_E. Construct the Binary Tree", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe only line of each test case contains two integers n and d (2 ≤ n, d ≤ 5000) — the number of vertices in the tree and the required sum of depths of all vertices.\n\nIt is guaranteed that the sum of n and the sum of d both does not exceed 5000 (∑ n ≤ 5000, ∑ d ≤ 5000)."}
{"name": "1354_E. Graph Coloring", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 5000; 0 ≤ m ≤ 10^5) — the number of vertices and edges in the graph.\n\nThe second line contains three integers n_1, n_2 and n_3 (0 ≤ n_1, n_2, n_3 ≤ n) — the number of labels 1, 2 and 3, respectively. It's guaranteed that n_1 + n_2 + n_3 = n.\n\nNext m lines contan description of edges: the i-th line contains two integers u_i, v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) — the vertices the i-th edge connects. It's guaranteed that the graph doesn't contain self-loops or multiple edges."}
{"name": "1374_D. Zero Remainder Array", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^9) — the length of a and the required divisior. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1397_E. Monster Invaders", "description": "Input\n\nThe first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.\n\nThe second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n)."}
{"name": "1490_F. Equalize the Array", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1513_B. AND Sequences", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4), denoting the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the size of the array.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "235_C. Cyclical Quest", "description": "Input\n\nThe first line contains a non-empty string s. The length of string s is not greater than 106 characters.\n\nThe second line contains an integer n (1 ≤ n ≤ 105) — the number of queries. Then n lines follow: the i-th line contains the string xi — the string for the i-th query. The total length of xi is less than or equal to 106 characters.\n\nIn this problem, strings only consist of lowercase English letters."}
{"name": "425_C. Sereja and Two Sequences", "description": "Input\n\nThe first line contains integers n, m, s, e (1 ≤ n, m ≤ 105; 1 ≤ s ≤ 3·105; 103 ≤ e ≤ 104). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105). The third line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 105)."}
{"name": "494_C. Helping People", "description": "Input\n\nIn the first line two space-separated integers n, q (1 ≤ n ≤ 105, 1 ≤ q ≤ 5000) are given.\n\nIn the second line n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 109) are given meaning that person number i initially has ai dollars. \n\nEach of the next q lines contains three space-separated numbers li, ri, pi (1 ≤ li ≤ ri ≤ n, 0 ≤ p ≤ 1) where li and ri are two integers describing the segment of recommendation and pi is a real number given with exactly three digits after decimal point which is equal to probability of Malek accepting this recommendation.\n\nNote that a segment may appear several times in recommendations."}
{"name": "519_A. A and B and Chess", "description": "Input\n\nThe input contains eight lines, eight characters each — the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook — as 'R', the bishop — as'B', the knight — as 'N', the pawn — as 'P', the king — as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on."}
{"name": "545_B. Equidistant String", "description": "Input\n\nThe first line contains string s of length n. \n\nThe second line contains string t of length n.\n\nThe length of string n is within range from 1 to 105. It is guaranteed that both strings contain only digits zero and one."}
{"name": "593_B. Anton and Lines", "description": "Input\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of lines in the task given to Anton. The second line contains integers x1 and x2 ( - 1 000 000 ≤ x1 < x2 ≤ 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers ki, bi ( - 1 000 000 ≤ ki, bi ≤ 1 000 000) — the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i ≠ j it is true that either ki ≠ kj, or bi ≠ bj."}
{"name": "614_E. Necklace", "description": "Input\n\nThe first line of the input contains a single number n (1 ≤ n ≤ 26) — the number of colors of beads. The second line contains after n positive integers ai — the quantity of beads of i-th color. It is guaranteed that the sum of ai is at least 2 and does not exceed 100 000."}
{"name": "70_B. Text Messaging", "description": "Input\n\nThe first line contains an integer n, which is the size of one message (2 ≤ n ≤ 255). The second line contains the text. The length of the text does not exceed 104 characters. It is guaranteed that the text satisfies the above described format. Specifically, this implies that the text is not empty."}
{"name": "730_I. Olympiad in Programming and Sports", "description": "Input\n\nThe first line contains three positive integer numbers n, p and s (2 ≤ n ≤ 3000, p + s ≤ n) — the number of students, the size of the programming team and the size of the sports team.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 3000), where ai is the programming skill of the i-th student.\n\nThe third line contains n positive integers b1, b2, ..., bn (1 ≤ bi ≤ 3000), where bi is the sports skill of the i-th student."}
{"name": "754_D. Fedor and coupons", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 3·105) — the number of coupons Fedor has, and the number of coupons he wants to choose.\n\nEach of the next n lines contains two integers li and ri ( - 109 ≤ li ≤ ri ≤ 109) — the description of the i-th coupon. The coupons can be equal."}
{"name": "7_A. Kalevitch and Chess", "description": "Input\n\nThe input file contains 8 lines, each of the lines contains 8 characters. The given matrix describes the client's requirements, W character stands for a white square, and B character — for a square painted black.\n\nIt is guaranteed that client's requirments can be fulfilled with a sequence of allowed strokes (vertical/column or horizontal/row)."}
{"name": "820_C. Mister B and Boring Game", "description": "Input\n\nFirst and only line contains four space-separated integers: a, b, l and r (1 ≤ a, b ≤ 12, 1 ≤ l ≤ r ≤ 109) — the numbers of letters each player appends and the bounds of the segment."}
{"name": "893_C. Rumor", "description": "Input\n\nThe first line contains two integer numbers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of characters in Overcity and the number of pairs of friends.\n\nThe second line contains n integer numbers ci (0 ≤ ci ≤ 109) — the amount of gold i-th character asks to start spreading the rumor.\n\nThen m lines follow, each containing a pair of numbers (xi, yi) which represent that characters xi and yi are friends (1 ≤ xi, yi ≤ n, xi ≠ yi). It is guaranteed that each pair is listed at most once."}
{"name": "938_A. Word Correction", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters — the word before the correction."}
{"name": "963_A. Alternating Sum", "description": "Input\n\nThe first line contains four integers n, a, b and k (1 ≤ n ≤ 10^{9}, 1 ≤ a, b ≤ 10^{9}, 1 ≤ k ≤ 10^{5}).\n\nThe second line contains a sequence of length k consisting of characters '+' and '-'. \n\nIf the i-th character (0-indexed) is '+', then s_{i} = 1, otherwise s_{i} = -1.\n\nNote that only the first k members of the sequence are given, the rest can be obtained using the periodicity property."}
{"name": "p00821 Area of Polygons", "description": "Input\n\nThe input file describes polygons one after another, followed by a terminating line that only contains a single zero.\n\nA description of a polygon begins with a line containing a single integer, m (≥ 3), that gives the number of its vertices. It is followed by m lines, each containing two integers x and y, the coordinates of a vertex. The x and y are separated by a single space. The i-th of these m lines gives the coordinates of the i-th vertex (i = 1, ... , m). For each i = 1, ... , m - 1, the i-th vertex and the (i + 1)-th vertex are connected by an edge. The m-th vertex and the first vertex are also connected by an edge (i.e., the curve is closed). Edges intersect only at vertices. No three edges share a single vertex (i.e., the curve is simple). The number of polygons is no more than 100. For each polygon, the number of vertices (m) is no more than 100. All coordinates x and y satisfy -2000 ≤ x ≤ 2000 and -2000 ≤ y ≤ 2000."}
{"name": "p01973 Censored String", "description": "Input\n\nAn input is given in the following format.\n\n\nS\nN\np_1\np_2\n$\\vdots$\np_N\n\n\n* In line 1, you are given the string S.\n* In line 2, given an integer N. N means the size of P.\n* From line 3 to the end, given p_i, the i-th string of P.\n\n\n\nConstraints\n\n* 1 \\leq |S| \\leq 10^5\n* 1 \\leq N \\leq 10^5\n* 1 \\leq |p_1| + |p_2| +  $\\cdots$  + |p_N| \\leq 10^5\n* If i \\neq j, it is guaranteed that p_i \\neq p_j\n* S, and p_i include lowercase letters only"}
{"name": "1005_B. Delete from the Left", "description": "Input\n\nThe first line of the input contains s. In the second line of the input contains t. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and 2⋅10^5, inclusive."}
{"name": "1028_H. Make Square", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 194 598, 1 ≤ q ≤ 1 049 658) — the length of the array and the number of queries.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 5 032 107) — the elements of the array.\n\nEach of the next q lines contains two integers l_i and r_i (1 ≤ l_i < r_i ≤ n) — the parameters of a query."}
{"name": "1113_B. Sasha and Magnetic Machines", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 5 ⋅ 10^4) — the number of machines.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100) — the powers of the machines."}
{"name": "1141_E. Superhero Battle", "description": "Input\n\nThe first line contains two integers H and n (1 ≤ H ≤ 10^{12}, 1 ≤ n ≤ 2⋅10^5). The second line contains the sequence of integers d_1, d_2, ..., d_n (-10^6 ≤ d_i ≤ 10^6), where d_i is the value to change monster's hp in the i-th minute of a round."}
{"name": "1240_D. Stack Exterminable Arrays", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the length of array a.\n\nThe second line of each query contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the elements.\n\nIt is guaranteed that the sum of all n over all queries does not exceed 3 ⋅ 10^5."}
{"name": "1260_E. Tournament", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.\n\nThe second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9]."}
{"name": "1282_E. The Cake Is a Lie", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then there are t independent sets of input data.\n\nThe first line of each set consists of a single integer n (3 ≤ n ≤ 10^5) — the number of vertices in the cake.\n\nThe following n - 2 lines describe the numbers of the pieces vertices: each line consists of three different integers a, b, c (1 ≤ a, b, c ≤ n) — the numbers of the pieces vertices of cake given in random order. The pieces are given in random order.\n\nIt is guaranteed that the answer to each of the tests exists. It is also guaranteed that the sum of n for all test cases does not exceed 10^5."}
{"name": "1326_E. Bombs", "description": "Input\n\nThe first line contains a single integer, n (2 ≤ n ≤ 300 000).\n\nThe second line contains n distinct integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n).\n\nThe third line contains n distinct integers q_1, q_2, …, q_n (1 ≤ q_i ≤ n)."}
{"name": "1367_D. Task On The Board", "description": "Input\n\nThe first line contains an integer q (1 ≤ q ≤ 100) — the number of test cases in the test. Then q test cases follow.\n\nEach test case consists of three lines:\n\n  * the first line contains string s, which has a length from 1 to 50 and consists of lowercase English letters; \n  * the second line contains positive integer m (1 ≤ m ≤ |s|), where |s| is the length of the string s, and m is the length of the array b; \n  * the third line contains the integers b_1, b_2, ..., b_m (0 ≤ b_i ≤ 1225). \n\n\n\nIt is guaranteed that in each test case an answer exists."}
{"name": "1388_D. Captain Flint and Treasure", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of arrays a and b.\n\nThe second line contains n integers a_1, a_2, …, a_n (−10^6 ≤ a_i ≤ 10^6).\n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ n or b_i = -1).\n\nAdditional constraint: it's guaranteed that for any i (1 ≤ i ≤ n) the sequence b_i, b_{b_i}, b_{b_{b_i}}, … is not cyclic, in other words it will always end with -1."}
{"name": "1453_B. Suffix Operations", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000).\n\nEach test case contains two lines. The first line of each test case consists of an integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements of the array a.\n\nThe second line of each test case contains n integers. The i-th integer is a_i (-5 ⋅ 10^8 ≤ a_i ≤ 5 ⋅ 10^8).\n\nIt is guaranteed that the sum of n in all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1476_G. Minimum Difference", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the size of the array a and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nNext m lines contain queries (one per line). Each query has one of two types: \n\n  * \"1 l r k\" (1 ≤ l ≤ r ≤ n; 1 ≤ k ≤ 10^5) \n  * \"2 p x\" (1 ≤ p ≤ n; 1 ≤ x ≤ 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type."}
{"name": "1527_B2. Palindrome Game (hard version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^3). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^3).\n\nThe second line of each test case contains the string s of length n, consisting of the characters '0' and '1'. It is guaranteed that the string s contains at least one '0'.\n\nNote that there is no limit on the sum of n over test cases."}
{"name": "368_D. Sereja ans Anagrams", "description": "Input\n\nThe first line contains three integers n, m and p (1 ≤ n, m ≤ 2·105, 1 ≤ p ≤ 2·105). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The next line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 109)."}
{"name": "509_B. Painting Pebbles", "description": "Input\n\nThe first line of the input contains positive integers n and k (1 ≤ n, k ≤ 100), separated by a space — the number of piles and the number of colors respectively.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100) denoting number of pebbles in each of the piles."}
{"name": "558_C. Amr and Chemistry", "description": "Input\n\nThe first line contains one number n (1 ≤ n ≤ 105), the number of chemicals.\n\nThe second line contains n space separated integers ai (1 ≤ ai ≤ 105), representing the initial volume of the i-th chemical in liters."}
{"name": "606_A. Magic Spheres", "description": "Input\n\nThe first line of the input contains three integers a, b and c (0 ≤ a, b, c ≤ 1 000 000) — the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 ≤ x, y, z ≤ 1 000 000) — the number of blue, violet and orange spheres that he needs to get."}
{"name": "652_B. z-sort", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array a.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array a."}
{"name": "6_E. Exposition", "description": "Input\n\nThe first line of the input data contains two integer numbers separated by a space n (1 ≤ n ≤ 105) and k (0 ≤ k ≤ 106) — the amount of books by Berlbury in the library, and the maximum allowed height difference between the lowest and the highest books. The second line contains n integer numbers separated by a space. Each number hi (1 ≤ hi ≤ 106) is the height of the i-th book in millimeters."}
{"name": "722_B. Verse Pattern", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of lines in the text.\n\nThe second line contains integers p1, ..., pn (0 ≤ pi ≤ 100) — the verse pattern.\n\nNext n lines contain the text itself. Text consists of lowercase English letters and spaces. It's guaranteed that all lines are non-empty, each line starts and ends with a letter and words are separated by exactly one space. The length of each line doesn't exceed 100 characters."}
{"name": "743_E. Vladik and cards", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 1000) — the number of cards in Vladik's sequence.\n\nThe second line contains the sequence of n positive integers not exceeding 8 — the description of Vladik's sequence."}
{"name": "767_B. The Queue", "description": "Input\n\nThe first line contains three integers: the point of time when the receptionist begins to work ts, the point of time when the receptionist stops working tf and the time the receptionist spends on each visitor t. The second line contains one integer n — the amount of visitors (0 ≤ n ≤ 100 000). The third line contains positive integers in non-decreasing order — the points of time when the visitors arrive to the passport office.\n\nAll times are set in minutes and do not exceed 1012; it is guaranteed that ts < tf. It is also guaranteed that Vasya can arrive at the passport office at such a point of time that he would be served by the receptionist."}
{"name": "883_G. Orientation of Edges", "description": "Input\n\nThe first line contains three integers n, m and s (2 ≤ n ≤ 3·105, 1 ≤ m ≤ 3·105, 1 ≤ s ≤ n) — number of vertices and edges in the graph, and the vertex Vasya has picked.\n\nThe following m lines contain information about the graph edges. Each line contains three integers ti, ui and vi (1 ≤ ti ≤ 2, 1 ≤ ui, vi ≤ n, ui ≠ vi) — edge type and vertices connected by the edge. If ti = 1 then the edge is directed and goes from the vertex ui to the vertex vi. If ti = 2 then the edge is undirected and it connects the vertices ui and vi.\n\nIt is guaranteed that there is at least one undirected edge in the graph."}
{"name": "907_B. Tic-Tac-Toe", "description": "Input\n\nFirst 11 lines contains descriptions of table with 9 rows and 9 columns which are divided into 9 small fields by spaces and empty lines. Each small field is described by 9 characters without spaces and empty lines. character \"x\" (ASCII-code 120) means that the cell is occupied with chip of the first player, character \"o\" (ASCII-code 111) denotes a field occupied with chip of the second player, character \".\" (ASCII-code 46) describes empty cell.\n\nThe line after the table contains two integers x and y (1 ≤ x, y ≤ 9). They describe coordinates of the cell in table where the last move was done. Rows in the table are numbered from up to down and columns are numbered from left to right.\n\nIt's guaranteed that cell where the last move was done is filled with \"x\" or \"o\". Also, it's guaranteed that there is at least one empty cell. It's not guaranteed that current state of game is reachable."}
{"name": "957_A. Tritonic Iridescence", "description": "Input\n\nThe first line contains a single positive integer n (1 ≤ n ≤ 100) — the length of the canvas.\n\nThe second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one)."}
{"name": "p00110 Alphametic", "description": "Input\n\nGiven multiple datasets. For each dataset, an addition expression containing one or more Xs (a string of up to 126 characters without spaces) is given on one line. The number of datasets does not exceed 150."}
{"name": "1042_C. Array Product", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1106_F. Lunar New Year and a Recursive Sequence", "description": "Input\n\nThe first line contains a positive integer k (1 ≤ k ≤ 100), denoting the length of the sequence b_1, b_2, …, b_k.\n\nThe second line contains k positive integers b_1, b_2, …, b_k (1 ≤ b_i < p).\n\nThe third line contains two positive integers n and m (k < n ≤ 10^9, 1 ≤ m < p), which implies f_n = m."}
{"name": "1154_D. Walking Robot", "description": "Input\n\nThe first line of the input contains three integers n, b, a (1 ≤ n, b, a ≤ 2 ⋅ 10^5) — the robot's destination point, the battery capacity and the accumulator capacity, respectively.\n\nThe second line of the input contains n integers s_1, s_2, ..., s_n (0 ≤ s_i ≤ 1), where s_i is 1 if the i-th segment of distance is exposed to sunlight, and 0 otherwise."}
{"name": "1176_B. Merge it!", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of queries.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 100).\n\nThe second line of each query contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1253_B. Silly Mistake", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^6 ≤ a_i ≤ 10^6 and a_i ≠ 0)."}
{"name": "1381_B. Unmerge", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 2t lines contain descriptions of test cases. \n\nThe first line of each test case contains a single integer n (1≤ n≤ 2000).\n\nThe second line of each test case contains 2n integers p_1,…,p_{2n} (1≤ p_i≤ 2n). It is guaranteed that p is a permutation.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 2000."}
{"name": "1401_C. Mere Array", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of array a.\n\nThe second line of each test case contains n positive integers a_1, a_2, … a_n (1 ≤ a_i ≤ 10^9) — the array itself.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1446_A. Knapsack", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains integers n and W (1 ≤ n ≤ 200 000, 1≤ W ≤ 10^{18}). \n\nThe second line of each test case contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — weights of the items.\n\nThe sum of n over all test cases does not exceed 200 000."}
{"name": "1496_B. Max and Mex", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers n, k (1≤ n≤ 10^5, 0≤ k≤ 10^9) — the initial size of the multiset S and how many operations you need to perform.\n\nThe second line of each test case contains n distinct integers a_1,a_2,...,a_n (0≤ a_i≤ 10^9) — the numbers in the initial multiset.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "174_A. Problem About Equation", "description": "Input\n\nThe first line contains a pair of integers n, b (2 ≤ n ≤ 100, 1 ≤ b ≤ 100), where n is the total number of friends in the group and b is the current volume of drink in the bottle. The second line contains a sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 100), where ai is the current volume of drink in the i-th mug."}
{"name": "194_B. Square", "description": "Input\n\nThe first line contains integer t (1 ≤ t ≤ 104) — the number of test cases. \n\nThe second line contains t space-separated integers ni (1 ≤ ni ≤ 109) — the sides of the square for each test sample."}
{"name": "266_E. More Queries to Array...", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105), showing, how many numbers are in the array and the number of queries, correspondingly. The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 109) — the initial values of the array elements.\n\nThen m queries follow, one per line:\n\n  1. The assign query has the following format: \"<image>\", (1 ≤ l ≤ r ≤ n; 0 ≤ x ≤ 109).\n  2. The query to calculate the sum has the following format: \"<image>\", (1 ≤ l ≤ r ≤ n; 0 ≤ k ≤ 5).\n\n\n\nAll numbers in the input are integers."}
{"name": "315_E. Sereja and Subsequences", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106)."}
{"name": "338_B. Book of Evil", "description": "Input\n\nThe first line contains three space-separated integers n, m and d (1 ≤ m ≤ n ≤ 100000; 0 ≤ d ≤ n - 1). The second line contains m distinct space-separated integers p1, p2, ..., pm (1 ≤ pi ≤ n). Then n - 1 lines follow, each line describes a path made in the area. A path is described by a pair of space-separated integers ai and bi representing the ends of this path."}
{"name": "525_B. Pasha and String", "description": "Input\n\nThe first line of the input contains Pasha's string s of length from 2 to 2·105 characters, consisting of lowercase Latin letters.\n\nThe second line contains a single integer m (1 ≤ m ≤ 105) — the number of days when Pasha changed his string.\n\nThe third line contains m space-separated elements ai (1 ≤ ai; 2·ai ≤ |s|) — the position from which Pasha started transforming the string on the i-th day."}
{"name": "550_C. Divisibility by Eight", "description": "Input\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits."}
{"name": "577_D. Invariance of Tree", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 105) — the size of the permutation (also equal to the size of the sought tree).\n\nThe second line contains permutation pi (1 ≤ pi ≤ n)."}
{"name": "59_B. Fortune Telling", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100), which is the number of flowers growing in the field. The second line contains n integers ai (1 ≤ ai ≤ 100) which represent the number of petals on a given i-th camomile."}
{"name": "715_E. Complete the Permutations", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 250) — the number of elements in the permutations.\n\nThe second line contains n integers, p1, p2, ..., pn (0 ≤ pi ≤ n) — the permutation p. It is guaranteed that there is at least one way to replace zeros such that p is a permutation of {1, 2, ..., n}.\n\nThe third line contains n integers, q1, q2, ..., qn (0 ≤ qi ≤ n) — the permutation q. It is guaranteed that there is at least one way to replace zeros such that q is a permutation of {1, 2, ..., n}."}
{"name": "804_C. Ice cream coloring", "description": "Input\n\nThe first line contains two integer n and m (1 ≤ n, m ≤ 3·105) — the number of vertices in T and the number of ice cream types.\n\nn lines follow, the i-th of these lines contain single integer si (0 ≤ si ≤ 3·105) and then si distinct integers, each between 1 and m — the types of ice cream in the i-th vertex. The sum of si doesn't exceed 5·105.\n\nn - 1 lines follow. Each of these lines describes an edge of the tree with two integers u and v (1 ≤ u, v ≤ n) — the indexes of connected by this edge vertices."}
{"name": "873_F. Forbidden Indices", "description": "Input\n\nThe first line contains an integer number n (1 ≤ n ≤ 200000) — the length of s.\n\nThe second line contains a string s, consisting of n lowercase Latin letters.\n\nThe third line contains a string t, consisting of n characters 0 and 1. If i-th character in t is 1, then i is a forbidden index (otherwise i is not forbidden)."}
{"name": "899_E. Segments Removal", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array.\n\nThe second line contains a sequence a1, a2, ..., an (1 ≤ ai ≤ 109) — Vasya's array."}
{"name": "976_D. Degree Set", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 300) — the size of the degree set.\n\nThe second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000, d1 < d2 < ... < dn) — the degree set."}
{"name": "996_B. World Cup", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of entrances.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the number of people in queues. These numbers do not include Allen."}
{"name": "p02010 Additions", "description": "Input\n\nThe input consists of a single test case in the following format.\n\n\n$N$\n$S$\n\n\nThe first line contains an integer $N$, which is the upper limit of the formula ($1 \\leq N \\leq 10^9$). The second line contains a string $S$, which consists of '+' and digits and whose length is between $1$ and $1,000$, inclusive. Note that it is not guaranteed that initially $S$ is a valid formula."}
{"name": "1056_E. Check Transcription", "description": "Input\n\nThe first line contains a string s (2 ≤ |s| ≤ 10^5) consisting of zeros and ones — the original signal.\n\nThe second line contains a string t (1 ≤ |t| ≤ 10^6) consisting of lowercase English letters only — the received signal.\n\nIt is guaranteed, that the string s contains at least one '0' and at least one '1'."}
{"name": "1099_F. Cookies", "description": "Input\n\nThe first line contains two integers n and T — the number of vertices in the tree and the time he has to accomplish his task (2≤ n ≤ 10^5; 1≤ T≤10^{18}).\n\nThe second line contains n integers x_1, x_2, ..., x_n — number of cookies located in the corresponding vertex (1≤ x_i≤10^6). The third line contains n integers t_1, t_2, ..., t_n — how much time it takes Mitya to eat one cookie in vertex i (1≤ t_i≤10^6).\n\nEach of the following n - 1 lines describe the tree. For every i from 2 to n, the corresponding line contains two integers p_i and l_i, where p_i denotes the parent of vertex i and l_i denotes the time it takes Mitya to move the chip along the edge from vertex i to its parent (1≤ p_i < i, 0≤ l_i ≤ 10^9)."}
{"name": "111_E. Petya and Rectangle", "description": "Input\n\nThe first line contains space-separated integers n and m (4 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the rectangle, correspondingly. The second line contains space-separated integers x1 and y1 — the coordinates of the first marked cell. The third line contains space-separated integers x2 y2 — the coordinates of the second marked cell (1 < x1, x2 < n, 1 < y1, y2 < m, x1 ≠ x2, y1 ≠ y2).\n\nThe coordinates of a marked cell are a pair of integers x y, where x represents the row's number and y represents the column's number. The rows are numbered from top to bottom with consecutive integers from 1 to n. The columns are numbered from the left to the right by consecutive integers from 1 to m.\n\nIt is guaranteed that the marked cells are not positioned in one row or column."}
{"name": "1168_C. And Reachability", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 300 000, 1 ≤ q ≤ 300 000) — the number of integers in the array and the number of queries you need to answer.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 300 000) — the given array.\n\nThe next q lines contain two integers each. The i-th of them contains two space-separated integers x_i and y_i (1 ≤ x_i < y_i ≤ n). You need to check if y_i is reachable from x_i."}
{"name": "1223_B. Strings Equalization", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 100) — the number of queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains the string s (1 ≤ |s| ≤ 100) consisting of lowercase Latin letters.\n\nThe second line of each query contains the string t (1 ≤ |t| ≤ 100, |t| = |s|) consisting of lowercase Latin letters."}
{"name": "1248_E. Queue in the Train", "description": "Input\n\nThe first line contains integers n and p (1 ≤ n ≤ 100 000, 1 ≤ p ≤ 10^9) — the number of people and the amount of time one person uses the tank.\n\nThe second line contains n integers t_1, t_2, ..., t_n (0 ≤ t_i ≤ 10^9) — the moments when the corresponding passenger will go for the boiled water."}
{"name": "1288_E. Messenger Simulator", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3 ⋅ 10^5) — the number of Polycarp's friends and the number of received messages, respectively.\n\nThe second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ n) — the descriptions of the received messages."}
{"name": "1394_E. Boboniu and Banknote Collection", "description": "Input\n\nThe first line contains an integer n (1≤ n≤ 10^5).\n\nThe second line contains n integers a_1,a_2,…,a_n (1≤ a_i≤ n)."}
{"name": "1419_C. Killjoy", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2t lines contain the descriptions of all test cases.\n\nThe first line of each test case contains two integers n and x (2 ≤ n ≤ 10^3, -4000 ≤ x ≤ 4000) — the number of accounts on Codeforces and the rating of Killjoy's account.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-4000 ≤ a_i ≤ 4000) — the ratings of other accounts."}
{"name": "1437_C. Chef Monocarp", "description": "Input\n\nThe first line contains a single integer q (1 ≤ q ≤ 200) — the number of testcases.\n\nThen q testcases follow.\n\nThe first line of the testcase contains a single integer n (1 ≤ n ≤ 200) — the number of dishes in the oven.\n\nThe second line of the testcase contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ n) — the optimal cooking time for each dish.\n\nThe sum of n over all q testcases doesn't exceed 200."}
{"name": "1510_J. Japanese Game", "description": "Input\n\nThe only line contains a string m — the mask of the source profile p. The length of m is n (1 ≤ n ≤ 100 000). The string m consists of symbols # and _ — denoting filled and empty cells respectively."}
{"name": "32_E. Hide-and-Seek", "description": "Input\n\nThe first line contains two numbers xv and yv — coordinates of Victor.\n\nThe second line contains two numbers xp and yp — coordinates of Peter.\n\nThe third line contains 4 numbers xw, 1, yw, 1, xw, 2, yw, 2 — coordinates of the wall.\n\nThe forth line contains 4 numbers xm, 1, ym, 1, xm, 2, ym, 2 — coordinates of the mirror.\n\nAll the coordinates are integer numbers, and don't exceed 104 in absolute value. It's guaranteed, that the segments don't have common points, Victor and Peter are not on any of the segments, coordinates of Victor and Peter aren't the same, the segments don't degenerate into points."}
{"name": "398_A. Cards", "description": "Input\n\nThe first line contains two space-separated integers a and b (0 ≤ a, b ≤ 105; a + b ≥ 1) — the number of \"o\" cards and the number of \"x\" cards."}
{"name": "631_E. Product Sum", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 200 000) — the size of the array a.\n\nThe second line contains n integers ai (1 ≤ i ≤ n, |ai| ≤ 1 000 000) — the elements of the array a."}
{"name": "660_C. Hard Process", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 3·105, 0 ≤ k ≤ n) — the number of elements in a and the parameter k.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 1) — the elements of a."}
{"name": "773_C. Prairie Partition", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of numbers given from Alice to Borys.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1012; a1 ≤ a2 ≤ ... ≤ an) — the numbers given from Alice to Borys."}
{"name": "818_D. Multicolored Cars", "description": "Input\n\nThe first line contains two integer numbers n and A (1 ≤ n ≤ 105, 1 ≤ A ≤ 106) – number of cars and the color chosen by Alice.\n\nThe second line contains n integer numbers c1, c2, ..., cn (1 ≤ ci ≤ 106) — colors of the cars that Alice and Bob will encounter in the order of their appearance."}
{"name": "988_D. Points and Powers of Two", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of points.\n\nThe second line contains n pairwise distinct integers x_1, x_2, ..., x_n (-10^9 ≤ x_i ≤ 10^9) — the coordinates of points."}
{"name": "p00017 Caesar Cipher", "description": "Input\n\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\n\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\n\nThe number of datasets is less than or equal to 20."}
{"name": "p01677 Broken Audio Signal", "description": "Input\n\nThe input consists of multiple datasets. The form of each dataset is described below.\n\n> $N$\n> $a_{1}$ $a_{2}$ ... $a_{N}$\n\nThe first line of each dataset consists of an integer, $N (2 \\le N \\le 1{,}000)$. $N$ denotes the number of samples in the given audio signal. The second line of each dataset consists of $N$ values separated by spaces. The $i$-th value, $a_{i}$, is either a character `x` or an integer between $-10^9$ and $10^9$, inclusive. It represents the $i$-th sample of the broken audio signal. If $a_{i}$ is a character `x` , it denotes that $i$-th sample in the audio signal is broken. Otherwise it denotes the value of the $i$-th sample.\n\nThe end of input is indicated by a single $0$. This is not included in the datasets.\n\nYou may assume that the number of the datasets does not exceed $100$."}
{"name": "1016_D. Vasya And The Matrix", "description": "Input\n\nThe first line contains two numbers n and m (2 ≤ n, m ≤ 100) — the dimensions of the matrix.\n\nThe second line contains n numbers a1, a2, ..., an (0 ≤ ai ≤ 109), where ai is the xor of all elements in row i.\n\nThe third line contains m numbers b1, b2, ..., bm (0 ≤ bi ≤ 109), where bi is the xor of all elements in column i."}
{"name": "1084_D. The Fair Nut and the Best Path", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of cities.\n\nThe second line contains n integers w_1, w_2, …, w_n (0 ≤ w_{i} ≤ 10^9) — the maximum amounts of liters of gasoline that Nut can buy in cities.\n\nEach of the next n - 1 lines describes road and contains three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^9, u ≠ v), where u and v — cities that are connected by this road and c — its length.\n\nIt is guaranteed that graph of road connectivity is a tree."}
{"name": "1191_D. Tokitsukaze, CSL and Stone Game", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of piles.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_1, a_2, …, a_n ≤ 10^9), which mean the i-th pile has a_i stones."}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 200 000, 0 ≤ k ≤ n) — the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes."}
{"name": "1493_E. Enormous XOR", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the binary representation of r.\n\nThe second line contains the binary representation of l — a string of length n consisting of digits 0 and 1 (0 ≤ l < 2^n).\n\nThe third line contains the binary representation of r — a string of length n consisting of digits 0 and 1 (0 ≤ r < 2^n).\n\nIt is guaranteed that l ≤ r. The binary representation of r does not contain any extra leading zeros (if r=0, the binary representation of it consists of a single zero). The binary representation of l is preceded with leading zeros so that its length is equal to n."}
{"name": "1516_B. AGAGA XOOORRR", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 15) — the number of test cases you need to solve.\n\nThe first line of each test case contains an integers n (2 ≤ n ≤ 2000) — the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_{n} (0 ≤ a_i < 2^{30}) — the elements of the array a."}
{"name": "191_B. Demonstration", "description": "Input\n\nThe first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).\n\nThe second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).\n\nThe third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "239_B. Easy Tape Programming", "description": "Input\n\nThe first line of input contains two integers n and q (1 ≤ n, q ≤ 100) — represents the length of the sequence s and the number of queries. \n\nThe second line contains s, a sequence of \"<\", \">\" and digits (0..9) written from left to right. Note, that the characters of s are not separated with spaces. \n\nThe next q lines each contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the i-th query."}
{"name": "287_E. Main Sequence", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 106). The second line contains n integers: p1, p2, ..., pn (1 ≤ pi ≤ 109).\n\nThe third line contains integer t (0 ≤ t ≤ n), followed by t distinct integers q1, q2, ..., qt (1 ≤ qi ≤ n).\n\nThe numbers in each line are separated by spaces."}
{"name": "381_B. Sereja and Stairs", "description": "Input\n\nThe first line contains integer m (1 ≤ m ≤ 105) — the number of Sereja's cards. The second line contains m integers bi (1 ≤ bi ≤ 5000) — the numbers on the Sereja's cards."}
{"name": "451_E. Devu and Flowers", "description": "Input\n\nThe first line of input contains two space-separated integers n and s (1 ≤ n ≤ 20, 0 ≤ s ≤ 1014).\n\nThe second line contains n space-separated integers f1, f2, ... fn (0 ≤ fi ≤ 1012)."}
{"name": "498_C. Array and Operations", "description": "Input\n\nThe first line contains two space-separated integers n, m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100).\n\nThe second line contains n space-separated integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109) — the description of the array.\n\nThe following m lines contain the description of good pairs. The k-th line contains two space-separated integers ik, jk (1 ≤ ik < jk ≤ n, ik + jk is an odd number).\n\nIt is guaranteed that all the good pairs are distinct."}
{"name": "521_D. Shop", "description": "Input\n\nThe first line contains three numbers — k, n, m (1 ≤ k ≤ 105, 0 ≤ m ≤ n ≤ 105) — the number of skills, the number of improvements on sale and the number of them Vasya can afford.\n\nThe second line contains k space-separated numbers ai (1 ≤ ai ≤ 106), the initial values of skills.\n\nNext n lines contain 3 space-separated numbers tj, ij, bj (1 ≤ tj ≤ 3, 1 ≤ ij ≤ k, 1 ≤ bj ≤ 106) — the type of the j-th improvement (1 for assigning, 2 for adding, 3 for multiplying), the skill to which it can be applied and the value of b for this improvement."}
{"name": "549_A. Face Detection", "description": "Input\n\nThe first line contains two space-separated integers, n and m (1 ≤ n, m ≤ 50) — the height and the width of the image, respectively.\n\nNext n lines define the image. Each line contains m lowercase Latin letters."}
{"name": "639_A. Bear and Displayed Friends", "description": "Input\n\nThe first line contains three integers n, k and q (1 ≤ n, q ≤ 150 000, 1 ≤ k ≤ min(6, n)) — the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 ≤ typei ≤ 2, 1 ≤ idi ≤ n) — the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty."}
{"name": "733_D. Kostya the Sculptor", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 105).\n\nn lines follow, in the i-th of which there are three integers ai, bi and ci (1 ≤ ai, bi, ci ≤ 109) — the lengths of edges of the i-th stone. Note, that two stones may have exactly the same sizes, but they still will be considered two different stones."}
{"name": "870_B. Maximum of Maximums of Minimums", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 105) — the size of the array a and the number of subsegments you have to split the array to.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109)."}
{"name": "897_A. Scarborough Fair", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 100).\n\nThe second line contains a string s of length n, consisting of lowercase English letters.\n\nEach of the next m lines contains four parameters l, r, c1, c2 (1 ≤ l ≤ r ≤ n, c1, c2 are lowercase English letters), separated by space."}
{"name": "940_B. Our Tanya is Crying Out Loud", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2·109).\n\nThe second line contains a single integer k (1 ≤ k ≤ 2·109).\n\nThe third line contains a single integer A (1 ≤ A ≤ 2·109).\n\nThe fourth line contains a single integer B (1 ≤ B ≤ 2·109)."}
{"name": "993_E. Nikita and Order Statistics", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 2 ⋅ 10^5, -10^9 ≤ x ≤ 10^9).\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the given array."}
{"name": "1011_C. Fly", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — number of planets.\n\nThe second line contains the only integer m (1 ≤ m ≤ 1000) — weight of the payload.\n\nThe third line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000), where a_i is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000), where b_i is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than 10^9 tons of fuel."}
{"name": "1036_D. Vasya and Arrays", "description": "Input\n\nThe first line contains a single integer n~(1 ≤ n ≤ 3 ⋅ 10^5) — the length of the first array.\n\nThe second line contains n integers a_1, a_2, ⋅⋅⋅, a_n~(1 ≤ a_i ≤ 10^9) — elements of the array A.\n\nThe third line contains a single integer m~(1 ≤ m ≤ 3 ⋅ 10^5) — the length of the second array.\n\nThe fourth line contains m integers b_1, b_2, ⋅⋅⋅, b_m~(1 ≤ b_i ≤ 10^9) - elements of the array B."}
{"name": "10_D. LCIS", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 500) — the length of the first sequence. The second line contains n space-separated integers from the range [0, 109] — elements of the first sequence. The third line contains an integer m (1 ≤ m ≤ 500) — the length of the second sequence. The fourth line contains m space-separated integers from the range [0, 109] — elements of the second sequence."}
{"name": "1121_C. System Testing", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100) standing for the number of submissions and the number of testing processes respectively.\n\nThe second line contains n positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 150), where a_i is equal to the number of tests the i-th submission is to be run on."}
{"name": "1148_E. Earth Wind and Fire", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5) – the number of stones.\n\nThe second line contains integers s_1, s_2, …, s_n (1 ≤ s_i ≤ 10^9) — the initial positions of the stones.\n\nThe second line contains integers t_1, t_2, …, t_n (1 ≤ t_i ≤ 10^9) — the target positions of the stones."}
{"name": "1249_E. By Elevator or Stairs?", "description": "Input\n\nThe first line of the input contains two integers n and c (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ c ≤ 1000) — the number of floors in the building and the time overhead for the elevator rides.\n\nThe second line of the input contains n - 1 integers a_1, a_2, ..., a_{n-1} (1 ≤ a_i ≤ 1000), where a_i is the time required to go from the i-th floor to the (i+1)-th one (and from the (i+1)-th to the i-th as well) using the stairs.\n\nThe third line of the input contains n - 1 integers b_1, b_2, ..., b_{n-1} (1 ≤ b_i ≤ 1000), where b_i is the time required to go from the i-th floor to the (i+1)-th one (and from the (i+1)-th to the i-th as well) using the elevator."}
{"name": "1290_C. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 3 ⋅ 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 ≤ c ≤ n) — the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, …, x_c (1 ≤ x_i ≤ n) — the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations."}
{"name": "1333_B. Kind Anton", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 10000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of arrays.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-1 ≤ a_i ≤ 1) — elements of array a. There can be duplicates among elements.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (-10^9 ≤ b_i ≤ 10^9) — elements of array b. There can be duplicates among elements.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1353_E. K-periodic Garland", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 25~ 000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 10^6; 1 ≤ k ≤ n) — the length of s and the required period. The second line of the test case contains the string s consisting of n characters '0' and '1'.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6 (∑ n ≤ 10^6)."}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1396_C. Monster Invaders", "description": "Input\n\nThe first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.\n\nThe second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n)."}
{"name": "141_E. Clearing Up", "description": "Input\n\nThe first input line contains two positive integers n and m (1 ≤ n ≤ 103, 1 ≤ m ≤ 105) — the number of huts and the number of roads. Then follow m lines, each of them contains a road description: the numbers of huts it connects — x and y (1 ≤ x, y ≤ n) and the person responsible for clearing out this road (\"S\" — for the Elf or \"M\" for Santa Claus). It is possible to go on each road in both directions. Note that there can be more than one road between two huts and a road can begin and end in the same hut."}
{"name": "1438_E. Yurii Can Do Everything", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 2⋅ 10^5) — the length of a. \n\nThe second line contains n integers a_1,a_2,…,a_n (1 ≤ a_i < 2^{30}) — elements of a."}
{"name": "1463_D. Pairs", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_1 < b_2 < ... < b_n ≤ 2n) — the set you'd like to get.\n\nIt's guaranteed that the sum of n over test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "208_B. Solitaire", "description": "Input\n\nThe first input line contains a single integer n (1 ≤ n ≤ 52) — the number of cards in Vasya's deck. The next line contains n space-separated strings c1, c2, ..., cn, where string ci describes the i-th card on the table. Each string ci consists of exactly two characters, the first one represents the card's value, the second one represents its suit. Cards on the table are numbered from left to right. \n\nA card's value is specified by one of these characters: \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\". A card's suit is specified by one of these characters: \"S\", \"D\", \"H\", \"C\".\n\nIt is not guaranteed that the deck has all possible cards. Also, the cards in Vasya's deck can repeat."}
{"name": "353_B. Two Heaps", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100). The second line contains 2·n space-separated integers ai (10 ≤ ai ≤ 99), denoting the numbers on the cubes."}
{"name": "377_C. Captains Mode", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of heroes in Dota 2.\n\nThe second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 106) — the strengths of all the heroes.\n\nThe third line contains a single integer m (2 ≤ m ≤ min(n, 20)) — the number of actions the captains of the team must perform.\n\nNext m lines look like \"action team\", where action is the needed action: a pick (represented as a \"p\") or a ban (represented as a \"b\"), and team is the number of the team that needs to perform the action (number 1 or 2).\n\nIt is guaranteed that each team makes at least one pick. Besides, each team has the same number of picks and the same number of bans."}
{"name": "424_A. Squats", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 200; n is even). The next line contains n characters without spaces. These characters describe the hamsters' position: the i-th character equals 'X', if the i-th hamster in the row is standing, and 'x', if he is sitting."}
{"name": "493_A. Vasya and Football", "description": "Input\n\nThe first line contains the name of the team playing at home. The second line contains the name of the team playing away. Both lines are not empty. The lengths of both lines do not exceed 20. Each line contains only of large English letters. The names of the teams are distinct.\n\nNext follows number n (1 ≤ n ≤ 90) — the number of fouls. \n\nEach of the following n lines contains information about a foul in the following form: \n\n  * first goes number t (1 ≤ t ≤ 90) — the minute when the foul occurs; \n  * then goes letter \"h\" or letter \"a\" — if the letter is \"h\", then the card was given to a home team player, otherwise the card was given to an away team player; \n  * then goes the player's number m (1 ≤ m ≤ 99); \n  * then goes letter \"y\" or letter \"r\" — if the letter is \"y\", that means that the yellow card was given, otherwise the red card was given. \n\n\n\nThe players from different teams can have the same number. The players within one team have distinct numbers. The fouls go chronologically, no two fouls happened at the same minute."}
{"name": "516_E. Drazil and His Happy Friends", "description": "Input\n\nThe first line contains two integer n and m (1 ≤ n, m ≤ 109).\n\nThe second line contains integer b (0 ≤ b ≤ min(n, 105)), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.\n\nThe third line conatins integer g (0 ≤ g ≤ min(m, 105)), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.\n\nIt is guaranteed that there is at least one person that is unhappy among his friends."}
{"name": "613_C. Necklace", "description": "Input\n\nThe first line of the input contains a single number n (1 ≤ n ≤ 26) — the number of colors of beads. The second line contains after n positive integers ai — the quantity of beads of i-th color. It is guaranteed that the sum of ai is at least 2 and does not exceed 100 000."}
{"name": "633_C. Spy Syndrome 2", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 10 000) — the length of the ciphered text. The second line consists of n lowercase English letters — the ciphered text t.\n\nThe third line contains a single integer m (1 ≤ m ≤ 100 000) — the number of words which will be considered while deciphering the text. Each of the next m lines contains a non-empty word wi (|wi| ≤ 1 000) consisting of uppercase and lowercase English letters only. It's guaranteed that the total length of all words doesn't exceed 1 000 000."}
{"name": "774_F. Pens And Days Of Week", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 50 000) — the number of pens Stepan has.\n\nThe second line contains the sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is equal to the number of milliliters of ink which the pen number i currently has."}
{"name": "81_A. Plug-in", "description": "Input\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2·105 characters inclusive. The string contains only lowercase Latin letters."}
{"name": "892_A. Greed", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 100 000) — number of cola cans.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 109) — volume of remaining cola in cans.\n\nThe third line contains n space-separated integers that b1, b2, ..., bn (ai ≤ bi ≤ 109) — capacities of the cans."}
{"name": "914_A. Perfect Squares", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array.\n\nThe second line contains n integers a1, a2, ..., an ( - 106 ≤ ai ≤ 106) — the elements of the array.\n\nIt is guaranteed that at least one element of the array is not a perfect square."}
{"name": "962_A. Equator", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of days to prepare for the programming contests.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10 000), where a_i equals to the number of problems, which Polycarp will solve on the i-th day."}
{"name": "1027_C. Minimum Value Rectangle", "description": "Input\n\nThe first line contains a single integer T (T ≥ 1) — the number of lists of sticks in the testcase.\n\nThen 2T lines follow — lines (2i - 1) and 2i of them describe the i-th list. The first line of the pair contains a single integer n (4 ≤ n ≤ 10^6) — the number of sticks in the i-th list. The second line of the pair contains n integers a_1, a_2, ..., a_n (1 ≤ a_j ≤ 10^4) — lengths of the sticks in the i-th list.\n\nIt is guaranteed that for each list there exists a way to choose four sticks so that they form a rectangle.\n\nThe total number of sticks in all T lists doesn't exceed 10^6 in each testcase."}
{"name": "1091_E. New Year and the Acquaintance Estimation", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5), the number of people on the network excluding Bob. \n\nThe second line contains n numbers a_1,a_2, ..., a_n (0 ≤ a_i ≤ n), with a_i being the number of people that person i is a friend of."}
{"name": "1180_C. Valeriy and Deque", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 10^5, 0 ≤ q ≤ 3 ⋅ 10^5) — the number of elements in the deque and the number of queries. The second line contains n integers a_1, a_2, ..., a_n, where a_i (0 ≤ a_i ≤ 10^9) — the deque element in i-th position. The next q lines contain one number each, meaning m_j (1 ≤ m_j ≤ 10^{18})."}
{"name": "1216_B. Shooting", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 1 000) — the number of cans.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1 000), where a_i is the durability of the i-th can."}
{"name": "1239_C. Queue in the Train", "description": "Input\n\nThe first line contains integers n and p (1 ≤ n ≤ 100 000, 1 ≤ p ≤ 10^9) — the number of people and the amount of time one person uses the tank.\n\nThe second line contains n integers t_1, t_2, ..., t_n (0 ≤ t_i ≤ 10^9) — the moments when the corresponding passenger will go for the boiled water."}
{"name": "1257_E. The Contest", "description": "Input\n\nThe first line contains three integers k_1, k_2 and k_3 (1 ≤ k_1, k_2, k_3 ≤ 2 ⋅ 10^5, k_1 + k_2 + k_3 ≤ 2 ⋅ 10^5) — the number of problems initially taken by the first, the second and the third participant, respectively.\n\nThe second line contains k_1 integers a_{1, 1}, a_{1, 2}, ..., a_{1, k_1} — the problems initially taken by the first participant.\n\nThe third line contains k_2 integers a_{2, 1}, a_{2, 2}, ..., a_{2, k_2} — the problems initially taken by the second participant.\n\nThe fourth line contains k_3 integers a_{3, 1}, a_{3, 2}, ..., a_{3, k_3} — the problems initially taken by the third participant.\n\nIt is guaranteed that no problem has been taken by two (or three) participants, and each integer a_{i, j} meets the condition 1 ≤ a_{i, j} ≤ n, where n = k_1 + k_2 + k_3."}
{"name": "1300_E. Water Balance", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^6) — the number of water tanks.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — initial volumes of water in the water tanks, in liters.\n\nBecause of large input, reading input as doubles is not recommended."}
{"name": "1324_F. Maximum White Subtree", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1), where a_i is the color of the i-th vertex.\n\nEach of the next n-1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the labels of vertices it connects (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i).\n\nIt is guaranteed that the given edges form a tree."}
{"name": "1343_E. Weights Distributing", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains five integers n, m, a, b and c (2 ≤ n ≤ 2 ⋅ 10^5, n-1 ≤ m ≤ min((n(n-1))/(2), 2 ⋅ 10^5), 1 ≤ a, b, c ≤ n) — the number of vertices, the number of edges and districts in Mike's trip.\n\nThe second line of the test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i ≤ 10^9), where p_i is the i-th price from the array.\n\nThe following m lines of the test case denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the array of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied. It is guaranteed that the given graph is connected.\n\nIt is guaranteed that the sum of n (as well as the sum of m) does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ m ≤ 2 ⋅ 10^5)."}
{"name": "1365_F. Swaps Again", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 500) — the number of test cases. The description of each test case is as follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 500) — the size of the arrays.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of array a.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — elements of array b."}
{"name": "1407_D. Discrete Centrifugal Jumps", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 3 ⋅ 10^5) — total amount of skyscrapers.\n\nThe second line contains n integers h_1, h_2, …, h_n (1 ≤ h_i ≤ 10^9) — heights of skyscrapers."}
{"name": "1451_B. Non-Substring Subsequence", "description": "Input\n\nThe first line of the input contains a single integer t (1≤ t ≤ 100) — the number of test cases. The description of each test case is as follows.\n\nThe first line contains two integers n (2 ≤ n ≤ 100) and q (1≤ q ≤ 100) — the length of the string and the number of queries. \n\nThe second line contains the string s.\n\nThe i-th of the next q lines contains two integers l_i and r_i (1 ≤ l_i < r_i ≤ n)."}
{"name": "1525_B. Permutation Sort", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000) — the number of test cases.\n\nThe first line of the test case contains a single integer n (3 ≤ n ≤ 50) — the number of elements in the permutation.\n\nThe second line of the test case contains n distinct integers from 1 to n — the given permutation a."}
{"name": "223_A. Bracket Sequence", "description": "Input\n\nThe first and the only line contains the bracket sequence as a string, consisting only of characters \"(\", \")\", \"[\" and \"]\". It is guaranteed that the string is non-empty and its length doesn't exceed 105 characters."}
{"name": "246_D. Colorful Graph", "description": "Input\n\nThe first line contains two space-separated integers n, m (1 ≤ n, m ≤ 105) — the number of vertices end edges of the graph, correspondingly. The second line contains a sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 105) — the colors of the graph vertices. The numbers on the line are separated by spaces.\n\nNext m lines contain the description of the edges: the i-th line contains two space-separated integers ai, bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — the numbers of the vertices, connected by the i-th edge. \n\nIt is guaranteed that the given graph has no self-loops or multiple edges."}
{"name": "271_E. Three Horses", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 105, 2 ≤ m ≤ 109). The second line contains the sequence of integers a1, a2, ..., an (2 ≤ ai ≤ 109). Note, that the numbers in the sequence can coincide.\n\nThe numbers in the lines are separated by single spaces."}
{"name": "366_B. Dima and To-do List", "description": "Input\n\nThe first line of the input contains two integers n, k (1 ≤ k ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 103), where ai is the power Inna tells Dima off with if she is present in the room while he is doing the i-th task.\n\nIt is guaranteed that n is divisible by k."}
{"name": "409_I. Feed the Golorp", "description": "Input\n\nThe input is a single string (between 13 and 1024 characters long) — the name of the visiting golorp. All names are similar and will resemble the ones given in the samples. The name is guaranteed to be valid."}
{"name": "437_D. The Child and Zoo", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 105; 0 ≤ m ≤ 105). The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 105). Then follow m lines, each line contains two integers xi and yi (1 ≤ xi, yi ≤ n; xi ≠ yi), denoting the road between areas xi and yi.\n\nAll roads are bidirectional, each pair of areas is connected by at most one road."}
{"name": "506_E. Mr. Kitayuta's Gift", "description": "Input\n\nThe first line contains a string s (1 ≤ |s| ≤ 200). Each character in s is a lowercase English letter.\n\nThe second line contains an integer n (1 ≤ n ≤ 109)."}
{"name": "675_C. Money Transfers", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of banks.\n\nThe second line contains n integers ai ( - 109 ≤ ai ≤ 109), the i-th of them is equal to the initial balance of the account in the i-th bank. It's guaranteed that the sum of all ai is equal to 0."}
{"name": "699_D. Fix a Tree", "description": "Input\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n)."}
{"name": "720_A. Closing ceremony", "description": "Input\n\nThe first line of input contains two integers n and m (1 ≤ n·m ≤ 104) — the size of the hall.\n\nThe second line contains several integers. The first integer k (0 ≤ k ≤ n·m) — the number of people at (0, 0). The following k integers indicate stamina of each person there.\n\nThe third line also contains several integers. The first integer l (l = n·m - k) — the number of people at (0, m + 1). The following l integers indicate stamina of each person there.\n\nThe stamina of the person is a positive integer less that or equal to n + m."}
{"name": "834_D. The Bakery", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 35000, 1 ≤ k ≤ min(n, 50)) – the number of cakes and the number of boxes, respectively.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) – the types of cakes in the order the oven bakes them."}
{"name": "903_B. The Modcrab", "description": "Input\n\nThe first line contains three integers h1, a1, c1 (1 ≤ h1, a1 ≤ 100, 2 ≤ c1 ≤ 100) — Vova's health, Vova's attack power and the healing power of a potion.\n\nThe second line contains two integers h2, a2 (1 ≤ h2 ≤ 100, 1 ≤ a2 < c1) — the Modcrab's health and his attack power."}
{"name": "925_C. Big Secret", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers b_1, …, b_n (1 ≤ b_i < 2^{60})."}
{"name": "980_C. Posterized", "description": "Input\n\nThe first line of input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 256), the number of pixels in the image, and the maximum size of a group, respectively.\n\nThe second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 255), where p_i is the color of the i-th pixel."}
{"name": "9_C. Hexadecimal's Numbers", "description": "Input\n\nInput data contains the only number n (1 ≤ n ≤ 109)."}
{"name": "p00230 Ninja Climbing", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\na1 a2 ... an\nb1 b2 ... bn\n\n\nThe first line gives the building floor n (3 ≤ n ≤ 100). The second line gives the wall information ai from the first floor to the nth floor of the first building, and the third line gives the wall information bi from the first floor to the nth floor of the second building. ai and bi represent the information of the wall on the i-th floor, 0 is the ordinary wall, 1 is the ladder (straddling the i-th floor and the i + 1-floor), and 2 is the sliding wall.\n\nThe number of datasets does not exceed 60."}
{"name": "p00392 Common-Prime Sort", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$\n$a_1$ $a_2$ $...$ $a_N$\n\n\nThe first line provides the number of elements included in the sequence $N$ ($2 \\leq N \\leq 10^5$). The second line provides an array of integers $a_i$ ($2 \\leq a_i \\leq 10^5$) that constitute the sequence."}
{"name": "1041_F. Ray in the tube", "description": "Input\n\nThe first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.\n\nThe third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. \n\nThe fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order."}
{"name": "1064_E. Dwarves, Hats and Extrasensory Abilities", "description": "Input\n\n5\n<span class=\"tex-span\"></span>\nblack\n<span class=\"tex-span\"></span>\nblack\n<span class=\"tex-span\"></span>\nwhite\n<span class=\"tex-span\"></span>\nwhite\n<span class=\"tex-span\"></span>\nblack"}
{"name": "1086_C. Vasya and Templates", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^6) — the number of testcases.\n\nIn hacks you can only use t = 1.\n\nEach of the next t lines contains the description of the testcase in the following form:\n\nThe first line of the testcase contains a single integer k (1 ≤ k ≤ 26) — the length of the template.\n\nThe second line of the testcase contains the string s (1 ≤ |s| ≤ 10^6).\n\nThe third line of the testcase contains the string a.\n\nThe fourth line of the testcase contains the string b.\n\nStrings s, a and b have the same length (|s| = |a| = |b|) and consist only of the first k Latin letters, all letters are lowercase.\n\nIt is guaranteed that string a is lexicographically less than or equal to string b.\n\nIt is also guaranteed that the total length of strings over all testcase won't exceed 3 ⋅ 10^6."}
{"name": "1106_C. Lunar New Year and Number Division", "description": "Input\n\nThe first line contains an even integer n (2 ≤ n ≤ 3 ⋅ 10^5), denoting that there are n integers on Bob's homework paper.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^4), describing the numbers you need to deal with."}
{"name": "1133_D. Zero Quantity Maximization", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in both arrays.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nThe third line contains n integers b_1, b_2, ..., b_n (-10^9 ≤ b_i ≤ 10^9)."}
{"name": "1175_F. The Number of Subpermutations", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ n). \n\nThis array can contain the same integers."}
{"name": "1234_A. Equalize Prices Again", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 100) — the number of goods. The second line of the query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^7), where a_i is the price of the i-th good."}
{"name": "1296_E1. String Coloring (easy version)", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 200) — the length of s.\n\nThe second line of the input contains the string s consisting of exactly n lowercase Latin letters."}
{"name": "1339_B. Sorted Adjacent Differences", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^{4}) — the number of test cases.\n\nThe first line of each test case contains single integer n (3 ≤ n ≤ 10^{5}) — the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, …, a_{n} (-10^{9} ≤ a_{i} ≤ 10^{9})."}
{"name": "193_D. Two Segments", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the permutation size. The second line contains n space-separated distinct integers pi, (1 ≤ pi ≤ n)."}
{"name": "28_B. pSort", "description": "Input\n\nThe first line contains positive integer n (1 ≤ n ≤ 100) — the number of cells in the array. The second line contains n distinct integers from 1 to n — permutation. The last line contains n integers from 1 to n — favourite numbers of the cells."}
{"name": "315_B. Sereja and Array", "description": "Input\n\nThe first line contains integers n, m (1 ≤ n, m ≤ 105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the original array.\n\nNext m lines describe operations, the i-th line describes the i-th operation. The first number in the i-th line is integer ti (1 ≤ ti ≤ 3) that represents the operation type. If ti = 1, then it is followed by two integers vi and xi, (1 ≤ vi ≤ n, 1 ≤ xi ≤ 109). If ti = 2, then it is followed by integer yi (1 ≤ yi ≤ 104). And if ti = 3, then it is followed by integer qi (1 ≤ qi ≤ n)."}
{"name": "337_D. Book of Evil", "description": "Input\n\nThe first line contains three space-separated integers n, m and d (1 ≤ m ≤ n ≤ 100000; 0 ≤ d ≤ n - 1). The second line contains m distinct space-separated integers p1, p2, ..., pm (1 ≤ pi ≤ n). Then n - 1 lines follow, each line describes a path made in the area. A path is described by a pair of space-separated integers ai and bi representing the ends of this path."}
{"name": "360_A. Levko and Array Recovery", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the size of the array and the number of operations in Levko's records, correspondingly.\n\nNext m lines describe the operations, the i-th line describes the i-th operation. The first integer in the i-th line is integer ti (1 ≤ ti ≤ 2) that describes the operation type. If ti = 1, then it is followed by three integers li, ri and di (1 ≤ li ≤ ri ≤ n,  - 104 ≤ di ≤ 104) — the description of the operation of the first type. If ti = 2, then it is followed by three integers li, ri and mi (1 ≤ li ≤ ri ≤ n,  - 5·107 ≤ mi ≤ 5·107) — the description of the operation of the second type.\n\nThe operations are given in the order Levko performed them on his array."}
{"name": "383_D. Antimatter", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 1000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000).\n\nThe sum a1 + a2 + ... + an will be less than or equal to 10000."}
{"name": "404_C. Restore Graph", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ k < n ≤ 105). Number n shows the number of vertices in the original graph. Number k shows that at most k edges were adjacent to each vertex in the original graph.\n\nThe second line contains space-separated integers d[1], d[2], ..., d[n] (0 ≤ d[i] < n). Number d[i] shows the shortest distance from the vertex Valera chose to the vertex number i."}
{"name": "49_E. Common ancestor", "description": "Input\n\nThe first line contains a non-empty DNA sequence s1, the second line contains a non-empty DNA sequence s2. The lengths of these lines do not exceed 50, the lines contain only lowercase Latin letters. The third line contains an integer n (0 ≤ n ≤ 50) — the number of permissible substitutions. Then follow n lines each of which describes a substitution in the format ai->bici. The characters ai, bi, and ci are lowercase Latin letters. Lines s1 and s2 can coincide, the list of substitutions can contain similar substitutions."}
{"name": "620_C. Pearls in a Row", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the number of pearls in a row.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) – the type of the i-th pearl."}
{"name": "780_C. Andryusha and Colored Balloons", "description": "Input\n\nThe first line contains single integer n (3 ≤ n ≤ 2·105) — the number of squares in the park.\n\nEach of the next (n - 1) lines contains two integers x and y (1 ≤ x, y ≤ n) — the indices of two squares directly connected by a path.\n\nIt is guaranteed that any square is reachable from any other using the paths."}
{"name": "803_G. Periodic RMQ Problem", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 104).\n\nThe second line contains n integers — elements of the array b (1 ≤ bi ≤ 109).\n\nThe third line contains one integer q (1 ≤ q ≤ 105).\n\nThen q lines follow, each representing a query. Each query is given either as 1 l r x — set all elements in the segment from l till r (including borders) to x (1 ≤ l ≤ r ≤ n·k, 1 ≤ x ≤ 109) or as 2 l r — find the minimum among all elements in the segment from l till r (1 ≤ l ≤ r ≤ n·k)."}
{"name": "899_B. Months and Years", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 24) — the number of integers.\n\nThe second line contains n integers a1, a2, ..., an (28 ≤ ai ≤ 31) — the numbers you are to check."}
{"name": "948_A. Protect Sheep", "description": "Input\n\nFirst line contains two integers R (1 ≤ R ≤ 500) and C (1 ≤ C ≤ 500), denoting the number of rows and the numbers of columns respectively.\n\nEach of the following R lines is a string consisting of exactly C characters, representing one row of the pasture. Here, 'S' means a sheep, 'W' a wolf and '.' an empty cell."}
{"name": "976_A. Minimum Binary Number", "description": "Input\n\nThe first line contains integer number n (1 ≤ n ≤ 100) — the length of string s.\n\nThe second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct."}
{"name": "995_E. Number Clicker", "description": "Input\n\nThe first line of the input contains 3 positive integers: u, v, p (0 ≤ u, v ≤ p-1, 3 ≤ p ≤ 10^9 + 9). p is guaranteed to be prime."}
{"name": "p00560 Semiexpress", "description": "Input\n\nRead the following data from the standard input.\n\n* The first line of input contains three space separated integers $N$, $M$, $K$. This means there are $N$ stations of the JOI Railways, an express train stops at $M$ stations, and a semiexpress train stops at $K$ stations,\n* The second line of input contains three space separated integers $A$, $B$, $C$. This means it takes $A$, $B$, $C$ minutes by a local, express, semiexpress train to travel from a station to the next station, respectively.\n>li> The third line of input contains an integer $T$. This means the JOI Railways wants to maximize the number of stations (except for the station 1) to which we can travel from the station 1 within $T$ minutes.\n* The $i$-th line ($1 \\leq i \\leq M$) of the following $M$ lines contains an integer $S_i$. This means an express train stops at the station $S_i$."}
{"name": "p00713 Circle and Points", "description": "Input\n\nThe input consists of a series of data sets, followed by a single line only containing a single character '0', which indicates the end of the input. Each data set begins with a line containing an integer N, which indicates the number of points in the data set. It is followed by N lines describing the coordinates of the points. Each of the N lines has two decimal fractions X and Y, describing the x- and y-coordinates of a point, respectively. They are given with five digits after the decimal point.\n\nYou may assume 1 <= N <= 300, 0.0 <= X <= 10.0, and 0.0 <= Y <= 10.0. No two points are closer than 0.0001. No two points in a data set are approximately at a distance of 2.0. More precisely, for any two points in a data set, the distance d between the two never satisfies 1.9999 <= d <= 2.0001. Finally, no three points in a data set are simultaneously very close to a single circle of radius one. More precisely, let P1, P2, and P3 be any three points in a data set, and d1, d2, and d3 the distances from an arbitrarily selected point in the xy-plane to each of them respectively. Then it never simultaneously holds that 0.9999 <= di <= 1.0001 (i = 1, 2, 3)."}
{"name": "p01731 Thread Tree", "description": "Input\n\nInput contains a single dataset in the following format:\n\n\nn\nk_1\nM_1\nk_2\nM_2\n:\n:\nk_n\nM_n\n\n\nThe first line contains an integer n (1 ≤ n ≤ 1,000), which is the number of posts in the thread. Then 2n lines follow. Each post is represented by two lines: the first line contains an integer k_i (k_1 = 0, 1 ≤ k_i < i for 2 ≤ i ≤ n) and indicates the i-th post is a reply to the k_i-th post; the second line contains a string M_i and represents the message of the i-th post. k_1 is always 0, which means the first post is not replying to any other post, i.e. it is an opening post.\n\nEach message contains 1 to 50 characters, consisting of uppercase, lowercase, and numeric letters."}
{"name": "1006_E. Military Problem", "description": "Input\n\nThe first line of the input contains two integers n and q (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5) — the number of officers in Berland army and the number of queries.\n\nThe second line of the input contains n - 1 integers p_2, p_3, ..., p_n (1 ≤ p_i < i), where p_i is the index of the direct superior of the officer having the index i. The commander has index 1 and doesn't have any superiors.\n\nThe next q lines describe the queries. The i-th query is given as a pair (u_i, k_i) (1 ≤ u_i, k_i ≤ n), where u_i is the index of the officer which starts spreading a command, and k_i is the index of the required officer in the command spreading sequence."}
{"name": "1095_E. Almost Regular Bracket Sequence", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^6) — the length of the bracket sequence.\n\nThe second line of the input contains the string s consisting of n opening '(' and closing ')' brackets."}
{"name": "1114_F. Please, another Queries on Array?", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 4 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5) — the number of elements in array a and the number of queries.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 300) — the elements of array a.\n\nThen q lines follow, describing queries in the format given in the statement.\n\n  1. \"MULTIPLY l r x\" (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 300) — denotes a multiplication query.\n  2. \"TOTIENT l r\" (1 ≤ l ≤ r ≤ n) — denotes a query on the value of Euler's totient function. \n\n\n\nIt is guaranteed that there is at least one \"TOTIENT\" query."}
{"name": "1163_B2. Cat Party (Hard Edition)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the total number of days.\n\nThe second line contains n integers u_1, u_2, …, u_n (1 ≤ u_i ≤ 10^5) — the colors of the ribbons the cats wear."}
{"name": "1183_H. Subsequences (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^{12}) — the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string s consisting of n lowercase Latin letters."}
{"name": "1201_C. Maximum Median", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n is odd, 1 ≤ k ≤ 10^9) — the number of elements in the array and the largest number of operations you can make.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1454_F. Array Partition", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the length of a.\n\nThe second line of the test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1479_A. Searching Local Minimum", "description": "Input\n\n\n5\n3\n2\n1\n4\n5"}
{"name": "1529_A. Eshag Loves Big Arrays", "description": "Input\n\nThe first line contains an integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1≤ n≤ 100) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1≤ a_i ≤ 100) — the elements of the array a."}
{"name": "160_A. Twins", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of coins. The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the coins' values. All numbers are separated with spaces."}
{"name": "276_B. Little Girl and Game", "description": "Input\n\nThe input contains a single line, containing string s (1 ≤ |s| ≤ 103). String s consists of lowercase English letters."}
{"name": "487_B. Strip", "description": "Input\n\nThe first line contains three space-separated integers n, s, l (1 ≤ n ≤ 105, 0 ≤ s ≤ 109, 1 ≤ l ≤ 105).\n\nThe second line contains n integers ai separated by spaces ( - 109 ≤ ai ≤ 109)."}
{"name": "653_F. Paper task", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 500 000) — the length of the string s.\n\nThe second line contains a string s of length n consisting of only '(' and ')'."}
{"name": "839_B. Game of the Rows", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.\n\nThe second line contains k integers a1, a2, a3, ..., ak (1 ≤ ai ≤ 10000), where ai denotes the number of soldiers in the i-th group.\n\nIt is guaranteed that a1 + a2 + ... + ak ≤ 8·n."}
{"name": "884_D. Boxes And Balls", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 200000) — the number of boxes and colors.\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the number of balls with color i."}
{"name": "958_C1. Encryption (easy)", "description": "Input\n\nThe first line of the input contains two space-separated integer N and p (2 ≤ N ≤ 100 000, 2 ≤ p ≤ 10 000) – the number of elements in A, and the modulo for computing scores, respectively.\n\nThe second line contains N space-separated integers which are the elements of A. Each integer is from the interval [1, 1 000 000]."}
{"name": "p00906 One-Dimensional Cellular Automaton", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nN M A B C T\nS(0, 0) S(1, 0) ... S(N − 1, 0)\n\n\nThe first line of a dataset consists of six integers, namely N, M, A, B, C and T. N is the number of cells. M is the modulus in the equation (1). A, B and C are coefficients in the equation (1). Finally, T is the time for which you should compute the states.\n\nYou may assume that 0 < N ≤ 50, 0 < M ≤ 1000, 0 ≤ A, B, C < M and 0 ≤ T ≤ 109.\n\nThe second line consists of N integers, each of which is non-negative and less than M. They represent the states of the cells at time zero.\n\nA line containing six zeros indicates the end of the input."}
{"name": "1070_G. Monsters and Potions", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 100; 1 ≤ m ≤ n) — length of the game board and the number of heroes on it.\n\nThe following m lines describe heroes. Each line contains two integers s_i and h_i (1 ≤ s_i ≤ n; 1 ≤ h_i ≤ 10^6), where s_i is the initial position and h_i is the initial HP of the i-th hero. It is guaranteed that each cell s_i is blank. It is also guaranteed that all s_i are different. \n\nThe following line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_j ≤ 10^6), where a_j describes the i-th cell of the game board:\n\n  * a_j=0 means that the i-th cell is blank, \n  * a_j<0 means that the i-th cell contains monster with positive HP of -a_j, \n  * a_j>0 means that the i-th cell contains potion with a_j HP."}
{"name": "1111_A. Superhero Transformation", "description": "Input\n\nThe first line contains the string s having length between 1 and 1000, inclusive.\n\nThe second line contains the string t having length between 1 and 1000, inclusive.\n\nBoth strings s and t are guaranteed to be different and consist of lowercase English letters only."}
{"name": "125_D. Two progressions", "description": "Input\n\nThe first line contains a positive integer n (2 ≤ n ≤ 30000), n is the length of the given sequence. The second line contains elements of the given sequence a1, a2, ..., an ( - 108 ≤ ai ≤ 108). The elements of the progression are different integers."}
{"name": "1366_E. Two Arrays", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of arrays a and b respectively.\n\nThe second line contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9) — the array a.\n\nThe third line contains m integers b_1, b_2, ... , b_m (1 ≤ b_i ≤ 10^9; b_i < b_{i+1}) — the array b."}
{"name": "1387_B1. Village (Minimum)", "description": "Input\n\nThe first line contains an integer N (1 < N ≤ 10^5). Houses are numbered by consecutive integers 1, 2, …, N.\n\nThen N-1 lines follow that describe the roads. Each line contains two integers a and b (1 ≤ a, b ≤ N, a ≠ b) denoting that there is a road connecting houses a and b."}
{"name": "1408_E. Avoid Rainbow Cycles", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m, n ≤ 10^5), the number of sets and the number of vertices in the graph.\n\nThe second line contains m integers a_1, a_2, …, a_m (1 ≤ a_i ≤ 10^9).\n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 10^9).\n\nIn the each of the next of m lines there are descriptions of sets. In the i-th line the first integer s_i (1 ≤ s_i ≤ n) is equal to the size of A_i. Then s_i integers follow: the elements of the set A_i. These integers are from 1 to n and distinct.\n\nIt is guaranteed that the sum of s_i for all 1 ≤ i ≤ m does not exceed 2 ⋅ 10^5."}
{"name": "1500_F. Cupboards Jumps", "description": "Input\n\nThe first line contains two integers n and C (3 ≤ n ≤ 10^6, 0 ≤ C ≤ 10^{12}) — the number of cupboards and the limit on possible w_i.\n\nThe second line contains n - 2 integers w_1, w_2, …, w_{n - 2} (0 ≤ w_i ≤ C) — the values defined in the statement."}
{"name": "224_B. Array", "description": "Input\n\nThe first line contains two space-separated integers: n and k (1 ≤ n, k ≤ 105). The second line contains n space-separated integers a1, a2, ..., an — elements of the array a (1 ≤ ai ≤ 105)."}
{"name": "273_A. Dima and Staircase", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of stairs in the staircase. The second line contains a non-decreasing sequence, consisting of n integers, a1, a2, ..., an (1 ≤ ai ≤ 109; ai ≤ ai + 1).\n\nThe next line contains integer m (1 ≤ m ≤ 105) — the number of boxes. Each of the following m lines contains a pair of integers wi, hi (1 ≤ wi ≤ n; 1 ≤ hi ≤ 109) — the size of the i-th thrown box.\n\nThe numbers in the lines are separated by spaces."}
{"name": "296_C. Greg and Array", "description": "Input\n\nThe first line contains integers n, m, k (1 ≤ n, m, k ≤ 105). The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the initial array.\n\nNext m lines contain operations, the operation number i is written as three integers: li, ri, di, (1 ≤ li ≤ ri ≤ n), (0 ≤ di ≤ 105).\n\nNext k lines contain the queries, the query number i is written as two integers: xi, yi, (1 ≤ xi ≤ yi ≤ m).\n\nThe numbers in the lines are separated by single spaces."}
{"name": "31_A. Worms Evolution", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 100) — amount of worm's forms. The second line contains n space-separated integers ai (1 ≤ ai ≤ 1000) — lengths of worms of each form."}
{"name": "557_B. Pasha and Tea", "description": "Input\n\nThe first line of the input contains two integers, n and w (1 ≤ n ≤ 105, 1 ≤ w ≤ 109) — the number of Pasha's friends that are boys (equal to the number of Pasha's friends that are girls) and the capacity of Pasha's teapot in milliliters.\n\nThe second line of the input contains the sequence of integers ai (1 ≤ ai ≤ 109, 1 ≤ i ≤ 2n) — the capacities of Pasha's tea cups in milliliters."}
{"name": "604_E. Lieges of Legendre", "description": "Input\n\nThe first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).\n\nThe second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game."}
{"name": "721_A. One-dimensional Japanese Crossword", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W' — to white square in the row that Adaltik drew)."}
{"name": "742_D. Arpa's weak amphitheater and Mehrdad's valuable Hoses", "description": "Input\n\nThe first line contains integers n, m and w (1 ≤ n ≤ 1000, <image>, 1 ≤ w ≤ 1000) — the number of Hoses, the number of pair of friends and the maximum total weight of those who are invited.\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the Hoses.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 106) — the beauties of the Hoses.\n\nThe next m lines contain pairs of friends, the i-th of them contains two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), meaning that Hoses xi and yi are friends. Note that friendship is bidirectional. All pairs (xi, yi) are distinct."}
{"name": "766_A. Mahmoud and Longest Uncommon Subsequence", "description": "Input\n\nThe first line contains string a, and the second line — string b. Both of these strings are non-empty and consist of lowercase letters of English alphabet. The length of each string is not bigger than 105 characters."}
{"name": "789_E. The Great Mixing", "description": "Input\n\nThe first line contains two integers n, k (0 ≤ n ≤ 1000, 1 ≤ k ≤ 106) — carbon dioxide concentration the friends want and the number of Coke types.\n\nThe second line contains k integers a1, a2, ..., ak (0 ≤ ai ≤ 1000) — carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration."}
{"name": "856_A. Set Theory", "description": "Input\n\nInput data contains multiple test cases. The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n — the number of elements in A (1 ≤ n ≤ 100).\n\nThe second line contains n integers ai — the elements of A (1 ≤ ai ≤ 106)."}
{"name": "883_A. Automatic Door", "description": "Input\n\nThe first line contains four integers n, m, a and d (1 ≤ n, a ≤ 109, 1 ≤ m ≤ 105, 1 ≤ d ≤ 1018) — the number of the employees, the number of the clients, the moment of time when the first employee will come and the period of time in which the door closes.\n\nThe second line contains integer sequence t1, t2, ..., tm (1 ≤ ti ≤ 1018) — moments of time when clients will come. The values ti are given in non-decreasing order."}
{"name": "926_C. Is This a Zebra?", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the width of the photo.\n\nThe second line contains a sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 1) — the description of the photo. If ai is zero, the i-th column is all black. If ai is one, then the i-th column is all white."}
{"name": "955_A. Feed the cat", "description": "Input\n\nThe first line contains two integers hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59) — the time of Andrew's awakening.\n\nThe second line contains four integers H, D, C and N (1 ≤ H ≤ 105, 1 ≤ D, C, N ≤ 102)."}
{"name": "981_C. Useful Decomposition", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^{5}) the number of nodes in the tree.\n\nEach of the next n - 1 lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) — the edges of the tree. It is guaranteed that the given edges form a tree."}
{"name": "p00104 Magical Tiles", "description": "Input\n\nThe input consists of multiple datasets. The input ends with a line which contains two 0. Each dataset consists of:\n\n\nH W\nH lines where each line contains W characters\n\n\nYou can assume that 0 < W, H < 101."}
{"name": "p00890 Test Case Tweaking", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nn m c\nf1 t1 c1\nf2 t2 c2\n.\n.\n.\nfm tm cm\n\n\n<image> | <image>\n---|---\n\nFigure G.1: Example 1 of graph\n\n|\n\nFigure G.2: Example 2 of graph\n\nThe integers n, m and c are the number of the nodes, the number of the edges, and the target cost, respectively, each separated by a single space, where 2 ≤ n ≤ 100, 1 ≤ m ≤ 1000 and 0 ≤ c ≤ 100000.\n\nEach node in the graph is represented by an integer 1 through n.\n\nThe following m lines represent edges: the integers fi, ti and ci (1 ≤ i ≤ m) are the originating node, the destination node and the associated cost of the i-th edge, each separated by a single space. They satisfy 1 ≤ fi, ti ≤ n and 0 ≤ ci ≤ 10000. You can assume that fi ≠ ti and (fi, ti) ≠ (fj, tj) when i ≠ j.\n\nYou can assume that, for each dataset, there is at least one path from node 1 to node n, and that the cost of the minimum cost path from node 1 to node n of the given graph is greater than c.\n\nThe end of the input is indicated by a line containing three zeros separated by single spaces."}
{"name": "p01293 Whist", "description": "Input\n\nThe input is a sequence of datasets. Each dataset corresponds to a single deal and has the following format:\n\nTrump\nCardN,1 CardN,2 ... CardN,13\nCardE,1 CardE,2 ... CardE,13\nCardS,1 CardS,2 ... CardS,13\nCardW,1 CardW,2 ... CardW,13\n\n\nTrump indicates the trump suit. CardN,i, CardE,i, CardS,i, and CardW,i denote the card played in the i-th trick by the north, east, south, and west players respectively. Each card is represented by two characters; the first and second character indicates the rank and the suit respectively.\n\nThe rank is represented by one of the following characters: ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’, ‘T’ (10), ‘J’ (jack), ‘Q’ (queen), ‘K’ (king), and ‘A’ (ace). The suit is represented by one of the following characters: ‘S’ (spades), ‘H’ (hearts), ‘D’ (diamonds), and ‘C’ (clubs).\n\nYou should assume the cards have been dealt out by the west player. Thus the first trick is led by the north player. Also, the input does not contain any illegal plays.\n\nThe input is terminated by a line with “#”. This is not part of any dataset and thus should not be processed."}
{"name": "1043_F. Make It One", "description": "Input\n\nThe first line contains an only integer n (1 ≤ n ≤ 300 000) — the number of integers in the sequence.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 300 000)."}
{"name": "1066_D. Boxes Packing", "description": "Input\n\nThe first line of the input contains three integers n, m, k (1 ≤ n, m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 10^9) — the number of objects, the number of boxes and the size of each box.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the size of the i-th object."}
{"name": "1089_G. Guest Student", "description": "Input\n\nThe first line of the input contains integer t (1 ≤ t ≤ 10 000) — the number of test cases to process. For each test case independently solve the problem and print the answer. \n\nEach test case consists of two lines. The first of them contains integer k (1 ≤ k ≤ 10^8) — the required number of days to study as a guest student. The second line contains exactly seven integers a_1, a_2, ..., a_7 (a_i = 0 or a_i = 1) where a_i=1 if and only if classes for guest students are held on the i-th day of a week."}
{"name": "1108_B. Divisors of Two Integers", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 128) — the number of divisors of x and y.\n\nThe second line of the input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^4), where d_i is either divisor of x or divisor of y. If a number is divisor of both numbers x and y then there are two copies of this number in the list."}
{"name": "1213_D2. Equalizing by Division (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of equal numbers required.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1299_A. Anu Has a Function", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9). Elements of the array are not guaranteed to be different."}
{"name": "1382_E. Mastermind", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains three integers n,x,y (1≤ n≤ 10^5, 0≤ x≤ y≤ n) — the length of the codes, and two values Alice responds with.\n\nThe second line of each test case contains n integers b_1,…,b_n (1≤ b_i≤ n+1) — Bob's guess, where b_i is the i-th color of the guess.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5."}
{"name": "1425_E. Excitation of Atoms", "description": "Input\n\nThe first line contains two integers N K (4 ≤ N ≤ 10^5, 0 ≤ K < N), the number of atoms, and the number of bonds that must be changed.\n\nThe second line contains N integers A_i (1 ≤ A_i ≤ 10^6), which denotes the energy given by atom i when on excited state.\n\nThe third line contains N integers D_i (1 ≤ D_i ≤ 10^6), which denotes the energy needed to excite atom i."}
{"name": "1447_C. Knapsack", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains integers n and W (1 ≤ n ≤ 200 000, 1≤ W ≤ 10^{18}). \n\nThe second line of each test case contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — weights of the items.\n\nThe sum of n over all test cases does not exceed 200 000."}
{"name": "196_A. Lexicographically Maximum Subsequence", "description": "Input\n\nThe single line contains a non-empty string s, consisting only of lowercase English letters. The string's length doesn't exceed 105."}
{"name": "21_A. Jabber ID", "description": "Input\n\nThe input contains of a single line. The line has the length between 1 and 100 characters, inclusive. Each characters has ASCII-code between 33 and 127, inclusive."}
{"name": "362_C. Insertion Sort", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 5000) — the length of the permutation. The second line contains n different integers from 0 to n - 1, inclusive — the actual permutation."}
{"name": "386_A. Second-Price Auction", "description": "Input\n\nThe first line of the input contains n (2 ≤ n ≤ 1000) — number of bidders. The second line contains n distinct integer numbers p1, p2, ... pn, separated by single spaces (1 ≤ pi ≤ 10000), where pi stands for the price offered by the i-th bidder."}
{"name": "456_C. Boredom", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) that shows how many numbers are in Alex's sequence. \n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105)."}
{"name": "600_A. Extract Numbers", "description": "Input\n\nThe only line of input contains the string s (1 ≤ |s| ≤ 105). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters."}
{"name": "670_F. Restore a Number", "description": "Input\n\nThe first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.\n\nThe second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. \n\nIt is guaranteed that the input data is correct, and the answer always exists."}
{"name": "696_C. PLEASE", "description": "Input\n\nThe first line of input contains a single integer k (1 ≤ k ≤ 105) — the number of elements in array Barney gave you.\n\nThe second line contains k integers a1, a2, ..., ak (1 ≤ ai ≤ 1018) — the elements of the array."}
{"name": "717_D. Dexterina’s Lab", "description": "Input\n\nThe first line of the input contains two integers n (1 ≤ n ≤ 109) and x (1 ≤ x ≤ 100) — the number of heaps and the maximum number of objects in a heap, respectively. The second line contains x + 1 real numbers, given with up to 6 decimal places each: P(0), P(1), ... , P(X). Here, P(i) is the probability of a heap having exactly i objects in start of a game. It's guaranteed that the sum of all P(i) is equal to 1."}
{"name": "831_A. Unimodal Array", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000) — the elements of the array."}
{"name": "8_C. Looking for Order", "description": "Input\n\nThe first line of the input file contains the handbag's coordinates xs, ys. The second line contains number n (1 ≤ n ≤ 24) — the amount of objects the girl has. The following n lines contain the objects' coordinates. All the coordinates do not exceed 100 in absolute value. All the given positions are different. All the numbers are integer."}
{"name": "978_A. Remove Duplicates", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the number of elements in Petya's array.\n\nThe following line contains a sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1 000) — the Petya's array."}
{"name": "p00588 Extraordinary Girl I", "description": "Input\n\nThe first line of input contains the number of test cases, T . Then T test cases follow. Each test case consists of two lines. The first line contains the number N , and the second line contains 4N characters, either Y or N . Y in n-th position means there are some books with ID n, and N means no book with ID n."}
{"name": "p00865 Expected Allowance", "description": "Input\n\nThe input is a sequence of lines each of which contains three integers n, m and k in this order. They satisfy the following conditions.\n\n1 ≤ n\n2 ≤ m\n0 ≤ k < nm\nnm × mn < 100000000 (108)\n\n\nThe end of the input is indicated by a line containing three zeros."}
{"name": "p01267 Luck Manipulator", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> N A B C X\n> Y1 Y2 ... YN\n\nThe first row contains five integers N (1 ≤ N ≤ 100), A, B (0 ≤ A, B ≤ 10,000), C (1 ≤ C ≤ 10,000), and X (0 ≤ X <C), respectively. It is given separated by two whitespace characters. Here, X represents the value of the first random number. On the following line, N integers Y1, Y2, ..., YN (0 ≤ Yi ≤ 10,000) are given, separated by a single space character. These represent the conditions for stopping the reel with a specific pattern, and the i-th number Yi is the random number value Yi to stop the i-th reel from the left with a special pattern. It means that there must be.\n\nThe end of the input is indicated by a single line containing five zeros separated by blanks."}
{"name": "1053_B. Vasya and Good Sequences", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5) — length of the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{18}) — the sequence a."}
{"name": "1096_D. Easy Problem", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the statement.\n\nThe second line contains one string s of length n, consisting of lowercase Latin letters — the statement written by Vasya.\n\nThe third line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 998244353)."}
{"name": "1117_E. Decypher the String", "description": "Input\n\nInitially the testing system sends one string t, consisting of lowercase Latin letters (1 ≤ |t| = n ≤ 10^4)."}
{"name": "1244_B. Rooms and Staircases", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then test cases follow. Each test case consists of two lines.\n\nThe first line contains one integer n (1 ≤ n ≤ 1 000) — the number of rooms on each floor.\n\nThe second line contains one string consisting of n characters, each character is either a '0' or a '1'. If the i-th character is a '1', then there is a staircase between the room i on the first floor and the room i on the second floor. If the i-th character is a '0', then there is no staircase between the room i on the first floor and the room i on the second floor.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied."}
{"name": "1285_B. Just Eat It!", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). The description of the test cases follows.\n\nThe first line of each test case contains n (2 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), where a_i represents the tastiness of the i-th type of cupcake.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1304_D. Shortest and Longest LIS", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is n (2 ≤ n ≤ 2 ⋅ 10^5), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is n-1.\n\nIt is guaranteed that the sum of all n in all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1369_C. RationalLee", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nNext 3t lines contain test cases — one per three lines.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ n) — the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the integers Lee has.\n\nThe third line contains k integers w_1, w_2, …, w_k (1 ≤ w_i ≤ n; w_1 + w_2 + … + w_k = n) — the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of n over test cases is less than or equal to 2 ⋅ 10^5."}
{"name": "147_A. Punctuation", "description": "Input\n\nThe input data contains of a single non-empty line — the text whose length is no more than 10000 characters."}
{"name": "1506_E. Restoring the Permutation", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains n integers q_1, q_2, …, q_n (1 ≤ q_i ≤ n).\n\nIt is guaranteed that the array q was obtained by applying the rule from the statement to some permutation p.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "161_A. Dress'em in Vests!", "description": "Input\n\nThe first input line contains four integers n, m, x and y (1 ≤ n, m ≤ 105, 0 ≤ x, y ≤ 109) — the number of soldiers, the number of vests and two numbers that specify the soldiers' unpretentiousness, correspondingly.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) in non-decreasing order, separated by single spaces — the desired sizes of vests. \n\nThe third line contains m integers b1, b2, ..., bm (1 ≤ bj ≤ 109) in non-decreasing order, separated by single spaces — the sizes of the available vests."}
{"name": "203_D. Hit Ball", "description": "Input\n\nThe first line contains three space-separated integers a, b, m (1 ≤ a, b, m ≤ 100). The first two integers specify point (a, 0, b), through which the ceiling and one of the corridor walls pass. The third integer is the distance at which Valera went away from the door.\n\nThe second line has three space-separated integers vx, vy, vz (|vx|, |vy|, |vz| ≤ 100, vy < 0, vz ≥ 0) — the speed of the ball after the hit.\n\nIt is guaranteed that the ball hits the door."}
{"name": "252_A. Little Xor", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains the space-separated integers from the array. All numbers are non-negative integers strictly less than 230."}
{"name": "371_A. K-Periodic Array", "description": "Input\n\nThe first line of the input contains a pair of integers n, k (1 ≤ k ≤ n ≤ 100), where n is the length of the array and the value n is divisible by k. The second line contains the sequence of elements of the given array a1, a2, ..., an (1 ≤ ai ≤ 2), ai is the i-th element of the array."}
{"name": "442_B. Andrey and Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of Andrey's friends. The second line contains n real numbers pi (0.0 ≤ pi ≤ 1.0) — the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point."}
{"name": "464_C. Substitutes in Number", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 105), consisting of digits — the string before processing all the requests.\n\nThe second line contains a single integer n (0 ≤ n ≤ 105) — the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"di->ti\", where di is exactly one digit (from 0 to 9), ti is a string consisting of digits (ti can be an empty string). The sum of lengths of ti for all queries doesn't exceed 105. The queries are written in the order in which they need to be performed."}
{"name": "536_B. Tavas and Malekas", "description": "Input\n\nThe first line contains two integers n and m, the length of s and the length of the subsequence Malekas wrote down (1 ≤ n ≤ 106 and 0 ≤ m ≤ n - |p| + 1).\n\nThe second line contains string p (1 ≤ |p| ≤ n).\n\nThe next line contains m space separated integers y1, y2, ..., ym, Malekas' subsequence (1 ≤ y1 < y2 < ... < ym ≤ n - |p| + 1)."}
{"name": "609_A. USB Flash Drives", "description": "Input\n\nThe first line contains positive integer n (1 ≤ n ≤ 100) — the number of USB flash drives.\n\nThe second line contains positive integer m (1 ≤ m ≤ 105) — the size of Sean's file.\n\nEach of the next n lines contains positive integer ai (1 ≤ ai ≤ 1000) — the sizes of USB flash drives in megabytes.\n\nIt is guaranteed that the answer exists, i. e. the sum of all ai is not less than m."}
{"name": "67_D. Optical Experiment", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 106), the number of rays. The second line contains n distinct integers. The i-th integer xi (1 ≤ xi ≤ n) shows that the xi-th ray enters from the i-th hole. Similarly, third line contains n distinct integers. The i-th integer yi (1 ≤ yi ≤ n) shows that the yi-th ray exits from the i-th hole. All rays are numbered from 1 to n."}
{"name": "724_E. Goods transportation", "description": "Input\n\nThe first line of the input contains two integers n and c (1 ≤ n ≤ 10 000, 0 ≤ c ≤ 109) — the number of cities and the maximum amount of goods for a single transportation.\n\nThe second line contains n integers pi (0 ≤ pi ≤ 109) — the number of units of goods that were produced in each city.\n\nThe third line of input contains n integers si (0 ≤ si ≤ 109) — the number of units of goods that can be sold in each city."}
{"name": "746_E. Numbers Exchange", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2·105, 1 ≤ m ≤ 109) — the number of cards Eugeny has and the number of cards Nikolay has. It is guaranteed that n is even.\n\nThe second line contains a sequence of n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the numbers on Eugeny's cards."}
{"name": "76_A. Gift", "description": "Input\n\nThe first line of the input contains two integers N and M (2 ≤ N ≤ 200, 1 ≤ M ≤ 50 000) — the number of cities and the number of roads, respectively. The second line contains two integers G and S (1 ≤ G, S ≤ 109) — the prices of gold and silver coins in tugriks. The following M lines contain information about the offer. Each of the records in list is given as four integers xi, yi, gi, si, where xi and yi are the numbers of cities that the road connects and gi, si are minimal gold and silver coins requirements for the i-th road (1 ≤ xi, yi ≤ N, 1 ≤ gi, si ≤ 109). Cities are numbered from 1 to N. It is possible that there are more than one road between a pair of cities. It is possible that a road connects the city with itself."}
{"name": "793_E. Problem of offices", "description": "Input\n\nThe first line contains single integer n (5 ≤ n ≤ 5000) — the total number of offices and departments. The departments and offices are numbered from 1 to n, the central office has index 1.\n\nThe second line contains four integers a, b, c and d (2 ≤ a, b, c, d ≤ n) — the indexes of the departments mentioned in collector's dialogue. It is guaranteed that these indexes are offices (i.e. leaves of the tree), not departments. It is guaranteed that the shortest path between any pair of these offices passes through the central department.\n\nOn the third line n - 1 integers follow: p2, p3, ..., pn (1 ≤ pi < i), where pi denotes that there is a special road between the i-th office or department and the pi-th department.\n\nPlease note the joint enumeration of departments and offices.\n\nIt is guaranteed that the given graph is a tree. The offices are the leaves, the departments are the internal vertices."}
{"name": "814_B. An express train to reveries", "description": "Input\n\nThe first line of input contains a positive integer n (2 ≤ n ≤ 1 000) — the length of Sengoku's permutation, being the length of both meteor outbursts at the same time.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n) — the sequence of colours in the first meteor outburst.\n\nThe third line contains n space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ n) — the sequence of colours in the second meteor outburst. At least one i (1 ≤ i ≤ n) exists, such that ai ≠ bi holds."}
{"name": "83_B. Doctor", "description": "Input\n\nThe first line of input data contains two space-separated integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 1014). In the second line are given space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in C++. It is recommended to use cin, cout streams (you can also use the %I64d specificator)."}
{"name": "886_C. Petya and Catacombs", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2·105) — then number of notes in Petya's logbook.\n\nThe second line contains n non-negative integers t1, t2, ..., tn (0 ≤ ti < i) — notes in the logbook."}
{"name": "p00780 Goldbach's Conjecture", "description": "Input\n\nAn integer is given in each input line. You may assume that each integer is even, and is greater than or equal to 4 and less than 215. The end of the input is indicated by a number 0."}
{"name": "1016_B. Segment Occurrences", "description": "Input\n\nThe first line contains three integer numbers n, m and q (1 ≤ n, m ≤ 10^3, 1 ≤ q ≤ 10^5) — the length of string s, the length of string t and the number of queries, respectively.\n\nThe second line is a string s (|s| = n), consisting only of lowercase Latin letters.\n\nThe third line is a string t (|t| = m), consisting only of lowercase Latin letters.\n\nEach of the next q lines contains two integer numbers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — the arguments for the i-th query."}
{"name": "1062_C. Banh-mi", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 100 000).\n\nThe second line contains a string of n characters, each character is either '0' or '1'. The i-th character defines the deliciousness of the i-th part.\n\nEach of the following q lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — the segment of the corresponding query."}
{"name": "1084_B. Kvass and the Fair Nut", "description": "Input\n\nThe first line contains two integers n and s (1 ≤ n ≤ 10^3, 1 ≤ s ≤ 10^{12}) — the number of kegs and glass volume.\n\nThe second line contains n integers v_1, v_2, …, v_n (1 ≤ v_i ≤ 10^9) — the volume of i-th keg."}
{"name": "1103_D. Professional layer", "description": "Input\n\nThere are two numbers in the first line n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ 10^{12}) — the number of judges and your skill in Cardbluff.\n\nThe second line contains n integers, where i-th number a_i (1 ≤ a_i ≤ 10^{12}) — the uncertainty of i-th judge\n\nThe third line contains n integers in the same format (1 ≤ e_i ≤ 10^9), e_i — the experience of i-th judge."}
{"name": "1131_D. Gourmet choice", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 1000) — the number of dishes in both days.\n\nEach of the next n lines contains a string of m symbols. The j-th symbol on i-th line is a_{ij}. All strings consist only of \"<\", \">\" and \"=\"."}
{"name": "1151_F. Sonya and Informatics", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ 10^9) — the length of the array a and the number of operations.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — the description of the array a."}
{"name": "120_B. Quiz League", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 1000 and 1 ≤ k ≤ n) — the numbers of sectors on the table and the number of the sector where the arrow is pointing. The second line contains n numbers: ai = 0 if the question from sector i has already been asked and ai = 1 if the question from sector i hasn't been asked yet (1 ≤ i ≤ n). The sectors are given in the clockwise order, the first sector follows after the n-th one."}
{"name": "1271_B. Blocks", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 200) — the number of blocks.\n\nThe second line contains one string s consisting of n characters, each character is either \"W\" or \"B\". If the i-th character is \"W\", then the i-th block is white. If the i-th character is \"B\", then the i-th block is black."}
{"name": "1315_C. Restoring Permutation", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nThe first line of each test case consists of one integer n — the number of elements in the sequence b (1 ≤ n ≤ 100).\n\nThe second line of each test case consists of n different integers b_1, …, b_n — elements of the sequence b (1 ≤ b_i ≤ 2n).\n\nIt is guaranteed that the sum of n by all test cases doesn't exceed 100."}
{"name": "1468_H. K and Medians", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains three integers n, k, and m (3 ≤ n ≤ 2 ⋅ 10^5; 3 ≤ k ≤ n; k is odd; 1 ≤ m < n) — the length of the sequence you have, the number of elements you choose in each step and the length of the sequence you'd like to get.\n\nThe second line of each test case contains m integers b_1, b_2, ..., b_m (1 ≤ b_1 < b_2 < ... < b_m ≤ n) — the sequence you'd like to get, given in the ascending order.\n\nIt's guaranteed that the total sum of n over all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1493_B. Planet Lapituletti", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases.\n\nThe next 2 ⋅ T lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of a test case contains two integers h, m (1 ≤ h, m ≤ 100).\n\nThe second line contains the start time s in the described format HH:MM."}
{"name": "1515_H. Phoenix and Bits", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ q ≤ 10^5) — the number of integers and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i < 2^{20}) — the integers that Phoenix starts with.\n\nThe next q lines contain the queries. For each query, the first integer of each line is t (1 ≤ t ≤ 4) — the type of query.\n\nIf t ∈ \\{1, 2, 3\\}, then three integers l_i, r_i, and x_i will follow (0 ≤ l_i, r_i, x_i < 2^{20}; l_i ≤ r_i).\n\nOtherwise, if t=4, two integers l_i and r_i will follow (0 ≤ l_i ≤ r_i < 2^{20}).\n\nIt is guaranteed that there is at least one query where t=4."}
{"name": "335_A. Banana", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 1000), consisting of lowercase English characters only. The second line contains an integer n (1 ≤ n ≤ 1000)."}
{"name": "358_A. Dima and Continuous Line", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 103). The second line contains n distinct integers x1, x2, ..., xn ( - 106 ≤ xi ≤ 106) — the i-th point has coordinates (xi, 0). The points are not necessarily sorted by their x coordinate."}
{"name": "474_B. Worms", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105), the number of piles.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 103, a1 + a2 + ... + an ≤ 106), where ai is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 ≤ m ≤ 105), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q1, q2, ..., qm (1 ≤ qi ≤ a1 + a2 + ... + an), the labels of the juicy worms."}
{"name": "498_A. Crazy Town", "description": "Input\n\nThe first line contains two space-separated integers x1, y1 ( - 106 ≤ x1, y1 ≤ 106) — the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 ≤ x2, y2 ≤ 106) — the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 ≤ n ≤ 300) — the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 ≤ ai, bi, ci ≤ 106; |ai| + |bi| > 0) — the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines)."}
{"name": "548_D. Mike and Feet", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 2 × 105), the number of bears.\n\nThe second line contains n integers separated by space, a1, a2, ..., an (1 ≤ ai ≤ 109), heights of bears."}
{"name": "575_A. Fibonotci", "description": "Input\n\nThe first line contains two numbers K and P. The second line contains a single number N. The third line contains N numbers separated by spaces, that represent the first N numbers of the sequence s. The fourth line contains a single number M, the number of values of sequence s for which <image>. Each of the following M lines contains two numbers j and v, indicating that <image> and sj = v. All j-s are distinct.\n\n  * 1 ≤ N, M ≤ 50000\n  * 0 ≤ K ≤ 1018\n  * 1 ≤ P ≤ 109\n  * 1 ≤ si ≤ 109, for all i = 0, 1, ...N - 1\n  * N ≤ j ≤ 1018\n  * 1 ≤ v ≤ 109\n  * All values are integers"}
{"name": "596_D. Wilbur and Trees", "description": "Input\n\nThe first line of the input contains two integers, n (1 ≤ n ≤ 2000) and h (1 ≤ h ≤ 108) and a real number p (0 ≤ p ≤ 1), given with no more than six decimal places.\n\nThe second line of the input contains n integers, x1, x2, ..., xn ( - 108 ≤ xi ≤ 108) in no particular order."}
{"name": "825_D. Suitable Replacement", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 106).\n\nThe second line contains string t (1 ≤ |t| ≤ 106)."}
{"name": "967_C. Stairs and Elevators", "description": "Input\n\nThe first line contains five integers n, m, c_l, c_e, v (2 ≤ n, m ≤ 10^8, 0 ≤ c_l, c_e ≤ 10^5, 1 ≤ c_l + c_e ≤ m - 1, 1 ≤ v ≤ n - 1) — the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains c_l integers l_1, …, l_{c_l} in increasing order (1 ≤ l_i ≤ m), denoting the positions of the stairs. If c_l = 0, the second line is empty.\n\nThe third line contains c_e integers e_1, …, e_{c_e} in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers l_i and e_i are distinct.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines describe queries. Each of these lines contains four integers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i. e. y_1 and y_2 are not among l_i and e_i."}
{"name": "993_C. Careful Maneuvering", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 60), the number of enemy spaceships with x = -100 and the number of enemy spaceships with x = 100, respectively.\n\nThe second line contains n integers y_{1,1}, y_{1,2}, …, y_{1,n} (|y_{1,i}| ≤ 10 000) — the y-coordinates of the spaceships in the first group.\n\nThe third line contains m integers y_{2,1}, y_{2,2}, …, y_{2,m} (|y_{2,i}| ≤ 10 000) — the y-coordinates of the spaceships in the second group.\n\nThe y coordinates are not guaranteed to be unique, even within a group."}
{"name": "p00697 Jigsaw Puzzles for Computers", "description": "Input\n\nThe input consists of multiple puzzles.\n\n\n\tN\n\n\tPuzzle1\n\n\tPuzzle2\n\n\t. . .\n\n\tPuzzleN\n\n\n\nN is the number of puzzles. Each Puzzlei gives a puzzle with a single line of 44 characters, consisting of four-character representations of the nine pieces of the puzzle, separated by a space character. For example, the following line represents the puzzle in Figure 1.\n\n\n\n\tgwgW RBbW GWrb GRRb BWGr Rbgw rGbR gBrg GRwb"}
{"name": "p00838 Colored Cubes", "description": "Input\n\nThe input is a sequence of datasets. A dataset consists of a header and a body appearing in this order. A header is a line containing one positive integer n and the body following it consists of n lines. You can assume that 1 ≤ n ≤ 4. Each line in a body contains six color names separated by a space. A color name consists of a word or words connected with a hyphen (-). A word consists of one or more lowercase letters. You can assume that a color name is at most 24-characters long including hyphens.\n\nA dataset corresponds to a set of colored cubes. The integer n corresponds to the number of cubes. Each line of the body corresponds to a cube and describes the colors of its faces. Color names in a line is ordered in accordance with the numbering of faces shown in Figure 5. A line\n\n\ncolor1 color2 color3 color4 color5 color6\n\n\ncorresponds to a cube colored as shown in Figure 6.\n\nThe end of the input is indicated by a line containing a single zero. It is not a dataset nor a part of a dataset.\n\n<image>\n<image>\n<image>"}
{"name": "p01102 Almost Identical Programs", "description": "Input\n\nThe input consists of at most 100 datasets, each in the following format.\n\n\ns1\ns2\n\n\nEach of s1 and s2 is a string written in a line, with the length between 1 and 200, inclusive. They are the first and the second submitted programs respectively. A program consists of lowercase letters (`a`, `b`, ..., `z`), uppercase letters (`A`, `B`, ..., `Z`), digits (`0`, `1`, ..., `9`), double quotes (`\"`), and semicolons (`;`). When double quotes occur in a program, there are always even number of them.\n\nThe end of the input is indicated by a line containing one '`.`' (period)."}
{"name": "p01401 The Legendary Sword", "description": "Input\n\nThe input consists of multiple datasets, and the end of the input is a line of two zeros separated by spaces. The total number of datasets is 50 or less. Each dataset has the following format:\n\n\nw h\ns (1,1) ... s (1, w)\ns (2,1) ... s (2, w)\n...\ns (h, 1) ... s (h, w)\n\n\nw and h are integers indicating the width and height of the matrix data representing the floor of the ruins, respectively, and it can be assumed that 1 ≤ w and h ≤ 100, respectively, and 2 ≤ w + h ≤ 100. Each of the following h lines is composed of w characters separated by a space, and the character s (y, x) indicates the state of the point at the coordinate (y, x).\n\nThe meaning is as follows.\n\n* S: The point where the Demon King is first. There is always only one on the floor.\n* G: The point of the legendary sword. There is always only one.\n* .:Nothing.\n* Number: The point where the jewel is located. The numbers indicate the seal numbers that make up the seal. The numbers are integers of 1 or more, and there may be no omissions in the numbers in between.\n\nIn addition, the Demon King can move to adjacent coordinates on the floor of the ruins, up, down, left, and right, and the time required for that movement is 1. It doesn't take long to destroy a jewel because it can be destroyed just by touching it."}
{"name": "1008_C. Reorder the Array", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1076_A. Minimizing the String", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of s.\n\nThe second line of the input contains exactly n lowercase Latin letters — the string s."}
{"name": "1097_A. Gennady and a Card Game", "description": "Input\n\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\n\nEach string is two characters long. The first character denotes the rank and belongs to the set \\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}. The second character denotes the suit and belongs to the set \\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}.\n\nAll the cards in the input are different."}
{"name": "1118_B. Tanya and Candies", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of candies.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4), where a_i is the weight of the i-th candy."}
{"name": "1144_E. Median String", "description": "Input\n\nThe first line of the input contains one integer k (1 ≤ k ≤ 2 ⋅ 10^5) — the length of strings.\n\nThe second line of the input contains one string s consisting of exactly k lowercase Latin letters.\n\nThe third line of the input contains one string t consisting of exactly k lowercase Latin letters.\n\nIt is guaranteed that s is lexicographically less than t.\n\nIt is guaranteed that there is an odd number of strings lexicographically not less than s and not greater than t."}
{"name": "1165_D. Almost All Divisors", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 25) — the number of queries. Then t queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 300) — the number of divisors in the list.\n\nThe second line of the query contains n integers d_1, d_2, ..., d_n (2 ≤ d_i ≤ 10^6), where d_i is the i-th divisor of the guessed number. It is guaranteed that all values d_i are distinct."}
{"name": "121_B. Lucky Transformation", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 109) — the number of digits in the number and the number of completed operations. The second line contains n digits without spaces representing the array of digits d, starting with d1. It is guaranteed that the first digit of the number does not equal zero."}
{"name": "1244_F. Chips", "description": "Input\n\nThe first line contains two integers n and k (3 ≤ n ≤ 200 000, 1 ≤ k ≤ 10^{9}) — the number of chips and the number of iterations, respectively.\n\nThe second line contains a string consisting of n characters \"W\" and \"B\". If the i-th character is \"W\", then the i-th chip is white initially. If the i-th character is \"B\", then the i-th chip is black initially."}
{"name": "1285_F. Classical?", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array a."}
{"name": "1305_A. Kuroni and the Gifts", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of daughters, necklaces and bracelets.\n\nThe second line of each test case contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the brightnesses of the necklaces.\n\nThe third line of each test case contains n distinct integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 1000) — the brightnesses of the bracelets."}
{"name": "1329_C. Drazil Likes Heap", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 70 000): the number of test cases.\n\nEach test case contain two lines. The first line contains two integers h and g (1 ≤ g < h ≤ 20). The second line contains n = 2^h-1 distinct positive integers a[1], a[2], …, a[n] (1 ≤ a[i] < 2^{20}). For all i from 2 to 2^h - 1, a[i] < a[\\left ⌊{i/2}\\right ⌋].\n\nThe total sum of n is less than 2^{20}."}
{"name": "136_A. Presents", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the quantity of friends Petya invited to the party. The second line contains n space-separated integers: the i-th number is pi — the number of a friend who gave a gift to friend number i. It is guaranteed that each friend received exactly one gift. It is possible that some friends do not share Petya's ideas of giving gifts to somebody else. Those friends gave the gifts to themselves."}
{"name": "1392_A. Omkar and Password", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the password.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 ≤ a_{i} ≤ 10^9) — the initial contents of your password.\n\nThe sum of n over all test cases will not exceed 2 ⋅ 10^5."}
{"name": "1433_B. Yet Another Bookshelf", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 200) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the number of places on a bookshelf. The second line of the test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1), where a_i is 1 if there is a book at this position and 0 otherwise. It is guaranteed that there is at least one book on the bookshelf."}
{"name": "1458_A. Row GCD", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^{18}).\n\nThe third line contains m integers b_1, …, b_m (1 ≤ b_j ≤ 10^{18})."}
{"name": "1481_A. Space Navigation ", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line in each test case contains two integers p_x and p_y (-10^5 ≤ p_x, p_y ≤ 10^5; (p_x, p_y) ≠ (0, 0)) — the coordinates of Planetforces (p_x, p_y).\n\nThe second line contains the string s (1 ≤ |s| ≤ 10^5: |s| is the length of string s) — the list of orders.\n\nIt is guaranteed that the sum of |s| over all test cases does not exceed 10^5."}
{"name": "278_A. Circle Line", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 100) — the number of stations on the circle line. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 100) — the distances between pairs of neighboring stations. The third line contains two integers s and t (1 ≤ s, t ≤ n) — the numbers of stations, between which you need to find the shortest distance. These numbers can be the same.\n\nThe numbers in the lines are separated by single spaces."}
{"name": "371_E. Subway Innovation", "description": "Input\n\nThe first line of the input contains integer n (3 ≤ n ≤ 3·105) — the number of the stations before the innovation. The second line contains the coordinates of the stations x1, x2, ..., xn ( - 108 ≤ xi ≤ 108). The third line contains integer k (2 ≤ k ≤ n - 1) — the number of stations after the innovation.\n\nThe station coordinates are distinct and not necessarily sorted."}
{"name": "465_B. Inbox (100500)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of letters in the mailbox.\n\nThe second line contains n space-separated integers (zeros and ones) — the state of the letter list. The i-th number equals either 1, if the i-th number is unread, or 0, if the i-th letter is read."}
{"name": "489_A. SwapSort", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 3000) — the number of array elements. The second line contains elements of array: a0, a1, ..., an - 1 ( - 109 ≤ ai ≤ 109), where ai is the i-th element of the array. The elements are numerated from 0 to n - 1 from left to right. Some integers may appear in the array more than once."}
{"name": "538_A. Cutting Banner", "description": "Input\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES."}
{"name": "566_B. Replicating Processes", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 30 000) — the number of servers of the social network.\n\nNext 4n lines contain the rules of replicating processes, the i-th (1 ≤ i ≤ 4n) of these lines as form ai, bi, ci (1 ≤ ai, bi, ci ≤ n) and describes rule ai → (bi, ci).\n\nIt is guaranteed that each number of a server from 1 to n occurs four times in the set of all ai, and eight times among a set that unites all bi and ci."}
{"name": "658_A. Bear and Reverse Radewoosh", "description": "Input\n\nThe first line contains two integers n and c (1 ≤ n ≤ 50, 1 ≤ c ≤ 1000) — the number of problems and the constant representing the speed of loosing points.\n\nThe second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000, pi < pi + 1) — initial scores.\n\nThe third line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000, ti < ti + 1) where ti denotes the number of minutes one needs to solve the i-th problem."}
{"name": "703_B. Mishka and trip", "description": "Input\n\nThe first line of the input contains two integers n and k (3 ≤ n ≤ 100 000, 1 ≤ k ≤ n) — the number of cities in XXX and the number of capital cities among them.\n\nThe second line of the input contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10 000) — beauty values of the cities.\n\nThe third line of the input contains k distinct integers id1, id2, ..., idk (1 ≤ idi ≤ n) — indices of capital cities. Indices are given in ascending order."}
{"name": "747_B. Mammoth's Genome Decoding", "description": "Input\n\nThe first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.\n\nThe second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'."}
{"name": "958_F2. Lightsabers (medium)", "description": "Input\n\nThe first line of the input contains n (1 ≤ n ≤ 2·105) and m (1 ≤ m ≤ n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k1, k2, ..., km (with <image>) – the desired counts of Jedi Knights with lightsabers of each color from 1 to m."}
{"name": "1013_C. Photo of The Sky", "description": "Input\n\nThe first line of the input contains an only integer n (1 ≤ n ≤ 100 000), the number of points in Pavel's records.\n\nThe second line contains 2 ⋅ n integers a_1, a_2, ..., a_{2 ⋅ n} (1 ≤ a_i ≤ 10^9), coordinates, written by Pavel in some order."}
{"name": "1038_A. Equality", "description": "Input\n\nThe first line of the input contains integers n (1≤ n ≤ 10^5) and k (1 ≤ k ≤ 26).\n\nThe second line of the input contains the string s of length n. String s only contains uppercase letters from 'A' to the k-th letter of Latin alphabet."}
{"name": "1514_A. Perfectly Imperfect Array", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 100) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 10^4) — the elements of the array a."}
{"name": "261_A. Maxim and Discounts", "description": "Input\n\nThe first line contains integer m (1 ≤ m ≤ 105) — the number of discount types. The second line contains m integers: q1, q2, ..., qm (1 ≤ qi ≤ 105). \n\nThe third line contains integer n (1 ≤ n ≤ 105) — the number of items Maxim needs. The fourth line contains n integers: a1, a2, ..., an (1 ≤ ai ≤ 104) — the items' prices.\n\nThe numbers in the lines are separated by single spaces."}
{"name": "3_A. Shortest path of the king", "description": "Input\n\nThe first line contains the chessboard coordinates of square s, the second line — of square t.\n\nChessboard coordinates consist of two characters, the first one is a lowercase Latin letter (from a to h), the second one is a digit from 1 to 8."}
{"name": "471_B. MUH and Important Things", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2000) — the number of tasks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 2000), where hi is the difficulty of the i-th task. The larger number hi is, the more difficult the i-th task is."}
{"name": "688_C. NP-Hard Problem", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers ui and vi (1 ≤ ui, vi ≤ n), denoting an undirected edge between ui and vi. It's guaranteed the graph won't contain any self-loops or multiple edges."}
{"name": "710_B. Optimal Point on a Line", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the number of points on the line.\n\nThe second line contains n integers xi ( - 109 ≤ xi ≤ 109) — the coordinates of the given n points."}
{"name": "731_B. Coupons and Discounts", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 200 000) — the number of training sessions.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10 000) — the number of teams that will be present on each of the days."}
{"name": "915_E. Physical Education Lessons", "description": "Input\n\nThe first line contains one integer n, and the second line — one integer q (1 ≤ n ≤ 109, 1 ≤ q ≤ 3·105) — the number of days left before the end of the term, and the number of orders, respectively.\n\nThen q lines follow, i-th line containing three integers li, ri and ki representing i-th order (1 ≤ li ≤ ri ≤ n, 1 ≤ ki ≤ 2)."}
{"name": "991_B. Getting an A", "description": "Input\n\nThe first line contains a single integer n — the number of Vasya's grades (1 ≤ n ≤ 100).\n\nThe second line contains n integers from 2 to 5 — Vasya's grades for his lab works."}
{"name": "p00684 Calculation of Expressions", "description": "Input\n\nA sequence of lines each of which contains an expression is given as input. Each line consists of less than 100 characters and does not contain any blank spaces. You may assume that all expressions given in the sequence are syntactically correct."}
{"name": "p01698 Wish upon a shooting star", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 100 or less. The format of each data set is as follows.\n\n> $ n $\n> $ px_1 $ $ py_1 $ $ pz_1 $ $ vx_1 $ $ vy_1 $ $ vz_1 $ $ r_1 $ $ vr_1 $\n> ...\n> $ px_n $ $ py_n $ $ pz_n $ $ vx_n $ $ vy_n $ $ vz_n $ $ r_n $ $ vr_n $\n\n$ n $ is an integer representing the number of shooting stars, and can be assumed to be $ 1 $ or more and $ 200 $ or less.\n\nShooting star information is given in the following $ n $ line. Each line contains eight values ​​represented by four decimal places, $ (px_i, py_i, pz_i) $ is the initial position of the shooting star $ i $, $ (vx_i, vy_i, vz_i) $ is the moving speed, and $ r_i $ represents the initial radius and $ vr_i $ represents the rate of disappearance. For the given values, $ -1 {,} 000 \\ leq px_i \\ leq 1 {,} 000 $, $ -1 {,} 000 \\ leq py_i \\ leq 1 {,} 000 $, $ -1 {,} 000 \\ leq pz_i \\ leq 1 {,} 000 $, $ -100 \\ leq vx_i \\ leq 100 $, $ -100 \\ leq vy_i \\ leq 100 $, $ -100 \\ leq vz_i \\ leq 100 $, $ 1 \\ leq r_i \\ You can assume that it is leq 100 $, $ 1 \\ leq vr_i \\ leq 100 $.\n\nYou may also assume the following for a given dataset:\n\n* Even if the initial radius of one shooting star changes by $ 10 ^ {-8} $, the set of pairs of contacting stars does not change.\n* Even if one shooting star does not disappear due to contact, it will contact two or more shooting stars within $ 10 ^ {-8} $, or $ 10 ^ {-8 from the time of contact with another shooting star. Does not disappear spontaneously within} $\n* In the initial state, none of the two shooting stars overlap, and the distance is more than $ 10 ^ {-8} $.\n* At time $ t <10 ^ {-8} $, no two shooting stars touch\n\n\n\n$ n = 0 $ indicates the end of input. This is not included in the dataset."}
{"name": "p01842 Invisible", "description": "Input\n\nThe input consists of a single test case of the form:\n\n$ n $ $ m $\n$ a_1 $ $ a_2 $ $ \\ dots $ $ a_n $\n$ b_1 $ $ b_2 $ $ \\ dots $ $ b_m $\n\nThe first line consists of positive integers $ n $, $ m $ ($ 1 \\ le n, m \\ le 50 $) representing the number of decks. The second line consists of $ n $ integers, where $ a_i $ represents the $ i $ th card from the top of player 1's deck ($ 1 \\ le i \\ le n $). $ a_i $ is more than $ 1 $, less than $ 1 {,} 000 {,} 000 $, or $ -1 $. The third line consists of $ m $ integers, where $ b_j $ represents the $ j $ th card from the top of player 2's deck ($ 1 \\ le j \\ le m $). $ b_j $ is more than $ 1 $, less than $ 1 {,} 000 {,} 000 $, or $ -1 $. When $ a_i $ and $ b_j $ are positive integers, it represents a scoring card, and when it is $ -1 $, it represents a jamming card."}
{"name": "1119_H. Triple", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 17) — the number of arrays and the binary length of all numbers.\n\nThe second line contains three integers x, y, z (0 ≤ x,y,z ≤ 10^{9}) — the integers you chose.\n\nThen n lines follow. The i-th of them contains three integers a_{i}, b_{i} and c_{i} (0 ≤ a_{i} , b_{i} , c_{i} ≤ 2^{k} - 1) — the integers forming the i-th array."}
{"name": "1167_E. Range Deleting", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n, x ≤ 10^6) — the length of array a and the upper limit for its elements, respectively.\n\nThe second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ x)."}
{"name": "1248_A. Integer Points", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000), the number of test cases in the input. Then follow the test case descriptions.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 10^5), the number of lines drawn by DLS.\n\nThe second line of a test case contains n distinct integers p_i (0 ≤ p_i ≤ 10^9) describing the lines drawn by DLS. The integer p_i describes a line given by the equation y = x + p_i.\n\nThe third line of a test case contains an integer m (1 ≤ m ≤ 10^5), the number of lines drawn by JLS.\n\nThe fourth line of a test case contains m distinct integers q_i (0 ≤ q_i ≤ 10^9) describing the lines drawn by JLS. The integer q_i describes a line given by the equation y = -x + q_i.\n\nThe sum of the values of n over all test cases in the input does not exceed 10^5. Similarly, the sum of the values of m over all test cases in the input does not exceed 10^5.\n\nIn hacks it is allowed to use only one test case in the input, so t=1 should be satisfied."}
{"name": "1266_E. Spaceship Solitaire", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of types of resources.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the i-th of which is the goal for the i-th resource.\n\nThe third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of updates to the game milestones.\n\nThen q lines follow, the j-th of which contains three space separated integers s_j, t_j, u_j (1 ≤ s_j ≤ n, 1 ≤ t_j < a_{s_j}, 0 ≤ u_j ≤ n). For each triple, perform the following actions: \n\n  * First, if there is already a milestone for obtaining t_j units of resource s_j, it is removed. \n  * If u_j = 0, no new milestone is added. \n  * If u_j ≠ 0, add the following milestone: \"For reaching t_j units of resource s_j, gain one free piece of u_j.\" \n  * Output the minimum number of turns needed to win the game."}
{"name": "1418_E. Expected Damage", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of monsters and the number of shields, respectively.\n\nThe second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9), where d_i is the strength of the i-th monster.\n\nThen m lines follow, the i-th of them contains two integers a_i and b_i (1 ≤ a_i ≤ n; 1 ≤ b_i ≤ 10^9) — the description of the i-th shield."}
{"name": "1436_D. Bandit in a City", "description": "Input\n\nThe first line contains a single integer n — the number of squares in the city (2 ≤ n ≤ 2⋅10^5).\n\nThe second line contains n-1 integers p_2, p_3 ... p_n meaning that there is a one-way road from the square p_i to the square i (1 ≤ p_i < i). \n\nThe third line contains n integers a_1, a_2, ..., a_n — the number of citizens on each square initially (0 ≤ a_i ≤ 10^9)."}
{"name": "1486_C2. Guessing the Greatest (hard version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array.\n\nInteraction\n\nYou can ask queries by printing \"? l r\" (1 ≤ l < r ≤ n). The answer is the index of the second maximum of all elements a_l, a_{l + 1}, ..., a_r. Array a is fixed beforehand and can't be changed in time of interaction.\n\nYou can output the answer by printing \"! p\", where p is the index of the maximum element in the array.\n\nYou can ask no more than 20 queries. Printing the answer doesn't count as a query.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages \n\n\n\nHacks\n\nTo make a hack, use the following test format.\n\nIn the first line output a single integer n (2 ≤ n ≤ 10^5). In the second line output a permutation of n integers 1 to n. The position of n in the permutation is the position of the maximum\n\nExample\n\nInput\n\n\n5\n\n3\n\n4"}
{"name": "490_A. Team Olympiad", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 5000) — the number of children in the school. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 3), where ti describes the skill of the i-th child."}
{"name": "540_B. School Marks", "description": "Input\n\nThe first line contains 5 space-separated integers: n, k, p, x and y (1 ≤ n ≤ 999, n is odd, 0 ≤ k < n, 1 ≤ p ≤ 1000, n ≤ x ≤ n·p, 1 ≤ y ≤ p). Here n is the number of tests that Vova is planned to write, k is the number of tests he has already written, p is the maximum possible mark for a test, x is the maximum total number of points so that the classmates don't yet disturb Vova, y is the minimum median point so that mom still lets him play computer games.\n\nThe second line contains k space-separated integers: a1, ..., ak (1 ≤ ai ≤ p) — the marks that Vova got for the tests he has already written."}
{"name": "65_C. Harry Potter and the Golden Snitch", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10000). The following n + 1 lines contain the coordinates xi, yi, zi, separated by single spaces. The coordinates of any two consecutive points do not coincide. The next line contains the velocities vp and vs, the last line contains Px, Py, Pz, separated by single spaces. All the numbers in the input are integers, their absolute value does not exceed 104. The speeds are strictly positive. It is guaranteed that vs ≤ vp."}
{"name": "706_A. Beru-taxi", "description": "Input\n\nThe first line of the input contains two integers a and b ( - 100 ≤ a, b ≤ 100) — coordinates of Vasiliy's home.\n\nThe second line contains a single integer n (1 ≤ n ≤ 1000) — the number of available Beru-taxi cars nearby. \n\nThe i-th of the following n lines contains three integers xi, yi and vi ( - 100 ≤ xi, yi ≤ 100, 1 ≤ vi ≤ 100) — the coordinates of the i-th car and its speed.\n\nIt's allowed that several cars are located at the same point. Also, cars may be located at exactly the same point where Vasiliy lives."}
{"name": "772_C. Vulnerable Kerbals", "description": "Input\n\nThe first line of input contains two integers n and m (0 ≤ n < m ≤ 200 000) — the number of forbidden prefix products and the modulus.\n\nIf n is non-zero, the next line of input contains n distinct integers between 0 and m - 1, the forbidden prefix products. If n is zero, this line doesn't exist."}
{"name": "797_C. Minimal string", "description": "Input\n\nFirst line contains non-empty string s (1 ≤ |s| ≤ 105), consisting of lowercase English letters."}
{"name": "911_G. Mass Change Queries", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 200000) — the size of array a.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of array a.\n\nThe third line contains one integer q (1 ≤ q ≤ 200000) — the number of queries you have to process.\n\nThen q lines follow. i-th line contains four integers l, r, x and y denoting i-th query (1 ≤ l ≤ r ≤ n, 1 ≤ x, y ≤ 100)."}
{"name": "987_E. Petr and Permutations", "description": "Input\n\nIn the first line of input there is one integer n (10^{3} ≤ n ≤ 10^{6}).\n\nIn the second line there are n distinct integers between 1 and n — the permutation of size n from the test.\n\nIt is guaranteed that all tests except for sample are generated this way: First we choose n — the size of the permutation. Then we randomly choose a method to generate a permutation — the one of Petr or the one of Alex. Then we generate a permutation using chosen method."}
{"name": "1105_D. Kilani and the Game", "description": "Input\n\nThe first line contains three integers n, m and p (1 ≤ n, m ≤ 1000, 1 ≤ p ≤ 9) — the size of the grid and the number of players.\n\nThe second line contains p integers s_i (1 ≤ s ≤ 10^9) — the speed of the expansion for every player.\n\nThe following n lines describe the game grid. Each of them consists of m symbols, where '.' denotes an empty cell, '#' denotes a blocked cell and digit x (1 ≤ x ≤ p) denotes the castle owned by player x.\n\nIt is guaranteed, that each player has at least one castle on the grid."}
{"name": "1153_C. Serval and Parenthesis Sequence", "description": "Input\n\nThe first line contains a single integer |s| (1≤ |s|≤ 3 ⋅ 10^5), the length of the string.\n\nThe second line contains a string s, containing only \"(\", \")\" and \"?\"."}
{"name": "1272_F. Two Bracket Sequences", "description": "Input\n\nThe first line of the input contains one bracket sequence s consisting of no more than 200 characters '(' and ')'.\n\nThe second line of the input contains one bracket sequence t consisting of no more than 200 characters '(' and ')'."}
{"name": "1296_A. Array with Odd Sum", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2000) — the number of test cases.\n\nThe next 2t lines describe test cases. The first line of the test case contains one integer n (1 ≤ n ≤ 2000) — the number of elements in a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2000), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2000 (∑ n ≤ 2000)."}
{"name": "1360_B. Honest Coach", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases in the input. Then t test cases follow.\n\nEach test case consists of two lines. \n\nThe first line contains positive integer n (2 ≤ n ≤ 50) — number of athletes. \n\nThe second line contains n positive integers s_1, s_2, …, s_n (1 ≤ s_i ≤ 1000), where s_i — is the strength of the i-th athlete. Please note that s values may not be distinct."}
{"name": "1380_C. Create The Teams", "description": "Input\n\nThe first line contains the integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 10^5; 1 ≤ x ≤ 10^9) — the number of programmers and the restriction of team skill respectively.\n\nThe second line of each test case contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9), where a_i is the skill of the i-th programmer.\n\nThe sum of n over all inputs does not exceed 10^5."}
{"name": "1400_C. Binary String Reconstruction", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains the resulting string s (2 ≤ |s| ≤ 10^5, each character of s is either 0 or 1). The second line contains one integer x (1 ≤ x ≤ |s| - 1).\n\nThe total length of all strings s in the input does not exceed 10^5."}
{"name": "1469_E. A Bit Similar", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 10000) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^6). The second line contains the string s, consisting of n characters (each character is either 0 or 1).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6."}
{"name": "216_E. Martian Luck", "description": "Input\n\nThe first line contains three integers k, b and n (2 ≤ k ≤ 109, 0 ≤ b < k, 1 ≤ n ≤ 105).\n\nThe second line contains string s as a sequence of n integers, representing digits in the k-base notation: the i-th integer equals ai (0 ≤ ai < k) — the i-th digit of string s. The numbers in the lines are space-separated."}
{"name": "289_C. Polo the Penguin and Strings", "description": "Input\n\nA single line contains two positive integers n and k (1 ≤ n ≤ 106, 1 ≤ k ≤ 26) — the string's length and the number of distinct letters."}
{"name": "35_B. Warehouse", "description": "Input\n\nThe first input line contains integers n, m and k (1 ≤ n, m ≤ 30, 1 ≤ k ≤ 2000) — the height, the width of shelving and the amount of the operations in the warehouse that you need to analyze. In the following k lines the queries are given in the order of appearance in the format described above."}
{"name": "523_C. Name Quest", "description": "Input\n\nThe first line contains string s, consisting of lowercase English letters. The length of string s is from 1 to 1000 letters.\n\nThe second line contains string t, that also consists of lowercase English letters. The length of string t is from 1 to 106 letters."}
{"name": "54_A. Presents", "description": "Input\n\nThe first line contains integers N and K (1 ≤ N ≤ 365, 1 ≤ K ≤ N).\n\nThe second line contains a number C which represents the number of holidays (0 ≤ C ≤ N). Then in the same line follow C numbers ranging from 1 to N which are the numbers of holiday days. The numbers are given in the increasing order, without repeating numbers among them."}
{"name": "576_B. Invariance of Tree", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 105) — the size of the permutation (also equal to the size of the sought tree).\n\nThe second line contains permutation pi (1 ≤ pi ≤ n)."}
{"name": "734_F. Anton and School", "description": "Input\n\nThe first line of the input contains a single integers n (1 ≤ n ≤ 200 000) — the size of arrays b and c.\n\nThe second line contains n integers bi (0 ≤ bi ≤ 109) — elements of the array b.\n\nThird line contains n integers ci (0 ≤ ci ≤ 109) — elements of the array c."}
{"name": "828_A. Restaurant Tables", "description": "Input\n\nThe first line contains three integers n, a and b (1 ≤ n ≤ 2·105, 1 ≤ a, b ≤ 2·105) — the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.\n\nThe second line contains a sequence of integers t1, t2, ..., tn (1 ≤ ti ≤ 2) — the description of clients in chronological order. If ti is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people."}
{"name": "84_B. Magical Array", "description": "Input\n\nThe first line of the input data contains an integer n (1 ≤ n ≤ 105). The second line contains an array of original integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109)."}
{"name": "p00063 Palindrome", "description": "Input\n\nMultiple strings are given over multiple lines. One string is given for each line. The number of strings does not exceed 50."}
{"name": "p00195 What is the Most Popular Shop in Tokaichi?", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\ns1A s2A\ns1B s2B\ns1C s2C\ns1D s2D\ns1E s2E\n\n\nLine i is given the morning sales quantity s1i and the afternoon sales quantity s2i (1 ≤ s1i, s2i ≤ 10000) for A, B, C, D, and E, respectively. However, it is assumed that no store has the same number of units sold per day.\n\nThe number of datasets does not exceed 100."}
{"name": "1081_E. Missing Numbers", "description": "Input\n\nThe first line contains an even number n (2 ≤ n ≤ 10^5).\n\nThe second line contains n/2 positive integers x_2, x_4, …, x_n (1 ≤ x_i ≤ 2 ⋅ 10^5)."}
{"name": "1129_B. Wrong Answer", "description": "Input\n\nThe first and only line contains one integer k (1 ≤ k ≤ 10^9)."}
{"name": "1189_B. Number Circle", "description": "Input\n\nThe first line contains a single integer n (3≤ n ≤ 10^5) — the number of numbers.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the numbers. The given numbers are not necessarily distinct (i.e. duplicates are allowed)."}
{"name": "1227_B. Box", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains one integer n (1 ≤ n ≤ 10^{5}) — the number of elements in the secret code permutation p.\n\nThe second line of a test case contains n integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ n) — elements of the array q for secret permutation. It is guaranteed that q_i ≤ q_{i+1} for all i (1 ≤ i < n).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5."}
{"name": "1291_C. Mind Control", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers n, m and k (1 ≤ m ≤ n ≤ 3500, 0 ≤ k ≤ n - 1) — the number of elements in the array, your position in line and the number of people whose choices you can fix.\n\nThe second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3500."}
{"name": "1311_D. Three Integers", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe next t lines describe test cases. Each test case is given on a separate line as three space-separated integers a, b and c (1 ≤ a ≤ b ≤ c ≤ 10^4)."}
{"name": "1334_B. Middle Class", "description": "Input\n\nThe first line contains single integer T (1 ≤ T ≤ 1000) — the number of test cases.\n\nNext 2T lines contain the test cases — two lines per test case. The first line contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of people and the minimum amount of money to be considered as wealthy.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial savings of each person.\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5."}
{"name": "1354_D. Multiset", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^6) — the number of elements in the initial multiset and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_1 ≤ a_2 ≤ ... ≤ a_n ≤ n) — the elements of the multiset.\n\nThe third line contains q integers k_1, k_2, ..., k_q, each representing a query: \n\n  * if 1 ≤ k_i ≤ n, then the i-th query is \"insert k_i into the multiset\"; \n  * if k_i < 0, then the i-th query is \"remove the |k_i|-th order statistics from the multiset\". For this query, it is guaranteed that |k_i| is not greater than the size of the multiset."}
{"name": "1374_C. Move Brackets", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 ≤ n ≤ 50) — the length of s. It is guaranteed that n is even. The second line of the test case containg the string s consisting of n/2 opening and n/2 closing brackets."}
{"name": "1397_D. Stoned Game", "description": "Input\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of games. The description of the games follows. Each description contains two lines:\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100)."}
{"name": "1466_D. 13th Labour of Heracles", "description": "Input\n\nIn the first line of input, there is a single integer t (1 ≤ t ≤ 10^5) denoting the number of test cases. Then t test cases follow. \n\nFirst line of each test case contains a single integer n (2 ≤ n ≤ 10^5). The second line consists of n integers w_1, w_2, ..., w_n (0 ≤ w_i ≤ 10^9), w_i equals the weight of i-th vertex. In each of the following n - 1 lines, there are two integers u, v (1 ≤ u,v ≤ n) describing an edge between vertices u and v. It is guaranteed that these edges form a tree. \n\nThe sum of n in all test cases will not exceed 2 ⋅ 10^5."}
{"name": "1490_E. Accidental Victory", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of one positive integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of players in the championship.\n\nThe second line of each test case contains n positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the number of tokens the players have.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1540_A. Great Graphs", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of pastures.\n\nThe second line of each test case contains n space separated integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 10^9) — the array d. It is guaranteed that d_1 = 0.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "235_B. Let's Play Osu!", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) — the number of clicks. The second line contains n space-separated real numbers p1, p2, ..., pn (0 ≤ pi ≤ 1).\n\nThere will be at most six digits after the decimal point in the given pi."}
{"name": "354_C. Vasya and Beautiful Arrays", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 3·105; 1 ≤ k ≤ 106). The second line contains n integers ai (1 ≤ ai ≤ 106) — array a."}
{"name": "39_F. Pacifist frogs", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 109, 1 ≤ m, k ≤ 100) — the number of hills, frogs and mosquitoes respectively. The second line contains m integers di (1 ≤ di ≤ 109) — the lengths of the frogs’ jumps. The third line contains k integers — the numbers of the hills on which each mosquito is sleeping. No more than one mosquito can sleep on each hill. The numbers in the lines are separated by single spaces."}
{"name": "614_D. Skills", "description": "Input\n\nThe first line of the input contains five space-separated integers n, A, cf, cm and m (1 ≤ n ≤ 100 000, 1 ≤ A ≤ 109, 0 ≤ cf, cm ≤ 1000, 0 ≤ m ≤ 1015).\n\nThe second line contains exactly n integers ai (0 ≤ ai ≤ A), separated by spaces, — the current levels of skills."}
{"name": "634_A. Island Puzzle", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 200 000) — the total number of islands.\n\nThe second line contains n space-separated integers ai (0 ≤ ai ≤ n - 1) — the statue currently placed on the i-th island. If ai = 0, then the island has no statue. It is guaranteed that the ai are distinct.\n\nThe third line contains n space-separated integers bi (0 ≤ bi ≤ n - 1) — the desired statues of the ith island. Once again, bi = 0 indicates the island desires no statue. It is guaranteed that the bi are distinct."}
{"name": "687_B. Remainders Game", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 1 000 000) — the number of ancient integers and value k that is chosen by Pari.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1 000 000)."}
{"name": "730_H. Delete Them", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 100) — the total number of files and the number of files to be deleted.\n\nThe following n lines contain filenames, single filename per line. All filenames are non-empty strings containing only lowercase English letters, digits and dots ('.'). The length of each filename doesn't exceed 100. It is guaranteed that all filenames are distinct.\n\nThe last line of the input contains m distinct integer numbers in ascending order a1, a2, ..., am (1 ≤ ai ≤ n) — indices of files to be deleted. All files are indexed from 1 to n in order of their appearance in the input."}
{"name": "774_L. Bars", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 200 000, 2 ≤ k ≤ n) — the length of the workday in minutes and the number of chocolate bars, which Polycarp has in the beginning of the workday.\n\nThe second line contains the string with length n consisting of zeros and ones. If the i-th symbol in the string equals to zero, Polycarp has no important things to do in the minute i and he can eat a chocolate bar. In the other case, Polycarp is busy in the minute i and can not eat a chocolate bar. It is guaranteed, that the first and the last characters of the string are equal to zero, and Polycarp always eats chocolate bars in these minutes."}
{"name": "846_C. Four Segments", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 5000).\n\nThe second line contains n numbers a0, a1, ..., an - 1 ( - 109 ≤ ai ≤ 109)."}
{"name": "914_G. Sum the Fibonacci", "description": "Input\n\nThe first line of input contains an integer n (1 ≤ n ≤ 106).\n\nThe second line of input contains n integers si (0 ≤ si < 217)."}
{"name": "962_G. Visible Black Areas", "description": "Input\n\nThe first line contain four integers x_1, y_1, x_2, y_2 (x_1 < x_2, y_2 < y_1) — the coordinates of top-left and bottom-right corners of the rectangular window. \n\nThe second line contains a single integer n (4 ≤ n ≤ 15 000) — the number of vertices in Petya's polygon.\n\nEach of the following n lines contains two integers — the coordinates of vertices of the Petya's polygon in counterclockwise order. Guaranteed, that the given polygon satisfies the conditions described in the statement.\n\nAll coordinates of the rectangular window and all coordinates of the vertices of the polygon are non-negative and do not exceed 15 000."}
{"name": "p00321 Related Products", "description": "Input\n\nThe input is given in the following format.\n\n\nN F\ninfo1\ninfo2\n::\ninfoN\n\n\nThe first line gives the number of pieces of information N (1 ≤ N ≤ 100) and the reference number F (1 ≤ F ≤ 100) of the items bought together. The following N lines are given information on the products bought together. Information about the products bought together infoi is given in the following format.\n\n\nM item1 item2 ... itemM\n\n\nM (1 ≤ M ≤ 10) indicates how many products this information contains. itemj is the name of the item bought in this purchase and is a string of 1 to 30 length consisting of only lowercase letters. The same product is never given in infoi."}
{"name": "p00820 Lagrange's Four-Square Theorem", "description": "Input\n\nThe input is composed of at most 255 lines, each containing a single positive integer less than 215 , followed by a line containing a single zero. The last line is not a part of the input data."}
{"name": "1082_D. Maximum Diameter Graph", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 500) — the number of vertices in the graph.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n - 1) — the upper limits to vertex degrees."}
{"name": "1172_A. Nauuo and Cards", "description": "Input\n\nThe first line contains a single integer n (1≤ n≤ 2⋅ 10^5) — the number of numbered cards.\n\nThe second line contains n integers a_1,a_2,…,a_n (0≤ a_i≤ n) — the initial cards in Nauuo's hands. 0 represents an empty card.\n\nThe third line contains n integers b_1,b_2,…,b_n (0≤ b_i≤ n) — the initial cards in the pile, given in order from top to bottom. 0 represents an empty card.\n\nIt is guaranteed that each number from 1 to n appears exactly once, either in a_{1..n} or b_{1..n}."}
{"name": "1209_A. Paint the Numbers", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100), where n is the length of the given sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). These numbers can contain duplicates."}
{"name": "1292_D. Chaotic V.", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^6) — number of fragments of Vanessa's mind.\n\nThe second line contains n integers: k_1, k_2, …, k_n (0 ≤ k_i ≤ 5000), denoting the nodes where fragments of Vanessa's mind are located: the i-th fragment is at the node with a number k_i!."}
{"name": "1312_E. Array Shrinking", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 500) — the initial length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the initial array a."}
{"name": "1355_D. Game With Array", "description": "Input\n\nThe first line contains two integers N and S (1 ≤ N ≤ S ≤ 10^{6}) — the required length of the array and the required sum of its elements."}
{"name": "1375_C. Element Extermination", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n, a_i are pairwise distinct) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5."}
{"name": "1398_F. Controversial Rounds", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 10^6) — the number of rounds.\n\nThe second line contains one string s of length n — the descriptions of rounds. If the i-th element of the string is 0, then Alice won the i-th round; if it is 1, then Bob won the i-th round, and if it is ?, then you don't know who won the i-th round."}
{"name": "1440_A. Buy the String", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of the description of each test case contains four integers n, c_{0}, c_{1}, h (1 ≤ n, c_{0}, c_{1}, h ≤ 1000).\n\nThe second line of the description of each test case contains the binary string s of length n."}
{"name": "1467_B. Hills And Valleys", "description": "Input\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 10000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 3⋅10^5).\n\nThe second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3⋅10^5."}
{"name": "1541_B. Pleasant Pairs", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 10^5) — the length of array a.\n\nThe second line of each test case contains n space separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ n) — the array a. It is guaranteed that all elements are distinct.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "285_B. Find Marble", "description": "Input\n\nThe first line contains three integers: n, s, t (1 ≤ n ≤ 105; 1 ≤ s, t ≤ n) — the number of glasses, the ball's initial and final position. The second line contains n space-separated integers: p1, p2, ..., pn (1 ≤ pi ≤ n) — the shuffling operation parameters. It is guaranteed that all pi's are distinct.\n\nNote that s can equal t."}
{"name": "30_B. Codeforces World Finals", "description": "Input\n\nThe first line contains the date DD.MM.YY, the second line contains the date BD.BM.BY. It is guaranteed that both dates are correct, and YY and BY are always in [01;99].\n\nIt could be that by passport Bob was born after the finals. In this case, he can still change the order of numbers in date."}
{"name": "332_E. Binary Key", "description": "Input\n\nThe first two lines of the input are non-empty strings p and s (1 ≤ |p| ≤ 106, 1 ≤ |s| ≤ 200), describing the container and the message, correspondingly. The strings can contain any characters with the ASCII codes from 32 to 126, inclusive.\n\nThe third line contains a single integer k (1 ≤ k ≤ 2000) — the key's length."}
{"name": "3_B. Lorry", "description": "Input\n\nThe first line contains a pair of integer numbers n and v (1 ≤ n ≤ 105; 1 ≤ v ≤ 109), where n is the number of waterborne vehicles in the boat depot, and v is the truck body volume of the lorry in cubic metres. The following n lines contain the information about the waterborne vehicles, that is a pair of numbers ti, pi (1 ≤ ti ≤ 2; 1 ≤ pi ≤ 104), where ti is the vehicle type (1 – a kayak, 2 – a catamaran), and pi is its carrying capacity. The waterborne vehicles are enumerated in order of their appearance in the input file."}
{"name": "616_A. Comparing Two Long Integers", "description": "Input\n\nThe first line contains a non-negative integer a.\n\nThe second line contains a non-negative integer b.\n\nThe numbers a, b may contain leading zeroes. Each of them contains no more than 106 digits."}
{"name": "635_B. Island Puzzle", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 200 000) — the total number of islands.\n\nThe second line contains n space-separated integers ai (0 ≤ ai ≤ n - 1) — the statue currently placed on the i-th island. If ai = 0, then the island has no statue. It is guaranteed that the ai are distinct.\n\nThe third line contains n space-separated integers bi (0 ≤ bi ≤ n - 1) — the desired statues of the ith island. Once again, bi = 0 indicates the island desires no statue. It is guaranteed that the bi are distinct."}
{"name": "688_D. Remainders Game", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 1 000 000) — the number of ancient integers and value k that is chosen by Pari.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1 000 000)."}
{"name": "731_C. Socks", "description": "Input\n\nThe first line of input contains three integers n, m and k (2 ≤ n ≤ 200 000, 0 ≤ m ≤ 200 000, 1 ≤ k ≤ 200 000) — the number of socks, the number of days and the number of available colors respectively.\n\nThe second line contain n integers c1, c2, ..., cn (1 ≤ ci ≤ k) — current colors of Arseniy's socks.\n\nEach of the following m lines contains two integers li and ri (1 ≤ li, ri ≤ n, li ≠ ri) — indices of socks which Arseniy should wear during the i-th day."}
{"name": "801_B. Valued Keys", "description": "Input\n\nThe first line of input contains the string x.\n\nThe second line of input contains the string y.\n\nBoth x and y consist only of lowercase English letters, x and y have same length and this length is between 1 and 100."}
{"name": "894_C. Marco and GCD Sequence", "description": "Input\n\nThe first line contains a single integer m (1 ≤ m ≤ 1000) — the size of the set S.\n\nThe second line contains m integers s1, s2, ..., sm (1 ≤ si ≤ 106) — the elements of the set S. It's guaranteed that the elements of the set are given in strictly increasing order, that means s1 < s2 < ... < sm."}
{"name": "p00685 Board Arrangements for Concentration Games", "description": "Input\n\nThe input contains multiple data sets, each representing 4 relative positions. A data set is given as a line in the following format.\n\nx1| y1 | x2| y2 | x3| y3 | x4| y4\n---|---|---|---|---|---|---|---\n\nThe i-th relative position is given by (xi, yi). You may assume that the given relative positions are different from one another and each of them is one of the 24 candidates.\n\nThe end of input is indicated by the line which contains a single number greater than 4."}
{"name": "p00827 The Balance", "description": "Input\n\nThe input is a sequence of datasets. A dataset is a line containing three positive integers a, b, and d separated by a space. The following relations hold: a ≠ b, a ≤ 10000, b ≤ 10000, and d ≤ 50000. You may assume that it is possible to measure d mg using a combination of a mg and b mg weights. In other words, you need not consider “no solution” cases.\n\nThe end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset."}
{"name": "1089_J. JS Minification", "description": "Input\n\nThe first line of the input contains a single integer n (0 ≤ n ≤ 40) — the number of reserved tokens.\n\nThe second line of the input contains the list of reserved tokens separated by spaces without repetitions in the list. Each reserved token is at least one and at most 20 characters long and contains only characters with ASCII codes from 33 (exclamation mark) to 126 (tilde) inclusive, with exception of a hash character ('#' code 35).\n\nThe third line of the input contains a single integer m (1 ≤ m ≤ 40) — the number of lines in the input source code.\n\nNext m lines contain the input source, each source line is at most 80 characters long (counting leading and trailing spaces). Each line contains only characters with ASCII codes from 32 (space) to 126 (tilde) inclusive. The source code is valid and fully parses into a sequence of tokens."}
{"name": "1108_D. Diverse Garland", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of lamps.\n\nThe second line of the input contains the string s consisting of n characters 'R', 'G' and 'B' — colors of lamps in the garland."}
{"name": "1178_E. Archaeology", "description": "Input\n\nThe input consists of a single string s (2 ≤ |s| ≤ 10^6). The string s consists only of characters \"a\", \"b\", \"c\". It is guaranteed that no two consecutive characters are equal."}
{"name": "1196_D2. RGB Substring (hard version)", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries. Then q queries follow.\n\nThe first line of the query contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the length of the string s and the length of the substring.\n\nThe second line of the query contains a string s consisting of n characters 'R', 'G' and 'B'.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1213_F. Unstable String Sort", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 26) — the length of the string and the number of distinct characters required.\n\nThe second line of the input contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n, all p_i are distinct integers from 1 to n) — the permutation p.\n\nThe third line of the input contains n integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ n, all q_i are distinct integers from 1 to n) — the permutation q."}
{"name": "1237_B. Balanced Tunnel", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5), denoting the number of cars.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n), denoting the ids of cars in order of entering the tunnel. All a_i are pairwise distinct.\n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ n), denoting the ids of cars in order of exiting the tunnel. All b_i are pairwise distinct."}
{"name": "1299_C. Water Balance", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^6) — the number of water tanks.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — initial volumes of water in the water tanks, in liters.\n\nBecause of large input, reading input as doubles is not recommended."}
{"name": "1322_A. Unusual Competitions", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of Dima's sequence.\n\nThe second line contains string of length n, consisting of characters \"(\" and \")\" only."}
{"name": "1340_F. Nastya and CBS", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — length of string and k (1 ≤ k ≤ n) — the number of kinds of pairs of brackets.\n\nThe second line contains string s of length n — n integers s_1, s_2, …, s_n (1 ≤ |s_i| ≤ k)\n\nThe third line contains single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nEach of the following q lines describes the queries: \n\n  * 1 i t - query of the 1 type (1 ≤ i ≤ n, 1 ≤ |t| ≤ k). \n  * 2 l r - query of the 2 type (1 ≤ l ≤ r ≤ n)."}
{"name": "1383_B. GameGame", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains the integer n (1 ≤ n ≤ 10^5) — the length of a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — elements of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1447_E. Xor Tree", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.\n\nThe second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence."}
{"name": "1520_E. Arranging The Sheep", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^6).\n\nThe second line of each test case contains a string of length n, consisting of the characters '.' (empty space) and '*' (sheep) — the description of the level.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6."}
{"name": "33_C. Wonderful Randomized Sum", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — amount of elements in the sequence. The second line contains n integers ai ( - 104 ≤ ai ≤ 104) — the sequence itself."}
{"name": "407_B. Long Path", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 103) — the number of rooms. The second line contains n integers pi (1 ≤ pi ≤ i). Each pi denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room."}
{"name": "579_D. \"Or\" Game", "description": "Input\n\nThe first line contains three integers n, k and x (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 10, 2 ≤ x ≤ 8).\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109)."}
{"name": "671_B. Robin Hood", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 500 000, 0 ≤ k ≤ 109) — the number of citizens in Kekoland and the number of days left till Robin Hood's retirement.\n\nThe second line contains n integers, the i-th of them is ci (1 ≤ ci ≤ 109) — initial wealth of the i-th person."}
{"name": "739_B. Alyona and a tree", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 2·105).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the integers written in the vertices.\n\nThe next (n - 1) lines contain two integers each. The i-th of these lines contains integers pi and wi (1 ≤ pi ≤ n, 1 ≤ wi ≤ 109) — the parent of the (i + 1)-th vertex in the tree and the number written on the edge between pi and (i + 1).\n\nIt is guaranteed that the given graph is a tree."}
{"name": "831_C. Jury Marks", "description": "Input\n\nThe first line contains two integers k and n (1 ≤ n ≤ k ≤ 2 000) — the number of jury members and the number of scores Polycarp remembers.\n\nThe second line contains k integers a1, a2, ..., ak ( - 2 000 ≤ ai ≤ 2 000) — jury's marks in chronological order.\n\nThe third line contains n distinct integers b1, b2, ..., bn ( - 4 000 000 ≤ bj ≤ 4 000 000) — the values of points Polycarp remembers. Note that these values are not necessarily given in chronological order."}
{"name": "852_D. Exploration plan", "description": "Input\n\nThe first line contains four integers: V, E, N and K (1 ≤ V ≤ 600, 1 ≤ E ≤ 20000, 1 ≤ N ≤ min(V, 200), 1 ≤ K ≤ N), number of cities, number of roads, number of teams and the smallest number of different cities they need to end up in, respectively.\n\nThe second line contains N integers, the cities where the teams start their journey.\n\nNext E lines contain information about the roads in following format: Ai Bi Ti (1 ≤ Ai, Bi ≤ V, 1 ≤ Ti ≤ 10000), which means that there is a road connecting cities Ai and Bi, and you need Ti minutes to cross that road."}
{"name": "876_E. National Property", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format li, si, 1, si, 2, ..., si, li (1 ≤ li ≤ 100 000, 1 ≤ si, j ≤ m), where li is the length of the word, and si, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000."}
{"name": "978_C. Letters", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^{5}) — the number of dormitories and the number of letters.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{10}), where a_i equals to the number of rooms in the i-th dormitory. The third line contains a sequence b_1, b_2, ..., b_m (1 ≤ b_j ≤ a_1 + a_2 + ... + a_n), where b_j equals to the room number (among all rooms of all dormitories) for the j-th letter. All b_j are given in increasing order."}
{"name": "p01439 Chinese Classics", "description": "Input\n\nThe input contains multiple datasets. Each dataset is given in the following format:\n\nN\nmark1\n...\nmarkN\n\n\nN, a positive integer (1 ≤ N ≤ 10,000), means the number of letters in a Chinese classic text. marki denotes returning marks attached to the i-th letter.\n\nA 'Re' mark is represented by a single letter, namely, 'v' (quotes for clarity). The description of a jump mark is the simple concatenation of its type, specified by one or more lowercase letter, and a positive integer. Note that each letter has at most one jump mark and at most one 'Re' mark. When the same letter has both types of returning marks, the description of the jump mark comes first, followed by 'v' for the 'Re' mark. You can assume this happens only on the jump marks with the number 1.\n\nIf the i-th letter has no returning mark, marki is '-' (quotes for clarity). The length of marki never exceeds 20.\n\nYou may assume that input is well-formed, that is, there is exactly one reading order that follows the rules above. And in the ordering, every letter is read exactly once.\n\nYou may also assume that the N-th letter does not have 'Re' mark.\n\nThe input ends when N = 0. Your program must not output anything for this case."}
{"name": "1032_C. Playing Piano", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) denoting the number of notes.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2⋅10^5) denoting the positions of notes on the keyboard."}
{"name": "1055_A. Metro", "description": "Input\n\nThe first line contains two integers n and s (2 ≤ s ≤ n ≤ 1000) — the number of stations in the metro and the number of the station where Alice's home is located. Bob lives at station 1.\n\nNext lines describe information about closed and open stations.\n\nThe second line contains n integers a_1, a_2, …, a_n (a_i = 0 or a_i = 1). If a_i = 1, then the i-th station is open on the first track (that is, in the direction of increasing station numbers). Otherwise the station is closed on the first track.\n\nThe third line contains n integers b_1, b_2, …, b_n (b_i = 0 or b_i = 1). If b_i = 1, then the i-th station is open on the second track (that is, in the direction of decreasing station numbers). Otherwise the station is closed on the second track."}
{"name": "1077_B. Disturbed People", "description": "Input\n\nThe first line of the input contains one integer n (3 ≤ n ≤ 100) — the number of flats in the house.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (a_i ∈ \\{0, 1\\}), where a_i is the state of light in the i-th flat."}
{"name": "1119_B. Alyona and a Narrow Fridge", "description": "Input\n\nThe first line contains two integers n and h (1 ≤ n ≤ 10^3, 1 ≤ h ≤ 10^9) — the number of bottles and the height of the fridge.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ h) — the heights of the bottles."}
{"name": "1145_F. Neat Words", "description": "Input\n\nThe input consists of a single string of uppercase letters A-Z. The length of the string is between 1 and 10 characters, inclusive."}
{"name": "1185_C1. Exam in BerSU (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and M (1 ≤ n ≤ 100, 1 ≤ M ≤ 100) — the number of students and the total duration of the exam in minutes, respectively.\n\nThe second line of the input contains n integers t_i (1 ≤ t_i ≤ 100) — time in minutes that i-th student spends to answer to a ticket.\n\nIt's guaranteed that all values of t_i are not greater than M."}
{"name": "1265_E. Beautiful Mirrors", "description": "Input\n\nThe first line contains one integer n (1≤ n≤ 2⋅ 10^5) — the number of mirrors.\n\nThe second line contains n integers p_1, p_2, …, p_n (1 ≤ p_i ≤ 100)."}
{"name": "1307_A. Cow and Haybales", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Next 2t lines contain a description of test cases — two lines per test case.\n\nThe first line of each test case contains integers n and d (1 ≤ n,d ≤ 100) — the number of haybale piles and the number of days, respectively. \n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 100) — the number of haybales in each pile."}
{"name": "1330_A. Dreamoon and Ranking Collection", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 5) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains two integers n, x (1 ≤ n, x ≤ 100). The second line contains n positive non-zero integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100)."}
{"name": "1392_I. Kevin and Grid", "description": "Input\n\nThe first line contains three integers n,m,q (1 ≤ n,m,q ≤ 10^5) – the number of rows, columns, and the number of possible values for x respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 10^5).\n\nEach of the next q lines contains one integer x (1 ≤ x ≤ 2 ⋅ 10^5)."}
{"name": "150_A. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 ≤ q ≤ 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator."}
{"name": "22_E. Scheme", "description": "Input\n\nThe first input line contains number n (2 ≤ n ≤ 105) — amount of BolgenOS community members. The second line contains n space-separated integer numbers fi (1 ≤ fi ≤ n, i ≠ fi) — index of a person, to whom calls a person with index i."}
{"name": "279_D. The Minimum Number of Variables", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 23). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ak ≤ 109).\n\nIt is guaranteed that all numbers in the sequence are distinct."}
{"name": "48_C. The Race", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds."}
{"name": "53_A. Autocomplete", "description": "Input\n\nThe first line contains the s line which is the inputted part. The second line contains an integer n (1 ≤ n ≤ 100) which is the number of visited pages. Then follow n lines which are the visited pages, one on each line. All the lines have lengths of from 1 to 100 symbols inclusively and consist of lowercase Latin letters only."}
{"name": "567_C. Geometric Progression", "description": "Input\n\nThe first line of the input contains two integers, n and k (1 ≤ n, k ≤ 2·105), showing how many numbers Polycarp's sequence has and his favorite number.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — elements of the sequence."}
{"name": "610_B. Vika and Squares", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of jars with colors Vika has.\n\nThe second line of the input contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is equal to the number of liters of paint in the i-th jar, i.e. the number of liters of color i that Vika has."}
{"name": "727_C. Guess the Array", "description": "Input\n\n5\n \n9\n \n7\n \n9\n \n11\n \n6"}
{"name": "796_C. Bank Hacking", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3·105) — the total number of banks.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the strengths of the banks.\n\nEach of the next n - 1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — meaning that there is a wire directly connecting banks ui and vi.\n\nIt is guaranteed that the wires connect the banks in such a way that Inzane can somehow hack all the banks using a computer with appropriate strength."}
{"name": "841_D. Leha and another game about graph", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 3·105, n - 1 ≤ m ≤ 3·105) — number of vertices and edges.\n\nThe second line contains n integers d1, d2, ..., dn ( - 1 ≤ di ≤ 1) — numbers on the vertices.\n\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — edges. It's guaranteed, that graph in the input is connected."}
{"name": "862_E. Mahmoud and Ehab and the function", "description": "Input\n\nThe first line contains three integers n, m and q (1 ≤ n ≤ m ≤ 105, 1 ≤ q ≤ 105) — number of elements in a, number of elements in b and number of queries, respectively.\n\nThe second line contains n integers a1, a2, ..., an. ( - 109 ≤ ai ≤ 109) — elements of a.\n\nThe third line contains m integers b1, b2, ..., bm. ( - 109 ≤ bi ≤ 109) — elements of b.\n\nThen q lines follow describing the queries. Each of them contains three integers li ri xi (1 ≤ li ≤ ri ≤ n,  - 109 ≤ x ≤ 109) — range to be updated and added value."}
{"name": "911_A. Nearest Minimums", "description": "Input\n\nThe first line contains positive integer n (2 ≤ n ≤ 105) — size of the given array. The second line contains n integers a0, a1, ..., an - 1 (1 ≤ ai ≤ 109) — elements of the array. It is guaranteed that in the array a minimum occurs at least two times."}
{"name": "1029_B. Creating the Contest", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of problems in the problemset.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order."}
{"name": "1141_F2. Same Sum Blocks (Hard)", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1500) — the length of the given array. The second line contains the sequence of elements a[1], a[2], ..., a[n] (-10^5 ≤ a_i ≤ 10^5)."}
{"name": "1200_A. Hotelier", "description": "Input\n\nThe first line consists of an integer n (1 ≤ n ≤ 10^5), the number of events in Amugae's memory.\n\nThe second line consists of a string of length n describing the events in chronological order. Each character represents: \n\n  * 'L': A customer arrives from the left entrance. \n  * 'R': A customer arrives from the right entrance. \n  * '0', '1', ..., '9': The customer in room x (0, 1, ..., 9 respectively) leaves. \n\n\n\nIt is guaranteed that there is at least one empty room when a customer arrives, and there is a customer in the room x when x (0, 1, ..., 9) is given. Also, all the rooms are initially empty."}
{"name": "1240_F. Football", "description": "Input\n\nThe first line contains three integers n, m, k (3 ≤ n ≤ 100, 0 ≤ m ≤ 1 000, 1 ≤ k ≤ 1 000) — the number of teams, the number of games, and the number of stadiums.\n\nThe second line contains n integers w_1, w_2, …, w_n (1 ≤ w_i ≤ 1 000) — the amount of money MFO will earn for each game of the i-th game.\n\nEach of the following m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) — the teams that can play the i-th game. It is guaranteed that each pair of teams can play at most one game."}
{"name": "1261_A. Messy", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains two integers n and k (1 ≤ k ≤ n/2, 2 ≤ n ≤ 2000, n is even) — length of s and required number of regular prefixes.\n\nThe second line of a test case contains s of length n — the given bracket sequence. It contains only '(' and ')'.\n\nIt is guaranteed that there are exactly n/2 characters '(' and exactly n/2 characters ')' in the given string.\n\nThe sum of all values n over all the test cases in the input doesn't exceed 2000."}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ k < n ≤ 2 ⋅ 10^5) — the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1453_D. Checkpoints", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 50).\n\nEach test case contains exactly one line. The line consists of a single integer k (1 ≤ k ≤ 10^{18}) — the expected number of tries over all stages Gildong wants to set for a player whose probability of beating each stage is exactly \\cfrac{1}{2}."}
{"name": "1477_B. Nezzar and Binary String", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases.\n\nThe first line of each test case contains two integers n,q (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ q ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains a binary string s of length n.\n\nThe third line of each test case contains a binary string f of length n.\n\nThen q lines follow, i-th of them contains two integers l_i,r_i (1 ≤ l_i ≤ r_i ≤ n) — bounds of the segment, that Nanako will inspect on the i-th day.\n\nIt is guaranteed that the sum of n for all test cases doesn't exceed 2 ⋅ 10^5, and the sum of q for all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "159_C. String Manipulation 1.0", "description": "Input\n\nThe first line contains an integer k (1 ≤ k ≤ 2000). The second line contains a non-empty string s, consisting of lowercase Latin letters, at most 100 characters long. The third line contains an integer n (0 ≤ n ≤ 20000) — the number of username changes. Each of the next n lines contains the actual changes, one per line. The changes are written as \"pi ci\" (without the quotes), where pi (1 ≤ pi ≤ 200000) is the number of occurrences of letter ci, ci is a lowercase Latin letter. It is guaranteed that the operations are correct, that is, the letter to be deleted always exists, and after all operations not all letters are deleted from the name. The letters' occurrences are numbered starting from 1."}
{"name": "298_A. Snow Footprints", "description": "Input\n\nThe first line of the input contains integer n (3 ≤ n ≤ 1000).\n\nThe second line contains the description of the road — the string that consists of n characters. Each character will be either \".\" (a block without footprint), or \"L\" (a block with a left footprint), \"R\" (a block with a right footprint).\n\nIt's guaranteed that the given string contains at least one character not equal to \".\". Also, the first and the last character will always be \".\". It's guaranteed that a solution exists."}
{"name": "320_D. Psychos in a Line", "description": "Input\n\nThe first line of input contains integer n denoting the number of psychos, (1 ≤ n ≤ 105). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive — ids of the psychos in the line from left to right."}
{"name": "369_A. Valera and Plates", "description": "Input\n\nThe first line of the input contains three integers n, m, k (1 ≤ n, m, k ≤ 1000) — the number of the planned days, the number of clean bowls and the number of clean plates.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 2). If ai equals one, then on day i Valera will eat a first type dish. If ai equals two, then on day i Valera will eat a second type dish."}
{"name": "391_B. Word Folding", "description": "Input\n\nThe input will consist of one line containing a single string of n characters with 1 ≤ n ≤ 1000 and no spaces. All characters of the string will be uppercase letters.\n\nThis problem doesn't have subproblems. You will get 5 points for the correct submission."}
{"name": "413_A. Data Recovery", "description": "Input\n\nThe first line contains four integers n, m, min, max (1 ≤ m < n ≤ 100; 1 ≤ min < max ≤ 100). The second line contains m space-separated integers ti (1 ≤ ti ≤ 100) — the temperatures reported by the assistant.\n\nNote, that the reported temperatures, and the temperatures you want to add can contain equal temperatures."}
{"name": "43_C. Lucky Tickets", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 104) — the number of pieces. The second line contains n space-separated numbers ai (1 ≤ ai ≤ 108) — the numbers on the pieces. Vasya can only glue the pieces in pairs. Even if the number of a piece is already lucky, Vasya should glue the piece with some other one for it to count as lucky. Vasya does not have to use all the pieces. The numbers on the pieces an on the resulting tickets may coincide."}
{"name": "509_D. Restoring Numbers", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 100), separated by a space — the number of rows and columns in the found matrix, respectively. \n\nThe i-th of the following lines contains numbers wi, 1, wi, 2, ..., wi, m (0 ≤ wi, j ≤ 109), separated by spaces — the elements of the i-th row of matrix w."}
{"name": "584_C. Marina and Vasya", "description": "Input\n\nThe first line contains two integers n and t (1 ≤ n ≤ 105, 0 ≤ t ≤ n).\n\nThe second line contains string s1 of length n, consisting of lowercase English letters.\n\nThe third line contain string s2 of length n, consisting of lowercase English letters."}
{"name": "606_C. Sorting Railway Cars", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 100 000) — the number of cars in the train. \n\nThe second line contains n integers pi (1 ≤ pi ≤ n, pi ≠ pj if i ≠ j) — the sequence of the numbers of the cars in the train."}
{"name": "628_C. Bear and String Distance", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 106).\n\nThe second line contains a string s of length n, consisting of lowercase English letters."}
{"name": "700_B. Connecting Universities", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ n ≤ 200 000, 1 ≤ k ≤ n / 2) — the number of towns in Treeland and the number of university pairs. Consider that towns are numbered from 1 to n. \n\nThe second line contains 2k distinct integers u1, u2, ..., u2k (1 ≤ ui ≤ n) — indices of towns in which universities are located. \n\nThe next n - 1 line contains the description of roads. Each line contains the pair of integers xj and yj (1 ≤ xj, yj ≤ n), which means that the j-th road connects towns xj and yj. All of them are two-way roads. You can move from any town to any other using only these roads."}
{"name": "722_D. Generating Sets", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 50 000) — the number of elements in Y.\n\nThe second line contains n integers y1, ..., yn (1 ≤ yi ≤ 109), that are guaranteed to be distinct."}
{"name": "767_D. Cartons of milk", "description": "Input\n\nIn the first line there are three integers n, m, k (1 ≤ n, m ≤ 106, 1 ≤ k ≤ n + m) — the amount of cartons in Olya's fridge, the amount of cartons in the shop and the number of cartons Olya drinks each day.\n\nIn the second line there are n integers f1, f2, ..., fn (0 ≤ fi ≤ 107) — expiration dates of the cartons in Olya's fridge. The expiration date is expressed by the number of days the drinking of this carton can be delayed. For example, a 0 expiration date means it must be drunk today, 1 — no later than tomorrow, etc.\n\nIn the third line there are m integers s1, s2, ..., sm (0 ≤ si ≤ 107) — expiration dates of the cartons in the shop in a similar format."}
{"name": "791_C. Bear and Different Names", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ k ≤ n ≤ 50) — the number of soldiers and the size of a group respectively.\n\nThe second line contains n - k + 1 strings s1, s2, ..., sn - k + 1. The string si is \"YES\" if the group of soldiers i through i + k - 1 is effective, and \"NO\" otherwise."}
{"name": "883_I. Photo Processing", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 3·105) — number of photos and minimum size of a group.\n\nThe second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 109), where vi is the contrast of the i-th photo."}
{"name": "928_A. Login Verification", "description": "Input\n\nThe first line contains a non-empty string s consisting of lower and uppercase latin letters, digits and underline symbols («_») with length not exceeding 50 — the login itself.\n\nThe second line contains a single integer n (1 ≤ n ≤ 1 000) — the number of existing logins.\n\nThe next n lines describe the existing logins, following the same constraints as the user login (refer to the first line of the input). It's guaranteed that no two existing logins are similar."}
{"name": "957_C. Three-level Laser", "description": "Input\n\nThe first line contains two integers n and U (3 ≤ n ≤ 105, 1 ≤ U ≤ 109) — the number of states and the maximum possible difference between Ek and Ei.\n\nThe second line contains a sequence of integers E1, E2, ..., En (1 ≤ E1 < E2... < En ≤ 109). It is guaranteed that all Ei are given in increasing order."}
{"name": "p00766 Patisserie ACM", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\n> h w\n>  r(1, 1) ... r(1, w)\n>  r(2, 1) ... r(2, w)\n>  ...\n>  r(h, 1) ... r(h, w)\n>\n\nThe integers h and w are the lengths of the two orthogonal dimensions of the chocolate, in number of segments. You may assume that 2 ≤ h ≤ 100 and 2 ≤ w ≤ 100. Each of the following h lines consists of w characters, each is either a \".\" or a \"#\". The character r(i, j) represents whether the chocolate segment exists at the position (i, j ) as follows.\n\n* \".\": There is no chocolate.\n* \"#\": There is a segment of chocolate.\n\nYou can assume that there is no dataset that represents either multiple disconnected bars as depicted in Figure G-5 or a bar in a shape with hole(s) as depicted in Figure G-6 and G-7. You can also assume that there is at least one \"#\" character in each dataset.\n\n<image>\n\n\nFigure G-5: Disconnected chocolate bars\n\n\n\n<image>\n\n\nFigure G-6: A chocolate bar with a hole\n\n\n\n<image>\n\n\nFigure G-7: Another instance of a chocolate bar with a hole"}
{"name": "p01917 Dance Now!", "description": "Input\n\n9\n9 8 7 6 5 4 3 2 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9"}
{"name": "1010_A. Fly", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — number of planets.\n\nThe second line contains the only integer m (1 ≤ m ≤ 1000) — weight of the payload.\n\nThe third line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000), where a_i is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000), where b_i is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than 10^9 tons of fuel."}
{"name": "1034_A. Enlarge GCD", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of integers Mr. F has.\n\nThe second line contains n integers, a_1, a_2, …, a_n (1 ≤ a_i ≤ 1.5 ⋅ 10^7)."}
{"name": "1056_F. Write The Contest", "description": "Input\n\nThe first line contains one integer tc (1 ≤ tc ≤ 20) — the number of test cases. Then tc test cases follow.\n\nThe first line of each test contains one integer n (1 ≤ n ≤ 100) — the number of problems in the contest.\n\nThe second line of the test contains two real values C, T (0 < C < 10, 0 ≤ T ≤ 2 ⋅ 10^5), where C defines the efficiency of the training and T is the duration of the contest in minutes. Value C, T are given exactly with three digits after the decimal point.\n\nEach of the next n lines of the test contain characteristics of the corresponding problem: two integers a_i, p_i (1 ≤ a_i ≤ 10^4, 1 ≤ p_i ≤ 10) — the difficulty and the score of the problem.\n\nIt is guaranteed that the value of T is such that changing it by the 0.001 in any direction will not change the test answer.\n\nPlease note that in hacks you can only use tc = 1."}
{"name": "107_B. Basketball Team", "description": "Input\n\nThe first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. \n\nThe second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa."}
{"name": "1120_A. Diana and Liana", "description": "Input\n\nThe first line contains four integers m, k, n and s (1 ≤ n, k, m ≤ 5 ⋅ 10^5, k ⋅ n ≤ m, 1 ≤ s ≤ k): the number of flowers on the liana, the number of flowers in one wreath, the amount of citizens and the length of Diana's flower sequence respectively.\n\nThe second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 5 ⋅ 10^5) — types of flowers on the liana.\n\nThe third line contains s integers b_1, b_2, ..., b_s (1 ≤ b_i ≤ 5 ⋅ 10^5) — the sequence in Diana's schematic."}
{"name": "1147_C. Thanos Nim", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 50) — the number of piles. It is guaranteed that n is an even number.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 50) — the number of stones in the piles."}
{"name": "1223_C. Save the Nature", "description": "Input\n\nThe first line contains a single integer q (1 ≤ q ≤ 100) — the number of independent queries. Each query consists of 5 lines.\n\nThe first line of each query contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tickets.\n\nThe second line contains n integers p_1, p_2, ..., p_n (100 ≤ p_i ≤ 10^9, p_i mod 100 = 0) — the corresponding prices of tickets.\n\nThe third line contains two integers x and a (1 ≤ x ≤ 100, x + y ≤ 100, 1 ≤ a ≤ n) — the parameters of the first program.\n\nThe fourth line contains two integers y and b (1 ≤ y ≤ 100, x + y ≤ 100, 1 ≤ b ≤ n) — the parameters of the second program.\n\nThe fifth line contains single integer k (1 ≤ k ≤ 10^{14}) — the required total contribution.\n\nIt's guaranteed that the total number of tickets per test doesn't exceed 2 ⋅ 10^5."}
{"name": "1267_E. Elections", "description": "Input\n\nThe first line of the input contains two integers n and m (2≤ n≤ 100; 1≤ m ≤ 100) — the number of candidates and the number of polling stations. The next m lines contain the election results at each polling station with n numbers on each line. In the i-th line the j-th number is a_{i,j} — the number of votes cast for the candidate j at the station i (0≤ a_{i,j} ≤ 1 000)."}
{"name": "1332_A. Exercising Walk", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of testcases. \n\nThe first line of each test case contains four integers a, b, c, d (0 ≤ a,b,c,d ≤ 10^8, a+b+c+d ≥ 1).\n\nThe second line of the test case contains six integers x, y, x_1, y_1, x_2, y_2 (-10^8 ≤ x_1≤ x ≤ x_2 ≤ 10^8, -10^8 ≤ y_1 ≤ y ≤ y_2 ≤ 10^8)."}
{"name": "1352_D. Alice, Bob and Candies", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 5000) — the number of test cases in the input. The following are descriptions of the t test cases.\n\nEach test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of candies. The second line contains a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the sizes of candies in the order they are arranged from left to right.\n\nIt is guaranteed that the sum of the values of n for all sets of input data in a test does not exceed 2⋅10^5."}
{"name": "1419_D1. Sage's Birthday (easy version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of ice spheres in the shop.\n\nThe second line contains n different integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the prices of ice spheres."}
{"name": "1437_D. Minimal Height Tree", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n; a_i ≠ a_j; a_1 = 1) — the order in which the vertices were visited by the BFS algorithm.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1510_K. King's Task", "description": "Input\n\nThe first line contains the integer n (1≤ n≤ 1000). The second line contains 2n integers p_i — the permutation of numbers from 1 to 2n."}
{"name": "186_A. Comparing Strings", "description": "Input\n\nThe first line contains the first dwarf's genome: a non-empty string, consisting of lowercase Latin letters.\n\nThe second line contains the second dwarf's genome: a non-empty string, consisting of lowercase Latin letters.\n\nThe number of letters in each genome doesn't exceed 105. It is guaranteed that the strings that correspond to the genomes are different. The given genomes may have different length."}
{"name": "281_A. Word Capitalization", "description": "Input\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103."}
{"name": "515_B. Drazil and His Happy Friends", "description": "Input\n\nThe first line contains two integer n and m (1 ≤ n, m ≤ 100).\n\nThe second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.\n\nThe third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.\n\nIt is guaranteed that there is at least one person that is unhappy among his friends."}
{"name": "542_C. Idempotent functions", "description": "Input\n\nIn the first line of the input there is a single integer n (1 ≤ n ≤ 200) — the size of function f domain.\n\nIn the second line follow f(1), f(2), ..., f(n) (1 ≤ f(i) ≤ n for each 1 ≤ i ≤ n), the values of a function."}
{"name": "590_B. Chip 'n Dale Rescue Rangers", "description": "Input\n\nThe first line of the input contains four integers x1, y1, x2, y2 (|x1|, |y1|, |x2|, |y2| ≤ 10 000) — the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively. \n\nThe second line contains two integers <image> and t (0 < v, t ≤ 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively. \n\nNext follow one per line two pairs of integer (vx, vy) and (wx, wy), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that <image> and <image>."}
{"name": "612_A. The Text Splitting", "description": "Input\n\nThe first line contains three positive integers n, p, q (1 ≤ p, q ≤ n ≤ 100).\n\nThe second line contains the string s consists of lowercase and uppercase latin letters and digits."}
{"name": "798_C. Mike and gcd problem", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — length of sequence A.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — elements of sequence A."}
{"name": "818_E. Card Game Again", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the numbers written on the cards."}
{"name": "844_A. Diversity", "description": "Input\n\nFirst line of input contains string s, consisting only of lowercase Latin letters (1 ≤ |s| ≤ 1000, |s| denotes the length of s).\n\nSecond line of input contains integer k (1 ≤ k ≤ 26)."}
{"name": "864_D. Make a Permutation!", "description": "Input\n\nThe first line contains an single integer n (2 ≤ n ≤ 200 000) — the number of elements in Ivan's array.\n\nThe second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ n) — the description of Ivan's array."}
{"name": "913_A. Modular Exponentiation", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 108).\n\nThe second line contains a single integer m (1 ≤ m ≤ 108)."}
{"name": "p00663 SAT-EN-3", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nexpression\n\n\nThe end of input is given by a line of \"#\"\n\nexpression follows the following BNF.\nHere, the string literal is enclosed by \"\". The actual input does not include \"\". Also, the input does not contain extra blanks.\n\n\n<expression> :: = \"(\" <clause> \")\" | \"(\" <clause> \") | (\"<expression> \")\"\n<clause> :: = <literal> \"&\" <literal> \"&\" <literal>\n<literal> :: = <variable> | \"~\" <variable>\n<variable> :: = [a-z] | [A-z]\n\n\n\nThe length of the expression does not exceed 500 characters.\n\nThe number of test cases does not exceed 1100."}
{"name": "p01678 Restore Calculation", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is less than 100. Each dataset is formatted as follows.\n\n> $A$\n> $B$\n> $C$\n\nEach dataset consists of three strings, $A$, $B$ and $C$. They indicate that the sum of $A$ and $B$ should be $C$. Each string consists of digits (`0`-`9`) and/or question mark (`?`). A question mark (`?`) indicates an erased digit. You may assume that the first character of each string is not `0` and each dataset has at least one `?`.\n\nIt is guaranteed that each string contains between 1 and 50 characters, inclusive. You can also assume that the lengths of three strings are equal.\n\nThe end of input is indicated by a line with a single zero."}
{"name": "1248_D1. The World Is Just a Programming Task (Easy Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 500), the length of the string.\n\nThe second line contains a string, consisting of exactly n characters, where each of the characters is either \"(\" or \")\"."}
{"name": "1331_F. Elementary!", "description": "Input\n\nThe input consists of a single string of uppercase letters A-Z. The length of the string is between 1 and 10 characters, inclusive."}
{"name": "1371_E2. Asterism (Hard Version)", "description": "Input\n\nThe first line contains two integers n, p (2 ≤ p ≤ n ≤ 10^5). It is guaranteed, that the number p is prime (it has exactly two divisors 1 and p).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1394_C. Boboniu and String", "description": "Input\n\nThe first line contains a single integer n (1≤ n≤ 3⋅ 10^5).\n\nEach of the next n lines contains a string s_i (1≤ |s_i| ≤ 5⋅ 10^5). It is guaranteed that s_i only contains 'B' and 'N'. The sum of |s_i| does not exceed 5⋅ 10^5."}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 ≤ t ≤ 100) — the number of matches.\n\nThe first line of each match description contains an integer n (1 ≤ n ≤ 10^3) — the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros."}
{"name": "1538_B. Friends and Candies", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^4).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "207_D1. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set)."}
{"name": "446_C. DZY Loves Fibonacci Numbers", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 300000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — initial array a.\n\nThen, m lines follow. A single line describes a single query in the format given in the statement. It is guaranteed that for each query inequality 1 ≤ l ≤ r ≤ n holds."}
{"name": "490_D. Chocolate", "description": "Input\n\nThe first line of the input contains integers a1, b1 (1 ≤ a1, b1 ≤ 109) — the initial sizes of the first chocolate bar. The second line of the input contains integers a2, b2 (1 ≤ a2, b2 ≤ 109) — the initial sizes of the second bar.\n\nYou can use the data of type int64 (in Pascal), long long (in С++), long (in Java) to process large integers (exceeding 231 - 1)."}
{"name": "631_C. Report", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 200 000) — the number of commodities in the report and the number of managers, respectively.\n\nThe second line contains n integers ai (|ai| ≤ 109) — the initial report before it gets to the first manager.\n\nThen follow m lines with the descriptions of the operations managers are going to perform. The i-th of these lines contains two integers ti and ri (<image>, 1 ≤ ri ≤ n), meaning that the i-th manager sorts the first ri numbers either in the non-descending (if ti = 1) or non-ascending (if ti = 2) order."}
{"name": "660_A. Co-prime Array", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1000) — the number of elements in the given array.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array a."}
{"name": "74_B. Train", "description": "Input\n\nThe first line contains three integers n, m and k. They represent the number of wagons in the train, the stowaway's and the controller's initial positions correspondingly (2 ≤ n ≤ 50, 1 ≤ m, k ≤ n, m ≠ k).\n\nThe second line contains the direction in which a controller moves. \"to head\" means that the controller moves to the train's head and \"to tail\" means that the controller moves to its tail. It is guaranteed that in the direction in which the controller is moving, there is at least one wagon. Wagon 1 is the head, and wagon n is the tail.\n\nThe third line has the length from 1 to 200 and consists of symbols \"0\" and \"1\". The i-th symbol contains information about the train's state at the i-th minute of time. \"0\" means that in this very minute the train moves and \"1\" means that the train in this very minute stands idle. The last symbol of the third line is always \"1\" — that's the terminal train station."}
{"name": "797_F. Mice and Holes", "description": "Input\n\nThe first line contains two integer numbers n, m (1 ≤ n, m ≤ 5000) — the number of mice and the number of holes, respectively.\n\nThe second line contains n integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109), where xi is the coordinate of ith mouse.\n\nNext m lines contain pairs of integer numbers pj, cj ( - 109 ≤ pj ≤ 109, 1 ≤ cj ≤ 5000), where pj is the coordinate of jth hole, and cj is the maximum number of mice that can hide in the hole j."}
{"name": "818_B. Permutation Game", "description": "Input\n\nThe first line contains two integer numbers n, m (1 ≤ n, m ≤ 100).\n\nThe second line contains m integer numbers l1, l2, ..., lm (1 ≤ li ≤ n) — indices of leaders in the beginning of each step."}
{"name": "864_A. Fair Game", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — number of cards. It is guaranteed that n is an even number.\n\nThe following n lines contain a sequence of integers a1, a2, ..., an (one integer per line, 1 ≤ ai ≤ 100) — numbers written on the n cards."}
{"name": "889_E. Mod Mod Mod", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200000) — the length of the sequence.\n\nThe second lines contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1013) — the elements of the sequence."}
{"name": "912_C. Perun, Ult!", "description": "Input\n\nIn the first line, two integers are given (separated by spaces) — n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105).\n\nIn the second line, there are three integers: <image>, <image> and <image> (<image>, <image>).\n\nEach of the following n lines has three integers — <image>, <image>, <image> (<image>, <image>).\n\nThe next m lines contain three integers each — <image>, <image>, <image> (<image>, <image>, <image>). It is guaranteed that there is no more than one hearth change per second for each enemy: more formally, for each a, b so that 1 ≤ a, b ≤ m, a ≠ b holds that if <image>, then <image>."}
{"name": "934_C. A Twisty Movement", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2000), denoting the length of the original sequence.\n\nThe second line contains n space-separated integers, describing the original sequence a1, a2, ..., an (1 ≤ ai ≤ 2, i = 1, 2, ..., n)."}
{"name": "960_E. Alternating Tree", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 2⋅10^{5} ) — the number of vertices in the tree.\n\nThe second line contains n space-separated integers V_1, V_2, …, V_n (-10^9≤ V_i ≤ 10^9) — values of the nodes.\n\nThe next n-1 lines each contain two space-separated integers u and v (1≤ u, v≤ n, u ≠ v) denoting an edge between vertices u and v. It is guaranteed that the given graph is a tree."}
{"name": "p00803 Starship Hakodate-maru", "description": "Input\n\nThe input is a sequence of at most 1024 positive integers. Each line contains a single integer. The sequence is followed by a zero, which indicates the end of data and should not be treated as input. You may assume that none of the input integers is greater than 151200."}
{"name": "p01337 The Number of the Real Roots of a Cubic Equation", "description": "Input\n\nThe input consists of multiple test cases, and the number is recorded on the first line.\n\nFrom the second line onward, the coefficients of the cubic equation are written in the form of a b c d. a is not 0, and each number is an integer value from -100 to 100."}
{"name": "1090_D. Similar Arrays", "description": "Input\n\nThe first line of input contains two integers n, m — the number of elements in the array and number of comparisons made by Vasya (1 ≤ n ≤ 100 000, 0 ≤ m ≤ 100 000).\n\nEach of the following m lines contains two integers a_i, b_i — the positions of the i-th comparison (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i). It's guaranteed that any unordered pair is given in the input at most once."}
{"name": "1157_D. N Problems During K Days", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10^5) — the number of problems Polycarp wants to solve and the number of days Polycarp wants to train."}
{"name": "1215_A. Yellow Cards", "description": "Input\n\nThe first line contains one integer a_1 (1 ≤ a_1 ≤ 1 000) — the number of players in the first team.\n\nThe second line contains one integer a_2 (1 ≤ a_2 ≤ 1 000) — the number of players in the second team.\n\nThe third line contains one integer k_1 (1 ≤ k_1 ≤ 1 000) — the maximum number of yellow cards a player from the first team can receive (after receiving that many yellow cards, he leaves the game).\n\nThe fourth line contains one integer k_2 (1 ≤ k_2 ≤ 1 000) — the maximum number of yellow cards a player from the second team can receive (after receiving that many yellow cards, he leaves the game).\n\nThe fifth line contains one integer n (1 ≤ n ≤ a_1 ⋅ k_1 + a_2 ⋅ k_2) — the number of yellow cards that have been shown during the match."}
{"name": "1238_C. Standard Free2play", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 100) — the number of queries. Each query contains two lines and is independent of all other queries.\n\nThe first line of each query contains two integers h and n (1 ≤ h ≤ 10^9, 1 ≤ n ≤ min(h, 2 ⋅ 10^5)) — the height of the cliff and the number of moved out platforms.\n\nThe second line contains n integers p_1, p_2, ..., p_n (h = p_1 > p_2 > ... > p_n ≥ 1) — the corresponding moved out platforms in the descending order of their heights.\n\nThe sum of n over all queries does not exceed 2 ⋅ 10^5."}
{"name": "1256_D. Binary String Minimizing", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ n^2) — the length of the string and the number of moves you can perform.\n\nThe second line of the test case contains one string consisting of n characters '0' and '1'.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6 (∑ n ≤ 10^6)."}
{"name": "12_C. Fruits", "description": "Input\n\nThe first line of the input contains two integer number n and m (1 ≤ n, m ≤ 100) — the number of price tags (which is equal to the number of different kinds of fruits that Ashot sells) and the number of items in Valera's list. The second line contains n space-separated positive integer numbers. Each of them doesn't exceed 100 and stands for the price of one fruit of some kind. The following m lines contain names of the fruits from the list. Each name is a non-empty string of small Latin letters which length doesn't exceed 32. It is guaranteed that the number of distinct fruits from the list is less of equal to n. Also it is known that the seller has in stock all fruits that Valera wants to buy."}
{"name": "1323_E. Instant Noodles", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500 000) — the number of test cases in the given test set. Test case descriptions follow.\n\nThe first line of each case description contains two integers n and m (1~≤~n,~m~≤~500 000) — the number of vertices in either half of the graph, and the number of edges respectively.\n\nThe second line contains n integers c_i (1 ≤ c_i ≤ 10^{12}). The i-th number describes the integer in the vertex i of the right half of the graph.\n\nEach of the following m lines contains a pair of integers u_i and v_i (1 ≤ u_i, v_i ≤ n), describing an edge between the vertex u_i of the left half and the vertex v_i of the right half. It is guaranteed that the graph does not contain multiple edges.\n\nTest case descriptions are separated with empty lines. The total value of n across all test cases does not exceed 500 000, and the total value of m across all test cases does not exceed 500 000 as well."}
{"name": "1342_D. Multiple Testcases", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 2 ⋅ 10^5) — the number of initial tests and the limit for the size of each array.\n\nThe second line contains n integers m_1, m_2, ..., m_n (1 ≤ m_i ≤ k) — the sizes of the arrays in the original tests.\n\nThe third line contains k integers c_1, c_2, ..., c_k (n ≥ c_1 ≥ c_2 ≥ ... ≥ c_k ≥ 1); c_i is the maximum number of arrays of size greater than or equal to i you can have in a single testcase."}
{"name": "1406_B. Maximum Product", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 2 ⋅ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (5≤ n≤ 10^5) — the size of the array.\n\nThe second line of each test case contains n integers a_1,a_2,…,a_n (-3× 10^3≤ a_i≤ 3× 10^3) — given array.\n\nIt's guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5."}
{"name": "1474_A. Puzzle From the Future", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the integer n (1 ≤ n ≤ 10^5) — the length of a and b.\n\nThe second line of each test case contains binary integer b of length n. The integer b consists only of digits 0 and 1.\n\nIt is guaranteed that the total sum of n over all t test cases doesn't exceed 10^5."}
{"name": "149_C. Division into Teams", "description": "Input\n\nThe first line contains the only integer n (2 ≤ n ≤ 105) which represents the number of guys in the yard. The next line contains n positive space-separated integers, ai (1 ≤ ai ≤ 104), the i-th number represents the i-th boy's playing skills."}
{"name": "177_C2. Party", "description": "Input\n\nThe first line of input contains an integer n — the number of the Beaver's acquaintances. \n\nThe second line contains an integer k <image> — the number of pairs of friends. Next k lines contain space-separated pairs of integers ui, vi <image> — indices of people who form the i-th pair of friends.\n\nThe next line contains an integer m <image> — the number of pairs of people who dislike each other. Next m lines describe pairs of people who dislike each other in the same format as the pairs of friends were described.\n\nEach pair of people is mentioned in the input at most once <image>. In particular, two persons cannot be friends and dislike each other at the same time.\n\nThe input limitations for getting 30 points are: \n\n  * 2 ≤ n ≤ 14\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 2 ≤ n ≤ 2000"}
{"name": "341_C. Iahub and Permutations", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 2000). On the second line, there are n integers, representing Iahub's important permutation after Iahubina replaces some values with -1. \n\nIt's guaranteed that there are no fixed points in the given permutation. Also, the given sequence contains at least two numbers -1 and each positive number occurs in the sequence at most once. It's guaranteed that there is at least one suitable permutation."}
{"name": "409_B. Mysterious Language", "description": "Input\n\nThis program has only one test (your program doesn't have to read anything)."}
{"name": "459_D. Pashmak and Parmida's problem", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 106). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "580_C. Kefa and Park", "description": "Input\n\nThe first line contains two integers, n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ n) — the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\n\nThe second line contains n integers a1, a2, ..., an, where each ai either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\n\nNext n - 1 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1 ≤ xi, yi ≤ n, xi ≠ yi), where xi and yi are the vertices of the tree, connected by an edge. \n\nIt is guaranteed that the given set of edges specifies a tree."}
{"name": "602_B. Approximating a Constant Range", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of data points.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000)."}
{"name": "719_C. Efim and Strange Grade", "description": "Input\n\nThe first line of the input contains two integers n and t (1 ≤ n ≤ 200 000, 1 ≤ t ≤ 109) — the length of Efim's grade and the number of seconds till the end of the break respectively.\n\nThe second line contains the grade itself. It's guaranteed that the grade is a positive number, containing at least one digit after the decimal points, and it's representation doesn't finish with 0."}
{"name": "924_B. Three-level Laser", "description": "Input\n\nThe first line contains two integers n and U (3 ≤ n ≤ 105, 1 ≤ U ≤ 109) — the number of states and the maximum possible difference between Ek and Ei.\n\nThe second line contains a sequence of integers E1, E2, ..., En (1 ≤ E1 < E2... < En ≤ 109). It is guaranteed that all Ei are given in increasing order."}
{"name": "p00223 Stray Twins", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nW H\ntx ty\nkx ky\nd11 d21 ... dW1\nd12 d22 ... dW2\n::\nd1H d2H ... dWH\n\n\nThe first line gives the department store sizes W, H (1 ≤ W, H ≤ 50). The second line gives Takayuki's initial position tx, ty, and the third line gives Kazuyuki's initial position kx, ky.\n\nThe H line that follows gives the department store information. di, j represents the type of square (i, j), 0 for movable squares and 1 for obstacles.\n\nThe number of datasets does not exceed 100."}
{"name": "p00737 Twirling Robot", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\n> w h\n>  s(1,1) ... s(1,w)\n>  s(2,1) ... s(2,w)\n>  ...\n>  s(h,1) ... s(h,w)\n>  c0 c1 c2 c3\n\nThe integers h and w are the numbers of rows and columns of the board, respectively. You may assume 2 ≤ h ≤ 30 and 2 ≤ w ≤ 30. Each of the following h lines consists of w numbers delimited by a space. The number s(i, j) represents the command assigned to the square in the i-th row and the j-th column as follows.\n\n* 0: \"Straight\"\n* 1: \"Right\"\n* 2: \"Back\"\n* 3: \"Left\"\n* 4: \"Halt\"\n\n\n\nYou can assume that a \"Halt\" command is assigned to the goal square. Note that \"Halt\" commands may be assigned to other squares, too.\n\nThe last line of a dataset contains four integers c0, c1, c2, and c3, delimited by a space, indicating the costs that the player has to pay when the player gives \"Straight\", \"Right\", \"Back\", and \"Left\" commands respectively. The player cannot give \"Halt\" commands. You can assume that all the values of c0, c1, c2, and c3 are between 1 and 9, inclusive."}
{"name": "p01008 Last One", "description": "Input\n\nThe input is given in the following format:\n\n\nn\np1 m1\np2 m2\n...\npi mi\n...\npn mn\n\n\nN pi-ary numbers mi, which are elements of the set, are given. The number n of elements in the set does not exceed 105. Also, 2 ≤ pi ≤ 62 is satisfied. The pi-ary number mi uses 52 letters of the alphabet in addition to the usual numbers 0-9. The order is 012 ... 789 ABC ... XYZabc ... xyz in ascending order, and the characters up to the i-th are used. Also, the pi-ary mi does not exceed 218-1 in decimal."}
{"name": "1011_B. Planning The Expedition", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of the expedition participants and the number of the daily food packages available.\n\nThe second line contains sequence of integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 100), where a_i is the type of i-th food package."}
{"name": "1121_B. Mike and Children", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 1 000) — the number of sweets Mike has.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^5) — the sizes of the sweets. It is guaranteed that all integers are distinct."}
{"name": "1207_A. There Are Two Types Of Burgers", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) – the number of queries.\n\nThe first line of each query contains three integers b, p and f (1 ≤ b, ~p, ~f ≤ 100) — the number of buns, beef patties and chicken cutlets in your restaurant.\n\nThe second line of each query contains two integers h and c (1 ≤ h, ~c ≤ 100) — the hamburger and chicken burger prices in your restaurant."}
{"name": "1225_B2. TV Subscriptions (Hard Version)", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test case descriptions follow.\n\nThe first line of each test case contains three integers n, k and d (1 ≤ n ≤ 2⋅10^5, 1 ≤ k ≤ 10^6, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.\n\nIt is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 2⋅10^5."}
{"name": "1249_D2. Too Many Segments (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next n lines contain segments. The i-th line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 2 ⋅ 10^5) — the endpoints of the i-th segment."}
{"name": "1290_B. Irreducible Anagrams", "description": "Input\n\nThe first line contains a string s, consisting of lowercase English characters (1 ≤ |s| ≤ 2 ⋅ 10^5).\n\nThe second line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nEach of the following q lines contain two integers l and r (1 ≤ l ≤ r ≤ |s|), representing a query for the substring of s formed by characters from the l-th to the r-th."}
{"name": "1396_B. Stoned Game", "description": "Input\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of games. The description of the games follows. Each description contains two lines:\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100)."}
{"name": "141_D. Take-off Ramps", "description": "Input\n\nThe first line contains two integers n and L (0 ≤ n ≤ 105, 1 ≤ L ≤ 109). Then n lines contain the descriptions of the ramps, each description is on a single line. Each description is a group of four non-negative integers xi, di, ti, pi (0 ≤ xi ≤ L, 1 ≤ di, ti, pi ≤ 109, xi + di ≤ L)."}
{"name": "1438_D. Powerful Ksenia", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 10^5) — the length of a.\n\nThe second line contains n integers, a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — elements of a."}
{"name": "1512_A. Spy Detected!", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 100) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100).\n\nIt is guaranteed that all the numbers except one in the a array are the same."}
{"name": "1539_E. Game with Cards", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 2 ≤ m ≤ 10^9) — the number of questions and the maximum possible value on the card.\n\nThen n queries are described. Every description contains 3 lines.\n\nThe first line of the description of the i-th query contains a single integer k_i (0 ≤ k_i ≤ m) — the number on a new card.\n\nThe second line of the description of the i-th query contains two integers a_{l, i} and b_{l, i} (0 ≤ a_{l, i} ≤ b_{l, i} ≤ m) — the minimum and maximum values of the card at the left hand after the replacement.\n\nThe third line of the description of the i-th query contains two integers a_{r, i} and b_{r,i} (0 ≤ a_{r, i} ≤ b_{r,i} ≤ m) — the minimum and maximum values of the card at the right hand after the replacement."}
{"name": "208_A. Dubstep", "description": "Input\n\nThe input consists of a single non-empty string, consisting only of uppercase English letters, the string's length doesn't exceed 200 characters. It is guaranteed that before Vasya remixed the song, no word contained substring \"WUB\" in it; Vasya didn't change the word order. It is also guaranteed that initially the song had at least one word."}
{"name": "282_C. XOR and OR", "description": "Input\n\nThe first line contains Bitlandish string a, the second line contains Bitlandish string b. The strings can have different lengths.\n\nIt is guaranteed that the given strings only consist of characters \"0\" and \"1\". The strings are not empty, their length doesn't exceed 106."}
{"name": "305_B. Continued Fractions", "description": "Input\n\nThe first line contains two space-separated integers p, q (1 ≤ q ≤ p ≤ 1018) — the numerator and the denominator of the first fraction.\n\nThe second line contains integer n (1 ≤ n ≤ 90) — the height of the second fraction. The third line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1018) — the continued fraction.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "331_B1. Shave Beaver!", "description": "Input\n\nThe first line contains integer n — the total number of beavers, 2 ≤ n. The second line contains n space-separated integers — the initial beaver permutation.\n\nThe third line contains integer q — the number of queries, 1 ≤ q ≤ 105. The next q lines contain the queries. Each query i looks as pi xi yi, where pi is the query type (1 is to shave beavers from xi to yi, inclusive, 2 is to swap beavers on positions xi and yi). All queries meet the condition: 1 ≤ xi < yi ≤ n.\n\n  * to get 30 points, you need to solve the problem with constraints: n ≤ 100 (subproblem B1); \n  * to get 100 points, you need to solve the problem with constraints: n ≤ 3·105 (subproblems B1+B2). \n\n\n\nNote that the number of queries q is limited 1 ≤ q ≤ 105 in both subproblem B1 and subproblem B2."}
{"name": "448_C. Painting Fence", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 5000) — the number of fence planks. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "46_D. Parking Lot", "description": "Input\n\nThe first line contains three integers L, b и f (10 ≤ L ≤ 100000, 1 ≤ b, f ≤ 100). The second line contains an integer n (1 ≤ n ≤ 100) that indicates the number of requests the program has got. Every request is described on a single line and is given by two numbers. The first number represents the request type. If the request type is equal to 1, then in that case the second number indicates the length of a car (in meters) that enters the street looking for a place to park. And if the request type is equal to 2, then the second number identifies the number of such a request (starting with 1) that the car whose arrival to the parking lot was described by a request with this number, leaves the parking lot. It is guaranteed that that car was parked at the moment the request of the 2 type was made. The lengths of cars are integers from 1 to 1000."}
{"name": "591_D. Chip 'n Dale Rescue Rangers", "description": "Input\n\nThe first line of the input contains four integers x1, y1, x2, y2 (|x1|, |y1|, |x2|, |y2| ≤ 10 000) — the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively. \n\nThe second line contains two integers <image> and t (0 < v, t ≤ 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively. \n\nNext follow one per line two pairs of integer (vx, vy) and (wx, wy), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that <image> and <image>."}
{"name": "613_B. Skills", "description": "Input\n\nThe first line of the input contains five space-separated integers n, A, cf, cm and m (1 ≤ n ≤ 100 000, 1 ≤ A ≤ 109, 0 ≤ cf, cm ≤ 1000, 0 ≤ m ≤ 1015).\n\nThe second line contains exactly n integers ai (0 ≤ ai ≤ A), separated by spaces, — the current levels of skills."}
{"name": "730_A. Toda 2", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of friends.\n\nThe second line contains n non-negative integers r1, r2, ..., rn (0 ≤ ri ≤ 100), where ri is the initial rating of the i-th friend."}
{"name": "774_E. Big Number and Remainder", "description": "Input\n\nThe first line contains the integer which Stepan has. The length of Stepan's integer is between 2 and 200 000 digits, inclusive. It is guaranteed that Stepan's integer does not contain leading zeros.\n\nThe second line contains the integer m (2 ≤ m ≤ 108) — the number by which Stepan divides good shifts of his integer."}
{"name": "799_E. Aquarium decoration", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 200000, 1 ≤ m ≤ n, 1 ≤ k ≤ n) — the number of decorations, how many decorations the friends should choose, how many decorations each of them should like among the chosen.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109) — decorations costs.\n\nThe third line contains single integer a (1 ≤ a ≤ n) — the number of decorations liked by Masha. The fourth line contains a distinct integers x1, x2, ..., xa (1 ≤ xi ≤ n) — the ids of decorations liked by Masha.\n\nThe next two lines describe decorations liked by Arkady in the same format."}
{"name": "961_G. Partitions", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 2·105) — the number of elements and the number of subsets in each partition, respectively.\n\nThe second line contains n integers wi (1 ≤ wi ≤ 109)— weights of elements of the set."}
{"name": "p00314 Programming Contest", "description": "Input\n\nThe input is given in the following format.\n\n\nN\np1 p2 ... pN\n\n\nThe first line gives the number of questions the team answered correctly N (1 ≤ N ≤ 100). The score pi (1 ≤ pi ≤ 100) for each question answered correctly on the second line is given."}
{"name": "1005_E1. Median on Segments (Permutations Edition)", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n ≤ 2⋅10^5, 1 ≤ m ≤ n) — the length of the given sequence and the required value of the median.\n\nThe second line contains a permutation p_1, p_2, ..., p_n (1 ≤ p_i ≤ n). Each integer between 1 and n occurs in p exactly once."}
{"name": "104_B. Testing Pants for Sadness", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100). It is the number of questions in the test. The second line contains space-separated n positive integers ai (1 ≤ ai ≤ 109), the number of answer variants to question i."}
{"name": "1071_C. Triple Flips", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — the elements of the array."}
{"name": "1093_E. Intersection of Permutations", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the number of elements in both permutations and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — permutation a. It is guaranteed that each value from 1 to n appears in a exactly once.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — permutation b. It is guaranteed that each value from 1 to n appears in b exactly once.\n\nEach of the next m lines contains the description of a certain query. These are either:\n\n  * 1~l_a~r_a~l_b~r_b (1 ≤ l_a ≤ r_a ≤ n, 1 ≤ l_b ≤ r_b ≤ n); \n  * 2~x~y (1 ≤ x, y ≤ n, x ≠ y)."}
{"name": "1141_G. Privatization of Roads in Treeland", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 200000, 0 ≤ k ≤ n - 1) — the number of cities and the maximal number of cities which can have two or more roads belonging to one company.\n\nThe following n-1 lines contain roads, one road per line. Each line contains a pair of integers x_i, y_i (1 ≤ x_i, y_i ≤ n), where x_i, y_i are cities connected with the i-th road."}
{"name": "1200_B. Block Adventure", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first line of each test case contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^6, 0 ≤ k ≤ 10^6) — the number of columns in the game, the number of blocks in the character's bag at the beginning, and the non-negative integer k described in the statement.\n\nThe second line of each test case contains n integers. The i-th integer is h_i (0 ≤ h_i ≤ 10^6), the initial height of the i-th column."}
{"name": "1261_B1. Optimal Subsequences (Easy Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence a.\n\nThe second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line contains an integer m (1 ≤ m ≤ 100) — the number of requests.\n\nThe following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests."}
{"name": "1283_C. Friends and Gifts", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of friends.\n\nThe second line of the input contains n integers f_1, f_2, ..., f_n (0 ≤ f_i ≤ n, f_i ≠ i, all f_i ≠ 0 are distinct), where f_i is the either f_i = 0 if the i-th friend doesn't know whom he wants to give the gift to or 1 ≤ f_i ≤ n if the i-th friend wants to give the gift to the friend f_i. It is also guaranteed that there is at least two values f_i = 0."}
{"name": "1389_B. Array Walk", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains three integers n, k and z (2 ≤ n ≤ 10^5, 1 ≤ k ≤ n - 1, 0 ≤ z ≤ min(5, k)) — the number of elements in the array, the total number of moves you should perform and the maximum number of moves to the left you can perform.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the given array.\n\nThe sum of n over all testcases does not exceed 3 ⋅ 10^5."}
{"name": "1409_E. Two Platforms", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^9) — the number of points and the length of each platform, respectively. The second line of the test case contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^9), where x_i is x-coordinate of the i-th point. The third line of the input contains n integers y_1, y_2, ..., y_n (1 ≤ y_i ≤ 10^9), where y_i is y-coordinate of the i-th point. All points are distinct (there is no pair 1 ≤ i < j ≤ n such that x_i = x_j and y_i = y_j).\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1527_E. Partition Game", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 35 000, 1 ≤ k ≤ min(n,100)).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n)."}
{"name": "201_B. Guess That Car!", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the sizes of the parking lot. Each of the next n lines contains m integers: the j-th number in the i-th line describes the \"rarity\" cij (0 ≤ cij ≤ 100000) of the car that is located in the square with coordinates (i, j)."}
{"name": "24_D. Broken robot", "description": "Input\n\nOn the first line you will be given two space separated integers N and M (1 ≤ N, M ≤ 1000). On the second line you will be given another two space separated integers i and j (1 ≤ i ≤ N, 1 ≤ j ≤ M) — the number of the initial row and the number of the initial column. Note that, (1, 1) is the upper left corner of the board and (N, M) is the bottom right corner."}
{"name": "298_B. Sail", "description": "Input\n\nThe first line contains five integers t, sx, sy, ex, ey (1 ≤ t ≤ 105, - 109 ≤ sx, sy, ex, ey ≤ 109). The starting location and the ending location will be different.\n\nThe second line contains t characters, the i-th character is the wind blowing direction at the i-th second. It will be one of the four possibilities: \"E\" (east), \"S\" (south), \"W\" (west) and \"N\" (north)."}
{"name": "534_A. Exam", "description": "Input\n\nA single line contains integer n (1 ≤ n ≤ 5000) — the number of students at an exam."}
{"name": "584_D. Dima and Lisa", "description": "Input\n\nThe single line contains an odd number n (3 ≤ n < 109)."}
{"name": "628_D. Magic Numbers", "description": "Input\n\nThe first line contains two integers m, d (1 ≤ m ≤ 2000, 0 ≤ d ≤ 9) — the parameters from the problem statement.\n\nThe second line contains positive integer a in decimal presentation (without leading zeroes).\n\nThe third line contains positive integer b in decimal presentation (without leading zeroes).\n\nIt is guaranteed that a ≤ b, the number of digits in a and b are the same and don't exceed 2000."}
{"name": "767_E. Change-free", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 109) — the amount of days Arseny planned his actions for and the amount of coins he currently has. \n\nThe second line contains a sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 105) — the amounts of money in rubles which Arseny is going to spend for each of the following days. \n\nThe third line contains a sequence of integers w1, w2, ..., wn (1 ≤ wi ≤ 105) — the cashier's dissatisfaction coefficients for each of the following days."}
{"name": "928_B. Chat", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ n) — the total amount of messages and the number of previous and next messages visible.\n\nThe second line features a sequence of integers a1, a2, ..., an (0 ≤ ai < i), where ai denotes the i-th message link destination or zero, if there's no link from i. All messages are listed in chronological order. It's guaranteed that the link from message x goes to message with number strictly less than x."}
{"name": "957_D. Riverside Curio", "description": "Input\n\nThe first line contains a single positive integer n (1 ≤ n ≤ 105) — the number of days.\n\nThe second line contains n space-separated integers m1, m2, ..., mn (0 ≤ mi < i) — the number of marks strictly above the water on each day."}
{"name": "982_D. Shark", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of days.\n\nThe second line contains n distinct positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the distance traveled in each of the day."}
{"name": "p00899 City Merger", "description": "Input\n\nThe input is a sequence of datasets. Each dataset begins with a line containing a positive integer n (n ≤ 14), which denotes the number of cities to be merged. The following n lines contain the names of the cities in uppercase alphabetical letters, one in each line. You may assume that none of the original city names has more than 20 characters. Of course, no two cities have the same name.\n\nThe end of the input is indicated by a line consisting of a zero."}
{"name": "1033_A. King Escape", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 1000) — the dimensions of the chessboard.\n\nThe second line contains two integers a_x and a_y (1 ≤ a_x, a_y ≤ n) — the coordinates of Alice's queen.\n\nThe third line contains two integers b_x and b_y (1 ≤ b_x, b_y ≤ n) — the coordinates of Bob's king.\n\nThe fourth line contains two integers c_x and c_y (1 ≤ c_x, c_y ≤ n) — the coordinates of the location that Bob wants to get to.\n\nIt is guaranteed that Bob's king is currently not in check and the target location is not in check either.\n\nFurthermore, the king is not located on the same square as the queen (i.e. a_x ≠ b_x or a_y ≠ b_y), and the target does coincide neither with the queen's position (i.e. c_x ≠ a_x or c_y ≠ a_y) nor with the king's position (i.e. c_x ≠ b_x or c_y ≠ b_y)."}
{"name": "1077_F2. Pictures with Kittens (hard version)", "description": "Input\n\nThe first line of the input contains three integers n, k and x (1 ≤ k, x ≤ n ≤ 5000) — the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the beauty of the i-th picture."}
{"name": "1098_F. Ж-function", "description": "Input\n\nThe first line contains the string s, consisting of lowercase English letters (1 ≤ |s| ≤ 200 000). The second line contains one integer q — the number of queries (1 ≤ q ≤ 200 000). Each of the following q lines contains two integers l_i and r_i, describing the query (1 ≤ l_i ≤ r_i ≤ |s|)."}
{"name": "1167_D. Bicolored RBS", "description": "Input\n\nThe first line contains an even integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of RBS s.\n\nThe second line contains regular bracket sequence s (|s| = n, s_i ∈ \\{\"(\", \")\"\\})."}
{"name": "1418_D. Trash Problem", "description": "Input\n\nThe first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of piles in the room before all queries and the number of queries, respectively.\n\nThe second line of the input contains n distinct integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9), where p_i is the coordinate of the i-th pile.\n\nThe next q lines describe queries. The i-th query is described with two integers t_i and x_i (0 ≤ t_i ≤ 1; 1 ≤ x_i ≤ 10^9), where t_i is 0 if you need to remove a pile from the coordinate x_i and is 1 if you need to add a pile to the coordinate x_i. It is guaranteed that for t_i = 0 there is such pile in the current set of piles and for t_i = 1 there is no such pile in the current set of piles."}
{"name": "1510_B. Button Lock", "description": "Input\n\nThe first line contains two integers d and n (1 ≤ d ≤ 10; 1 ≤ n ≤ 2^d - 1). Next n lines describe possible passwords. Each line contains a string s_i of d zeros and ones: for all j from 1 to d the j-th character is 1 iff the button with the digit j - 1 must be pushed down.\n\nAll strings s_i are different, and each string contains at least one 1."}
{"name": "1536_D. Omkar and Medians", "description": "Input\n\nEach test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array b.\n\nThe second line contains n integers b_1, b_2, …, b_n (-10^9 ≤ b_i ≤ 10^9) — the elements of b.\n\nIt is guaranteed the sum of n across all test cases does not exceed 2 ⋅ 10^5."}
{"name": "302_C. Yaroslav and Sequence", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100). The second line contains (2·n - 1) integers — the array elements. The array elements do not exceed 1000 in their absolute value."}
{"name": "350_B. Resort", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of objects.\n\nThe second line contains n space-separated integers type1, type2, ..., typen — the types of the objects. If typei equals zero, then the i-th object is the mountain. If typei equals one, then the i-th object is the hotel. It is guaranteed that at least one object is a hotel.\n\nThe third line of the input contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ n) — the description of the ski tracks. If number ai equals zero, then there is no such object v, that has a ski track built from v to i. If number ai doesn't equal zero, that means that there is a track built from object ai to object i."}
{"name": "41_A. Translation", "description": "Input\n\nThe first line contains word s, the second line contains word t. The words consist of lowercase Latin letters. The input data do not consist unnecessary spaces. The words are not empty and their lengths do not exceed 100 symbols."}
{"name": "467_E. Alex and Complicated Task", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 5·105). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "540_A. Combination Lock", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of disks on the combination lock.\n\nThe second line contains a string of n digits — the original state of the disks.\n\nThe third line contains a string of n digits — Scrooge McDuck's combination that opens the lock."}
{"name": "797_B. Odd sum", "description": "Input\n\nThe first line contains integer number n (1 ≤ n ≤ 105).\n\nThe second line contains n integer numbers a1, a2, ..., an ( - 104 ≤ ai ≤ 104). The sequence contains at least one subsequence with odd sum."}
{"name": "817_D. Imbalanced Array", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 106) — size of the array a.\n\nThe second line contains n integers a1, a2... an (1 ≤ ai ≤ 106) — elements of the array."}
{"name": "863_D. Yet Another Array Queries Problem", "description": "Input\n\nThe first line contains three integer numbers n, q and m (1 ≤ n, q ≤ 2·105, 1 ≤ m ≤ 100). \n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 109). \n\nThen q lines follow. i-th of them contains three integer numbers ti, li, ri, where ti is the type of i-th query, and [li, ri] is the segment where this query is performed (1 ≤ ti ≤ 2, 1 ≤ li ≤ ri ≤ n). \n\nThe last line contains m integer numbers b1, b2, ..., bm (1 ≤ bi ≤ n) — important indices of the array."}
{"name": "889_A. Petya and Catacombs", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2·105) — then number of notes in Petya's logbook.\n\nThe second line contains n non-negative integers t1, t2, ..., tn (0 ≤ ti < i) — notes in the logbook."}
{"name": "960_A. Check the string", "description": "Input\n\nThe first and only line consists of a string S ( 1 ≤ |S| ≤ 5 000 ). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'."}
{"name": "1006_A. Adjacent Replacements", "description": "Input\n\nThe first line of the input contains one integer number n (1 ≤ n ≤ 1000) — the number of elements in Mishka's birthday present (surprisingly, an array).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1073_A. Diverse Substring", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the length of string s.\n\nThe second line is the string s, consisting of exactly n lowercase Latin letters."}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 55) — the length of the encrypted string. The second line of the input contains t — the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists."}
{"name": "1114_B. Yet Another Array Partitioning Task", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m, 2 ≤ k, m ⋅ k ≤ n) — the number of elements in a, the constant m in the definition of beauty and the number of subarrays to split to.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9)."}
{"name": "1162_E. Thanos Nim", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 50) — the number of piles. It is guaranteed that n is an even number.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 50) — the number of stones in the piles."}
{"name": "1183_D. Candy Box (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries. Each query is represented by two lines.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of candies.\n\nThe second line of each query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the type of the i-th candy in the box.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 ⋅ 10^5."}
{"name": "1200_E. Compress Words", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of the words in Amugae's sentence.\n\nThe second line contains n words separated by single space. Each words is non-empty and consists of uppercase and lowercase English letters and digits ('A', 'B', ..., 'Z', 'a', 'b', ..., 'z', '0', '1', ..., '9'). The total length of the words does not exceed 10^6."}
{"name": "1283_F. DIY Garland", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of lamps.\n\nThe second line contains n - 1 integers a_1, a_2, ..., a_{n - 1} (1 ≤ a_i ≤ n), where a_i is the index of the main lamp for the i-th wire (wires are numbered in descending order of importance)."}
{"name": "1327_C. Game with Chips", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m, k ≤ 200) — the number of rows and columns of the board and the number of chips, respectively.\n\nThe next k lines contains two integers each sx_i, sy_i ( 1 ≤ sx_i ≤ n, 1 ≤ sy_i ≤ m) — the starting position of the i-th chip.\n\nThe next k lines contains two integers each fx_i, fy_i ( 1 ≤ fx_i ≤ n, 1 ≤ fy_i ≤ m) — the position that the i-chip should visit at least once."}
{"name": "1454_B. Unique Bid Auction", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of participants. The second line of the test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n), where a_i is the i-th participant chosen number.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1477_F. Nezzar and Chocolate Bars", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 2000).\n\nThe second line contains n integers l_1, l_2, …, l_n (1 ≤ l_i, ∑_{i=1}^{n} l_i ≤ 2000)."}
{"name": "1528_C. Trees of Tranquillity", "description": "Input\n\nThe first line contains an integer t (1≤ t≤ 3 ⋅ 10^5) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (2≤ n≤ 3 ⋅ 10^5).\n\nThe second line of each test case contains n-1 integers a_2, …, a_n (1 ≤ a_i < i), a_i being the parent of the vertex i in Soroush's tree.\n\nThe third line of each test case contains n-1 integers b_2, …, b_n (1 ≤ b_i < i), b_i being the parent of the vertex i in Keshi's tree.\n\nIt is guaranteed that the given graphs are trees.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5."}
{"name": "226_D. The table", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and the number of columns. \n\nNext n lines follow, each contains m integers: j-th integer in the i-th line is ai, j (|ai, j| ≤ 100), the number in the i-th row and j-th column of the table.\n\nThe rows of the table numbered from 1 to n. The columns of the table numbered from 1 to m."}
{"name": "298_E. Splitting the Uniqueness", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 105).\n\nThe second line contains n distinct integers s1, s2, ... sn (0 ≤ si ≤ 109)."}
{"name": "346_A. Alice and Bob", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100) — the initial number of elements in the set. The second line contains n distinct space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the set."}
{"name": "413_E. Maze 2D", "description": "Input\n\nThe first line contains two integers, n and m (1 ≤ n ≤ 2·105; 1 ≤ m ≤ 2·105) — the width of the maze and the number of queries, correspondingly. Next two lines contain the maze. Each line contains n characters, each character equals either '.' (empty cell), or 'X' (obstacle).\n\nEach of the next m lines contains two integers vi and ui (1 ≤ vi, ui ≤ 2n) — the description of the i-th request. Numbers vi, ui mean that you need to print the value of the shortest path from the cell of the maze number vi to the cell number ui. We assume that the cells of the first line of the maze are numbered from 1 to n, from left to right, and the cells of the second line are numbered from n + 1 to 2n from left to right. It is guaranteed that both given cells are empty."}
{"name": "440_B. Balancer", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 50000). The second line contains n non-negative numbers that do not exceed 109, the i-th written number is the number of matches in the i-th matchbox. It is guaranteed that the total number of matches is divisible by n."}
{"name": "462_D. Appleman and Tree", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105) — the number of tree vertices. \n\nThe second line contains the description of the tree: n - 1 integers p0, p1, ..., pn - 2 (0 ≤ pi ≤ i). Where pi means that there is an edge connecting vertex (i + 1) of the tree and vertex pi. Consider tree vertices are numbered from 0 to n - 1.\n\nThe third line contains the description of the colors of the vertices: n integers x0, x1, ..., xn - 1 (xi is either 0 or 1). If xi is equal to 1, vertex i is colored black. Otherwise, vertex i is colored white."}
{"name": "534_D. Handshakes", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2·105) — the number of students who came to CTOP. The next line contains n integers a1, a2, ..., an (0 ≤ ai < n), where ai is the number of students with who the i-th student shook hands."}
{"name": "607_B. Zuma", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 500) — the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is ci (1 ≤ ci ≤ n) — the color of the i-th gemstone in a line."}
{"name": "701_A. Cards", "description": "Input\n\nThe first line of the input contains integer n (2 ≤ n ≤ 100) — the number of cards in the deck. It is guaranteed that n is even.\n\nThe second line contains the sequence of n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai is equal to the number written on the i-th card."}
{"name": "723_B. Text Document Analysis", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 255) — the length of the given string. The second line contains the string consisting of only lowercase and uppercase English letters, parentheses and underscore symbols."}
{"name": "859_A. Declined Finalists", "description": "Input\n\nThe first line of input contains K (1 ≤ K ≤ 25), the number of onsite finalists you know. The second line of input contains r1, r2, ..., rK (1 ≤ ri ≤ 106), the qualifying ranks of the finalists you know. All these ranks are distinct."}
{"name": "883_M. Quadcopter Competition", "description": "Input\n\nThe first line contains two integer numbers x1 and y1 ( - 100 ≤ x1, y1 ≤ 100) — coordinates of the quadcopter starting (and finishing) point.\n\nThe second line contains two integer numbers x2 and y2 ( - 100 ≤ x2, y2 ≤ 100) — coordinates of the flag.\n\nIt is guaranteed that the quadcopter starting point and the flag do not coincide."}
{"name": "p00117 A reward for a Carpenter", "description": "Input\n\nThe input is given in the following format:\n\n\nn\nm\na1, b1, c1, d1\na2, b2, c2, d2\n::\nam, bm, cm, dm\ns, g, V, P\n\n\nThe first line gives the total number of towns n (n ≤ 20), and the second line gives the total number of roads m (m ≤ 100). The following m lines are given the i-th road information ai, bi, ci, di (1 ≤ ai, bi ≤ n, 0 ≤ ci, di ≤ 1,000). ai and bi are the numbers of the towns connected to the highway i, ci is the transportation cost from ai to bi, and di is the transportation cost from bi to ai.\n\nOn the last line, the number s of the town where the carpenter departs, the number g of the mountain village with the pillar, the money V received by the carpenter from the lord, and the price P of the pillar are given."}
{"name": "p01305 Card Game", "description": "Input\n\nEach of Gates and Jackie's hand consists of nine integers. Both players' hands are different integers from 1 to 18. The first line of input is given nine integers representing Gates'hand, and the second line is given nine integers representing Jackie's hand. There is a single space between integers."}
{"name": "1063_A. Oh Those Palindromes", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100 000) — the length of string s.\n\nThe second line contains string s that consists of exactly n lowercase characters of Latin alphabet."}
{"name": "1132_A. Regular Bracket Sequence", "description": "Input\n\nThe input consists of four lines, i-th of them contains one integer cnt_i (0 ≤ cnt_i ≤ 10^9)."}
{"name": "1174_B. Ehab Is an Odd Person", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 10^9) — the elements of the array a."}
{"name": "1230_D. Marcin and Training Camp", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 7000) — the number of students interested in the camp.\n\nThe second line contains n integers. The i-th of them is a_i (0 ≤ a_i < 2^{60}).\n\nThe third line contains n integers. The i-th of them is b_i (1 ≤ b_i ≤ 10^9)."}
{"name": "1271_F. Divide The Students", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 300) — the number of groups.\n\nThen the descriptions of groups follow. The description of the i-th group consists of three lines:\n\n  * the first line contains three integers a_{i, 1}, b_{i, 1} and c_{i, 1} (1 ≤ a_{i, 1}, b_{i, 1}, c_{i, 1} ≤ 3000) — the capacity of the auditorium, lab and gym assigned to the first subgroup of the i-th group, respectively; \n  * the second line contains three integers a_{i, 2}, b_{i, 2} and c_{i, 2} (1 ≤ a_{i, 2}, b_{i, 2}, c_{i, 2} ≤ 3000) — the capacity of the auditorium, lab and gym assigned to the second subgroup of the i-th group, respectively; \n  * the third line contains integers d_{i, 1}, d_{i, 2}, ..., d_{i, 7} (0 ≤ d_{i, j} ≤ 3000) — the number of students belonging to each of the seven aforementioned types in the i-th group. It is not guaranteed that the sum of these values is positive — a group can consist entirely of students that don't attend classes at all. \n\n\n\nIt is guaranteed that the total number of students in all groups is not greater than 3000."}
{"name": "1316_A. Grade Allocation", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 200). The description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^{3}, 1 ≤ m ≤ 10^{5}) — the number of students and the highest possible score respectively.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n ( 0 ≤ a_{i} ≤ m) — scores of the students."}
{"name": "137_B. Permutation", "description": "Input\n\nThe first line of the input data contains an integer n (1 ≤ n ≤ 5000) which represents how many numbers are in the sequence. The second line contains a sequence of integers ai (1 ≤ ai ≤ 5000, 1 ≤ i ≤ n)."}
{"name": "1443_D. Extreme Subtraction", "description": "Input\n\nThe first line contains one positive integer t (1 ≤ t ≤ 30000) — the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 30000) — the number of elements in the array.\n\nThe second line of each test case contains n integers a_1 … a_n (1 ≤ a_i ≤ 10^6).\n\nThe sum of n over all test cases does not exceed 30000."}
{"name": "264_B. Good Sequences", "description": "Input\n\nThe input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of good integers. The second line contains a single-space separated list of good integers a1, a2, ..., an in strictly increasing order (1 ≤ ai ≤ 105; ai < ai + 1)."}
{"name": "474_F. Ant colony", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 105), the size of the ant colony. \n\nThe second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109), the strengths of the ants. \n\nThe third line contains one integer t (1 ≤ t ≤ 105), the number of test cases. \n\nEach of the next t lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), describing one query."}
{"name": "549_C. The Game Of Parity", "description": "Input\n\nThe first line contains two positive space-separated integers, n and k (1 ≤ k ≤ n ≤ 2·105) — the initial number of cities in Westeros and the number of cities at which the game ends. \n\nThe second line contains n space-separated positive integers ai (1 ≤ ai ≤ 106), which represent the population of each city in Westeros."}
{"name": "666_E. Forensic Examination", "description": "Input\n\nThe first line contains the string s (1 ≤ |s| ≤ 5·105) — the Absolutely Inadmissible Swearword. The string s consists of only lowercase English letters.\n\nThe second line contains the only integer m (1 ≤ m ≤ 5·104) — the number of texts of leaflets for expertise.\n\nEach of the next m lines contains the only string ti — the text of the i-th leaflet. The sum of lengths of all leaflet texts doesn't exceed 5·104. The text of the leaflets consists of only lowercase English letters.\n\nThe next line contains integer q (1 ≤ q ≤ 5·105) — the number of queries for expertise.\n\nFinally, each of the last q lines contains four integers l, r, pl, pr (1 ≤ l ≤ r ≤ m, 1 ≤ pl ≤ pr ≤ |s|), where |s| is the length of the Absolutely Inadmissible Swearword."}
{"name": "713_B. Searching Rectangles", "description": "Input\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 216) — size of the field.\n\nFor each query an integer between 0 and 2 is returned — the number of initial rectangles that lie fully inside the query rectangle."}
{"name": "733_F. Drivers Dissatisfaction", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2·105, n - 1 ≤ m ≤ 2·105) — the number of cities and the number of roads in the kingdom, respectively.\n\nThe second line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 109), where wi is the drivers dissatisfaction with the i-th road.\n\nThe third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 109), where ci is the cost (in lamziks) of reducing the dissatisfaction with the i-th road by one.\n\nThe next m lines contain the description of the roads. The i-th of this lines contain a pair of integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) which mean that the i-th road connects cities ai and bi. All roads are two-way oriented so it is possible to move by the i-th road from ai to bi, and vice versa. It is allowed that a pair of cities is connected by more than one road. \n\nThe last line contains one integer S (0 ≤ S ≤ 109) — the number of lamziks which we can spend for reforms."}
{"name": "849_A. Odds and Ends", "description": "Input\n\nThe first line of input contains a non-negative integer n (1 ≤ n ≤ 100) — the length of the sequence.\n\nThe second line contains n space-separated non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 100) — the elements of the sequence."}
{"name": "870_D. Something with XOR Queries", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 5000) — the length of the hidden permutation. You should read this integer first."}
{"name": "940_D. Alena And The Heater", "description": "Input\n\nThe first line of input contains a single integer n (5 ≤ n ≤ 105) — the length of a and b'.\n\nThe second line of input contains n space separated integers a1, ..., an ( - 109 ≤ ai ≤ 109) — the elements of a.\n\nThe third line of input contains a string of n characters, consisting of 0 and 1 — the elements of b'. Note that they are not separated by spaces."}
{"name": "96_A. Football", "description": "Input\n\nThe first input line contains a non-empty string consisting of characters \"0\" and \"1\", which represents players. The length of the string does not exceed 100 characters. There's at least one player from each team present on the field."}
{"name": "p00842 Network Mess", "description": "Input\n\nThe input is a series of distance matrices, followed by a line consisting of a single '0'. Each distance matrix is formatted as follows.\n\n\nN\na11 a12  ...   a1N\na21 a22  ...   a2N\n.   .  .      .\n.   .    .    .\n.   .      .  .\naN1 aN2  ...   aNN\n\n\n\n\n<image>\n\n\nN is the size, i.e. the number of rows and the number of columns, of the matrix. aij gives the distance between the i-th leaf node (computer) and the j-th. You may assume 2 ≤ N ≤ 50 and the matrix is symmetric whose diagonal elements are all zeros. That is, aii = 0 and aij = aji for each i and j. Each non-diagonal element aij (i ≠ j) satisfies 2 ≤ aij ≤ 30. You may assume there is always a solution. That is, there is a tree having the given distances between leaf nodes."}
{"name": "p01106 Folding a Ribbon", "description": "Input\n\nThe input consists of at most 100 datasets, each being a line containing three integers.\n\n\nn i j\n\n\nThe three integers mean the following: The ribbon is folded n times in a certain order; then, the i-th layer of the folded ribbon, counted from the top, is marked; when the ribbon is unfolded completely restoring the original state, the marked part is the j-th part of the ribbon separated by creases, counted from the left. Both i and j are one-based, that is, the topmost layer is the layer 1 and the leftmost part is numbered 1. These integers satisfy 1 ≤ n ≤ 60, 1 ≤ i ≤ 2n, and 1 ≤ j ≤ 2n.\n\nThe end of the input is indicated by a line with three zeros."}
{"name": "p01859 Match Peas War", "description": "Input\n\n3 2\n2 2"}
{"name": "1030_B. Vasya and Cornfield", "description": "Input\n\nThe first line contains two integers n and d (1 ≤ d < n ≤ 100).\n\nThe second line contains a single integer m (1 ≤ m ≤ 100) — the number of grasshoppers.\n\nThe i-th of the next m lines contains two integers x_i and y_i (0 ≤ x_i, y_i ≤ n) — position of the i-th grasshopper."}
{"name": "1075_A. The King's Race", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^{18}) — the length of the side of the chess field.\n\nThe second line contains two integers x and y (1 ≤ x,y ≤ n) — coordinates of the cell, where the coin fell."}
{"name": "1096_B. Substring Removal", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of the string s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that there is at least two different characters in s."}
{"name": "1117_C. Magic Ship", "description": "Input\n\nThe first line contains two integers x_1, y_1 (0 ≤ x_1, y_1 ≤ 10^9) — the initial coordinates of the ship.\n\nThe second line contains two integers x_2, y_2 (0 ≤ x_2, y_2 ≤ 10^9) — the coordinates of the destination point.\n\nIt is guaranteed that the initial coordinates and destination point coordinates are different.\n\nThe third line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string s.\n\nThe fourth line contains the string s itself, consisting only of letters U, D, L and R."}
{"name": "1304_B. Longest Palindrome", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 50) — the number of strings and the length of each string.\n\nNext n lines contain a string of length m each, consisting of lowercase Latin letters only. All strings are distinct."}
{"name": "1328_C. Ternary XOR", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 ≤ n ≤ 5 ⋅ 10^4) — the length of x. The second line of the test case contains ternary number x consisting of n digits 0, 1 or 2. It is guaranteed that the first digit of x is 2. It is guaranteed that the sum of n over all test cases does not exceed 5 ⋅ 10^4 (∑ n ≤ 5 ⋅ 10^4)."}
{"name": "1348_C. Phoenix and Distribution", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case consists of two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of string s and the number of non-empty strings, into which Phoenix wants to distribute letters of s, respectively.\n\nThe second line of each test case contains a string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases is ≤ 10^5."}
{"name": "1413_C. Perform Easily", "description": "Input\n\nThe first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.\n\nThe second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.\n\nThe third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string."}
{"name": "1506_C. Double-ended Strings", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100). Then t test cases follow.\n\nThe first line of each test case contains the string a (1 ≤ |a| ≤ 20), consisting of lowercase Latin letters.\n\nThe second line of each test case contains the string b (1 ≤ |b| ≤ 20), consisting of lowercase Latin letters."}
{"name": "251_D. Two Sets", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105), showing how many numbers Petya's mother gave him. The second line contains the actual space-separated numbers. They are all integer, non-negative and do not exceed 1018."}
{"name": "347_C. Alice and Bob", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100) — the initial number of elements in the set. The second line contains n distinct space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the set."}
{"name": "415_B. Mashmokh and Tokens", "description": "Input\n\nThe first line of input contains three space-separated integers n, a, b (1 ≤ n ≤ 105; 1 ≤ a, b ≤ 109). The second line of input contains n space-separated integers x1, x2, ..., xn (1 ≤ xi ≤ 109)."}
{"name": "464_A. No to Palindromes!", "description": "Input\n\nThe first line contains two space-separated integers: n and p (1 ≤ n ≤ 1000; 1 ≤ p ≤ 26). The second line contains string s, consisting of n small English letters. It is guaranteed that the string is tolerable (according to the above definition)."}
{"name": "510_D. Fox And Jumping", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300), number of cards.\n\nThe second line contains n numbers li (1 ≤ li ≤ 109), the jump lengths of cards.\n\nThe third line contains n numbers ci (1 ≤ ci ≤ 105), the costs of cards."}
{"name": "560_A. Currency System in Geraldion", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 1000) — the number of values of the banknotes that used in Geraldion. \n\nThe second line contains n distinct space-separated numbers a1, a2, ..., an (1 ≤ ai ≤ 106) — the values of the banknotes."}
{"name": "586_C. Gennady the Dentist", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 4000) — the number of kids in the line. \n\nNext n lines contain three integers each vi, di, pi (1 ≤ vi, di, pi ≤ 106) — the volume of the cry in the doctor's office, the volume of the cry in the hall and the confidence of the i-th child."}
{"name": "608_D. Zuma", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 500) — the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is ci (1 ≤ ci ≤ n) — the color of the i-th gemstone in a line."}
{"name": "67_B. Restoration of the Permutation", "description": "Input\n\nThe first line contains two space separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n). On the second line are n integers specifying the values of B = {b1, b2, ..., bn}."}
{"name": "702_B. Powers of Two", "description": "Input\n\nThe first line contains the single positive integer n (1 ≤ n ≤ 105) — the number of integers.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "746_C. Tram", "description": "Input\n\nThe first line contains three integers s, x1 and x2 (2 ≤ s ≤ 1000, 0 ≤ x1, x2 ≤ s, x1 ≠ x2) — the maximum coordinate of the point to which the tram goes, the point Igor is at, and the point he should come to.\n\nThe second line contains two integers t1 and t2 (1 ≤ t1, t2 ≤ 1000) — the time in seconds in which the tram passes 1 meter and the time in seconds in which Igor passes 1 meter.\n\nThe third line contains two integers p and d (1 ≤ p ≤ s - 1, d is either 1 or <image>) — the position of the tram in the moment Igor came to the point x1 and the direction of the tram at this moment. If <image>, the tram goes in the direction from the point s to the point 0. If d = 1, the tram goes in the direction from the point 0 to the point s."}
{"name": "793_C. Mice problem", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 100 000) — the number of computer mice on the desk.\n\nThe second line contains four integers x1, y1, x2 and y2 (0 ≤ x1 ≤ x2 ≤ 100 000), (0 ≤ y1 ≤ y2 ≤ 100 000) — the coordinates of the opposite corners of the mousetrap.\n\nThe next n lines contain the information about mice.\n\nThe i-th of these lines contains four integers rix, riy, vix and viy, (0 ≤ rix, riy ≤ 100 000,  - 100 000 ≤ vix, viy ≤ 100 000), where (rix, riy) is the initial position of the mouse, and (vix, viy) is its speed."}
{"name": "85_A. Domino", "description": "Input\n\nThe input contains one positive integer n (1 ≤ n ≤ 100) — the number of the field's columns."}
{"name": "1023_D. Array Restoration", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of elements of the array and the number of queries perfomed on it.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 ≤ a_i ≤ q) — the resulting array. If element at some position j is equal to 0 then the value of element at this position can be any integer from 1 to q."}
{"name": "108_B. Datatypes", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 105) — the number of Gava's unsigned integer datatypes' sizes. The second line contains a single-space-separated list of n integers (1 ≤ ai ≤ 109) — sizes of datatypes in bits. Some datatypes may have equal sizes."}
{"name": "1109_A. Sasha and a Bit of Relax", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the size of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i < 2^{20}) — array itself."}
{"name": "1138_D. Camp Schedule", "description": "Input\n\nThe first line contains string s (1 ⩽ |s| ⩽ 500 000), denoting the current project of the camp's schedule.\n\nThe second line contains string t (1 ⩽ |t| ⩽ 500 000), denoting the optimal schedule according to Gleb.\n\nStrings s and t contain characters '0' and '1' only."}
{"name": "1197_B. Pillars", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of pillars.\n\nThe second line contains n integers a_1, a_2, ..., a_i (1 ≤ a_i ≤ n), where a_i is the radius of the disk initially placed on the i-th pillar. All numbers a_i are distinct."}
{"name": "1255_E1. Send Boxes to Alice (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of chocolate boxes.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — the number of chocolate pieces in the i-th box.\n\nIt is guaranteed that at least one of a_1, a_2, …, a_n is positive."}
{"name": "1322_E. Median Mountain Range", "description": "Input\n\nThe first line contains integers n (1 ≤ n ≤ 500 000) — the number of mountains.\n\nThe second line contains integers a_1, a_2, a_3, …, a_n (1 ≤ a_i ≤ 10^9) — current heights of the mountains."}
{"name": "1405_A. Permutation Forgery", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 668). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2≤ n≤ 100) — the length of the permutation.\n\nThe second line of each test case contains n integers p_1,…,p_n (1≤ p_i≤ n). It is guaranteed that p is a permutation."}
{"name": "1521_B. Nastia and a Good Array", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 10^9) — the array which Nastia has received as a gift.\n\nIt's guaranteed that the sum of n in one test doesn't exceed 2 ⋅ 10^5."}
{"name": "1550_B. Maximum Cost Deletion", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000) — the number of testcases.\n\nThe first line of each testcase contains three integers n, a and b (1 ≤ n ≤ 100; -100 ≤ a, b ≤ 100) — the length of the string s and the parameters a and b.\n\nThe second line contains the string s. The string s consists only of the characters 0 and 1."}
{"name": "197_B. Limit", "description": "Input\n\nThe first line contains two space-separated integers n and m (0 ≤ n, m ≤ 100) — degrees of polynomials P(x) and Q(x) correspondingly.\n\nThe second line contains n + 1 space-separated integers — the factors of polynomial P(x): a0, a1, ..., an - 1, an ( - 100 ≤ ai ≤ 100, a0 ≠ 0).\n\nThe third line contains m + 1 space-separated integers — the factors of polynomial Q(x): b0, b1, ..., bm - 1, bm ( - 100 ≤ bi ≤ 100, b0 ≠ 0)."}
{"name": "220_C. Little Elephant and Shifts", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the size of the permutations. The second line contains permutation a as n distinct numbers from 1 to n, inclusive. The numbers are separated with single spaces. The third line contains permutation b in the same format."}
{"name": "26_B. Regular Bracket Sequence", "description": "Input\n\nInput consists of a single line with non-empty string of «(» and «)» characters. Its length does not exceed 106."}
{"name": "363_D. Renting Bikes", "description": "Input\n\nThe first line of the input contains three integers n, m and a (1 ≤ n, m ≤ 105; 0 ≤ a ≤ 109). The second line contains the sequence of integers b1, b2, ..., bn (1 ≤ bi ≤ 104), where bi is the amount of the i-th boy's personal money. The third line contains the sequence of integers p1, p2, ..., pm (1 ≤ pj ≤ 109), where pj is the price for renting the j-th bike."}
{"name": "408_A. Line to Cashier", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of cashes in the shop. The second line contains n space-separated integers: k1, k2, ..., kn (1 ≤ ki ≤ 100), where ki is the number of people in the queue to the i-th cashier.\n\nThe i-th of the next n lines contains ki space-separated integers: mi, 1, mi, 2, ..., mi, ki (1 ≤ mi, j ≤ 100) — the number of products the j-th person in the queue for the i-th cash has."}
{"name": "504_B. Misha and Permutations Summation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 200 000).\n\nThe second line contains n distinct integers from 0 to n - 1, separated by a space, forming permutation p.\n\nThe third line contains n distinct integers from 0 to n - 1, separated by spaces, forming permutation q."}
{"name": "623_D. Birthday", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of Misha's friends.\n\nThe second line contains n integers pi (<image>), giving the probability to catch the i-th friend in one particular round in percent."}
{"name": "645_C. Enduring Exodus", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k < n ≤ 100 000) — the number of rooms in the hotel and the number of cows travelling with Farmer John.\n\nThe second line contains a string of length n describing the rooms. The i-th character of the string will be '0' if the i-th room is free, and '1' if the i-th room is occupied. It is guaranteed that at least k + 1 characters of this string are '0', so there exists at least one possible choice of k + 1 rooms for Farmer John and his cows to stay in."}
{"name": "718_A. Efim and Strange Grade", "description": "Input\n\nThe first line of the input contains two integers n and t (1 ≤ n ≤ 200 000, 1 ≤ t ≤ 109) — the length of Efim's grade and the number of seconds till the end of the break respectively.\n\nThe second line contains the grade itself. It's guaranteed that the grade is a positive number, containing at least one digit after the decimal points, and it's representation doesn't finish with 0."}
{"name": "786_A. Berzerk", "description": "Input\n\nThe first line of input contains a single integer n (2 ≤ n ≤ 7000) — number of objects in game.\n\nThe second line contains integer k1 followed by k1 distinct integers s1, 1, s1, 2, ..., s1, k1 — Rick's set.\n\nThe third line contains integer k2 followed by k2 distinct integers s2, 1, s2, 2, ..., s2, k2 — Morty's set\n\n1 ≤ ki ≤ n - 1 and 1 ≤ si, 1, si, 2, ..., si, ki ≤ n - 1 for 1 ≤ i ≤ 2."}
{"name": "877_C. Slava and tanks", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — the size of the map."}
{"name": "923_B. Producing Snow", "description": "Input\n\nThe first line contains a single integer N (1 ≤ N ≤ 105) — the number of days. \n\nThe second line contains N integers V1, V2, ..., VN (0 ≤ Vi ≤ 109), where Vi is the initial size of a snow pile made on the day i.\n\nThe third line contains N integers T1, T2, ..., TN (0 ≤ Ti ≤ 109), where Ti is the temperature on the day i."}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 ≤ n, k ≤ 100) — the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list."}
{"name": "p00377 Cake Party", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$ $C$\n$p_1$ $p_2$ ... $p_C$\n\n\nThe first line provides the number of my friends $N$ ($1 \\leq N \\leq 100$) and the number of those among them who brought one or more pieces of cake with them $C$ ($1 \\leq C \\leq N$). The second line provides an array of integers $p_i$ ($1 \\leq p_i \\leq100$), each of which shows the number of cakes of the $i$-th friend of mine who was willing to come up with one or more pieces of cake."}
{"name": "p00731 Cliff Climbing", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows:\n\n> w h\n>  s(1,1) ... s(1,w)\n>  s(2,1) ... s(2,w)\n>  ...\n>  s(h,1) ... s(h,w)\n>\n\nThe integers w and h are the width and the height of the matrix data of the cliff. You may assume 2 ≤ w ≤ 30 and 5 ≤ h ≤ 60. Each of the following h lines consists of w characters delimited by a space. The character s(y, x) represents the state of the block at position (x, y) as follows:\n\n* 'S': Jack can start cliff climbing from this block.\n* 'T': Jack finishes climbing when he reaches this block.\n* 'X': Jack cannot put his feet on this block.\n* '1' - '9' (= t): Jack has to spend t time units to put either of his feet on this block.\n\n\n\nYou can assume that it takes no time to put a foot on a block marked with 'S' or 'T'."}
{"name": "1017_B. The Bits", "description": "Input\n\nThe first line contains one integer n (2≤ n≤ 10^5) — the number of bits in each number.\n\nThe second line contains a binary number a of length n.\n\nThe third line contains a binary number b of length n."}
{"name": "1105_A. Salem and Sticks ", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of sticks.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 100) — the lengths of the sticks."}
{"name": "1132_D. Stressful Training", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 2 ⋅ 10^5) — the number of students (and laptops, correspondigly) and the duration of the contest in minutes.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{12}) — the initial charge of each student's laptop.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^7) — the power usage of each student's laptop."}
{"name": "1272_C. Yet Another Broken Keyboard", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 26) — the length of the string s and the number of Latin letters still available on the keyboard.\n\nThe second line contains the string s consisting of exactly n lowercase Latin letters.\n\nThe third line contains k space-separated distinct lowercase Latin letters c_1, c_2, …, c_k — the letters still available on the keyboard."}
{"name": "1337_F. Yui and Mahjong Set", "description": "Input\n\nThe first line contains a single integer n (4 ≤ n ≤ 100).\n\nThe second line contains two integers which represent the number of triplet subsets and straight subsets of the initial set respectively."}
{"name": "13_E. Holes", "description": "Input\n\nThe first line contains two integers N and M (1 ≤ N ≤ 105, 1 ≤ M ≤ 105) — the number of holes in a row and the number of moves. The second line contains N positive integers not exceeding N — initial values of holes power. The following M lines describe moves made by Petya. Each of these line can be one of the two types: \n\n  * 0 a b\n  * 1 a\n\nType 0 means that it is required to set the power of hole a to b, and type 1 means that it is required to throw a ball into the a-th hole. Numbers a and b are positive integers do not exceeding N."}
{"name": "1469_B. Red and Blue", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then the test cases follow. Each test case consists of four lines.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 100).\n\nThe second line contains n integers r_1, r_2, ..., r_n (-100 ≤ r_i ≤ 100).\n\nThe third line contains one integer m (1 ≤ m ≤ 100).\n\nThe fourth line contains m integers b_1, b_2, ..., b_m (-100 ≤ b_i ≤ 100)."}
{"name": "1494_D. Dogeforces", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 500) — the number of lower-level employees.\n\nThis is followed by n lines, where i-th line contains n integers a_{i,1}, a_{i,2}, ..., a_{i,n} (1 ≤ a_{i,j} ≤ 5000) — salary of the common supervisor of employees with numbers i and j. It is guaranteed that a_{i,j} = a_{j,i}. Note that a_{i,i} is equal to the salary of the i-th employee."}
{"name": "1517_C. Fillomino 2", "description": "Input\n\nThe first line contains a single integer n (1≤ n ≤ 500) denoting the size of the chessboard.\n\nThe second line contains n integers p_1, p_2, ..., p_n. p_i is the number written on cell (i, i). It is guaranteed that each integer from \\{1, …, n\\} appears exactly once in p_1, ..., p_n."}
{"name": "1545_B. AquaMoon and Chess", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the chessboard.\n\nThe second line contains a string of n characters, consists of characters \"0\" and \"1\". If the i-th character is \"1\", the i-th cell is initially occupied; otherwise, the i-th cell is initially unoccupied.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "192_B. Walking in the Rain", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 103) — the boulevard's length in tiles.\n\nThe second line contains n space-separated integers ai — the number of days after which the i-th tile gets destroyed (1 ≤ ai ≤ 103)."}
{"name": "359_C. Prime Number", "description": "Input\n\nThe first line contains two positive integers n and x (1 ≤ n ≤ 105, 2 ≤ x ≤ 109) — the size of the array and the prime number.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ a1 ≤ a2 ≤ ... ≤ an ≤ 109)."}
{"name": "452_E. Three strings", "description": "Input\n\nFirst three lines contain three non-empty input strings. The sum of lengths of all strings is no more than 3·105. All strings consist only of lowercase English letters."}
{"name": "499_C. Crazy Town", "description": "Input\n\nThe first line contains two space-separated integers x1, y1 ( - 106 ≤ x1, y1 ≤ 106) — the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 ≤ x2, y2 ≤ 106) — the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 ≤ n ≤ 300) — the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 ≤ ai, bi, ci ≤ 106; |ai| + |bi| > 0) — the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines)."}
{"name": "522_D. Closest Equals", "description": "Input\n\nThe first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 5·105) — the length of the sequence and the number of queries, correspondingly. \n\nThe second line contains the sequence of integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109). \n\nNext m lines contain the queries, one per line. Each query is given by a pair of numbers lj, rj (1 ≤ lj ≤ rj ≤ n) — the indexes of the query range limits."}
{"name": "549_F. Yura and Developers", "description": "Input\n\nThe first line of input contains two positive integers: n and k (1 ≤ n ≤ 300 000, 1 ≤ k ≤ 1 000 000), the number of tasks in the list and the number of developers in Yura's disposal. \n\nThe second line contains n integers ai (1 ≤ ai ≤ 109)."}
{"name": "734_C. Anton and Making Potions", "description": "Input\n\nThe first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·109, 1 ≤ m, k ≤ 2·105) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 ≤ x ≤ 2·109, 1 ≤ s ≤ 2·109) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers ai (1 ≤ ai < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers bi (1 ≤ bi ≤ 2·109) — the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers ci (1 ≤ ci ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that ci are not decreasing, i.e. ci ≤ cj if i < j.\n\nThe sixth line contains k integers di (1 ≤ di ≤ 2·109) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that di are not decreasing, i.e. di ≤ dj if i < j."}
{"name": "946_A. Partition", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an ( - 100 ≤ ai ≤ 100) — the elements of sequence a."}
{"name": "994_D. Open Communication", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.\n\nThe third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number."}
{"name": "p01109 Income Inequality", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n\n>  a1 a2 ... an\n\nA dataset consists of two lines. In the first line, the number of people n is given. n is an integer satisfying 2 ≤ n ≤ 10 000. In the second line, incomes of n people are given. ai (1 ≤ i ≤ n) is the income of the i-th person. This value is an integer greater than or equal to 1 and less than or equal to 100 000.\n\nThe end of the input is indicated by a line containing a zero. The sum of n's of all the datasets does not exceed 50 000."}
{"name": "p01724 Phutball", "description": "Input\n\nA 19 x 15 board composed of .OX is given in 19 lines. Each line always consists of 15 characters, and each character represents the following:\n\n* \".\" Represents a blank.\n* \"O\" stands for Shiraishi.\n* \"X\" stands for Kuroishi.\n\n\n\nConstraints\n\n* The number of black stones is 20 or less.\n* There is always only one Shiraishi.\n* The state that has already been reached will not be entered."}
{"name": "1043_B. Lost Array", "description": "Input\n\nThe first line contains exactly one integer n (1 ≤ n ≤ 1000) — the length of the array a, excluding the element a_0.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).\n\nNote that a_0 is always 0 and is not given in the input."}
{"name": "1107_E. Vasya and Binary String", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the length of string s.\n\nThe second line contains string s, consisting only of digits 0 and 1.\n\nThe third line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of points for erasing the substring of length i."}
{"name": "1136_E. Nastya Hasn't Written a Legend", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^{5}) — the number of elements in the array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^{9} ≤ a_i ≤ 10^{9}) — the elements of the array a.\n\nThe third line contains n-1 integers k_1, k_2, …, k_{n-1} (-10^{6} ≤ k_i ≤ 10^{6}) — the elements of the array k.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^{5}) — the number of queries.\n\nEach of the following q lines contains a query of one of two types: \n\n  * if the query has the first type, the corresponding line contains the character '+' (without quotes), and then there are two integers i and x (1 ≤ i ≤ n, 0 ≤ x ≤ 10^{6}), it means that integer x is added to the i-th element of the array a as described in the statement. \n  * if the query has the second type, the corresponding line contains the character 's' (without quotes) and then there are two integers l and r (1 ≤ l ≤ r ≤ n)."}
{"name": "1155_B. Game with Telephone Numbers", "description": "Input\n\nThe first line contains one integer n (13 ≤ n < 10^5, n is odd) — the length of string s.\n\nThe second line contains the string s (|s| = n) consisting only of decimal digits."}
{"name": "1195_E. OpenStreetMap", "description": "Input\n\nThe first line of the input contains four integers n, m, a and b (1 ≤ n, m ≤ 3 000, 1 ≤ a ≤ n, 1 ≤ b ≤ m) — the number of rows and columns in the matrix Seryozha has, and the number of rows and columns that can be shown on the screen of the laptop, respectively.\n\nThe second line of the input contains four integers g_0, x, y and z (0 ≤ g_0, x, y < z ≤ 10^9)."}
{"name": "1213_A. Chips Moving", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of chips.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^9), where x_i is the coordinate of the i-th chip."}
{"name": "1277_F. Beautiful Rectangle", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 4⋅10^5). The second line contains n integers (1 ≤ a_i ≤ 10^9)."}
{"name": "1321_A. Contest for Robots", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of problems.\n\nThe second line contains n integers r_1, r_2, ..., r_n (0 ≤ r_i ≤ 1). r_i = 1 means that the \"Robo-Coder Inc.\" robot will solve the i-th problem, r_i = 0 means that it won't solve the i-th problem.\n\nThe third line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 1). b_i = 1 means that the \"BionicSolver Industries\" robot will solve the i-th problem, b_i = 0 means that it won't solve the i-th problem."}
{"name": "133_E. Logo Turtle", "description": "Input\n\nThe first line of input contains a string commands — the original list of commands. The string commands contains between 1 and 100 characters, inclusive, and contains only characters \"T\" and \"F\".\n\nThe second line contains an integer n (1 ≤ n ≤ 50) — the number of commands you have to change in the list."}
{"name": "1382_B. Sequential Nim", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 10^5) — the number of piles.\n\nThe second line of each test case contains n integers a_1,…,a_n (1≤ a_i≤ 10^9) — a_i is equal to the number of stones in the i-th pile.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 10^5."}
{"name": "1497_E1. Square-free division (easy version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ n ≤ 2 ⋅ 10^5, k = 0).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).\n\nIt's guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1547_D. Co-growing Sequence", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — length of the sequence x_i.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 ≤ x_i < 2^{30}) — elements of the sequence x_i.\n\nIt is guaranteed that the sum of n overall all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "242_D. Dispute", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105), that denote the number of counters Valera has and the number of pairs of counters connected by wires.\n\nEach of the following m lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), that mean that counters with numbers ui and vi are connected by a wire. It is guaranteed that each pair of connected counters occurs exactly once in the input.\n\nThe last line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 105), where ai is the value that Ignat choose for the i-th counter."}
{"name": "339_B. Xenia and Ringroad", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105). The second line contains m integers a1, a2, ..., am (1 ≤ ai ≤ n). Note that Xenia can have multiple consecutive tasks in one house."}
{"name": "361_D. Levko and Array", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000). The second line contains space-separated integers a1, a2, ... , an ( - 109 ≤ ai ≤ 109)."}
{"name": "433_B. Kuriyama Mirai's Stones", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105). The second line contains n integers: v1, v2, ..., vn (1 ≤ vi ≤ 109) — costs of the stones. \n\nThe third line contains an integer m (1 ≤ m ≤ 105) — the number of Kuriyama Mirai's questions. Then follow m lines, each line contains three integers type, l and r (1 ≤ l ≤ r ≤ n; 1 ≤ type ≤ 2), describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one."}
{"name": "455_D. Serega and Fun", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements of the array. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ n).\n\nThe third line contains a single integer q (1 ≤ q ≤ 105) — the number of queries. The next q lines contain the queries.\n\nAs you need to respond to the queries online, the queries will be encoded. A query of the first type will be given in format: 1 l'i r'i. A query of the second type will be given in format: 2 l'i r'i k'i. All the number in input are integer. They satisfy the constraints: 1 ≤ l'i, r'i, k'i ≤ n.\n\nTo decode the queries from the data given in input, you need to perform the following transformations:\n\nli = ((l'i + lastans - 1) mod n) + 1; ri = ((r'i + lastans - 1) mod n) + 1; ki = ((k'i + lastans - 1) mod n) + 1.\n\nWhere lastans is the last reply to the query of the 2-nd type (initially, lastans = 0). If after transformation li is greater than ri, you must swap these values."}
{"name": "551_C. GukiZ hates Boxes", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105), the number of piles of boxes and the number of GukiZ's students. \n\nThe second line contains n integers a1, a2, ... an (0 ≤ ai ≤ 109) where ai represents the number of boxes on i-th pile. It's guaranteed that at least one pile of is non-empty."}
{"name": "578_D. LCS Again", "description": "Input\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 ≤ n ≤ 100 000, 2 ≤ m ≤ 26).\n\nThe second line contains string S."}
{"name": "5_B. Center Alignment", "description": "Input\n\nThe input file consists of one or more lines, each of the lines contains Latin letters, digits and/or spaces. The lines cannot start or end with a space. It is guaranteed that at least one of the lines has positive length. The length of each line and the total amount of the lines do not exceed 1000."}
{"name": "643_C. Levels and Regions", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 200 000, 1 ≤ k ≤ min(50, n)) — the number of levels and the number of regions, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100 000)."}
{"name": "670_C. Cinema", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 200 000) — the number of scientists.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the index of a language, which the i-th scientist knows.\n\nThe third line contains a positive integer m (1 ≤ m ≤ 200 000) — the number of movies in the cinema. \n\nThe fourth line contains m positive integers b1, b2, ..., bm (1 ≤ bj ≤ 109), where bj is the index of the audio language of the j-th movie.\n\nThe fifth line contains m positive integers c1, c2, ..., cm (1 ≤ cj ≤ 109), where cj is the index of subtitles language of the j-th movie.\n\nIt is guaranteed that audio languages and subtitles language are different for each movie, that is bj ≠ cj."}
{"name": "691_E. Xor-sequences", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1018) — the number of given integers and the length of the \"xor-sequences\".\n\nThe second line contains n integers ai (0 ≤ ai ≤ 1018)."}
{"name": "737_B. Sea Battle", "description": "Input\n\nThe first line contains four positive integers n, a, b, k (1 ≤ n ≤ 2·105, 1 ≤ a, b ≤ n, 0 ≤ k ≤ n - 1) — the length of the grid, the number of ships on the grid, the length of each ship and the number of shots Galya has already made.\n\nThe second line contains a string of length n, consisting of zeros and ones. If the i-th character is one, Galya has already made a shot to this cell. Otherwise, she hasn't. It is guaranteed that there are exactly k ones in this string."}
{"name": "784_C. INTERCALC", "description": "Input\n\nThe first line of input data contains a single integer n (1 ≤ n ≤ 10).\n\nThe second line of input data contains n space-separated integers ai (1 ≤ ai ≤ 11)."}
{"name": "830_B. Cards Sorting", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 100 000) — the number of cards in the deck.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000), where ai is the number written on the i-th from top card in the deck."}
{"name": "875_E. Delivery Club", "description": "Input\n\nThe first line contains three integers n, s1, s2 (1 ≤ n ≤ 100 000, 0 ≤ s1, s2 ≤ 109) — number of points of delivery and starting positions of Petya and Vasya.\n\nThe second line contains n integers x1, x2, ..., xn — customers coordinates (0 ≤ xi ≤ 109), in the order to make a delivery. \n\nIt is guaranteed, that among the numbers s1, s2, x1, ..., xn there are no two equal."}
{"name": "89_D. Space mines", "description": "Input\n\nThe first input data line contains 7 integers Ax, Ay, Az, vx, vy, vz, R. They are the Death Star's initial position, the direction of its movement, and its radius ( - 10 ≤ vx, vy, vz ≤ 10, |v| > 0, 0 < R ≤ 100).\n\nThe second line contains an integer n, which is the number of mines (1 ≤ n ≤ 100). Then follow n data blocks, the i-th of them describes the i-th mine.\n\nThe first line of each block contains 5 integers Oix, Oiy, Oiz, ri, mi, which are the coordinates of the mine centre, the radius of its body and the number of spikes (0 < ri < 100, 0 ≤ mi ≤ 10). Then follow mi lines, describing the spikes of the i-th mine, where the j-th of them describes the i-th spike and contains 3 integers pijx, pijy, pijz — the coordinates of the vector where the given spike is directed (<image>).\n\nThe coordinates of the mines' centers and the center of the Death Star are integers, their absolute value does not exceed 10000. It is guaranteed that R > ri for any 1 ≤ i ≤ n. For any mines i ≠ j the following inequality if fulfilled: <image>. Initially the Death Star and the mines do not have common points."}
{"name": "920_F. SUM and REPLACE", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3·105) — the number of elements in the array and the number of queries to process, respectively.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the elements of the array.\n\nThen m lines follow, each containing 3 integers ti, li, ri denoting i-th query. If ti = 1, then i-th query is REPLACE li ri, otherwise it's SUM li ri (1 ≤ ti ≤ 2, 1 ≤ li ≤ ri ≤ n).\n\nThere is at least one SUM query."}
{"name": "949_D. Curfew", "description": "Input\n\nThe first line contains three integers n, d and b (2 ≤ n ≤ 100 000, 1 ≤ d ≤ n - 1, 1 ≤ b ≤ 10 000), number of rooms in the house, running distance of a student, official number of students in a room.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), i-th of which stands for the number of students in the i-th room before curfew announcement.\n\nIt is guaranteed that a1 + a2 + ... + an = nb."}
{"name": "977_C. Less or Equal", "description": "Input\n\nThe first line of the input contains integer numbers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ n). The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the sequence itself."}
{"name": "997_A. Convert to Ones", "description": "Input\n\nThe first line of input contains integers n, x and y (1 ≤ n ≤ 300 000, 0 ≤ x, y ≤ 10^9) — length of the string, cost of the first operation (substring reverse) and cost of the second operation (inverting all elements of substring).\n\nThe second line contains the string a of length n, consisting of zeros and ones."}
{"name": "p00207 Block", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nw h\nxs ys ys\nxg yg\nn\nc1 d1 x1 y1\nc2 d2 x2 y2\n::\ncn dn xn yn\n\n\nThe board size w, h (4 ≤ w, h ≤ 100) is given on the first line. The second line gives the start coordinates xs, ys, and the third line gives the goal coordinates xg, yg.\n\nThe number of blocks n is given on the 4th line. The next n lines are given the color ci, orientation di, position xi, yi of the i-th block.\n\nThe number of datasets does not exceed 30."}
{"name": "1064_C. Oh Those Palindromes", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100 000) — the length of string s.\n\nThe second line contains string s that consists of exactly n lowercase characters of Latin alphabet."}
{"name": "1133_B. Preparation for International Women's Day", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 100) — the number the boxes and the number the girls.\n\nThe second line of the input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9), where d_i is the number of candies in the i-th box."}
{"name": "1153_E. Serval and Snake", "description": "Input\n\nThe first line contains a single integer n (2≤ n ≤ 1000) — the size of the grid."}
{"name": "1175_D. Array Splitting", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 3 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n ( |a_i| ≤ 10^6)."}
{"name": "1194_C. From S To T", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 100) — the number of queries. Each query is represented by three consecutive lines.\n\nThe first line of each query contains the string s (1 ≤ |s| ≤ 100) consisting of lowercase Latin letters.\n\nThe second line of each query contains the string t (1 ≤ |t| ≤ 100) consisting of lowercase Latin letters.\n\nThe third line of each query contains the string p (1 ≤ |p| ≤ 100) consisting of lowercase Latin letters."}
{"name": "1296_C. Yet Another Walking Robot", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines describe test cases. Each test case is given on two lines. The first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the robot's path. The second line of the test case contains one string s consisting of n characters 'L', 'R', 'U', 'D' — the robot's path.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1380_E. Merging Towers", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ m ≤ n ≤ 2 ⋅ 10^5) — the number of discs and the number of towers, respectively.\n\nThe second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ m), where t_i is the index of the tower disc i belongs to. Each value from 1 to m appears in this sequence at least once.\n\nThen m - 1 lines follow, denoting the queries. Each query is represented by two integers a_i and b_i (1 ≤ a_i, b_i ≤ m, a_i ≠ b_i), meaning that, during the i-th query, the towers with indices a_i and b_i are merged (a_i and b_i are chosen in such a way that these towers exist before the i-th query)."}
{"name": "1400_E. Clear the Multiset", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5000).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9)."}
{"name": "1445_A. Array Rearrangment", "description": "Input\n\nThe first line of input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. t blocks follow, each describing an individual test case.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 50; 1 ≤ x ≤ 1000) — the length of arrays a and b, and the parameter x, described in the problem statement.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_1 ≤ a_2 ≤ ... ≤ a_n ≤ x) — the elements of array a in non-descending order.\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_1 ≤ b_2 ≤ ... ≤ b_n ≤ x) — the elements of array b in non-descending order.\n\nTest cases are separated by a blank line."}
{"name": "146_A. Lucky Ticket", "description": "Input\n\nThe first line contains an even integer n (2 ≤ n ≤ 50) — the length of the ticket number that needs to be checked. The second line contains an integer whose length equals exactly n — the ticket number. The number may contain leading zeros."}
{"name": "173_A. Rock-Paper-Scissors", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2·109) — the number of the game's rounds.\n\nThe second line contains sequence A as a string of m characters and the third line contains sequence B as a string of k characters (1 ≤ m, k ≤ 1000). The given lines only contain characters \"R\", \"S\" and \"P\". Character \"R\" stands for the rock, character \"S\" represents the scissors and \"P\" represents the paper."}
{"name": "289_E. Polo the Penguin and XOR operation", "description": "Input\n\nThe single line contains a positive integer n (1 ≤ n ≤ 106)."}
{"name": "314_E. Sereja and Squares", "description": "Input\n\nThe first line contains integer n the number of points (1 ≤ n ≤ 105). The second line contains a sequence consisting of n small English letters and question marks — the sequence of letters, that mark points, in order of increasing x-coordinate of points. Question marks denote the points without letters (Petya erased them). It is guaranteed that the input string doesn't contain letter \"x\"."}
{"name": "476_B. Dreamoon and WiFi", "description": "Input\n\nThe first line contains a string s1 — the commands Drazil sends to Dreamoon, this string consists of only the characters in the set {'+', '-'}. \n\nThe second line contains a string s2 — the commands Dreamoon's smartphone recognizes, this string consists of only the characters in the set {'+', '-', '?'}. '?' denotes an unrecognized command.\n\nLengths of two strings are equal and do not exceed 10."}
{"name": "599_B. Spongebob and Joke", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the lengths of sequences fi and bi respectively.\n\nThe second line contains n integers, determining sequence f1, f2, ..., fn (1 ≤ fi ≤ n).\n\nThe last line contains m integers, determining sequence b1, b2, ..., bm (1 ≤ bi ≤ n)."}
{"name": "620_A. Professor GukiZ's Robot", "description": "Input\n\nThe first line contains two integers x1, y1 ( - 109 ≤ x1, y1 ≤ 109) — the start position of the robot.\n\nThe second line contains two integers x2, y2 ( - 109 ≤ x2, y2 ≤ 109) — the finish position of the robot."}
{"name": "735_B. Urbanization", "description": "Input\n\nThe first line of the input contains three integers n, n1 and n2 (1 ≤ n, n1, n2 ≤ 100 000, n1 + n2 ≤ n) — the number of candidates who want to move to the cities, the planned number of residents of the first city and the planned number of residents of the second city.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000), the i-th of them is equal to the wealth of the i-th candidate."}
{"name": "75_B. Facetook Priority Wall", "description": "Input\n\nThe first line contains your name. The second line contains an integer n, which is the number of actions (1 ≤ n ≤ 100). Then n lines follow, it is guaranteed that each one contains exactly 1 action in the format given above. There is exactly one space between each two words in a line, and there are no extra spaces. All the letters are lowercase. All names in the input will consist of at least 1 letter and at most 10 small Latin letters."}
{"name": "780_A. Andryusha and Socks", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 105) — the number of sock pairs.\n\nThe second line contains 2n integers x1, x2, ..., x2n (1 ≤ xi ≤ n), which describe the order in which Andryusha took the socks from the bag. More precisely, xi means that the i-th sock Andryusha took out was from pair xi.\n\nIt is guaranteed that Andryusha took exactly two socks of each pair."}
{"name": "803_E. Roma and Poker", "description": "Input\n\nThe first line contains two numbers n (the length of Roma's sequence) and k (1 ≤ n, k ≤ 1000).\n\nThe second line contains the sequence s consisting of characters W, L, D and ?. There are exactly n characters in this sequence."}
{"name": "84_D. Doctor", "description": "Input\n\nThe first line of input data contains two space-separated integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 1014). In the second line are given space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in C++. It is recommended to use cin, cout streams (you can also use the %I64d specificator)."}
{"name": "873_A. Chores", "description": "Input\n\nThe first line contains three integers n, k, x (1 ≤ k ≤ n ≤ 100, 1 ≤ x ≤ 99) — the number of chores Luba has to do, the number of chores she can do in x units of time, and the number x itself.\n\nThe second line contains n integer numbers ai (2 ≤ ai ≤ 100) — the time Luba has to spend to do i-th chore.\n\nIt is guaranteed that <image>, and for each <image> ai ≥ ai - 1."}
{"name": "91_A. Newspaper Headline", "description": "Input\n\nThe input data contain two lines. The first line contain the heading s1, the second line contains the word s2. The lines only consist of lowercase Latin letters (1 ≤ |s1| ≤ 104, 1 ≤ |s2| ≤ 106)."}
{"name": "946_F. Fibonacci String Subsequences", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 100, 0 ≤ x ≤ 100) — the length of s and the index of a Fibonacci string you are interested in, respectively.\n\nThe second line contains s — a string consisting of n characters. Each of these characters is either 0 or 1."}
{"name": "p00711 Red and Black", "description": "Input\n\nThe input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.\n\nThere are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.\n\n* '.' - a black tile\n* '#' - a red tile\n* '@' - a man on a black tile(appears exactly once in a data set)\n\n\nThe end of the input is indicated by a line consisting of two zeros."}
{"name": "1053_E. Euler tour", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 5 ⋅ 10^5), denoting the number of acorns in the tree.\n\nThe second line contains 2n - 1 integers a_1, a_2, …, a_{2n-1} (0 ≤ a_i ≤ n) — the Euler tour of the tree that Kate wrote down. 0 means an illegible number, which has to be guessed."}
{"name": "1096_G. Lucky Tickets", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 10) — the number of digits in each ticket number, and the number of different decimal digits that may be used. n is even.\n\nThe second line contains a sequence of pairwise distinct integers d_1, d_2, ..., d_k (0 ≤ d_i ≤ 9) — the digits that may be used in ticket numbers. The digits are given in arbitrary order."}
{"name": "1144_D. Equalize Them All", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1165_C. Good String", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of characters in s.\n\nThe second line contains the string s, consisting of exactly n lowercase Latin letters."}
{"name": "1202_E. You Are Given Some Strings...", "description": "Input\n\nThe first line contains string t (1 ≤ |t| ≤ 2 ⋅ 10^5).\n\nThe second line contains integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nEach of next n lines contains string s_i (1 ≤ |s_i| ≤ 2 ⋅ 10^5).\n\nIt is guaranteed that ∑_{i=1}^{n} |s_i| ≤ 2 ⋅ 10^5. All strings consist of lowercase English letters."}
{"name": "1244_E. Minimizing Difference", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{14}) — the number of elements in the sequence and the maximum number of times you can perform the operation, respectively.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{9})."}
{"name": "1264_C. Beautiful Mirrors with queries", "description": "Input\n\nThe first line contains two integers n, q (2 ≤ n, q ≤ 2 ⋅ 10^5) — the number of mirrors and queries.\n\nThe second line contains n integers: p_1, p_2, …, p_n (1 ≤ p_i ≤ 100).\n\nEach of q following lines contains a single integer u (2 ≤ u ≤ n) — next query."}
{"name": "1349_B. Orac and Medians", "description": "Input\n\nThe first line of the input is a single integer t: the number of queries.\n\nThe first line of each query contains two integers n\\ (1≤ n≤ 100 000) and k\\ (1≤ k≤ 10^9), the second line contains n positive integers a_1,a_2,...,a_n\\ (1≤ a_i≤ 10^9)\n\nThe total sum of n is at most 100 000."}
{"name": "1391_E. Pairs of Pairs", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains 2 integers n, m (2 ≤ n ≤ 5⋅ 10^5, 1 ≤ m ≤ 10^6), denoting the number of nodes and edges, respectively. \n\nThe next m lines each contain 2 integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting that there is an undirected edge between nodes u and v in the given graph.\n\nIt is guaranteed that the given graph is connected, and simple — it does not contain multiple edges between the same pair of nodes, nor does it have any self-loops. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 5⋅ 10^5.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 10^6."}
{"name": "1416_B. Make Them Equal", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^4) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4."}
{"name": "1480_B. The Great Hero", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10^5) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers A (1 ≤ A ≤ 10^6), B (1 ≤ B ≤ 10^6) and n (1 ≤ n ≤ 10^5) — the attack power of the great hero, the initial health value of the great hero, and the number of monsters.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i denotes the attack power of the i-th monster.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^6), where b_i denotes the initial health value of the i-th monster.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1534_B. Histogram Ugliness", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 4 ⋅ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 4 ⋅ 10^5."}
{"name": "180_F. Mathematical Analysis Rocks!", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of students in the group. The second line contains sequence of different integers a1, a2, ..., an (1 ≤ ai ≤ n). The third line contains the sequence of different integers b1, b2, ..., bn (1 ≤ bi ≤ n)."}
{"name": "252_D. Playing with Permutations", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100). The second line contains n space-separated integers q1, q2, ..., qn (1 ≤ qi ≤ n) — the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\n\nIt is guaranteed that the given sequences q and s are correct permutations."}
{"name": "2_B. The least round way", "description": "Input\n\nThe first line contains an integer number n (2 ≤ n ≤ 1000), n is the size of the matrix. Then follow n lines containing the matrix elements (non-negative integer numbers not exceeding 109)."}
{"name": "371_D. Vessels", "description": "Input\n\nThe first line contains integer n — the number of vessels (1 ≤ n ≤ 2·105). The second line contains n integers a1, a2, ..., an — the vessels' capacities (1 ≤ ai ≤ 109). The vessels' capacities do not necessarily increase from the top vessels to the bottom ones (see the second sample). The third line contains integer m — the number of queries (1 ≤ m ≤ 2·105). Each of the next m lines contains the description of one query. The query of the first type is represented as \"1 pi xi\", the query of the second type is represented as \"2 ki\" (1 ≤ pi ≤ n, 1 ≤ xi ≤ 109, 1 ≤ ki ≤ n)."}
{"name": "465_A. inc ARG", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of bits in the cell.\n\nThe second line contains a string consisting of n characters — the initial state of the cell. The first character denotes the state of the first bit of the cell. The second character denotes the second least significant bit and so on. The last character denotes the state of the most significant bit."}
{"name": "587_B. Duff in Beach", "description": "Input\n\nThe first line of input contains three integers, n, l and k (1 ≤ n, k, n × k ≤ 106 and 1 ≤ l ≤ 1018).\n\nThe second line contains n space separated integers, a0, a1, ..., an - 1 (1 ≤ ai ≤ 109 for each 0 ≤ i ≤ n - 1)."}
{"name": "680_B. Bear and Finding Criminals", "description": "Input\n\nThe first line of the input contains two integers n and a (1 ≤ a ≤ n ≤ 100) — the number of cities and the index of city where Limak lives.\n\nThe second line contains n integers t1, t2, ..., tn (0 ≤ ti ≤ 1). There are ti criminals in the i-th city."}
{"name": "725_A. Jumping Ball", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the sequence of bumpers. The second line contains the string, which consists of the characters '<' and '>'. The character at the i-th position of this string corresponds to the type of the i-th bumper."}
{"name": "76_D. Plus and xor", "description": "Input\n\nThe first line contains integer number A and the second line contains integer number B (0 ≤ A, B ≤ 264 - 1)."}
{"name": "814_E. An unavoidable detour for home", "description": "Input\n\nThe first line of input contains a positive integer n (3 ≤ n ≤ 50) — the number of towns.\n\nThe second line contains n space-separated integers d1, d2, ..., dn (2 ≤ di ≤ 3) — the number of roads connected to towns 1, 2, ..., n, respectively. It is guaranteed that the sum of di over all i is even."}
{"name": "909_F. AND-permutations", "description": "Input\n\nThe input consists of one line containing a single integer N (1 ≤ N ≤ 105)."}
{"name": "931_C. Laboratory Work", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the numeber of measurements made by Kirill.\n\nThe second line contains a sequence of integers x1, x2, ..., xn ( - 100 000 ≤ xi ≤ 100 000) — the measurements made by Kirill. It is guaranteed that the difference between the maximum and minimum values among values x1, x2, ..., xn does not exceed 2."}
{"name": "958_F1. Lightsabers (easy)", "description": "Input\n\nThe first line of the input contains n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k1, k2, ..., km (with <image>) – the desired counts of lightsabers of each color from 1 to m."}
{"name": "985_C. Liebig's Barrels", "description": "Input\n\nThe first line contains three space-separated integers n, k and l (1 ≤ n, k ≤ 105, 1 ≤ n·k ≤ 105, 0 ≤ l ≤ 109).\n\nThe second line contains m = n·k space-separated integers a1, a2, ..., am (1 ≤ ai ≤ 109) — lengths of staves."}
{"name": "1099_C. Postcard", "description": "Input\n\nThe first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters «*» and «?», meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed 200.\n\nThe second line contains an integer number k (1 ≤ k ≤ 200), the required message length."}
{"name": "1167_G. Low Budget Inception", "description": "Input\n\nThe first line contains two integer numbers n and d (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ d ≤ 7000) — the number of buildings and the maximum distance between any pair of neighbouring buildings, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (a_1 = 0, 0 < a_{i + 1} - a_i ≤ d + 1) — coordinates of left corners of corresponding buildings in ascending order.\n\nThe third line contains single integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of candidates.\n\nThe fourth line contains m integers x_1, x_2, ..., x_m (0 ≤ x_i ≤ a_n + 1, x_i < x_{i + 1}) — the coordinates of bends you need to calculate terminal angles for in ascending order."}
{"name": "1186_C. Vus the Cossack and Strings", "description": "Input\n\nThe first line contains a binary string a (1 ≤ |a| ≤ 10^6) — the first string.\n\nThe second line contains a binary string b (1 ≤ |b| ≤ |a|) — the second string."}
{"name": "1205_B. Shortest Cycle", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 10^5) — number of numbers.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{18})."}
{"name": "1221_F. Choose a Square", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the number of points on the field.\n\nEach of the following n lines contains three integers x_i, y_i, c_i (0 ≤ x_i, y_i ≤ 10^9, -10^6 ≤ c_i ≤ 10^6) — coordinates of the i-th point and its cost, respectively."}
{"name": "1371_E1. Asterism (Easy Version)", "description": "Input\n\nThe first line contains two integers n, p (2 ≤ p ≤ n ≤ 2000). It is guaranteed, that the number p is prime (it has exactly two divisors 1 and p).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2000)."}
{"name": "1418_G. Three Occurrences", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n)."}
{"name": "1461_D. Divide and Summarize", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nThe first line of each test case contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array a and the total number of prettiness tests.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the contents of the array a.\n\nNext q lines of each test case contain a single integer s_i (1 ≤ s_i ≤ 10^9) — the sum of elements which Mike wants to get in the i-th test.\n\nIt is guaranteed that the sum of n and the sum of q does not exceed 10^5 (∑ n, ∑ q ≤ 10^5)."}
{"name": "1538_A. Stone Game", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100). Then t test cases follow.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 100) — the number of stones.\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the power of the stones."}
{"name": "164_A. Variable, or There and Back Again", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the numbers of states and transitions, correspondingly.\n\nThe second line contains space-separated n integers f1, f2, ..., fn (0 ≤ fi ≤ 2), fi described actions performed upon Vasya in state i: 0 represents ignoring, 1 — assigning a value, 2 — using.\n\nNext m lines contain space-separated pairs of integers ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi), each pair represents the transition from the state number ai to the state number bi. Between two states can be any number of transitions."}
{"name": "185_B. Mushroom Scientists", "description": "Input\n\nThe first line contains a single integer S (1 ≤ S ≤ 103) — the maximum sum of coordinates of the sought point.\n\nThe second line contains three space-separated integers a, b, c (0 ≤ a, b, c ≤ 103) — the numbers that describe the metric of mushroom scientists."}
{"name": "280_B. Maximum Xor Secondary", "description": "Input\n\nThe first line contains integer n (1 < n ≤ 105). The second line contains n distinct integers s1, s2, ..., sn (1 ≤ si ≤ 109)."}
{"name": "303_A. Lucky Permutation Triple", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105)."}
{"name": "350_E. Wrong Floyd", "description": "Input\n\nThe first line of the input contains three integers n, m, k (3 ≤ n ≤ 300, 2 ≤ k ≤ n , <image>) — the number of vertexes, the number of edges and the number of marked vertexes. \n\nThe second line of the input contains k space-separated integers a1, a2, ... ak (1 ≤ ai ≤ n) — the numbers of the marked vertexes. It is guaranteed that all numbers ai are distinct."}
{"name": "397_C. On Number of Decompositions into Multipliers", "description": "Input\n\nThe first line contains positive integer n (1 ≤ n ≤ 500). The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "41_D. Pawn", "description": "Input\n\nThe first line contains three integers n, m, k (2 ≤ n, m ≤ 100, 0 ≤ k ≤ 10) — the number of rows and columns on the chessboard, the number of the pawn's brothers. Then follow n lines containing each m numbers from 0 to 9 without spaces — the chessboard's description. Each square is described by one number — the number of peas in it. The first line corresponds to the uppermost row and the last line — to the lowest row."}
{"name": "490_C. Hacking Cypher", "description": "Input\n\nThe first line of the input contains the public key of the messenger — an integer without leading zeroes, its length is in range from 1 to 106 digits. The second line contains a pair of space-separated positive integers a, b (1 ≤ a, b ≤ 108)."}
{"name": "568_E. Longest Increasing Subsequence", "description": "Input\n\nThe first line contains a single integer n — the length of the array (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers — the elements of the sequence. A gap is marked as \"-1\". The elements that are not gaps are positive integers not exceeding 109. It is guaranteed that the sequence contains 0 ≤ k ≤ 1000 gaps.\n\nThe third line contains a single positive integer m — the number of elements to fill the gaps (k ≤ m ≤ 105).\n\nThe fourth line contains m positive integers — the numbers to fill gaps. Each number is a positive integer not exceeding 109. Some numbers may be equal."}
{"name": "58_C. Trees", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) which is the number of trees. The second line contains integers ai (1 ≤ ai ≤ 105) which are the heights of the trees."}
{"name": "611_E. New Year and Three Musketeers", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of criminals.\n\nThe second line contains three integers a, b and c (1 ≤ a, b, c ≤ 108) — strengths of musketeers.\n\nThe third line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 108) — strengths of criminals."}
{"name": "706_C. Hard problem", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of strings.\n\nThe second line contains n integers ci (0 ≤ ci ≤ 109), the i-th of them is equal to the amount of energy Vasiliy has to spent in order to reverse the i-th string. \n\nThen follow n lines, each containing a string consisting of lowercase English letters. The total length of these strings doesn't exceed 100 000."}
{"name": "729_E. Subordinates", "description": "Input\n\nThe first line contains two positive integers n and s (1 ≤ n ≤ 2·105, 1 ≤ s ≤ n) — the number of workers and the id of the chief.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n - 1), where ai is the number of superiors (not only immediate) the worker with id i reported about."}
{"name": "797_E. Array Queries", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100000).\n\nThe second line contains n integers — elements of a (1 ≤ ai ≤ n for each i from 1 to n).\n\nThe third line containts one integer q (1 ≤ q ≤ 100000).\n\nThen q lines follow. Each line contains the values of p and k for corresponding query (1 ≤ p, k ≤ n)."}
{"name": "988_A. Diverse Team", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of students and the size of the team you have to form.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the rating of i-th student."}
{"name": "p00659 Popularity Estimation", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nn\nname0 m0 d0,0 ... d0, m0-1\nname1 m1 d1,0 ... d1, m1-1\n..\n..\n..\nnamen-1 mn-1 dn-1,0 ... dn-1, mn-1-1\n\n\n\nn represents the number of characters.\nnamei represents the name of the character.\nmi represents the type of time the character was shown.\nAfter mi, mi integers di and j are given.\ndi and j represent the time when the character was shown.\nThe end of the input is given by a line consisting of n = 0\n\n\nIf only one character appears on the screen at a given time, that character can get n points.\nEvery time one more character appears at the same time, the points obtained for the character reflected at that time decrease by one.\nIf n characters are shown at the same time, 1 point will be added to each of n characters.\n\n\nThe input satisfies the following constraints.\n2 ≤ n ≤ 20\n0 ≤ mi ≤ 30\n0 ≤ di, j <30\nDi and j are all different for the i-th character.\nnamei contains only uppercase or lowercase letters and is no longer than 10."}
{"name": "p01336 THE BYDOLM@STER", "description": "Input\n\nThe input consists of multiple test cases.\nThe first line of each test case is given the number N of bid dollars and the available cost M. (1 <= N, M <= 300) The next 2 * N lines contain information about each bidle.\nThe name of the bidle is on the first line of the bidle information. Biddle names consist of alphabets and spaces, with 30 characters or less. Also, there is no bidle with the same name.\nThe second line is given the integers C, V, D, L. C is the cost of hiring one Biddle, V is the vocal, D is the dance, and L is the stat of the looks. (1 <= C, V, D, L <= 300)\nInput ends with EOF."}
{"name": "1037_F. Maximum Reduction", "description": "Input\n\nThe first line of input contains two integers n and k (2 ≤ k ≤ n ≤ 10^6) — the length of the initial array a and the parameter k.\n\nThe second line of input contains n integers a_0, a_1, …, a_{n - 1} (1 ≤ a_{i} ≤ 10^9) — the elements of the array a."}
{"name": "1081_H. Palindromic Magic", "description": "Input\n\nThe first line contains a single string A (1 ≤ |A| ≤ 2 ⋅ 10^5).\n\nThe second line contains a single string B (1 ≤ |B| ≤ 2 ⋅ 10^5).\n\nStrings A and B contain only lowercase English letters."}
{"name": "114_A. Cifera", "description": "Input\n\nThe first input line contains integer number k, the second line contains integer number l (2 ≤ k, l ≤ 231 - 1)."}
{"name": "1189_D2. Add on a Tree: Revolution", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — the number of nodes in a tree.\n\nEach of the next n-1 lines contains three integers u, v, val (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ val ≤ 10 000), meaning that there is an edge between nodes u and v with val written on it. It is guaranteed that these edges form a tree. It is guaranteed that all val numbers are pairwise different and even."}
{"name": "1227_D2. Optimal Subsequences (Hard Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2⋅10^5) — the length of the sequence a.\n\nThe second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line contains an integer m (1 ≤ m ≤ 2⋅10^5) — the number of requests.\n\nThe following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests."}
{"name": "1334_E. Divisor Paths", "description": "Input\n\nThe first line contains a single integer D (1 ≤ D ≤ 10^{15}) — the number the graph is built from.\n\nThe second line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.\n\nEach of the next q lines contains two integers v and u (1 ≤ v, u ≤ D). It is guaranteed that D is divisible by both v and u (both v and u are divisors of D)."}
{"name": "1354_G. Find a Gift", "description": "Input\n\nThe input consists of several cases. In the beginning, you receive the integer T (1 ≤ T ≤ 500) — the number of test cases.\n\nAt the beginning of each test case, you receive two integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ n/2) — the number of boxes in a row and the number of boxes with valuable gifts.\n\nIt's guaranteed that the order of boxes is fixed beforehand and that the sum of n in one test doesn't exceed 1000."}
{"name": "1374_E2. Reading Books (hard version)", "description": "Input\n\nThe first line of the input contains three integers n, m and k (1 ≤ k ≤ m ≤ n ≤ 2 ⋅ 10^5).\n\nThe next n lines contain descriptions of books, one description per line: the i-th line contains three integers t_i, a_i and b_i (1 ≤ t_i ≤ 10^4, 0 ≤ a_i, b_i ≤ 1), where:\n\n  * t_i — the amount of time required for reading the i-th book; \n  * a_i equals 1 if Alice likes the i-th book and 0 otherwise; \n  * b_i equals 1 if Bob likes the i-th book and 0 otherwise."}
{"name": "143_B. Help Kingdom of Far Far Away 2", "description": "Input\n\nThe input contains a number that needs to be converted into financial format. The number's notation length does not exceed 100 characters, including (possible) signs \"-\" (minus) and \".\" (decimal point). The number's notation is correct, that is: \n\n  * The number's notation only contains characters from the set {\"0\" – \"9\", \"-\", \".\"}. \n  * The decimal point (if it is present) is unique and is preceded and followed by a non-zero quantity on decimal digits \n  * A number cannot start with digit 0, except for a case when its whole integer part equals zero (in this case the integer parts is guaranteed to be a single zero: \"0\"). \n  * The minus sign (if it is present) is unique and stands in the very beginning of the number's notation \n  * If a number is identically equal to 0 (that is, if it is written as, for example, \"0\" or \"0.000\"), than it is not preceded by the minus sign. \n  * The input data contains no spaces. \n  * The number's notation contains at least one decimal digit."}
{"name": "1491_A. K-th Largest Value", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the given array and the number of queries.\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_n (0 ≤ a_i ≤ 1) — elements of the initial array.\n\nEach of the following q lines contains two integers. The first integer is t (1 ≤ t ≤ 2) — the type of query. \n\n  * If t = 1 the second integer is x (1 ≤ x ≤ n) — the position of the modified number. You have to assign to a_x the value 1 - a_x.\n  * If t = 2 the second integer is k (1 ≤ k ≤ n) — you need to print the k-th largest value of the array.\n\n\n\nIt's guaranteed that there will be at least one query of the second type (satisfying t = 2)."}
{"name": "1513_D. GCD and MST", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers n (2 ≤ n ≤ 2 ⋅ 10^5) and p (1 ≤ p ≤ 10^9) — the number of nodes and the parameter p.\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1540_C2. Converging Array (Hard Version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100).\n\nThe second line contains n integers c_1, c_2 …, c_n (0 ≤ c_i ≤ 100).\n\nThe third line contains n-1 integers b_1, b_2, …, b_{n-1} (0 ≤ b_i ≤ 100).\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^5).\n\nThe fifth line contains q space separated integers x_1, x_2, …, x_q (-10^5 ≤ x_i ≤ 10^5)."}
{"name": "168_B. Wizards and Minimal Spell", "description": "Input\n\nThe input contains multiple lines. All characters in the lines have codes from 32 to 127 (inclusive). Please note that the lines may begin with or end with one or more spaces. The size of the input does not exceed 1048576 ( = 220) bytes. Newlines are included in this size.\n\nIn the Windows operating system used on the testing computer, a newline is a sequence of characters with codes #13#10. It is guaranteed that after each line of input there is a newline. In particular, the input ends with a newline. Note that the newline is the end of the line, and not the beginning of the next one.\n\nIt is guaranteed that the input contains at least one character other than a newline.\n\nIt is recommended to organize the input-output line by line, in this case the newlines will be processed correctly by the language means."}
{"name": "260_C. Balls and Boxes", "description": "Input\n\nThe first line of the input contains two integers n and x (2 ≤ n ≤ 105, 1 ≤ x ≤ n), that represent the number of the boxes and the index of the box that got the last ball from Vasya, correspondingly. The second line contains n space-separated integers a1, a2, ..., an, where integer ai (0 ≤ ai ≤ 109, ax ≠ 0) represents the number of balls in the box with index i after Vasya completes all the actions. \n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "332_A. Down the Hatch!", "description": "Input\n\nThe first line contains a single integer n (4 ≤ n ≤ 2000) — the number of participants in the game. The second line describes the actual game: the i-th character of this line equals 'a', if the participant who moved i-th pointed at the next person with his elbow, and 'b', if the participant pointed with a nod. The game continued for at least 1 and at most 2000 turns."}
{"name": "572_A. Arrays", "description": "Input\n\nThe first line contains two integers nA, nB (1 ≤ nA, nB ≤ 105), separated by a space — the sizes of arrays A and B, correspondingly.\n\nThe second line contains two integers k and m (1 ≤ k ≤ nA, 1 ≤ m ≤ nB), separated by a space.\n\nThe third line contains nA numbers a1, a2, ... anA ( - 109 ≤ a1 ≤ a2 ≤ ... ≤ anA ≤ 109), separated by spaces — elements of array A.\n\nThe fourth line contains nB integers b1, b2, ... bnB ( - 109 ≤ b1 ≤ b2 ≤ ... ≤ bnB ≤ 109), separated by spaces — elements of array B."}
{"name": "846_F. Random Query", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 106). The second line contains n integer numbers a1, a2, ... an (1 ≤ ai ≤ 106) — elements of the array."}
{"name": "990_F. Flow Control", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of junctions.\n\nThe second line contains n integers s_1, s_2, ..., s_n (-10^4 ≤ s_i ≤ 10^4) — constraints for the junctions.\n\nThe third line contains an integer m (0 ≤ m ≤ 2 ⋅ 10^5) — the number of pipes.\n\ni-th of the next m lines contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i) — the description of i-th pipe. It is guaranteed that each unordered pair (x, y) will appear no more than once in the input (it means that there won't be any pairs (x, y) or (y, x) after the first occurrence of (x, y)). It is guaranteed that for each pair of junctions there exists a path along the pipes connecting them."}
{"name": "p00036 A Figure on Surface", "description": "Input\n\nThe input consists of multiple datasets.\n\nOne dataset is given eight strings of eight characters, with the squares occupied by the shape in the plane represented by 1 and the squares not occupied by 0 represented by 0. For example, the sequence of strings corresponding to Figure 2 is as follows:\n\n| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n--- | --- | --- | --- | --- | --- | --- | ---\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 1 | 1 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 1 | 1 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n\n\n\nThe datasets are separated by a single blank line. The number of datasets does not exceed 50."}
{"name": "p00823 Molecular Formula", "description": "Input\n\nThe input consists of two parts. The first part, the Atomic Table, is composed of a number of lines, each line including an atomic symbol, one or more spaces, and its atomic weight which is a positive integer no more than 1000. No two lines include the same atomic symbol.\n\nThe first part ends with a line containing only the string END OF FIRST PART.\n\nThe second part of the input is a sequence of lines. Each line is a molecular formula, not exceeding 80 characters, and contains no spaces. A molecule contains at most 105 atoms. Some atomic symbols in a molecular formula may not appear in the Atomic Table.\n\nThe sequence is followed by a line containing a single zero, indicating the end of the input."}
{"name": "p01223 Saizo", "description": "Input\n\nThe number of datasets t (0 <t ≤ 100) is given on the first line of the input. This line is followed by t datasets.\n\nThe first line of the dataset is the number of blocks that make up the field athletics n (2 ≤ n ≤ 100). In the second line, n integers indicating the height of the block from the start to the goal are given in order. The first corresponds to the start and the nth corresponds to the goal. These integers are separated by a single space character. The height h of each block satisfies 0 <h ≤ 1000."}
{"name": "p01695 JAG-channel", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> $ n $\n> $ s_1 $\n> $ s_2 $\n> ...\n> $ s_n $\n\n$ n $ is an integer representing the number of lines in the simple format display, and can be assumed to be $ 1 $ or more and $ 1 {,} 000 $ or less. The following $ n $ line contains a simple format display of the thread tree. $ s_i $ represents the $ i $ line in the simplified format display and consists of a string consisting of several'.' Followed by lowercase letters of $ 1 $ or more and $ 50 $ or less. $ s_1 $ is the first post in the thread and does not contain a'.'. $ s_2 $, ..., $ s_n $ are replies in that thread and always contain one or more'.'.\n\n$ n = 0 $ indicates the end of input. This is not included in the dataset."}
{"name": "1083_D. The Fair Nut's getting crazy", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the array elements."}
{"name": "1130_E. Wrong Answer", "description": "Input\n\nThe first and only line contains one integer k (1 ≤ k ≤ 10^9)."}
{"name": "1151_B. Dima and a Bad XOR", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and the number of columns in the matrix a.\n\nEach of the next n lines contains m integers: the j-th integer in the i-th line is the j-th element of the i-th row of the matrix a, i.e. a_{i, j} (0 ≤ a_{i, j} ≤ 1023)."}
{"name": "1209_G1. Into Blocks (easy version)", "description": "Input\n\nThe first line contains integers n and q (1 ≤ n ≤ 200 000, q = 0), the length of the sequence and the number of the updates.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 200 000), the initial sequence.\n\nEach of the following q lines contains integers i_t and x_t (1 ≤ i_t ≤ n, 1 ≤ x_t ≤ 200 000), the position and the new value for this position."}
{"name": "1270_G. Subset with Zero Sum", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^6). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1≤ n ≤ 10^6).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (i-n ≤ a_i ≤ i-1).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6."}
{"name": "1336_B. Xenia and Colorful Gems", "description": "Input\n\nThe first line contains a single integer t (1≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers n_r,n_g,n_b (1≤ n_r,n_g,n_b≤ 10^5) — the number of red gems, green gems and blue gems respectively.\n\nThe second line of each test case contains n_r integers r_1,r_2,…,r_{n_r} (1≤ r_i ≤ 10^9) — r_i is the weight of the i-th red gem.\n\nThe third line of each test case contains n_g integers g_1,g_2,…,g_{n_g} (1≤ g_i ≤ 10^9) — g_i is the weight of the i-th green gem.\n\nThe fourth line of each test case contains n_b integers b_1,b_2,…,b_{n_b} (1≤ b_i ≤ 10^9) — b_i is the weight of the i-th blue gem.\n\nIt is guaranteed that ∑ n_r ≤ 10^5, ∑ n_g ≤ 10^5, ∑ n_b ≤ 10^5 (the sum for all test cases)."}
{"name": "1358_E. Are You Fired?", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 5⋅ 10^5) — the number of months for which Levian must account.\n\nThe second line contains ⌈{n/2}⌉ integers a_1, a_2, …, a_{⌈{n/2}⌉}, where a_i (-10^9 ≤ a_i ≤ 10^9) — the income of the company in the i-th month.\n\nThird line contains a single integer x (-10^9 ≤ x ≤ 10^9) — income in every month from ⌈{n/2}⌉ + 1 to n."}
{"name": "1379_A. Acacius and String", "description": "Input\n\nFirst line of input contains an integer T (1 ≤ T ≤ 5000), number of test cases. T pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer n (7 ≤ n ≤ 50), length of a string s.\n\nThe second line of a test case description contains string s of length n consisting of lowercase English letters and question marks."}
{"name": "1442_B. Identify the Operations", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ k < n ≤ 200 000): sizes of arrays a and b.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): elements of a. All elements of a are distinct.\n\nThe third line of each test case contains k integers b_1, b_2, …, b_k (1 ≤ b_i ≤ n): elements of b. All elements of b are distinct.\n\nThe sum of all n among all test cases is guaranteed to not exceed 200 000."}
{"name": "1468_D. Firecrackers", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains four integers n, m, a and b (2 ≤ n ≤ 10^9; 1 ≤ m ≤ 2 ⋅ 10^5; 1 ≤ a, b ≤ n; a ≠ b) — the size of the corridor, the number of firecrackers, the initial location of the hooligan and the initial location of the guard, respectively.\n\nThe second line contains m integers s_1, s_2, ..., s_m (1 ≤ s_i ≤ 10^9), where s_i is the time it takes the i-th firecracker to explode after it is lit.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "520_C. DNA Alignment", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 105).\n\nThe second line of the input contains a single string of length n, consisting of characters \"ACGT\"."}
{"name": "617_B. Chocolate", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 100) — the number of pieces in the chocolate bar.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 1), where 0 represents a piece without the nut and 1 stands for a piece with the nut."}
{"name": "732_D. Exams", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of days in the exam period and the number of subjects. \n\nThe second line contains n integers d1, d2, ..., dn (0 ≤ di ≤ m), where di is the number of subject, the exam of which can be passed on the day number i. If di equals 0, it is not allowed to pass any exams on the day number i. \n\nThe third line contains m positive integers a1, a2, ..., am (1 ≤ ai ≤ 105), where ai is the number of days that are needed to prepare before passing the exam on the subject i."}
{"name": "756_E. Byteland coins", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 3·105) — the number of coin types.\n\nThe second line contains n - 1 integers a1, a2, ..., an - 1 (1 ≤ ak ≤ 109) — the ratios between the coin types denominations. It is guaranteed that for each x there are at most 20 coin types of denomination x.\n\nThe third line contains n non-negative integers b1, b2, ..., bn — the number of coins of each type Byteasar has. It is guaranteed that the sum of these integers doesn't exceed 3·105.\n\nThe fourth line contains single integer m (0 ≤ m < 1010000) — the amount in tugricks Byteasar needs to pay."}
{"name": "895_E. Eyes Closed", "description": "Input\n\nThe first line contains two integers n, q (2 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of elements in the array and the number of queries you need to handle.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — elements of the array.\n\nThe next q lines contain Petya's actions of type 1 or 2.\n\nIf it is a type 1 action then the line contains 5 integers 1, l1, r1, l2, r2 (1 ≤ l1 ≤ r1 ≤ n, 1 ≤ l2 ≤ r2 ≤ n).\n\nIf it is a type 2 query then the line contains 3 integers 2, l, r (1 ≤ l ≤ r ≤ n).\n\nIt is guaranteed that there is at least one type 2 query and segments [l1, r1], [l2, r2] don't have common elements."}
{"name": "917_A. The Monster", "description": "Input\n\nThe first and only line of input contains string s, consisting only of characters '(', ')' and '?' (2 ≤ |s| ≤ 5000)."}
{"name": "965_D. Single-use Stones", "description": "Input\n\nThe first line contains two integers w and l (1 ≤ l < w ≤ 10^5) — the width of the river and the maximum length of a frog's jump.\n\nThe second line contains w - 1 integers a_1, a_2, …, a_{w-1} (0 ≤ a_i ≤ 10^4), where a_i is the number of stones at the distance i from the bank the frogs are currently at."}
{"name": "992_D. Nastya and a Game", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2·105, 1 ≤ k ≤ 105), where n is the length of the array and k is the constant described above.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 108) — the elements of the array."}
{"name": "p00049 Blood Groups", "description": "Input\n\nA comma-separated pair of attendance numbers and blood types is given over multiple lines. The attendance number is an integer between 1 and 50, and the blood type is one of the strings \"A\", \"B\", \"AB\" or \"O\". The number of students does not exceed 50."}
{"name": "p00335 Pancake", "description": "Input\n\nThe input is given in the following format.\n\n\nN\np1 p2 ... pN\n\n\nThe number of pancakes N (3 ≤ N ≤ 5000) is given on the first line. The second line gives the number of flips pi (0 ≤ pi ≤ 3) required to complete each pancake."}
{"name": "p00834 Inherit the Spheres", "description": "Input\n\nThe input consists of a series of datasets. Each dataset begins with a line containing a positive integer, which indicates the number of spheres N in the dataset. It is followed by N lines describing the centers and radiuses of the spheres. Each of the N lines has four positive integers Xi, Yi, Zi, and Ri (i = 1, . . . , N) describing the center and the radius of the i-th sphere, respectively.\n\nYou may assume 1 ≤ N ≤ 100, 1 ≤ Ri ≤ 2000, 0 < Xi - Ri < Xi + Ri < 4000, 0 < Yi - Ri < Yi + Ri < 16000, and 0 < Zi - Ri < Zi + Ri < 36000. Each solid sphere is defined as the set of all points (x, y, z) satisfying (x - Xi)2 + (y - Yi)2 + (z - Zi)2 ≤ Ri2.\n\nA sphere may contain other spheres. No two spheres are mutually tangent. Every Zi ± Ri and minimum/maximum z coordinates of a circle formed by the intersection of any two spheres differ from each other by at least 0.01.\n\nThe end of the input is indicated by a line with one zero."}
{"name": "1010_C. Border", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000, 2 ≤ k ≤ 100 000) — the number of denominations of banknotes and the base of the number system on Mars.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — denominations of banknotes on Mars.\n\nAll numbers are given in decimal notation."}
{"name": "1120_C. Compress String", "description": "Input\n\nThe first line contains three positive integers, separated by spaces: n, a and b (1 ≤ n, a, b ≤ 5000) — the length of the string, the cost to compress a one-character string and the cost to compress a string that appeared before.\n\nThe second line contains a single string s, consisting of n lowercase English letters."}
{"name": "1206_B. Make Product Equal One", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of numbers.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the numbers."}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 200) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 200) — the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid."}
{"name": "128_B. String", "description": "Input\n\nThe first line contains a non-empty string that only consists of small Latin letters (\"a\"-\"z\"), whose length does not exceed 105. The second line contains the only integer k (1 ≤ k ≤ 105)."}
{"name": "1332_C. K-Complete Word", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t≤ 10^5) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ k < n ≤ 2 ⋅ 10^5, n is divisible by k).\n\nThe second line of each test case contains a word s of length n.\n\nIt is guaranteed that word s only contains lowercase Latin letters. And it is guaranteed that the sum of n over all test cases will not exceed 2 ⋅ 10^5."}
{"name": "1372_D. Omkar and Circle", "description": "Input\n\nThe first line contains one odd integer n (1 ≤ n < 2 ⋅ 10^5, n is odd) — the initial size of the circle.\n\nThe second line contains n integers a_{1},a_{2},...,a_{n} (0 ≤ a_{i} ≤ 10^9) — the initial numbers in the circle."}
{"name": "1419_E. Decryption", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Next t lines describe each test case.\n\nIn a single line of each test case description, there is a single composite number n (4 ≤ n ≤ 10^9) — the number from the message.\n\nIt's guaranteed that the total number of divisors of n for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1437_F. Emotional Fishermen", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 5000).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "207_D5. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set)."}
{"name": "398_D. Instant Messanger", "description": "Input\n\nThe first line contains three space-separated integers n, m and q (1 ≤ n ≤ 50000; 1 ≤ m ≤ 150000; 1 ≤ q ≤ 250000) — the number of users, the number of pairs of friends, and the number of queries.\n\nThe second line contains an integer o (1 ≤ o ≤ n) — the number of online users at the beginning. The third line contains o space-separated integers x1, x2, ..., xo (1 ≤ xi ≤ n) — the ids of the online users. It is guaranteed that these values are distinct.\n\nEach of the next m lines contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — the ids of two users who are friends at the beginning. It is guaranteed there are no multiple friendship given in the input. Note that the friendship is bidirectional.\n\nNext q lines describe the q queries in the format:\n\n  * \"O u\" (1 ≤ u ≤ n) : Call online(u). It is guaranteed that user u was offline just before the function call. \n  * \"F u\" (1 ≤ u ≤ n) : Call offline(u). It is guaranteed that user u was online just before the function call. \n  * \"A u v\" (1 ≤ u, v ≤ n; u ≠ v) : Call add_friend(u, v). It is guaranteed that these two users weren't friends just before the function call. \n  * \"D u v\" (1 ≤ u, v ≤ n; u ≠ v) : Call del_friend(u, v). It is guaranteed that these two users were friends just before the function call. \n  * \"C u\" (1 ≤ u ≤ n) : Call count_online_friends(u) and print the result in a single line."}
{"name": "798_E. Mike and code of a permutation", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 500 000) — length of permutation.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n or ai = - 1) — the code of Mike's permutation.\n\nYou may assume that all positive values from A are different."}
{"name": "818_G. Four Melodies", "description": "Input\n\nThe first line contains one integer number n (4 ≤ n ≤ 3000).\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105) — notes written on a sheet."}
{"name": "844_C. Sorting by Subsequences", "description": "Input\n\nThe first line of input data contains integer n (1 ≤ n ≤ 105) — the length of the sequence.\n\nThe second line of input data contains n different integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the elements of the sequence. It is guaranteed that all elements of the sequence are distinct."}
{"name": "913_C. Party Lemonade", "description": "Input\n\nThe first line contains two integers n and L (1 ≤ n ≤ 30; 1 ≤ L ≤ 109) — the number of types of bottles in the store and the required amount of lemonade in liters, respectively.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109) — the costs of bottles of different types."}
{"name": "961_B. Lecture Sleep", "description": "Input\n\nThe first line of the input contains two integer numbers n and k (1 ≤ k ≤ n ≤ 105) — the duration of the lecture in minutes and the number of minutes you can keep Mishka awake.\n\nThe second line of the input contains n integer numbers a1, a2, ... an (1 ≤ ai ≤ 104) — the number of theorems lecturer tells during the i-th minute.\n\nThe third line of the input contains n integer numbers t1, t2, ... tn (0 ≤ ti ≤ 1) — type of Mishka's behavior at the i-th minute of the lecture."}
{"name": "989_A. A Blend of Springtime", "description": "Input\n\nThe first and only line of input contains a non-empty string s consisting of uppercase English letters 'A', 'B', 'C' and characters '.' (dots) only (\\lvert s \\rvert ≤ 100) — denoting cells containing an amber flower, a buff one, a canary yellow one, and no flowers, respectively."}
{"name": "p00665 Everything Starts With Your Vote", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nN M K L\nname0 x0\n..\n..\n..\nnameN-1 xN-1\nfav0\n..\n..\n..\nfavM-1\n\n\nThe meanings of N, M, K, and L are as described in the problem statement.\nnamei is the name of the character and xi is the total number of votes for the i-th character.\nfavi represents the name of the character you like. These names are always different and are always included in the character's name input.\n\n\nThe end of the input is given by a line consisting of N = 0, M = 0, K = 0, and L = 0.\n\n\nIn addition, each value satisfies the following conditions\n1 ≤ N ≤ 100,000\n1 ≤ M ≤ N\n1 ≤ K ≤ N\n1 ≤ L ≤ 100,000,000\n0 ≤ xi ≤ 100,000,000\nnamei contains only the alphabet and is 10 characters or less in length.\n\nThe number of test cases does not exceed 150.\nIt is also guaranteed that the number of cases where 20,000 ≤ N does not exceed 20.\n\n\nJudge data is large, so it is recommended to use fast input."}
{"name": "1015_F. Bracket Substring", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 100) — the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to 2n).\n\nThe second line of the input contains one string s (1 ≤ |s| ≤ 200) — the string s that should be a substring in each of the resulting regular bracket sequences (|s| is the length of s)."}
{"name": "1062_A. A Prank", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array.\n\nThe second line of the input contains n integers a_i (1 ≤ a_1<a_2<...<a_n ≤ 10^3) — the array written by Giraffe."}
{"name": "1103_B. Game with modulo", "description": "Input\n\n\nstart\nx\nx\nstart\nx\nx\ny\nstart\nx\nx\ny\ny\nend"}
{"name": "1173_C. Nauuo and Cards", "description": "Input\n\nThe first line contains a single integer n (1≤ n≤ 2⋅ 10^5) — the number of numbered cards.\n\nThe second line contains n integers a_1,a_2,…,a_n (0≤ a_i≤ n) — the initial cards in Nauuo's hands. 0 represents an empty card.\n\nThe third line contains n integers b_1,b_2,…,b_n (0≤ b_i≤ n) — the initial cards in the pile, given in order from top to bottom. 0 represents an empty card.\n\nIt is guaranteed that each number from 1 to n appears exactly once, either in a_{1..n} or b_{1..n}."}
{"name": "190_C. STL", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105), showing how many numbers the type dictated by Gena contains.\n\nThe second line contains space-separated words, said by Gena. Each of them is either \"pair\" or \"int\" (without the quotes).\n\nIt is guaranteed that the total number of words does not exceed 105 and that among all the words that Gena said, there are exactly n words \"int\"."}
{"name": "287_A. IQ Test", "description": "Input\n\nFour lines contain four characters each: the j-th character of the i-th line equals \".\" if the cell in the i-th row and the j-th column of the square is painted white, and \"#\", if the cell is black."}
{"name": "380_C. Sereja and Brackets", "description": "Input\n\nThe first line contains a sequence of characters s1, s2, ..., sn (1 ≤ n ≤ 106) without any spaces. Each character is either a \"(\" or a \")\". The second line contains integer m (1 ≤ m ≤ 105) — the number of queries. Each of the next m lines contains a pair of integers. The i-th line contains integers li, ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th query."}
{"name": "472_G. Design Tutorial: Increase the Constraints", "description": "Input\n\nThe first line contains a string a (1 ≤ |a| ≤ 200000). The second line contains a string b (1 ≤ |b| ≤ 200000). Each character of both strings is either \"0\" or \"1\".\n\nThe third line contains an integer q (1 ≤ q ≤ 400000) — the number of queries. Each of the following q lines contains three integers: p1, p2 and len (0 ≤ p1 ≤ |a| - len; 0 ≤ p2 ≤ |b| - len), these numbers denote the parameters of the current query."}
{"name": "520_E. Pluses everywhere", "description": "Input\n\nThe first line contains two integers, n and k (0 ≤ k < n ≤ 105).\n\nThe second line contains a string consisting of n digits."}
{"name": "574_D. Bear and Blocks", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — sizes of towers."}
{"name": "596_B. Wilbur and Array", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array ai. Initially ai = 0 for every position i, so this array is not given in the input.\n\nThe second line of the input contains n integers b1, b2, ..., bn ( - 109 ≤ bi ≤ 109)."}
{"name": "665_E. Beautiful Subarrays", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 106, 1 ≤ k ≤ 109) — the number of elements in the array a and the value of the parameter k.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 109) — the elements of the array a."}
{"name": "757_A. Gotta Catch Em' All!", "description": "Input\n\nInput contains a single line containing a string s (1 ≤ |s| ≤ 105) — the text on the front page of the newspaper without spaces and punctuation marks. |s| is the length of the string s.\n\nThe string s contains lowercase and uppercase English letters, i.e. <image>."}
{"name": "778_C. Peterson Polyglot", "description": "Input\n\nThe first line of input contains integer n (2 ≤ n ≤ 3·105) — the size of the broom.\n\nNext n - 1 lines describe the broom: i-th of them contains integers ui, vi and letter xi — describing the edge from ui to vi marked with letter xi.\n\nVertices are numbered from 1 to n. All xi are lowercase latin letters. Vertex 1 is the root of the broom.\n\nEdges describe correct broom which is made from Peterson's language."}
{"name": "825_B. Five-In-a-Row", "description": "Input\n\nYou are given matrix 10 × 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won."}
{"name": "847_M. Weather Tomorrow", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of days for which the average air temperature is known.\n\nThe second line contains a sequence of integers t1, t2, ..., tn ( - 1000 ≤ ti ≤ 1000) — where ti is the average temperature in the i-th day."}
{"name": "993_A. Two Squares", "description": "Input\n\nThe input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.\n\nThe first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.\n\nAll the values are integer and between -100 and 100."}
{"name": "p00836 Sum of Consecutive prime Numbers", "description": "Input\n\nThe input is a sequence of positive integers each in a separate line. The integers are between 2 and 10 000, inclusive. The end of the input is indicated by a zero."}
{"name": "p01552 YAML", "description": "Input\n\n> .key_1.key_2 (...) .key_n\n> yaml\n>\n\n1 ≤ n ≤ 20\n\nNumber of characters in the entire input ≤ 50,000"}
{"name": "1011_D. Rocket", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 30) — the maximum distance to Mars and the number of elements in the sequence p.\n\nInteraction\n\nYou can ask the rocket no more than 60 questions.\n\nTo ask a question, print a number y (1≤ y≤ m) and an end-of-line character, then do the operation flush and read the answer to the question.\n\nIf the program reads 0, then the distance is correct and you must immediately terminate the program (for example, by calling exit(0)). If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf at some point your program reads -2 as an answer, it must immediately end (for example, by calling exit(0)). You will receive the \"Wrong answer\" verdict, and this will mean that the request is incorrect or the number of requests exceeds 60. If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf your program's request is not a valid integer between -2^{31} and 2^{31}-1 (inclusive) without leading zeros, then you can get any verdict.\n\nYou can get \"Idleness limit exceeded\" if you don't print anything or if you forget to flush the output.\n\nTo flush the output buffer you can use (after printing a query and end-of-line):\n\n  * fflush(stdout) in C++;\n  * System.out.flush() in Java;\n  * stdout.flush() in Python;\n  * flush(output) in Pascal;\n  * See the documentation for other languages.\n\n\n\nHacking\n\nUse the following format for hacking:\n\nIn the first line, print 3 integers m,n,x (1≤ x≤ m≤ 10^9, 1≤ n≤ 30) — the maximum distance to Mars, the number of elements in the sequence p and the current distance to Mars.\n\nIn the second line, enter n numbers, each of which is equal to 0 or 1 — sequence p.\n\nThe hacked solution will not have access to the number x and sequence p.\n\nExample\n\nInput\n\n5 2\n1\n-1\n-1\n1\n0"}
{"name": "10_E. Greedy Change", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 400) — the amount of the coins' face values. The second line contains n integers ai (1 ≤ ai ≤ 109), describing the face values. It is guaranteed that a1 > a2 > ... > an and an = 1."}
{"name": "1121_D. Diana and Liana", "description": "Input\n\nThe first line contains four integers m, k, n and s (1 ≤ n, k, m ≤ 5 ⋅ 10^5, k ⋅ n ≤ m, 1 ≤ s ≤ k): the number of flowers on the liana, the number of flowers in one wreath, the amount of citizens and the length of Diana's flower sequence respectively.\n\nThe second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 5 ⋅ 10^5) — types of flowers on the liana.\n\nThe third line contains s integers b_1, b_2, ..., b_s (1 ≤ b_i ≤ 5 ⋅ 10^5) — the sequence in Diana's schematic."}
{"name": "1188_B. Count Pairs", "description": "Input\n\nThe first line contains integers n, p, k (2 ≤ n ≤ 3 ⋅ 10^5, 2 ≤ p ≤ 10^9, 0 ≤ k ≤ p-1). p is guaranteed to be prime.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ p-1). It is guaranteed that all elements are different."}
{"name": "1207_C. Gas Pipeline", "description": "Input\n\nThe fist line contains one integer T (1 ≤ T ≤ 100) — the number of queries. Next 2 ⋅ T lines contain independent queries — one query per two lines.\n\nThe first line contains three integers n, a, b (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ a ≤ 10^8, 1 ≤ b ≤ 10^8) — the length of the road, the cost of one unit of the pipeline and the cost of one unit of the pillar, respectively.\n\nThe second line contains binary string s (|s| = n, s_i ∈ \\{0, 1\\}, s_1 = s_n = 0) — the description of the road.\n\nIt's guaranteed that the total length of all strings s doesn't exceed 2 ⋅ 10^5."}
{"name": "1225_D. Power Products", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).\n\nThe second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5)."}
{"name": "1249_F. Maximum Weight Subset", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 200) — the number of vertices in the tree and the distance restriction, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the weight of the vertex i.\n\nThe next n - 1 lines contain edges of the tree. Edge i is denoted by two integers u_i and v_i — the labels of vertices it connects (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i).\n\nIt is guaranteed that the given edges form a tree."}
{"name": "1333_C. Eugene and an array", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 2 × 10^5) — the length of array a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of a."}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 ≤ n ≤ 5 ⋅ 10^4) — number of cubes.\n\nThe second line contains n positive integers a_i (1 ≤ a_i ≤ 10^9) — volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1463_E. Plan of Lectures", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ k ≤ n - 1) — the number of topics and the number of special pairs of topics, respectively.\n\nThe second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ n), where p_i is the prerequisite topic for the topic i (or p_i = 0 if the i-th topic has no prerequisite topics). Exactly one of these integers is 0. At least one ordering of topics such that for every i the p_i-th topic is placed before the i-th topic exists.\n\nThen k lines follow, the i-th line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i) — the topics from the i-th special pair. All values of x_i are pairwise distinct; similarly, all valus of y_i are pairwise distinct."}
{"name": "1512_C. A-B Palindrome", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains two integers a and b (0 ≤ a, b ≤ 2 ⋅ 10^5, a + b ≥ 1).\n\nThe second line of each test case contains the string s of length a+b, consisting of the characters '0', '1', and '?'.\n\nIt is guaranteed that the sum of the string lengths of s over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "166_D. Shoe Store", "description": "Input\n\nThe first input line contains the only integer n (1 ≤ n ≤ 105) — the number of shoe pairs in the warehouse. Then n lines contain the descriptions of pairs of shoes as two integers ci and si (1 ≤ ci, si ≤ 109), the numbers are separated by a space. It is guaranteed that all numbers si are different.\n\nThe next line contains an integer m (1 ≤ m ≤ 105) — the number of customers in the shop. Next m lines contain the customers' descriptions as two integers di and li (1 ≤ di, li ≤ 109), the numbers are separated by a space."}
{"name": "518_A. Vitaly and Strings", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Here, |s| denotes the length of the string.\n\nThe second line contains string t (|t| = |s|), consisting of lowercase English letters.\n\nIt is guaranteed that the lengths of strings s and t are the same and string s is lexicographically less than string t."}
{"name": "544_A. Set of Strings", "description": "Input\n\nThe first line contains a positive integer k (1 ≤ k ≤ 26) — the number of strings that should be in a beautiful sequence. \n\nThe second line contains string q, consisting of lowercase Latin letters. The length of the string is within range from 1 to 100, inclusive."}
{"name": "570_C. Replacement", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 300 000) the length of the string and the number of queries.\n\nThe second line contains string s, consisting of n lowercase English letters and period signs.\n\nThe following m lines contain the descriptions of queries. The i-th line contains integer xi and ci (1 ≤ xi ≤ n, ci — a lowercas English letter or a period sign), describing the query of assigning symbol ci to position xi."}
{"name": "592_A. PawnChess", "description": "Input\n\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'. \n\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row."}
{"name": "633_D. Fibonacci-ish", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 1000) — the length of the sequence ai.\n\nThe second line contains n integers a1, a2, ..., an (|ai| ≤ 109)."}
{"name": "686_B. Little Robber Girl's Zoo", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — number of animals in the robber girl's zoo.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the height of the animal occupying the i-th place."}
{"name": "709_A. Juicer", "description": "Input\n\nThe first line of the input contains three integers n, b and d (1 ≤ n ≤ 100 000, 1 ≤ b ≤ d ≤ 1 000 000) — the number of oranges, the maximum size of the orange that fits in the juicer and the value d, which determines the condition when the waste section should be emptied.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000) — sizes of the oranges listed in the order Kolya is going to try to put them in the juicer."}
{"name": "753_A. Santa Claus and Candies", "description": "Input\n\nThe only line contains positive integer number n (1 ≤ n ≤ 1000) — number of candies Santa Claus has."}
{"name": "81_B. Sequence Formatting", "description": "Input\n\nThe input data contains a single string s. Its length is from 1 to 255 characters. The string s does not begin and end with a space. Its content matches the description given above."}
{"name": "936_D. World of Tank", "description": "Input\n\nThe first line contains four integers n, m1, m2 and t, the length of the field, the number of obstacles in the first lane, the number of obstacles in the second lane and the number of tank steps before reloading, respectively (1 ≤ n ≤ 109; 0 ≤ m1, m2 ≤ n; 0 ≤ m1 + m2 ≤ 106; 1 ≤ t ≤ n).\n\nThe next two lines contain a description of the obstacles. The first of these lines contains m1 numbers xi — the obstacle coordinates in the first lane (1 ≤ xi ≤ n; xi < xi + 1). The y coordinate for all these obstacles will be 1.\n\nThe second line contains m2 numbers describing the obstacles of the second lane in the same format. The y coordinate of all these obstacles will be 2."}
{"name": "962_B. Students in Railway Carriage", "description": "Input\n\nThe first line contain three integers n, a and b (1 ≤ n ≤ 2⋅10^{5}, 0 ≤ a, b ≤ 2⋅10^{5}, a + b > 0) — total number of seat places in the railway carriage, the number of student-programmers and the number of student-athletes.\n\nThe second line contains a string with length n, consisting of characters \".\" and \"*\". The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member."}
{"name": "p01213 Repeated Subsequences", "description": "Input\n\nThe input consists of multiple data sets. Each data set comes with a single line that contains one string of up to 300 capital letters. It is guaranteed that there is at least one repeated subsequence in each string.\n\nThe end of input is indicated by a line that contains “#END”. This line should not be processed."}
{"name": "p01531 Flick Input", "description": "Input\n\nA character string representing a flick input operation is given on one line (2 to 1000 characters). This character string consists of the numbers '0'-'9', which represent the buttons to be operated, and the five types of characters,'T',' L',' U',' R', and'D', which represent the flick direction. It consists of a combination.\n\nThe characters that represent the flick direction have the following meanings.\n\n*'T': Just touch\n*'L': Flick left\n*'U': Flick up\n*'R': Flick right\n*'D': Flick down\n\n\n\nFor example, \"2D\" represents the operation of \"flicking the button of 2 downward\", so \"ko\" can be output.\n\nIn the given character string, one number and one character indicating the flick direction appear alternately. Also, it always starts with one number and ends with one letter indicating the flick direction. Furthermore, in Fig. A (c), flicking is not performed toward a place without characters (there is no input such as \"8L\")."}
{"name": "p01687 D's Ambition", "description": "Input\n\n\nD\n\nThe input is given on one line and contains the string D, which consists only of uppercase letters. The length | D | of the string D satisfies 1 \\ leq | D | \\ leq 10 ^ 3."}
{"name": "1028_E. Restore Array", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 140582) — the length of the array a.\n\nThe second line contains n integers b_1, b_2, …, b_{n} (0 ≤ b_i ≤ 187126)."}
{"name": "1070_J. Streets and Avenues in Berhattan", "description": "Input\n\nInput contains one or several test cases to process. The first line contains t (1 ≤ t ≤ 30000) — the number of test cases. Solve test cases separately, test cases are completely independent and do not affect each other.\n\nThe description of t test cases follows. Each test case starts with line with space-separated numbers n, m, k (1 ≤ n,m ≤ 30000; n+m ≤ k ≤ 2⋅10^5) — the number of streets, number of avenues and the number of names in the committee's list, respectively.\n\nThe the second line of each test case contains a string of k uppercase English letters. i-th letter of the string is the first letter of i-th name from the committee's list. \n\nIt's guaranteed that the sum of numbers n from all test cases is not greater than 30000. Similarly, the sum of numbers m from all test cases is not greater than 30000. The sum of numbers k from all test cases is not greater than 2⋅10^5."}
{"name": "1111_D. Destroy the Colony", "description": "Input\n\nThe first line contains a string s (2 ≤ |s| ≤ 10^{5}), representing the initial colony arrangement. String s can have both lowercase and uppercase English letters and its length is even.\n\nThe second line contains a single integer q (1 ≤ q ≤ 10^{5}) — the number of questions.\n\nThe i-th of the next q lines contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ |s|, x_i ≠ y_i) — the two numbers given to the Jarvis for the i-th question."}
{"name": "1141_B. Maximal Continuous Rest", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 2⋅10^5) — number of hours per day.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1), where a_i=0 if the i-th hour in a day is working and a_i=1 if the i-th hour is resting. It is guaranteed that a_i=0 for at least one i."}
{"name": "11_A. Increasing Sequence", "description": "Input\n\nThe first line of the input contains two integer numbers n and d (2 ≤ n ≤ 2000, 1 ≤ d ≤ 106). The second line contains space separated sequence b0, b1, ..., bn - 1 (1 ≤ bi ≤ 106)."}
{"name": "1217_D. Coloring Edges", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 5000, 1 ≤ m ≤ 5000) — the number of vertices and edges in the digraph, respectively.\n\nNext m lines contain description of edges — one per line. Each edge is a pair of integers u and v (1 ≤ u, v ≤ n, u ≠ v) — there is directed edge from u to v in the graph.\n\nIt is guaranteed that each ordered pair (u, v) appears in the list of edges at most once."}
{"name": "1240_A. Save the Nature", "description": "Input\n\nThe first line contains a single integer q (1 ≤ q ≤ 100) — the number of independent queries. Each query consists of 5 lines.\n\nThe first line of each query contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tickets.\n\nThe second line contains n integers p_1, p_2, ..., p_n (100 ≤ p_i ≤ 10^9, p_i mod 100 = 0) — the corresponding prices of tickets.\n\nThe third line contains two integers x and a (1 ≤ x ≤ 100, x + y ≤ 100, 1 ≤ a ≤ n) — the parameters of the first program.\n\nThe fourth line contains two integers y and b (1 ≤ y ≤ 100, x + y ≤ 100, 1 ≤ b ≤ n) — the parameters of the second program.\n\nThe fifth line contains single integer k (1 ≤ k ≤ 10^{14}) — the required total contribution.\n\nIt's guaranteed that the total number of tickets per test doesn't exceed 2 ⋅ 10^5."}
{"name": "1282_B2. K for the Price of One (Hard Version)", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test.\n\nThe next lines contain a description of t test cases. \n\nThe first line of each test case contains three integers n, p, k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ p ≤ 2⋅10^9, 2 ≤ k ≤ n) — the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them.\n\nThe second line of each test case contains n integers a_i (1 ≤ a_i ≤ 10^4) — the prices of goods.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1326_C. Permutation Partitions", "description": "Input\n\nThe first line contains two integers, n and k (1 ≤ k ≤ n ≤ 200 000) — the size of the given permutation and the number of segments in a partition.\n\nThe second line contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n) — the given permutation."}
{"name": "1408_H. Rainbow Triples", "description": "Input\n\nThe first line of input contains one integer t (1 ≤ t ≤ 500 000): the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 500 000).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ n).\n\nThe total sum of n is at most 500 000."}
{"name": "1452_F. Divide Powers", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 30; 1 ≤ q ≤ 2 ⋅ 10^5) — the size of array cnt and the number of queries.\n\nThe second line contains n integers cnt_0, cnt_1, ..., cnt_{n - 1} (0 ≤ cnt_i ≤ 10^6).\n\nNext q lines contain queries: one per line. Each query has one of two types: \n\n  * \"1 pos val\" (0 ≤ pos < n; 0 ≤ val ≤ 10^6); \n  * \"2 x k\" (0 ≤ x < n; 1 ≤ k ≤ 10^{15}). \n\n\n\nIt's guaranteed that there is at least one query of the second type."}
{"name": "1476_D. Journey", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5). The second line contains the string s consisting of exactly n characters, each character is either L or R.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "1526_E. Oolimry and Suffix Array", "description": "Input\n\nThe first line contain 2 integers n and k (1 ≤ n ≤ 200000,1 ≤ k ≤ 200000) — the length of the suffix array and the alphabet size respectively.\n\nThe second line contains n integers s_0, s_1, s_2, …, s_{n-1} (0 ≤ s_i ≤ n-1) where s_i is the i-th element of the suffix array i.e. the starting position of the i-th lexicographically smallest suffix. It is guaranteed that for all 0 ≤ i< j ≤ n-1, s_i ≠ s_j."}
{"name": "297_A. Parity Game", "description": "Input\n\nThe first line contains the string a and the second line contains the string b (1 ≤ |a|, |b| ≤ 1000). Both strings contain only the characters \"0\" and \"1\". Here |x| denotes the length of the string x."}
{"name": "344_D. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 ≤ n ≤ 100000). The i-th (1 ≤ i ≤ n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise."}
{"name": "390_B. Inna, Dima and Song", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 105) — the number of notes in the song. The second line contains n integers ai (1 ≤ ai ≤ 106). The third line contains n integers bi (1 ≤ bi ≤ 106)."}
{"name": "484_D. Kindergarten", "description": "Input\n\nThe first line contains integer n — the number of children in the line (1 ≤ n ≤ 106).\n\nThe second line contains n integers ai — the charisma of the i-th child ( - 109 ≤ ai ≤ 109)."}
{"name": "557_E. Ann and Half-Palindrome", "description": "Input\n\nThe first line of the input contains string s (1 ≤ |s| ≤ 5000), consisting only of characters 'a' and 'b', where |s| is the length of string s.\n\nThe second line contains a positive integer k — the lexicographical number of the requested string among all the half-palindrome substrings of the given string s. The strings are numbered starting from one. \n\nIt is guaranteed that number k doesn't exceed the number of substrings of the given string that are half-palindromes."}
{"name": "583_C. GCD Table", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 500) — the length of array a. The second line contains n2 space-separated numbers — the elements of the GCD table of G for array a. \n\nAll the numbers in the table are positive integers, not exceeding 109. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a."}
{"name": "627_D. Preorder Test", "description": "Input\n\nThe first line of the input contains two positive integers, n and k (2 ≤ n ≤ 200 000, 1 ≤ k ≤ n) — the number of balls in Jacob's tree and the number of balls the teacher will inspect.\n\nThe second line contains n integers, ai (1 ≤ ai ≤ 1 000 000), the time Jacob used to build the i-th ball.\n\nEach of the next n - 1 lines contains two integers ui, vi (1 ≤ ui, vi ≤ n, ui ≠ vi) representing a connection in Jacob's tree between balls ui and vi."}
{"name": "677_B. Vanya and Food Processor", "description": "Input\n\nThe first line of the input contains integers n, h and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ h ≤ 109) — the number of pieces of potato, the height of the food processor and the amount of potato being smashed each second, respectively.\n\nThe second line contains n integers ai (1 ≤ ai ≤ h) — the heights of the pieces."}
{"name": "721_D. Maxim and Array", "description": "Input\n\nThe first line of the input contains three integers n, k and x (1 ≤ n, k ≤ 200 000, 1 ≤ x ≤ 109) — the number of elements in the array, the maximum number of operations and the number invented by Maxim, respectively.\n\nThe second line contains n integers a1, a2, ..., an (<image>) — the elements of the array found by Maxim."}
{"name": "766_D. Mahmoud and a Dictionary", "description": "Input\n\nThe first line of input contains three integers n, m and q (2 ≤ n ≤ 105, 1 ≤ m, q ≤ 105) where n is the number of words in the dictionary, m is the number of relations Mahmoud figured out and q is the number of questions Mahmoud asked after telling all relations.\n\nThe second line contains n distinct words a1, a2, ..., an consisting of small English letters with length not exceeding 20, which are the words in the dictionary.\n\nThen m lines follow, each of them contains an integer t (1 ≤ t ≤ 2) followed by two different words xi and yi which has appeared in the dictionary words. If t = 1, that means xi has a synonymy relation with yi, otherwise xi has an antonymy relation with yi.\n\nThen q lines follow, each of them contains two different words which has appeared in the dictionary. That are the pairs of words Mahmoud wants to know the relation between basing on the relations he had discovered.\n\nAll words in input contain only lowercase English letters and their lengths don't exceed 20 characters. In all relations and in all questions the two words are different."}
{"name": "883_D. Packmen Strike Back", "description": "Input\n\nThe first line contains integer number n (2 ≤ n ≤ 1 000 000) — the number of cells in the game field.\n\nThe second line contains n characters. If the i-th character is '.', the i-th cell is empty. If the i-th character is '*', the i-th cell contains an asterisk. If the i-th character is 'P', the i-th cell contains a packman.\n\nThe field contains at least one asterisk and at least one packman."}
{"name": "p00617 Simple GUI Application", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format:\n\n\nn\nTag structure\nx1 y1\nx2 y2\n..\n..\n..\nxn yn\n\n\nn is an integer indicating the number of touched points. The tag structure is a one-line character string that does not include spaces. xi and yi represent the x-coordinate and y-coordinate of the point touched at the i-th (the coordinate axes are defined in the above figure).\n\nYou can assume that n ≤ 100 and the length of the string in the tag structure ≤ 1000. Also, it may be assumed that the x-coordinate and y-coordinate given by the input are 0 or more and 10,000 or less.\n\nWhen n is 0, it is the end of input."}
{"name": "p00761 Recurring Decimals", "description": "Input\n\nThe input consists of multiple datasets. A dataset is a line containing two integers a0  and L  separated by a space. a0  and L  represent the initial integer of the sequence and the number of digits, respectively, where 1 ≤ L  ≤ 6 and 0 ≤ a0  < 10L .\n\nThe end of the input is indicated by a line containing two zeros; it is not a dataset."}
{"name": "p00893 Matrix Calculator", "description": "Input\n\nThe input consists of multiple datasets, followed by a line containing a zero. Each dataset has the following format.\n\nn\nprogram\n\n\nn is a positive integer, which is followed by a program that is a sequence of single or multiple lines each of which is an assignment statement whose syntax is defined in Table J.1. n indicates the number of the assignment statements in the program. All the values of vars are undefined at the beginning of a program.\n\nYou can assume the following:\n\n* 1 ≤ n ≤ 10,\n* the number of characters in a line does not exceed 80 (excluding a newline),\n* there are no syntax errors and semantic errors (e.g., reference of undefined var),\n* the number of rows of matrices appearing in the computations does not exceed 100, and\n* the number of columns of matrices appearing in the computations does not exceed 100."}
{"name": "1179_A. Valeriy and Deque", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 10^5, 0 ≤ q ≤ 3 ⋅ 10^5) — the number of elements in the deque and the number of queries. The second line contains n integers a_1, a_2, ..., a_n, where a_i (0 ≤ a_i ≤ 10^9) — the deque element in i-th position. The next q lines contain one number each, meaning m_j (1 ≤ m_j ≤ 10^{18})."}
{"name": "1197_C. Array Splitting", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 3 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n ( 1 ≤ a_i ≤ 10^9, a_i ≥ a_{i-1})."}
{"name": "1255_E2. Send Boxes to Alice (Hard Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of chocolate boxes.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^6) — the number of chocolate pieces in the i-th box.\n\nIt is guaranteed that at least one of a_1, a_2, …, a_n is positive."}
{"name": "1341_E. Nastya and Unexpected Guest", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^6, 2 ≤ m ≤ min(n + 1, 10^4)) — road width and the number of safety islands.\n\nThe second line contains m distinct integers d_1, d_2, …, d_m (0 ≤ d_i ≤ n) — the points where the safety islands are located. It is guaranteed that there are 0 and n among them.\n\nThe third line contains two integers g, r (1 ≤ g, r ≤ 1000) — the time that the green light stays on and the time that the red light stays on."}
{"name": "1384_A. Common Prefixes", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 50) — the elements of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100."}
{"name": "1426_D. Non-zero Segments", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 200 000) — the number of elements in Kolya's array.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (-10^{9} ≤ a_i ≤ 10^{9}, a_i ≠ 0) — the description of Kolya's array."}
{"name": "144_C. Anagram Search", "description": "Input\n\nThe first line is non-empty string s, consisting of no more than 105 lowercase Latin letters and characters \"?\". The second line is non-empty string p, consisting of no more than 105 lowercase Latin letters. Please note that the length of the string p can exceed the length of the string s."}
{"name": "1499_E. Chaotic Merge", "description": "Input\n\nThe first line contains a string x (1 ≤ |x| ≤ 1000).\n\nThe second line contains a string y (1 ≤ |y| ≤ 1000).\n\nBoth strings consist only of lowercase Latin letters."}
{"name": "1521_C. Nastia and a Hidden Permutation", "description": "Input\n\nThe input consists of several test cases. In the beginning, you receive the integer T (1 ≤ T ≤ 10 000) — the number of test cases.\n\nAt the beginning of each test case, you receive an integer n (3 ≤ n ≤ 10^4) — the length of the permutation p.\n\nIt's guaranteed that the permutation is fixed beforehand and that the sum of n in one test doesn't exceed 2 ⋅ 10^4.\n\nInteraction\n\nTo ask a question, print \"? t i j x\" (t = 1 or t = 2, 1 ≤ i, j ≤ n, i ≠ j, 1 ≤ x ≤ n - 1) Then, you should read the answer.\n\nIf we answer with −1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving −1 and you will see the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nTo print the answer, print \"! p_1 p_2 … p_{n} (without quotes). Note that answering doesn't count as one of the ⌊ \\frac {3 ⋅ n} {2} ⌋ + 30 queries.\n\nAfter printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * See the documentation for other languages. \n\n\n\nHacks\n\nTo hack the solution, use the following test format.\n\nThe first line should contain a single integer T (1 ≤ T ≤ 10 000) — the number of test cases.\n\nFor each test case in the first line print a single integer n (3 ≤ n ≤ 10^4) — the length of the hidden permutation p.\n\nIn the second line print n space-separated integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n), where p is permutation.\n\nNote that the sum of n over all test cases should not exceed 2 ⋅ 10^4.\n\nExample\n\nInput\n\n\n2\n4\n\n3\n\n2\n\n5\n\n3"}
{"name": "1550_C. Manhattan Subarrays", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 5000) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of array a.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nIt's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5."}
{"name": "197_C. Lexicographically Maximum Subsequence", "description": "Input\n\nThe single line contains a non-empty string s, consisting only of lowercase English letters. The string's length doesn't exceed 105."}
{"name": "292_E. Copying Data", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the number of elements in the arrays and the number of queries, correspondingly. The second line contains an array of integers a1, a2, ..., an (|ai| ≤ 109). The third line contains an array of integers b1, b2, ..., bn (|bi| ≤ 109).\n\nNext m lines contain the descriptions of the queries. The i-th line first contains integer ti — the type of the i-th query (1 ≤ ti ≤ 2). If ti = 1, then the i-th query means the copying operation. If ti = 2, then the i-th query means taking the value in array b. If ti = 1, then the query type is followed by three integers xi, yi, ki (1 ≤ xi, yi, ki ≤ n) — the parameters of the copying query. If ti = 2, then the query type is followed by integer xi (1 ≤ xi ≤ n) — the position in array b.\n\nAll numbers in the lines are separated with single spaces. It is guaranteed that all the queries are correct, that is, the copying borders fit into the borders of arrays a and b."}
{"name": "316_G1. Good Substrings", "description": "Input\n\nThe first line contains string s. The second line contains integer n. Next n lines contain the rules, one per line. Each of these lines contains a string and two integers pi, li, ri, separated by single spaces (0 ≤ li ≤ ri ≤ |pi|). It is guaranteed that all the given strings are non-empty and only contain lowercase English letters.\n\nThe input limits for scoring 30 points are (subproblem G1): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 200. \n\n\n\nThe input limits for scoring 70 points are (subproblems G1+G2): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 2000. \n\n\n\nThe input limits for scoring 100 points are (subproblems G1+G2+G3): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 50000."}
{"name": "408_B. Garland", "description": "Input\n\nThe first line contains a non-empty sequence of n (1 ≤ n ≤ 1000) small English letters (\"a\"...\"z\"). Each letter means that Vasya has a sheet of paper of the corresponding color.\n\nThe second line contains a non-empty sequence of m (1 ≤ m ≤ 1000) small English letters that correspond to the colors of the pieces of paper in the garland that Vasya wants to make."}
{"name": "47_C. Crossword", "description": "Input\n\nSix lines contain the given words. Every word consists of no more than 30 and no less than 3 uppercase Latin letters."}
{"name": "553_D. Nudist Beach", "description": "Input\n\nThe first line of input contains three integers n, m, k (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000, 1 ≤ k ≤ n - 1).\n\nThe second line of input contains k integers, representing the cities with fortresses. These cities will all be distinct. \n\nThe next m lines contain the roads. The i-th of these lines will have 2 integers ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Every city will have at least one road adjacent to it.\n\nThere is no more than one road between each pair of the cities."}
{"name": "601_B. Lipshitz Sequence", "description": "Input\n\nThe first line of the input contains two space-separated integers n and q (2 ≤ n ≤ 100 000 and 1 ≤ q ≤ 100) — the number of elements in array <image> and the number of queries respectively.\n\nThe second line contains n space-separated integers <image> (<image>).\n\nThe following q lines describe queries. The i-th of those lines contains two space-separated integers li and ri (1 ≤ li < ri ≤ n)."}
{"name": "672_B. Different is Good", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the length of the string s.\n\nThe second line contains the string s of length n consisting of only lowercase English letters."}
{"name": "697_D. Puzzles", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of cities in USC.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 ≤ pi < i), where pi is the number of the parent city of city number i in the tree, meaning there is a road between cities numbered pi and i in USC."}
{"name": "832_B. Petya and Exam", "description": "Input\n\nThe first line contains a string with length from 1 to 26 consisting of distinct lowercase English letters. These letters are good letters, all the others are bad.\n\nThe second line contains the pattern — a string s of lowercase English letters, characters \"?\" and \"*\" (1 ≤ |s| ≤ 105). It is guaranteed that character \"*\" occurs in s no more than once.\n\nThe third line contains integer n (1 ≤ n ≤ 105) — the number of query strings.\n\nn lines follow, each of them contains single non-empty string consisting of lowercase English letters — a query string.\n\nIt is guaranteed that the total length of all query strings is not greater than 105."}
{"name": "852_I. Dating", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105), the number of houses in the town.\n\nThe second line contains n integers, where the i-th number is 1 if a boy lives in the i-th house or 0 if a girl lives in i-th house.\n\nThe third line contains n integers, where the i-th number represents the favorite number fi (1 ≤ fi ≤ 109) of the girl or boy that lives in the i-th house.\n\nThe next n - 1 lines contain information about the roads and the i-th line contains two integers ai and bi (1 ≤ ai, bi ≤ n) which means that there exists road between those two houses. It is guaranteed that it's possible to reach any house from any other.\n\nThe following line contains an integer q (1 ≤ q ≤ 105), the number of queries.\n\nEach of the following q lines represents a question and consists of two integers a and b (1 ≤ a, b ≤ n)."}
{"name": "900_E. Maximum Questions", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the length of s.\n\nThe second line contains the string s of length n. It contains small English letters 'a', 'b' and characters '?' only.\n\nThe third line contains a single integer m (1 ≤ m ≤ 105) — the length of t. The string t contains letters 'a' on odd positions and 'b' on even positions."}
{"name": "923_C. Perfect Security", "description": "Input\n\nThe first line contains a single integer N (1 ≤ N ≤ 300000), the length of the message. \n\nThe second line contains N integers A1, A2, ..., AN (0 ≤ Ai < 230) representing the encrypted message.\n\nThe third line contains N integers P1, P2, ..., PN (0 ≤ Pi < 230) representing the permuted encryption key."}
{"name": "999_B. Reversing Encryption", "description": "Input\n\nThe first line of input consists of a single integer n (1 ≤ n ≤ 100) — the length of the string t. The second line of input consists of the string t. The length of t is n, and it consists only of lowercase Latin letters."}
{"name": "p00218 Dividing Students", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\npm1 pe1 pj1\npm2 pe2 pj2\n::\npmn pen pjn\n\n\nAll inputs are given as integers. The number of datasets does not exceed 1000."}
{"name": "p00596 Dominoes Arrangement", "description": "Input\n\nInput file consists of pairs of lines. The first line of each pair is the number of elements N (1 ≤ N ≤ 18) in the subset, and the second line is the elements of the subset separated by blanks, see the input sample below.\n\nThe number of pairs (datasets) is less than 30."}
{"name": "1017_D. The Wu", "description": "Input\n\nThe first line contains three integers n, m, and q (1≤ n≤ 12, 1≤ q, m≤ 5⋅ 10^5) — the length of the \"01-strings\", the size of the multiset S, and the number of queries.\n\nThe second line contains n integers w_1, w_2, …, w_n (0 ≤ w_i ≤ 100) — the value of the i-th caracter.\n\nEach of the next m lines contains the \"01-string\" s of length n — the string in the multiset S.\n\nEach of the next q lines contains the \"01-string\" t of length n and integer k (0≤ k≤ 100) — the query."}
{"name": "1041_A. Heist", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 1 000) — the number of keyboards in the store that remained after the heist.\n\nThe second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{9}) — the indices of the remaining keyboards. The integers a_i are given in arbitrary order and are pairwise distinct."}
{"name": "1132_F. Clear the String", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 500) — the length of string s.\n\nThe second line contains the string s (|s| = n) consisting of lowercase Latin letters."}
{"name": "1153_B. Serval and Toy Bricks", "description": "Input\n\nThe first line contains three positive space-separated integers n, m, h (1≤ n, m, h ≤ 100) — the length, width and height.\n\nThe second line contains m non-negative space-separated integers a_1,a_2,...,a_m, where a_i is the height in the i-th column from left to right of the front view (0≤ a_i ≤ h).\n\nThe third line contains n non-negative space-separated integers b_1,b_2,...,b_n (0≤ b_j ≤ h), where b_j is the height in the j-th column from left to right of the left view.\n\nEach of the following n lines contains m numbers, each is 0 or 1, representing the top view, where j-th number of i-th row is 1 if h_{i, j}>0, and 0 otherwise.\n\nIt is guaranteed that there is at least one structure satisfying the input."}
{"name": "1272_E. Nearest Opposite Parity", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the i-th element of a."}
{"name": "1316_F. Battalion Strength", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 3⋅10^{5}) — the number of officers in Byteland's Army.\n\nThe second line contains n integers p_{1},p_{2},…,p_{n} (1 ≤ p_{i} ≤ 10^{9}).\n\nThe third line contains a single integer q (1 ≤ q ≤ 3⋅10^{5}) — the number of updates.\n\nEach of the next q lines contains two integers i and x (1 ≤ i ≤ n,  1 ≤ x ≤ 10^{9}), indicating that p_{i} is updated to x ."}
{"name": "1400_B. RPG Protagonist", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers p and f (1 ≤ p, f ≤ 10^9) — yours and your follower's capacities.\n\nThe second line of each test case contains two integers cnt_s and cnt_w (1 ≤ cnt_s, cnt_w ≤ 2 ⋅ 10^5) — the number of swords and war axes in the shop.\n\nThe third line of each test case contains two integers s and w (1 ≤ s, w ≤ 10^9) — the weights of each sword and each war axe.\n\nIt's guaranteed that the total number of swords and the total number of war axes in all test cases don't exceed 2 ⋅ 10^5."}
{"name": "1444_C. Team-Building", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 500 000; 0 ≤ m ≤ 500 000; 2 ≤ k ≤ 500 000) — the number of students, the number of pairs of acquaintances and the number of groups respectively.\n\nThe second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ k), where c_i equals to the group number of the i-th student.\n\nNext m lines follow. The i-th of them contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n), denoting that students a_i and b_i are acquaintances. It's guaranteed, that a_i ≠ b_i, and that no (unordered) pair is mentioned more than once."}
{"name": "1517_E. Group Photo", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 200 000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 200 000).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 200 000."}
{"name": "192_D. Demonstration", "description": "Input\n\nThe first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).\n\nThe second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).\n\nThe third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "23_D. Tetragon", "description": "Input\n\nThe first input line contains one number T — amount of tests (1 ≤ T ≤ 5·104). Each of the following T lines contains numbers x1, y1, x2, y2, x3, y3 — coordinates of different points that are the centers of three equal sides (non-negative integer numbers, not exceeding 10)."}
{"name": "314_B. Sereja and Periods", "description": "Input\n\nThe first line contains two integers b, d (1 ≤ b, d ≤ 107). The second line contains string a. The third line contains string c. The given strings are not empty and consist of lowercase English letters. Their lengths do not exceed 100."}
{"name": "549_H. Degenerate Matrix", "description": "Input\n\nThe first line contains two integers a and b (|a|, |b| ≤ 109), the elements of the first row of matrix A. \n\nThe second line contains two integers c and d (|c|, |d| ≤ 109) the elements of the second row of matrix A."}
{"name": "63_B. Settlers' Training", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1 ≤ i ≤ n, 1 ≤ ai ≤ k)."}
{"name": "690_C3. Brain Network (hard)", "description": "Input\n\nThe first line of the input contains one number n – the number of brains in the final nervous system (2 ≤ n ≤ 200000). In the second line a history of zombie's nervous system evolution is given. For convenience, we number all the brains by 1, 2, ..., n in the same order as they appear in the nervous system (the zombie is born with a single brain, number 1, and subsequently brains 2, 3, ..., n are added). The second line contains n - 1 space-separated numbers p2, p3, ..., pn, meaning that after a new brain k is added to the system, it gets connected to a parent-brain <image>."}
{"name": "714_B. Filya and Homework", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the Filya's array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109) — elements of the array."}
{"name": "734_E. Anton and Tree", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n integers colori (0 ≤ colori ≤ 1) — colors of the vertices. colori = 0 means that the i-th vertex is initially painted white, while colori = 1 means it's initially painted black.\n\nThen follow n - 1 line, each of them contains a pair of integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — indices of vertices connected by the corresponding edge. It's guaranteed that all pairs (ui, vi) are distinct, i.e. there are no multiple edges."}
{"name": "803_B. Distances to Zero", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2·105) — length of the array a. The second line contains integer elements of the array separated by single spaces ( - 109 ≤ ai ≤ 109)."}
{"name": "898_C. Phone Numbers", "description": "Input\n\nFirst line contains the integer n (1 ≤ n ≤ 20) — number of entries in Vasya's phone books. \n\nThe following n lines are followed by descriptions of the records in the format described in statement. Names of Vasya's friends are non-empty strings whose length does not exceed 10. They consists only of lowercase English letters. Number of phone numbers in one entry is not less than 1 is not more than 10. The telephone numbers consist of digits only. If you represent a phone number as a string, then its length will be in range from 1 to 10. Phone numbers can contain leading zeros."}
{"name": "919_D. Substring", "description": "Input\n\nThe first line contains two positive integers n, m (1 ≤ n, m ≤ 300 000), denoting that the graph has n nodes and m directed edges.\n\nThe second line contains a string s with only lowercase English letters. The i-th character is the letter assigned to the i-th node.\n\nThen m lines follow. Each line contains two integers x, y (1 ≤ x, y ≤ n), describing a directed edge from x to y. Note that x can be equal to y and there can be multiple edges between x and y. Also the graph can be not connected."}
{"name": "946_C. String Transformation", "description": "Input\n\nThe only one line of the input consisting of the string s consisting of |s| (1 ≤ |s| ≤ 105) small english letters."}
{"name": "975_A. Aramic script", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 10^3) — the number of words in the script.\n\nThe second line contains n words s_1, s_2, …, s_n — the script itself. The length of each string does not exceed 10^3.\n\nIt is guaranteed that all characters of the strings are small latin letters."}
{"name": "994_F. Compute Power", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the number of tasks.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 108), where ai represents the amount of power required for the i-th task.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100), where bi is the number of processors that i-th task will utilize."}
{"name": "p00193 Convenience Store", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nm n\ns\nx1 y1\nx2 y2\n::\nxs ys ys\nt\np1 q1\np2 q2\n::\npt qt\n\n\nThe integers m, n (2 ≤ m, n ≤ 100) are given to represent the size (horizontal, vertical) of the divided map on the first line.\n\nThe second line gives the number of existing convenience stores s (1 ≤ s ≤ 10). The following s line is given the coordinates xi, y1 of the ith existing convenience store.\n\nThe next line is given the number of potential new store sites t (1 ≤ t ≤ 10). The following t line is given the coordinates pi, qi of the i-th candidate site.\n\nThe number of datasets does not exceed 20."}
{"name": "p01564 Do use segment tree", "description": "Input\n\nThe first line contains two integers n and q. On the second line, there are n integers which indicate w1, w2, ... , wn.\n\nEach of the following n - 1 lines consists of two integers si and ei (1 ≤ si, ei ≤ n), which means that there is an edge between si and ei.\n\nFinally the following q lines give the list of queries, each of which contains four integers in the format described above. Queries must be processed one by one from top to bottom."}
{"name": "p01726 Almost Same Substring", "description": "Input\n\nThe input is given in the following format.\n\n\nS\nT'\n\n\n* S is given in the first line.\n* T'is given in the second line.\n* S and T'consist only of uppercase and lowercase alphabets, respectively.\n\n\n\nConstraints\n\nEach variable being input satisfies the following constraints.\n\n* 1 ≤ | S | ≤ 300,000\n* 1 ≤ | T'| ≤ | S |"}
{"name": "1006_C. Three Parts of the Array", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array d.\n\nThe second line of the input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9) — the elements of the array d."}
{"name": "1073_C. Vasya and Robot", "description": "Input\n\nThe first line contains one integer number n~(1 ≤ n ≤ 2 ⋅ 10^5) — the number of operations.\n\nThe second line contains the sequence of operations — a string of n characters. Each character is either U, D, L or R.\n\nThe third line contains two integers x, y~(-10^9 ≤ x, y ≤ 10^9) — the coordinates of the cell where the robot should end its path."}
{"name": "1114_D. Flood Fill", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 5000) — the number of squares.\n\nThe second line contains integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 5000) — the initial colors of the squares."}
{"name": "1183_F. Topforces Strikes Back", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of problems.\n\nThe second line of the query contains n integers a_1, a_2, ..., a_n (2 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the prettiness of the i-th problem.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 ⋅ 10^5."}
{"name": "1261_E. Not Same", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^3) — length of the given array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — numbers of blocks at positions 1, 2, ..., n."}
{"name": "1303_D. Fill The Bag", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^{18}, 1 ≤ m ≤ 10^5) — the size of bag and the number of boxes, respectively.\n\nThe second line of each test case contains m integers a_1, a_2, ... , a_m (1 ≤ a_i ≤ 10^9) — the sizes of boxes. It is guaranteed that each a_i is a power of two.\n\nIt is also guaranteed that sum of all m over all test cases does not exceed 10^5."}
{"name": "1389_G. Directing Edges", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 3 ⋅ 10^5, n - 1 ≤ m ≤ min(3 ⋅ 10^5, (n(n-1))/(2)), 1 ≤ k ≤ n).\n\nThe second line contains k pairwise distinct integers v_1, v_2, ..., v_k (1 ≤ v_i ≤ n) — the indices of the special vertices.\n\nThe third line contains n integers c_1, c_2, ..., c_n (0 ≤ c_i ≤ 10^9).\n\nThe fourth line contains m integers w_1, w_2, ..., w_m (0 ≤ w_i ≤ 10^9).\n\nThen m lines follow, the i-th line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i) — the endpoints of the i-th edge.\n\nThere is at most one edge between each pair of vertices."}
{"name": "1454_D. Number into Sequence", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 5000) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (2 ≤ n ≤ 10^{10}).\n\nIt is guaranteed that the sum of n does not exceed 10^{10} (∑ n ≤ 10^{10})."}
{"name": "1478_B. Nezzar and Lucky Number", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 9) — the number of test cases.\n\nThe first line of each test case contains two integers q and d (1 ≤ q ≤ 10^4, 1 ≤ d ≤ 9).\n\nThe second line of each test case contains q integers a_1,a_2,…,a_q (1 ≤ a_i ≤ 10^9)."}
{"name": "202_B. Brand New Easy Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 4) — the number of words in Lesha's problem. The second line contains n space-separated words — the short description of the problem.\n\nThe third line contains a single integer m (1 ≤ m ≤ 10) — the number of problems in the Torcoder.com archive. Next m lines contain the descriptions of the problems as \"k s1 s2 ... sk\", where k (1 ≤ k ≤ 20) is the number of words in the problem and si is a word of the problem description.\n\nAll words from all problem descriptions contain no more than 10 lowercase English letters."}
{"name": "250_D. Building Bridge", "description": "Input\n\nThe first line contains integers n, m, a, b (1 ≤ n, m ≤ 105, 0 < a < b < 106). \n\nThe second line contains n integers in the ascending order: the i-th integer determines the coordinate of point Ai and equals yi (|yi| ≤ 106). \n\nThe third line contains m integers in the ascending order: the i-th integer determines the coordinate of point Bi and equals y'i (|y'i| ≤ 106). \n\nThe fourth line contains m more integers: the i-th of them determines the length of the path that connects the eastern village and point Bi, and equals li (1 ≤ li ≤ 106).\n\nIt is guaranteed, that there is such a point C with abscissa at least b, that |BiC| ≤ li for all i (1 ≤ i ≤ m). It is guaranteed that no two points Ai coincide. It is guaranteed that no two points Bi coincide."}
{"name": "346_C. Number Transformation II", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105). The second line contains n space-separated integers x1, x2, ..., xn (2 ≤ xi ≤ 109). The third line contains two integers a and b (0 ≤ b ≤ a ≤ 109, a - b ≤ 106)."}
{"name": "486_E. LIS of Sequence", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 105) denoting the number of elements of sequence a.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 105)."}
{"name": "50_D. Bombing", "description": "Input\n\nThe first line contains an integer N which represents the number of the enemy's objects (1 ≤ N ≤ 100). The second line contains two integers: K is the required number of deactivated objects, and ε is the maximally permitted probability of not completing the task, given in per mils (1 ≤ K ≤ N, 1 ≤ ε ≤ 999). The third line contains X0 and Y0 which are the coordinates of the strike impact point. The next N lines contain two numbers Xi and Yi each which are the coordinates of every strategically important object. All the coordinates are integer, their absolute values do not exceed 1000.\n\nLet us remind you that there are a thousand per mils in unity (number one).\n\nThere can be several objects in one point."}
{"name": "629_C. Famil Door and Brackets", "description": "Input\n\nFirst line contains n and m (1 ≤ m ≤ n ≤ 100 000, n - m ≤ 2000) — the desired length of the string and the length of the string bought by Gabi, respectively.\n\nThe second line contains string s of length m consisting of characters '(' and ')' only."}
{"name": "701_C. They Are Everywhere", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 100 000) — the number of flats in the house.\n\nThe second line contains the row s with the length n, it consists of uppercase and lowercase letters of English alphabet, the i-th letter equals the type of Pokemon, which is in the flat number i."}
{"name": "813_A. The Contest", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 1000) — the number of problems. The second line contains n integers ai (1 ≤ ai ≤ 105) — the time Pasha needs to solve ith problem.\n\nThe third line contains one integer m (0 ≤ m ≤ 1000) — the number of periods of time when the website is working. Next m lines represent these periods. jth line contains two numbers lj and rj (1 ≤ lj < rj ≤ 105) — the starting and the ending moment of jth period.\n\nIt is guaranteed that the periods are not intersecting and are given in chronological order, so for every j > 1 the condition lj > rj - 1 is met."}
{"name": "884_B. Japanese Crosswords Strike Back", "description": "Input\n\nThe first line contains two integer numbers n and x (1 ≤ n ≤ 100000, 1 ≤ x ≤ 109) — the number of elements in the encoding and the length of the crossword Mishka picked.\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the encoding."}
{"name": "92_C. Newspaper Headline", "description": "Input\n\nThe input data contain two lines. The first line contain the heading s1, the second line contains the word s2. The lines only consist of lowercase Latin letters (1 ≤ |s1| ≤ 104, 1 ≤ |s2| ≤ 106)."}
{"name": "p00119 Taro's Obsession", "description": "Input\n\nThe input is given in the following format:\n\n\nm\nn\nx1 y1\nx2 y2\n::\nxn yn\n\n\nThe first line gives the number of suspects m (m ≤ 20), and the second line gives the number of testimonies n (n ≤ 100). The following n lines are given the contents of the i-th testimony, xi and yi, respectively, on the first line. xi yi represents the testimony that \"suspect xi (I) entered before suspect yi\"."}
{"name": "1025_A. Doggo Recoloring", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of puppies.\n\nThe second line contains a string s of length n consisting of lowercase Latin letters, where the i-th symbol denotes the i-th puppy's color."}
{"name": "1157_C1. Increasing Subsequence (easy version)", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the i-th element of a. All these integers are pairwise distinct."}
{"name": "1256_B. Minimize the Permutation", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of test cases. Then q test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 100) — the number of elements in the permutation.\n\nThe second line of the test case contains n distinct integers from 1 to n — the given permutation."}
{"name": "127_B. Canvas Frames", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of sticks. The second line contains n space-separated integers. The i-th integer equals the length of the i-th stick ai (1 ≤ ai ≤ 100)."}
{"name": "1323_C. Unusual Competitions", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of Dima's sequence.\n\nThe second line contains string of length n, consisting of characters \"(\" and \")\" only."}
{"name": "1364_B. Most socially-distanced subsequence", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (2 ≤ n ≤ 10^5) — the length of the permutation p.\n\nThe second line of each test case contains n integers p_1, p_2, …, p_{n} (1 ≤ p_i ≤ n, p_i are distinct) — the elements of the permutation p.\n\nThe sum of n across the test cases doesn't exceed 10^5."}
{"name": "1384_C. String Transformation 1", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of strings A and B.\n\nThe second line of each test case contains string A (|A|=n).\n\nThe third line of each test case contains string B (|B|=n).\n\nBoth strings consists of the first 20 lowercase English alphabet letters (ie. from a to t).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1405_E. Fixed Point Removal", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.\n\nThe i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n)."}
{"name": "1427_A. Avoiding Zero", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains one integer n (1≤ n≤ 50) — the length of the array a.\n\nThe second line of each testcase contains n integers a_1,a_2,..., a_n (-50≤ a_i≤ 50) — the elements of a."}
{"name": "1473_F. Strange Set", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3000).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100).\n\nThe third line contains n integers b_1, b_2, ..., b_n (-10^5 ≤ b_i ≤ 10^5)."}
{"name": "1523_A. Game of Life", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^9), which are the total number of cells in the array and the number of iterations.\n\nThe second line of each test case contains a string of length n made up of characters \"0\" and \"1\" and defines the initial state of the array. \"1\" means a cell is alive and \"0\" means it is dead.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4."}
{"name": "245_C. Game with Coins", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of chests with coins. The second line contains a sequence of space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the number of coins in the chest number i at the beginning of the game."}
{"name": "580_A. Kefa and First Steps", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "624_C. Graph and String", "description": "Input\n\nThe first line of the input contains two integers n and m <image> — the number of vertices and edges in the graph found by Petya, respectively.\n\nEach of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the edges of the graph G. It is guaranteed, that there are no multiple edges, that is any pair of vertexes appear in this list no more than once."}
{"name": "698_A. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out."}
{"name": "719_A. Vitya in the Countryside", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 92) — the number of consecutive days Vitya was watching the size of the visible part of the moon. \n\nThe second line contains n integers ai (0 ≤ ai ≤ 15) — Vitya's records.\n\nIt's guaranteed that the input data is consistent."}
{"name": "763_C. Timofey and remoduling", "description": "Input\n\nThe first line contains two integers m and n (2 ≤ m ≤ 109 + 7, 1 ≤ n ≤ 105, m is prime) — Timofey's favorite prime module and the length of the sequence.\n\nThe second line contains n distinct integers a1, a2, ..., an (0 ≤ ai < m) — the elements of the sequence."}
{"name": "786_E. ALT", "description": "Input\n\nThe first line of input contains two integers n and m (2 ≤ n ≤ 2 × 104, 1 ≤ m ≤ 104) — number of cities and number of citizens respectively.\n\nThe next n - 1 lines contain the roads, i-th line contains endpoint of i-th edge, v and u (1 ≤ v, u ≤ n, v ≠ u).\n\nThe next m lines contain the information about citizens. i-th line contains two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi)."}
{"name": "808_D. Array Division", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 100000) — the size of the array.\n\nThe second line contains n integers a1, a2... an (1 ≤ ai ≤ 109) — the elements of the array."}
{"name": "p01006 Nasty Boys", "description": "Input\n\nThe input consists of a group of 1000 character strings as shown below, and each line is an uppercase alphabetic string of 1 to 10 characters from A to I. It is assumed that there is no duplication of character string data.\n\n\nstring1\nstring2\n...\nstring1000"}
{"name": "1010_B. Rocket", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 30) — the maximum distance to Mars and the number of elements in the sequence p.\n\nInteraction\n\nYou can ask the rocket no more than 60 questions.\n\nTo ask a question, print a number y (1≤ y≤ m) and an end-of-line character, then do the operation flush and read the answer to the question.\n\nIf the program reads 0, then the distance is correct and you must immediately terminate the program (for example, by calling exit(0)). If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf at some point your program reads -2 as an answer, it must immediately end (for example, by calling exit(0)). You will receive the \"Wrong answer\" verdict, and this will mean that the request is incorrect or the number of requests exceeds 60. If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf your program's request is not a valid integer between -2^{31} and 2^{31}-1 (inclusive) without leading zeros, then you can get any verdict.\n\nYou can get \"Idleness limit exceeded\" if you don't print anything or if you forget to flush the output.\n\nTo flush the output buffer you can use (after printing a query and end-of-line):\n\n  * fflush(stdout) in C++;\n  * System.out.flush() in Java;\n  * stdout.flush() in Python;\n  * flush(output) in Pascal;\n  * See the documentation for other languages.\n\n\n\nHacking\n\nUse the following format for hacking:\n\nIn the first line, print 3 integers m,n,x (1≤ x≤ m≤ 10^9, 1≤ n≤ 30) — the maximum distance to Mars, the number of elements in the sequence p and the current distance to Mars.\n\nIn the second line, enter n numbers, each of which is equal to 0 or 1 — sequence p.\n\nThe hacked solution will not have access to the number x and sequence p.\n\nExample\n\nInput\n\n5 2\n1\n-1\n-1\n1\n0"}
{"name": "1056_G. Take Metro", "description": "Input\n\nThe first line contains two integers n and m (3 ≤ n ≤ 10^5, 1 ≤ m < n) — the total number of stations and the number of stations that have red interior.\n\nThe second line contains two integers s and t (1 ≤ s ≤ n, 1 ≤ t ≤ 10^{12}) — the starting station and the initial value of t."}
{"name": "1168_E. Xor Permutations", "description": "Input\n\nThe first line contains one integer k (2 ≤ k ≤ 12), denoting that the size of the array is 2^k.\n\nThe next line contains 2^k space-separated integers a_1, a_2, …, a_{2^k} (0 ≤ a_i < 2^k) — the elements of the given array."}
{"name": "1187_B. Letters Shop", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of showcase string s.\n\nThe second line contains string s, consisting of exactly n lowercase Latin letters.\n\nThe third line contains one integer m (1 ≤ m ≤ 5 ⋅ 10^4) — the number of friends.\n\nThe i-th of the next m lines contains t_i (1 ≤ |t_i| ≤ 2 ⋅ 10^5) — the name of the i-th friend.\n\nIt is guaranteed that ∑ _{i=1}^m |t_i| ≤ 2 ⋅ 10^5."}
{"name": "1206_A. Choose Two Numbers", "description": "Input\n\nThe first line contains one integer n (1≤ n ≤ 100) — the number of elements of A.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 200) — the elements of A.\n\nThe third line contains one integer m (1≤ m ≤ 100) — the number of elements of B.\n\nThe fourth line contains m different integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 200) — the elements of B.\n\nIt can be shown that the answer always exists."}
{"name": "1223_D. Sequence Sorting", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of the queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of elements.\n\nThe second line of each query contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ n) — the elements.\n\nIt is guaranteed that the sum of all n does not exceed 3 ⋅ 10^5."}
{"name": "1249_A. Yet Another Dividing into Teams", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 100) — the number of students in the query. The second line of the query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100, all a_i are distinct), where a_i is the programming skill of the i-th student."}
{"name": "1267_G. Game Relics", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 100; 1 ≤ x ≤ 10 000) — the number of relics and the cost to receive a random relic.\n\nThe second line consists of n integers c_1, c_2, …, c_n (x ≤ c_i ≤ 10 000; ∑{c_i} ≤ 10 000) — the prices of n relics."}
{"name": "1332_B. Composite Coloring", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of the test case contains a single integer n (1 ≤ n ≤ 1000) — the amount of numbers in a sequence a.\n\nThe second line of the test case contains n composite integers a_1,a_2,…,a_n (4 ≤ a_i ≤ 1000).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^4."}
{"name": "1352_E. Special Elements", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases in the input. Then t test cases follow.\n\nEach test case is given in two lines. The first line contains an integer n (1 ≤ n ≤ 8000) — the length of the array a. The second line contains integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n).\n\nIt is guaranteed that the sum of the values of n for all test cases in the input does not exceed 8000."}
{"name": "1372_C. Omkar and Baseball", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the given permutation.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 ≤ a_{i} ≤ n) — the initial permutation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1419_D2. Sage's Birthday (hard version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of ice spheres in the shop.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the prices of ice spheres."}
{"name": "1437_E. Make It Increasing", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 5 ⋅ 10^5, 0 ≤ k ≤ n) — the size of the array a and the set b, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThen, if k ≠ 0, the third line follows, containing k integers b_1, b_2, ..., b_k (1 ≤ b_1 < b_2 < ... < b_k ≤ n). If k = 0, this line is skipped."}
{"name": "1511_A. Review Site", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains a single integer n (1 ≤ n ≤ 50) — the number of reviewers.\n\nThe second line of each testcase contains n integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 3) — the types of the reviewers in the same order they enter the site."}
{"name": "207_D4. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set)."}
{"name": "447_B. DZY Loves Strings", "description": "Input\n\nThe first line contains a single string s (1 ≤ |s| ≤ 103).\n\nThe second line contains a single integer k (0 ≤ k ≤ 103).\n\nThe third line contains twenty-six integers from wa to wz. Each such number is non-negative and doesn't exceed 1000."}
{"name": "515_C. Drazil and Factorial", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 15) — the number of digits in a.\n\nThe second line contains n digits of a. There is at least one digit in a that is larger than 1. Number a may possibly contain leading zeroes."}
{"name": "612_B. HDD is Outdated Technology", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 2·105) — the number of fragments.\n\nThe second line contains n different integers fi (1 ≤ fi ≤ n) — the number of the fragment written in the i-th sector."}
{"name": "632_B. Alice, Bob, Two Teams", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 5·105) — the number of game pieces.\n\nThe second line contains n integers pi (1 ≤ pi ≤ 109) — the strength of the i-th piece.\n\nThe third line contains n characters A or B — the assignment of teams after the first step (after Alice's step)."}
{"name": "798_D. Mike and distribution", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements in the sequences. \n\nOn the second line there are n space-separated integers a1, ..., an (1 ≤ ai ≤ 109) — elements of sequence A.\n\nOn the third line there are also n space-separated integers b1, ..., bn (1 ≤ bi ≤ 109) — elements of sequence B."}
{"name": "864_E. Fire", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of items in Polycarp's house.\n\nEach of the following n lines contains three integers ti, di, pi (1 ≤ ti ≤ 20, 1 ≤ di ≤ 2 000, 1 ≤ pi ≤ 20) — the time needed to save the item i, the time after which the item i will burn completely and the value of item i."}
{"name": "935_B. Fafa and the Gates", "description": "Input\n\nThe first line of the input contains single integer n (1 ≤ n ≤ 105) — the number of moves in the walking sequence.\n\nThe second line contains a string S of length n consisting of the characters 'U' and 'R' describing the required moves. Fafa will follow the sequence S in order from left to right."}
{"name": "p00020 Capitalize", "description": "Input\n\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200."}
{"name": "1070_K. Video Posts", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The next line contains n positive integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4), where a_i is the duration of the i-th video."}
{"name": "1092_F. Tree with Maximum Cost", "description": "Input\n\nThe first line contains one integer n, the number of vertices in the tree (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the value of the vertex i.\n\nEach of the next n - 1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the labels of vertices it connects (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i).\n\nIt is guaranteed that the given edges form a tree."}
{"name": "1141_C. Polycarp Restores Permutation", "description": "Input\n\nThe first line contains the integer n (2 ≤ n ≤ 2⋅10^5) — the length of the permutation to restore. The second line contains n-1 integers q_1, q_2, ..., q_{n-1} (-n < q_i < n)."}
{"name": "1217_E. Sum Queries?", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i < 10^9).\n\nEach of the following m lines contains a query of one of two types:\n\n  * 1~i~x (1 ≤ i ≤ n, 1 ≤ x < 10^9) — replace a_i with the value x; \n  * 2~l~r (1 ≤ l ≤ r ≤ n) — find the unbalanced subset of the multiset of the numbers a_l, a_{l + 1}, ..., a_r with the lowest sum, or report that no unbalanced subset exists. \n\n\n\nIt is guaranteed that there is at least one query of the second type."}
{"name": "1240_B. Sequence Sorting", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of the queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of elements.\n\nThe second line of each query contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ n) — the elements.\n\nIt is guaranteed that the sum of all n does not exceed 3 ⋅ 10^5."}
{"name": "1282_C. Petya and Exam", "description": "Input\n\nThe first line contains the integer m (1 ≤ m ≤ 10^4) — the number of test cases in the test.\n\nThe next lines contain a description of m test cases. \n\nThe first line of each test case contains four integers n, T, a, b (2 ≤ n ≤ 2⋅10^5, 1 ≤ T ≤ 10^9, 1 ≤ a < b ≤ 10^9) — the number of problems, minutes given for the exam and the time to solve an easy and hard problem, respectively.\n\nThe second line of each test case contains n numbers 0 or 1, separated by single space: the i-th number means the type of the i-th problem. A value of 0 means that the problem is easy, and a value of 1 that the problem is hard.\n\nThe third line of each test case contains n integers t_i (0 ≤ t_i ≤ T), where the i-th number means the time at which the i-th problem will become mandatory.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2⋅10^5."}
{"name": "1345_C. Hilbert's Hotel", "description": "Input\n\nEach test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 10^4) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 2⋅ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_0,a_1,…,a_{n-1} (-10^9≤ a_i≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5."}
{"name": "1476_E. Pattern Matching", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n, m ≤ 10^5, 1 ≤ k ≤ 4) — the number of patterns, the number of strings and the length of each pattern and string.\n\nEach of the next n lines contains a pattern — k characters that are either lowercase Latin letters or underscores. All patterns are pairwise distinct.\n\nEach of the next m lines contains a string — k lowercase Latin letters, and an integer mt (1 ≤ mt ≤ n) — the index of the first pattern the corresponding string should match."}
{"name": "1503_B. 3-Coloring", "description": "Input\n\n\n2\n1\n\n2\n\n1\n\n3"}
{"name": "225_A. Dice Tower", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of dice in the tower.\n\nThe second line contains an integer x (1 ≤ x ≤ 6) — the number Bob sees at the top of the tower. Next n lines contain two space-separated integers each: the i-th line contains numbers ai, bi (1 ≤ ai, bi ≤ 6; ai ≠ bi) — the numbers Bob sees on the two sidelong faces of the i-th dice in the tower.\n\nConsider the dice in the tower indexed from top to bottom from 1 to n. That is, the topmost dice has index 1 (the dice whose top face Bob can see). It is guaranteed that it is possible to make a dice tower that will look as described in the input."}
{"name": "249_D. Donkey and Stars", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) — the number of stars. The second line contains simple fractions representing relationships \"a/b c/d\", such that <image> and <image> (0 ≤ a, b, c, d ≤ 105; <image>; <image>; <image>). The given numbers a, b, c, d are integers.\n\nNext n lines contain pairs of integers xi, yi (1 ≤ xi, yi ≤ 105)— the stars' coordinates.\n\nIt is guaranteed that all stars have distinct coordinates."}
{"name": "297_B. Fish Weight", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m ≤ 105, 1 ≤ k ≤ 109) — the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species."}
{"name": "31_E. TV Game", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 18). The second line contains integer A consisting of exactly 2n digits. This number can have leading zeroes."}
{"name": "368_B. Sereja and Suffixes", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the array elements.\n\nNext m lines contain integers l1, l2, ..., lm. The i-th line contains integer li (1 ≤ li ≤ n)."}
{"name": "390_C. Inna and Candy Boxes", "description": "Input\n\nThe first line of the input contains three integers n, k and w (1 ≤ k ≤ min(n, 10), 1 ≤ n, w ≤ 105). The second line contains n characters. If the i-th box contains a candy, the i-th character of the line equals 1, otherwise it equals 0.\n\nEach of the following w lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th question. It is guaranteed that ri - li + 1 is divisible by k."}
{"name": "412_B. Network Configuration", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 100) — the number of computers and the number of participants, respectively. In the second line you have a space-separated sequence consisting of n integers: a1, a2, ..., an (16 ≤ ai ≤ 32768); number ai denotes the maximum data transfer speed on the i-th computer."}
{"name": "439_D. Devu and his Brother", "description": "Input\n\nThe first line contains two space-separated integers n, m (1 ≤ n, m ≤ 105). The second line will contain n space-separated integers representing content of the array a (1 ≤ ai ≤ 109). The third line will contain m space-separated integers representing content of the array b (1 ≤ bi ≤ 109)."}
{"name": "461_A. Appleman and Toastman", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3·105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the initial group that is given to Toastman."}
{"name": "484_E. Sign on Fence", "description": "Input\n\nThe first line of the input contains integer n — the number of panels in the fence (1 ≤ n ≤ 105). \n\nThe second line contains n space-separated integers hi, — the heights of the panels (1 ≤ hi ≤ 109). \n\nThe third line contains an integer m — the number of the queries (1 ≤ m ≤ 105). \n\nThe next m lines contain the descriptions of the queries, each query is represented by three integers l, r and w (1 ≤ l ≤ r ≤ n, 1 ≤ w ≤ r - l + 1) — the segment of the fence and the width of the sign respectively."}
{"name": "583_D. Once Again...", "description": "Input\n\nThe first line contains two space-separated integers: n, T (1 ≤ n ≤ 100, 1 ≤ T ≤ 107). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 300)."}
{"name": "6_C. Alice, Bob and Chocolate", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 105) — the amount of bars on the table. The second line contains a sequence t1, t2, ..., tn (1 ≤ ti ≤ 1000), where ti is the time (in seconds) needed to consume the i-th bar (in the order from left to right)."}
{"name": "766_E. Mahmoud and a xor trip", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of cities in Mahmoud and Ehab's country.\n\nThen the second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 106) which represent the numbers attached to the cities. Integer ai is attached to the city i.\n\nEach of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting that there is an undirected road between cities u and v. It's guaranteed that you can reach any city from any other using these roads."}
{"name": "906_E. Reverses", "description": "Input\n\nFirst line of input contains string s and second line contains string t. Both strings have same length and consist of lowercase English letters. 1 ≤ |s| = |t| ≤ 5·105"}
{"name": "926_G. Large Bouquets", "description": "Input\n\nThe first line contains a single positive integer n (1 ≤ n ≤ 105) — the number of initial bouquets.\n\nThe second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the number of flowers in each of the initial bouquets."}
{"name": "p00762 Biased Dice", "description": "Input\n\nThe input consists of several datasets each in the following format.\n\n> n\n>  t1  f1\n>  t2  f2\n>  ...\n>  tn  fn\n>\n\nHere, n (1 ≤ n ≤ 100) is an integer and is the number of the dice to be dropped. ti and fi (1 ≤ ti, fi ≤ 6) are two integers separated by a space and represent the numbers on the top and the front faces of the i-th die, when it is released, respectively.\n\nThe end of the input is indicated by a line containing a single zero."}
{"name": "101_A. Homework", "description": "Input\n\nThe first input data line contains a string whose length is equal to n (1 ≤ n ≤ 105). The string consists of lowercase Latin letters. The second line contains the number k (0 ≤ k ≤ 105)."}
{"name": "1088_B. Ehab and subtraction", "description": "Input\n\nThe first line contains integers n and k (1 ≤ n,k ≤ 10^5), the length of the array and the number of operations you should perform.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), the elements of the array."}
{"name": "1154_F. Shovels Shop", "description": "Input\n\nThe first line of the input contains three integers n, m and k (1 ≤ n, m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ min(n, 2000)) — the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the cost of the i-th shovel.\n\nThe next m lines contain special offers. The j-th of them is given as a pair of integers (x_i, y_i) (1 ≤ y_i ≤ x_i ≤ n) and means that if Misha buys exactly x_i shovels during some purchase, then he can take y_i most cheapest of them for free."}
{"name": "1176_D. Recover it!", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains 2n integers b_1, b_2, ..., b_{2n} (2 ≤ b_i ≤ 2750131), where b_i is the i-th element of b. 2750131 is the 199999-th prime number."}
{"name": "1195_C. Basketball Exercise", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of students in each row.\n\nThe second line of the input contains n integers h_{1, 1}, h_{1, 2}, …, h_{1, n} (1 ≤ h_{1, i} ≤ 10^9), where h_{1, i} is the height of the i-th student in the first row.\n\nThe third line of the input contains n integers h_{2, 1}, h_{2, 2}, …, h_{2, n} (1 ≤ h_{2, i} ≤ 10^9), where h_{2, i} is the height of the i-th student in the second row."}
{"name": "1234_E. Special Permutations", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n, m ≤ 2 ⋅ 10^5) — the number of elements in each permutation and the number of elements in x.\n\nThe second line of the input contains m integers (m, not n) x_1, x_2, ..., x_m (1 ≤ x_i ≤ n), where x_i is the i-th element of x. Elements of x can repeat and appear in arbitrary order."}
{"name": "1277_C. As Simple as One and Two", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Next, the test cases are given.\n\nEach test case consists of one non-empty string s. Its length does not exceed 1.5⋅10^5. The string s consists only of lowercase Latin letters.\n\nIt is guaranteed that the sum of lengths of all lines for all input data in the test does not exceed 1.5⋅10^6."}
{"name": "1320_D. Reachable Strings", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of string t.\n\nThe second line contains one string t (|t| = n). Each character of t is either 0 or 1.\n\nThe third line contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries.\n\nThen q lines follow, each line represents a query. The i-th line contains three integers l_1, l_2 and len (1 ≤ l_1, l_2 ≤ |t|, 1 ≤ len ≤ |t| - max(l_1, l_2) + 1) for the i-th query."}
{"name": "133_B. Unary", "description": "Input\n\nThe input will consist of a single line p which gives a Brainfuck program. String p will contain between 1 and 100 characters, inclusive. Each character of p will be \"+\", \"-\", \"[\", \"]\", \"<\", \">\", \".\" or \",\"."}
{"name": "1446_C. Xor Tree", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.\n\nThe second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence."}
{"name": "1497_B. M-arrays", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n, m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n and the sum of m over all test cases do not exceed 10^5."}
{"name": "174_C. Range Increments", "description": "Input\n\nThe first input line contains a single integer n (1 ≤ n ≤ 105) — the length of the array a[1... n]. \n\nThe second line contains its integer space-separated elements, a[1], a[2], ..., a[n] (0 ≤ a[i] ≤ 105) after some series of function calls rangeIncrement(l, r). \n\nIt is guaranteed that at least one element of the array is positive. It is guaranteed that the answer contains no more than 105 calls of function rangeIncrement(l, r)."}
{"name": "338_D. GCD Table", "description": "Input\n\nThe first line contains three space-separated integers n, m and k (1 ≤ n, m ≤ 1012; 1 ≤ k ≤ 10000). The second line contains k space-separated integers a1, a2, ..., ak (1 ≤ ai ≤ 1012)."}
{"name": "455_A. Boredom", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) that shows how many numbers are in Alex's sequence. \n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105)."}
{"name": "500_A. New Year Transportation", "description": "Input\n\nThe first line contains two space-separated integers n (3 ≤ n ≤ 3 × 104) and t (2 ≤ t ≤ n) — the number of cells, and the index of the cell which I want to go to.\n\nThe second line contains n - 1 space-separated integers a1, a2, ..., an - 1 (1 ≤ ai ≤ n - i). It is guaranteed, that using the given transportation system, one cannot leave the Line World."}
{"name": "550_E. Brackets in Implications", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100 000) — the number of arguments in a logical expression.\n\nThe second line contains n numbers a1, a2, ..., an (<image>), which means the values of arguments in the expression in the order they occur."}
{"name": "59_D. Team Arrangement", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) which is the number of resulting teams. The second line contains 3n space-separated integers from 1 to 3n which are the results of personal training sessions. It is guaranteed that every student appears in the results exactly once.\n\nThen follow n lines each containing three integers from 1 to 3n — each line describes the members of a given team. The members of one team can be listed in any order, but the teams themselves are listed in the order in which they were created. It is guaranteed that the arrangement is correct, that is that every student is a member of exactly one team and those teams could really be created from the given results using the method described above.\n\nThe last line contains number k (1 ≤ k ≤ 3n) which is the number of a student for who the list of priorities should be found."}
{"name": "66_E. Petya and Post", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers ai — amount of gasoline on the i-th station. The third line contains n integers b1, b2, ..., bn. They are the distances between the 1-st and the 2-nd gas stations, between the 2-nd and the 3-rd ones, ..., between the n-th and the 1-st ones, respectively. The sum of all bi equals to the sum of all ai and is no more than 109. Each of the numbers ai, bi is no less than 1 and no more than 109."}
{"name": "82_D. Two out of Three", "description": "Input\n\nThe first line of the input file contains a single number n (1 ≤ n ≤ 1000), which is the number of people in the sequence. The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 106). The people are numbered starting from the cashier to the end of the queue."}
{"name": "920_C. Swap Adjacent Elements", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 200000) — the number of elements in the array.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 200000) — the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th."}
{"name": "996_D. Suit and Tie", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100), the number of pairs of people.\n\nThe second line contains 2n integers a_1, a_2, ..., a_{2n}. For each i with 1 ≤ i ≤ n, i appears exactly twice. If a_j = a_k = i, that means that the j-th and k-th people in the line form a couple."}
{"name": "p00360 Swapping Characters", "description": "Input\n\nThe input is given in the following format.\n\n\ns\nk\n\n\nThe first line provides a string s. The second line provides the maximum number of swapping operations k (0 ≤ k ≤ 109). The string consists solely of lower-case alphabetical letters and has a length between 1 and 2 × 105."}
{"name": "1066_B. Heaters", "description": "Input\n\nThe first line of the input contains two integers n and r (1 ≤ n, r ≤ 1000) — the number of elements in the array and the value of heaters.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1) — the Vova's house description."}
{"name": "1137_B. Camp Schedule", "description": "Input\n\nThe first line contains string s (1 ⩽ |s| ⩽ 500 000), denoting the current project of the camp's schedule.\n\nThe second line contains string t (1 ⩽ |t| ⩽ 500 000), denoting the optimal schedule according to Gleb.\n\nStrings s and t contain characters '0' and '1' only."}
{"name": "1155_D. Beautiful Array", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 3 ⋅ 10^5, -100 ≤ x ≤ 100) — the length of array a and the integer x respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the array a."}
{"name": "1178_A. Prime Minister", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of parties.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the number of seats the i-th party has."}
{"name": "1254_B2. Send Boxes to Alice (Hard Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of chocolate boxes.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^6) — the number of chocolate pieces in the i-th box.\n\nIt is guaranteed that at least one of a_1, a_2, …, a_n is positive."}
{"name": "1321_C. Remove Adjacent", "description": "Input\n\nThe first line of the input contains one integer |s| (1 ≤ |s| ≤ 100) — the length of s.\n\nThe second line of the input contains one string s consisting of |s| lowercase Latin letters."}
{"name": "1447_A. Add Candies", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first and only line of each test case contains one integer n (2 ≤ n≤ 100)."}
{"name": "1498_B. Box Fitting", "description": "Input\n\nThe first line of input contains one integer t (1 ≤ t ≤ 5 ⋅ 10^3) — the number of test cases. Each test case consists of two lines.\n\nFor each test case:\n\n  * the first line contains two integers n (1 ≤ n ≤ 10^5) and W (1 ≤ W ≤ 10^9);\n  * the second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^6), where w_i is the width of the i-th rectangle. Each w_i is a power of 2;\n  * additionally, max_{i=1}^{n} w_i ≤ W. \n\n\n\nThe sum of n over all test cases does not exceed 10^5."}
{"name": "1520_A. Do Not Be Distracted!", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 1000). Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 50) — the number of days during which Polycarp solved tasks.\n\nThe second line contains a string of length n, consisting of uppercase Latin letters, which is the order in which Polycarp solved the tasks."}
{"name": "1547_F. Array Stabilization (GCD version)", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nEach test case contains two lines. The first line contains an integer n (2 ≤ n ≤ 2 ⋅ 10^5) — length of the sequence a. The second line contains n integers a_0, a_1, ..., a_{n - 1} (1 ≤ a_i ≤ 10^6).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "219_D. Choosing Capital for Treeland", "description": "Input\n\nThe first input line contains integer n (2 ≤ n ≤ 2·105) — the number of cities in Treeland. Next n - 1 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers si, ti (1 ≤ si, ti ≤ n; si ≠ ti) — the numbers of cities, connected by that road. The i-th road is oriented from city si to city ti. You can consider cities in Treeland indexed from 1 to n."}
{"name": "243_A. The Brand New Function", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements of sequence a. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 106) — the elements of sequence a."}
{"name": "551_E. GukiZ and GukiZiana", "description": "Input\n\nThe first line contains two integers n, q (1 ≤ n ≤ 5 * 105, 1 ≤ q ≤ 5 * 104), size of array a, and the number of queries. \n\nThe second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 109), forming an array a. \n\nEach of next q lines contain either four or two numbers, as described in statement:\n\nIf line starts with 1, then the query looks like 1 l r x (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 109), first type query.\n\nIf line starts with 2, then th query looks like 2 y (1 ≤ y ≤ 109), second type query."}
{"name": "5_D. Follow Traffic Rules", "description": "Input\n\nThe first line of the input file contains two integer numbers a and v (1 ≤ a, v ≤ 10000). The second line contains three integer numbers l, d and w (2 ≤ l ≤ 10000; 1 ≤ d < l; 1 ≤ w ≤ 10000)."}
{"name": "622_B. The Time", "description": "Input\n\nThe first line contains the current time in the format hh:mm (0 ≤ hh < 24, 0 ≤ mm < 60). The hours and the minutes are given with two digits (the hours or the minutes less than 10 are given with the leading zeroes).\n\nThe second line contains integer a (0 ≤ a ≤ 104) — the number of the minutes passed."}
{"name": "670_D2. Magic Powder - 2", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109) — the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a1, a2, ..., an (1 ≤ ai ≤ 109), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b1, b2, ..., bn (1 ≤ bi ≤ 109), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has."}
{"name": "737_D. Financiers Game", "description": "Input\n\nThe first line contains single positive integer n (1 ≤ n ≤ 4000) — the number of papers.\n\nThe second line contains n integers a1, a2, ..., an ( - 105 ≤ ai ≤ 105), where ai is the income on the i-th paper from the left."}
{"name": "8_A. Train and Peter", "description": "Input\n\nThe input data contains three lines. The first line contains a non-empty string, whose length does not exceed 105, the string consists of lowercase Latin letters — the flags' colours at the stations on the way from A to B. On the way from B to A the train passes the same stations, but in reverse order. \n\nThe second line contains the sequence, written by Peter during the first period of wakefulness. The third line contains the sequence, written during the second period of wakefulness. Both sequences are non-empty, consist of lowercase Latin letters, and the length of each does not exceed 100 letters. Each of the sequences is written in chronological order."}
{"name": "p00369 Paper Fortune", "description": "Input\n\nThe input is given in the following format.\n\n\nn\n\n\nAn integer n is given. Its number of digits is from 2 to 100,000, and each digit ranges from 1 to 9."}
{"name": "p00723 Organize Your Train part II", "description": "Input\n\nThe entire input looks like the following.\n\n> the number of datasets = m\n>  1st dataset\n>  2nd dataset\n>  ...\n>  m-th dataset\n>\n\nEach dataset represents an arriving train, and is a string of 2 to 72 lowercase letters in an input line."}
{"name": "1005_C. Summarize to the Power of Two", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 120000) — the length of the given sequence.\n\nThe second line contains the sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1029_A. Many Equal Substrings", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 50) — the length of the string t and the number of substrings.\n\nThe second line of the input contains the string t consisting of exactly n lowercase Latin letters."}
{"name": "1071_A. Cram Time", "description": "Input\n\nThe only line of input contains two integers a and b (0 ≤ a, b ≤ 10^{9}) — the number of hours Lesha has today and the number of hours Lesha has tomorrow."}
{"name": "1093_C. Mishka and the Last Exam", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of sequence a. n is always even.\n\nThe second line contains \\frac n 2 integers b_1, b_2, ..., b_{\\frac n 2} (0 ≤ b_i ≤ 10^{18}) — sequence b, where b_i = a_i + a_{n - i + 1}.\n\nIt is guaranteed that there exists at least one correct sequence a, which produces the given sequence b."}
{"name": "1113_C. Sasha and a Bit of Relax", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the size of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i < 2^{20}) — array itself."}
{"name": "1141_F1. Same Sum Blocks (Easy)", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 50) — the length of the given array. The second line contains the sequence of elements a[1], a[2], ..., a[n] (-10^5 ≤ a_i ≤ 10^5)."}
{"name": "1240_E. Wooden Raft", "description": "Input\n\nThe first line contains the only integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the number of logs you have.\n\nThe second line contains n integers a_1, a_2, ..., a_n (2 ≤ a_i ≤ 5 ⋅ 10^5) — the corresponding lengths of the logs.\n\nIt's guaranteed that you can always craft at least 2 × 2 raft."}
{"name": "1367_E. Necklace Assembly", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases in the test. Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 ≤ n, k ≤ 2000).\n\nThe second line of each test case contains the string s containing n lowercase English letters — the beads in the store.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2000."}
{"name": "1477_A. Nezzar and Board", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. \n\nThe first line of each test case contains two integers n,k (2 ≤ n ≤ 2 ⋅ 10^5, -10^{18} ≤ k ≤ 10^{18}).\n\nThe second line of each test case contains n distinct integers x_1,x_2,…,x_n (-10^{18} ≤ x_i ≤ 10^{18}).\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1527_C. Sequence Pair Weight", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "24_B. F1 Champions", "description": "Input\n\nThe first line contain integer t (1 ≤ t ≤ 20), where t is the number of races. After that all races are described one by one. Every race description start with an integer n (1 ≤ n ≤ 50) on a line of itself, where n is the number of clasified drivers in the given race. After that n lines follow with the classification for the race, each containing the name of a driver. The names of drivers are given in order from the first to the last place. The name of the driver consists of lowercase and uppercase English letters and has length at most 50 characters. Comparing of names should be case-sensetive."}
{"name": "391_A. Genetic Engineering", "description": "Input\n\nThe input consists of a single line, containing a string s of length n (1 ≤ n ≤ 100). Each character of s will be from the set {'A', 'T', 'G', 'C'}.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission."}
{"name": "43_B. Letter", "description": "Input\n\nThe first line contains a newspaper heading s1. The second line contains the letter text s2. s1 и s2 are non-empty lines consisting of spaces, uppercase and lowercase Latin letters, whose lengths do not exceed 200 symbols. The uppercase and lowercase letters should be differentiated. Vasya does not cut spaces out of the heading."}
{"name": "533_E. Correcting Mistakes", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100 000) — the length of words S and T.\n\nThe second line contains word S.\n\nThe third line contains word T.\n\nWords S and T consist of lowercase English letters. It is guaranteed that S and T are distinct words."}
{"name": "606_B. Testing Robots", "description": "Input\n\nThe first line of the input contains four integers x, y, x0, y0 (1 ≤ x, y ≤ 500, 1 ≤ x0 ≤ x, 1 ≤ y0 ≤ y) — the sizes of the field and the starting coordinates of the robot. The coordinate axis X is directed downwards and axis Y is directed to the right.\n\nThe second line contains a sequence of commands s, which should be fulfilled by the robot. It has length from 1 to 100 000 characters and only consists of characters 'L', 'R', 'U', 'D'."}
{"name": "652_C. Foe Pairs", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3·105) — the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers pi (1 ≤ pi ≤ n) — the elements of the permutation p.\n\nEach of the next m lines contains two integers (ai, bi) (1 ≤ ai, bi ≤ n, ai ≠ bi) — the i-th foe pair. Note a foe pair can appear multiple times in the given list."}
{"name": "722_C. Destroying Array", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the length of the array.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109). \n\nThe third line contains a permutation of integers from 1 to n — the order used to destroy elements."}
{"name": "811_D. Vladik and Favorite Game", "description": "Input\n\nFirst line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — number of rows and columns respectively.\n\nEach of next n lines contains m characters describing corresponding row of field. Set of characters in field is described above.\n\nGuaranteed that cell with coordinates (1, 1) is normal and there is at least one way from initial cell to finish cell without dangerous cells. \n\nInteraction\n\nYou can press buttons no more than 2·n·m times.\n\nTo press a button you should print \"U\", \"D\", \"L\", \"R\" in new line. It’s necessary to print newline character and flush output. After flushing buffer you should read answer from input data. Answer is the pair of space-separated integers x, y — new position of player. In case, if there is no cell in direction of moving, position will not change. If after any move player lost, in other words player move to dangerous cell, then x and y will be equal to  - 1.\n\nIf after any move player is in finish or dangerous cell, then you should terminate your program.\n\nTo finish output buffer (i. e. for operation flush) right after printing direction and newline you should do next:\n\n  * fflush(stdout) in C++ \n  * System.out.flush() in Java \n  * stdout.flush() in Python \n  * flush(output) in Pascal \n  * read documentation for other languages. \n\n\n\nHacks\n\nTo perform a hack you should use this format:\n    \n    \n      \n    n m swapLR swapUD    \n    a_1    \n    a_2    \n    ...    \n    a_n  \n    \n\nWhere n, m — number of rows and columns in game field. swapLR is equal to 1 in case, when directions \"L’’ and \"R’’ is swapped, and equal to 0 otherwise. swapUD is equal to 1, when directions \"U’’ and \"D’’ is swapped, and equal to 0 otherwise. a1, a2, ..., an — description of corresponding rows of game field.\n\nExample\n\nInput\n\n4 3\n...\n**.\nF*.\n...\n1 1\n1 2\n1 3\n1 3\n2 3\n3 3\n4 3\n4 2\n4 1\n3 1"}
{"name": "837_F. Prefix Sums", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k ≤ 1018). n is the size of array A0.\n\nThe second line contains n integers A00, A01... A0n - 1 — the elements of A0 (0 ≤ A0i ≤ 109). At least two elements of A0 are positive."}
{"name": "883_H. Palindromic Cut", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 4·105) — the length of string s.\n\nThe second line contains a string s of length n consisting of lowercase and uppercase Latin letters and digits."}
{"name": "982_B. Bus of Characters", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of rows in the bus.\n\nThe second line contains the sequence of integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^{9}), where w_i is the width of each of the seats in the i-th row. It is guaranteed that all w_i are distinct.\n\nThe third line contains a string of length 2n, consisting of digits '0' and '1' — the description of the order the passengers enter the bus. If the j-th character is '0', then the passenger that enters the bus on the j-th stop is an introvert. If the j-th character is '1', the the passenger that enters the bus on the j-th stop is an extrovert. It is guaranteed that the number of extroverts equals the number of introverts (i. e. both numbers equal n), and for each extrovert there always is a suitable row."}
{"name": "p00111 Doctor's Memorable Codes", "description": "Input\n\nGiven multiple datasets. For each dataset, one string (a string of 200 characters or less consisting of the characters contained in the table) is given on one line. Please process until the end of the input. The number of datasets does not exceed 200."}
{"name": "1157_G. Inverse of Rows and Columns", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 200) — the number of rows and the number of columns in the matrix.\n\nThe next n lines contain m integers each. The j-th element in the i-th line is a_{i, j} (0 ≤ a_{i, j} ≤ 1) — the element of a at position (i, j)."}
{"name": "1215_D. Ticket Game", "description": "Input\n\nThe first line contains one even integer n (2 ≤ n ≤ 2 ⋅ 10^{5}) — the number of digits in the ticket.\n\nThe second line contains a string of n digits and \"?\" characters — the ticket which Monocarp and Bicarp have found. If the i-th character is \"?\", then the i-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even."}
{"name": "1300_A. Non-zero", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 10^3). The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 100) — the size of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-100 ≤ a_i ≤ 100) — elements of the array ."}
{"name": "1324_B. Yet Another Palindrome Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nNext 2t lines describe test cases. The first line of the test case contains one integer n (3 ≤ n ≤ 5000) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5000 (∑ n ≤ 5000)."}
{"name": "1365_B. Trouble Sort", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 500) — the size of the arrays.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^5) — the value of the i-th element.\n\nThe third line containts n integers b_i (b_i ∈ \\{0, 1\\}) — the type of the i-th element."}
{"name": "1385_B. Restore the Permutation by Merger", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 400) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the length of permutation. The second line of the test case contains 2n integers a_1, a_2, ..., a_{2n} (1 ≤ a_i ≤ n), where a_i is the i-th element of a. It is guaranteed that the array a represents the result of merging of some permutation p with the same permutation p."}
{"name": "1427_F. Boring Card Game", "description": "Input\n\nThe first line of the input contains one integer n (1≤ n ≤ 200).\n\nThe second line of the input contains 3n numbers x_1, x_2,…, x_{3n} (1 ≤ x_1 < x_2 <… < x_{3n} ≤ 6n) – the cards in Federico's pocket at the end of the game. \n\nIt is guaranteed that for each test there is at least one sequence of moves that produces such set of cards in Federico's pocket."}
{"name": "1474_D. Cleaning", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains the single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of piles.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of stones in each pile.\n\nIt is guaranteed that the total sum of n over all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "245_H. Queries for Number of Palindromes", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 5000). The second line contains a single integer q (1 ≤ q ≤ 106) — the number of queries. Next q lines contain the queries. The i-th of these lines contains two space-separated integers li, ri (1 ≤ li ≤ ri ≤ |s|) — the description of the i-th query.\n\nIt is guaranteed that the given string consists only of lowercase English letters."}
{"name": "294_C. Shaass and Lights", "description": "Input\n\nThe first line of the input contains two integers n and m where n is the number of lights in the sequence and m is the number of lights which are initially switched on, (1 ≤ n ≤ 1000, 1 ≤ m ≤ n). The second line contains m distinct integers, each between 1 to n inclusive, denoting the indices of lights which are initially switched on."}
{"name": "365_C. Matrix", "description": "Input\n\nThe first line contains integer a (0 ≤ a ≤ 109), the second line contains a string of decimal integers s (1 ≤ |s| ≤ 4000)."}
{"name": "555_B. Case of Fugitive", "description": "Input\n\nThe first line contains integers n (2 ≤ n ≤ 2·105) and m (1 ≤ m ≤ 2·105) — the number of islands and bridges.\n\nNext n lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ 1018) — the coordinates of the island endpoints.\n\nThe last line contains m integer numbers a1, a2, ..., am (1 ≤ ai ≤ 1018) — the lengths of the bridges that Andrewid got."}
{"name": "698_F. Coprime Permutation", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 1 000 000).\n\nThe second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ n) where pi = 0 means a gap to fill, and pi ≥ 1 means a fixed number.\n\nIt's guaranteed that if i ≠ j and pi, pj ≥ 1 then pi ≠ pj."}
{"name": "764_C. Timofey and a tree", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 105) — the number of vertices in the tree.\n\nEach of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting there is an edge between vertices u and v. It is guaranteed that the given graph is a tree.\n\nThe next line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 105), denoting the colors of the vertices."}
{"name": "809_B. Glad to see you!", "description": "Input\n\nThere are two numbers n and k (2 ≤ k ≤ n ≤ 105) in the single line of input denoting the number of dishes in the menu and the number of dishes Noora ordered."}
{"name": "854_C. Planning", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 300 000), here n is the number of flights, and k is the number of minutes in the beginning of the day that the flights did not depart.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 107), here ci is the cost of delaying the i-th flight for one minute."}
{"name": "902_C. Hashing Trees", "description": "Input\n\nThe first line contains a single integer h (2 ≤ h ≤ 105) — the height of the tree.\n\nThe second line contains h + 1 integers — the sequence a0, a1, ..., ah (1 ≤ ai ≤ 2·105). The sum of all ai does not exceed 2·105. It is guaranteed that there is at least one tree matching this sequence."}
{"name": "p00741 How Many Islands?", "description": "Input\n\nThe input consists of a series of datasets, each being in the following format.\n\n> w h\n>  c1,1 c1,2 ... c1,w\n>  c2,1 c2,2 ... c2,w\n>  ...\n>  ch,1 ch,2 ... ch,w\n>\n\nw and h are positive integers no more than 50 that represent the width and the height of the given map, respectively. In other words, the map consists of w×h squares of the same size. w and h are separated by a single space.\n\nci, j is either 0 or 1 and delimited by a single space. If ci, j = 0, the square that is the i-th from the left and j-th from the top on the map represents a sea area. Otherwise, that is, if ci, j = 1, it represents a land area.\n\nThe end of the input is indicated by a line containing two zeros separated by a single space."}
{"name": "1084_E. The Fair Nut and Strings", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ k ≤ 10^9).\n\nThe second line contains a string s (|s| = n) — the string consisting of letters \"a\" and \"b.\n\nThe third line contains a string t (|t| = n) — the string consisting of letters \"a\" and \"b.\n\nIt is guaranteed that string s is lexicographically not bigger than t."}
{"name": "1131_G. Most Dangerous Shark", "description": "Input\n\nIn order to reduce input size, the heights and costs of the dominoes are described with blocks.\n\nThe first line contains two integers n and m (1 ≤ n ≤ 250 000, 1 ≤ m ≤ 10^7) — the number of the blocks and the total number of the dominoes Semyon must drop.\n\nThen descriptions of n blocks follow. Description of every block consists of three lines.\n\nThe first line of block's description contains a single integer k_i (1 ≤ k_i ≤ 250 000, ∑_{i = 1}^{n}{k_i} ≤ 250 000) — the number of dominoes in the block.\n\nThe second line of block's description contains k_i integers a_j (1 ≤ a_j ≤ m) — the heights of the dominoes in the blocks.\n\nThe third line contains k_i integers c_j (1 ≤ c_j ≤ 100 000) — the costs of the dominoes in the block.\n\nThen the domino sequence is described (from left to right).\n\nThe first line of this description contains a single integer q (n ≤ q ≤ 250 000) — the number of blocks in the sequence of domino sequence.\n\nEach of the following q lines contains integers id_i, mul_i (1 ≤ id_i ≤ n, 1 ≤ mul_i ≤ 100 000), denoting that the next k_{id_i} dominoes are dominoes of the block id_i, with their cost multiplied by mul_i.\n\nIt's guaranteed, that ∑_{i = 1}^{q}{k_{id_i}} = m, and that's every block is used in the sequence at least once."}
{"name": "1174_A. Ehab Fails to Be Thanos", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 1000), where 2n is the number of elements in the array a.\n\nThe second line contains 2n space-separated integers a_1, a_2, …, a_{2n} (1 ≤ a_i ≤ 10^6) — the elements of the array a."}
{"name": "1294_F. Three Paths on a Tree", "description": "Input\n\nThe first line contains one integer number n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree. \n\nNext n - 1 lines describe the edges of the tree in form a_i, b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i). It is guaranteed that given graph is a tree."}
{"name": "1443_C. The Delivery Dilemma", "description": "Input\n\nThe first line contains one positive integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of dishes that Petya wants to order.\n\nThe second line of each test case contains n integers a_1 … a_n (1 ≤ a_i ≤ 10^9) — the time of courier delivery of the dish with the number i.\n\nThe third line of each test case contains n integers b_1 … b_n (1 ≤ b_i ≤ 10^9) — the time during which Petya will pick up the dish with the number i.\n\nThe sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1468_L. Prime Divisors Selection", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000). \n\nThe second line contains n pairwise distinct integers x_1, x_2, ..., x_n (2 ≤ x_i ≤ 10^{18})."}
{"name": "1516_C. Baby Ehab Partitions Again", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 100) — the length of the array a.\n\nThe second line contains n integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 2000) — the elements of the array a."}
{"name": "288_A. Polo the Penguin and Strings", "description": "Input\n\nA single line contains two positive integers n and k (1 ≤ n ≤ 106, 1 ≤ k ≤ 26) — the string's length and the number of distinct letters."}
{"name": "358_D. Dima and Hares", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 3000) — the number of hares. Then three lines follow, each line has n integers. The first line contains integers a1 a2 ... an. The second line contains b1, b2, ..., bn. The third line contains c1, c2, ..., cn. The following limits are fulfilled: 0 ≤ ai, bi, ci ≤ 105.\n\nNumber ai in the first line shows the joy that hare number i gets if his adjacent hares are both hungry. Number bi in the second line shows the joy that hare number i radiates if he has exactly one full adjacent hare. Number сi in the third line shows the joy that hare number i radiates if both his adjacent hares are full."}
{"name": "402_B. Trees in a Row", "description": "Input\n\nThe first line contains two space-separated integers: n, k (1 ≤ n, k ≤ 1000). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the heights of the trees in the row."}
{"name": "452_A. Eevee", "description": "Input\n\nFirst line contains an integer n (6 ≤ n ≤ 8) – the length of the string.\n\nNext line contains a string consisting of n characters, each of which is either a lower case english letter (indicating a known letter) or a dot character (indicating an empty cell in the crossword)."}
{"name": "474_E. Pillars", "description": "Input\n\nThe first line contains two integers n and d (1 ≤ n ≤ 105, 0 ≤ d ≤ 109).\n\nThe second line contains n numbers h1, h2, ..., hn (1 ≤ hi ≤ 1015)."}
{"name": "549_B. Looksery Party", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees of company Looksery.\n\nNext n lines contain the description of the contact lists of the employees. The i-th of these lines contains a string of length n, consisting of digits zero and one, specifying the contact list of the i-th employee. If the j-th character of the i-th string equals 1, then the j-th employee is in the i-th employee's contact list, otherwise he isn't. It is guaranteed that the i-th character of the i-th line is always equal to 1.\n\nThe last line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ n), where ai represents the number of messages that the i-th employee should get according to Igor."}
{"name": "690_A3. Collective Mindsets (hard)", "description": "Input\n\nThe first line of input contains a single integer T (1 ≤ T ≤ 50000): the number of scenarios for which you have to make a guess.\n\nThe T scenarios follow, described on two lines each: \n\n  * The first line holds two integers, N (2 ≤ N ≤ 6), the number of attendees, and R (1 ≤ R ≤ N), the rank of the zombie who has to make the guess. \n  * The second line lists N - 1 integers: the numbers on the foreheads of all other attendees, listed in increasing order of the attendees' rank. (Every zombie knows the rank of every other zombie.)"}
{"name": "733_E. Sleep in Class", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 106) — the number of steps on the stairs.\n\nThe second line contains a string s with the length n — it denotes the initial direction of pointers on the stairs. The i-th character of string s denotes the direction of the pointer above i-th step, and is either 'U' (it means that this pointer is directed up), or 'D' (it means this pointed is directed down).\n\nThe pointers are given in order from bottom to top."}
{"name": "779_C. Dishonest Sellers", "description": "Input\n\nIn the first line there are two positive integer numbers n and k (1 ≤ n ≤ 2·105, 0 ≤ k ≤ n) — total number of items to buy and minimal number of items Igor wants to by right now.\n\nThe second line contains sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 104) — prices of items during discounts (i.e. right now).\n\nThe third line contains sequence of integers b1, b2, ..., bn (1 ≤ bi ≤ 104) — prices of items after discounts (i.e. after a week)."}
{"name": "918_C. The Monster", "description": "Input\n\nThe first and only line of input contains string s, consisting only of characters '(', ')' and '?' (2 ≤ |s| ≤ 5000)."}
{"name": "940_C. Phone Numbers", "description": "Input\n\nThe first line of input contains two space separated integers n and k (1 ≤ n, k ≤ 100 000) — the length of s and the required length of t.\n\nThe second line of input contains the string s consisting of n lowercase English letters."}
{"name": "p00342 Maximization of Rational Expression", "description": "Input\n\nThe input is given in the following format.\n\n\nN\na1 a2 ... aN\n\n\nThe number N (4 ≤ N ≤ 1000) of natural numbers is given in the first line. The value ai (1 ≤ ai ≤ 108) of each natural number is given in the second line. However, the same natural number does not appear more than once (ai ≠ aj for i ≠ j)."}
{"name": "p00841 Atomic Car Race", "description": "Input\n\nThe input consists of multiple datasets each corresponding to a race situation. The format of a dataset is as follows.\n\n\nn\na1 a2 . . . an\nb\nr v e f\n\n\nThe meaning of each of the input items is given in the problem statement. If an input line contains two or more input items, they are separated by a space.\n\nn is a positive integer not exceeding 100. Each of a1, a2, ... , and an is a positive integer satisfying 0 < a1 < a2 < . . . < an ≤ 10000. b is a positive decimal fraction not exceeding 100.0. r is a nonnegative integer satisfying 0 ≤ r ≤ an - 1. Each of v, e and f is a positive decimal fraction. You can assume that v - e × (an - 1 - r) ≥ 0.01 and v - f × r ≥ 0.01.\n\nThe end of the input is indicated by a line with a single zero."}
{"name": "p00973 Fair Chocolate-Cutting", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$n$\n$x_1$ $y_1$\n...\n$x_n$ $y_n$\n\n\nThe first line has an integer $n$, which is the number of vertices of the given polygon. Here, $n$ is between 3 and 5000, inclusive. Each of the following $n$ lines has two integers $x_i$ and $y_i$, which give the coordinates ($x_i, y_i$) of the $i$-th vertex of the polygon, in counterclockwise order. Both $x_i$ and $y_i$ are between 0 and 100 000, inclusive.\n\nThe polygon is guaranteed to be simple and convex. In other words, no two edges of the polygon intersect each other and interior angles at all of its vertices are less than $180^\\circ$."}
{"name": "p01105 Boolean Expression Compressor", "description": "Input\n\nThe input consists of multiple datasets. A dataset consists of one line, containing an expression conforming to the grammar described above. The length of the expression is less than or equal to 16 characters.\n\nThe end of the input is indicated by a line containing one `.` (period). The number of datasets in the input is at most 200."}
{"name": "p01858 Sendame", "description": "Input\n\n3\ntameru\ntameru\ntameru\ntameru\nkougekida\ntameru"}
{"name": "1055_C. Lucky Days", "description": "Input\n\nThe first line contains three integers l_a, r_a, t_a (0 ≤ l_a ≤ r_a ≤ t_a - 1, 2 ≤ t_a ≤ 10^9) and describes Alice's lucky days.\n\nThe second line contains three integers l_b, r_b, t_b (0 ≤ l_b ≤ r_b ≤ t_b - 1, 2 ≤ t_b ≤ 10^9) and describes Bob's lucky days.\n\nIt is guaranteed that both Alice and Bob have some unlucky days."}
{"name": "1077_D. Cutting Out", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of elements in s and the desired number of elements in t, respectively.\n\nThe second line of the input contains exactly n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 2 ⋅ 10^5)."}
{"name": "1119_D. Frets On Fire", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100 000) — the number of strings.\n\nThe second line contains n integers s_1, s_2, …, s_n (0 ≤ s_i ≤ 10^{18}) — the tuning of the ukulele.\n\nThe third line contains an integer q (1 ≤ q ≤ 100 000) — the number of questions.\n\nThe k-th among the following q lines contains two integers l_k，r_k (0 ≤ l_k ≤ r_k ≤ 10^{18}) — a question from the fleas."}
{"name": "1167_A. Telephone Number", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 100) — the length of string s.\n\nThe second line of each test case contains the string s (|s| = n) consisting of digits."}
{"name": "1185_D. Extra Element", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2⋅10^5) — length of the sequence b. The second line contains n integers b_1, b_2, ..., b_n (-10^9 ≤ b_i ≤ 10^9) — elements of the sequence b."}
{"name": "1287_C. Garland", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of light bulbs on the garland.\n\nThe second line contains n integers p_1,\\ p_2,\\ …,\\ p_n (0 ≤ p_i ≤ n) — the number on the i-th bulb, or 0 if it was removed."}
{"name": "1330_C. Dreamoon Likes Coloring", "description": "Input\n\nThe first line contains two integers n,m (1 ≤ m ≤ n ≤ 100 000).\n\nThe second line contains m integers l_1, l_2, …, l_m (1 ≤ l_i ≤ n)."}
{"name": "1350_C. Orac and LCM", "description": "Input\n\nThe first line contains one integer n\\ (2≤ n≤ 100 000).\n\nThe second line contains n integers, a_1, a_2, …, a_n (1 ≤ a_i ≤ 200 000)."}
{"name": "1370_F1. The Hidden Pair (Easy Version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Please note, how the interaction process is organized.\n\nThe first line of each test case consists of a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree.\n\nThe next n - 1 lines consist of two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nInteraction\n\nTo ask a query print a single line: \n\n  * In the beginning print \"? c \" (without quotes) where c (1 ≤ c ≤ n) denotes the number of nodes being queried, followed by c distinct integers in the range [1, n] — the indices of nodes from the list. \n\n\n\nFor each query, you will receive two integers x, d — the node (among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = -1. In this case, you should terminate the program immediately.\n\nWhen you have guessed the hidden nodes, print a single line \"! \" (without quotes), followed by two integers in the range [1, n] — the hidden nodes. You can output the hidden nodes in any order.\n\nAfter this, you should read a string. If you guess the nodes correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.\n\nGuessing the hidden nodes does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The hidden nodes do not change with queries.\n\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the hidden nodes.\n\nYou need to solve each test case before receiving the input for the next test case.\n\nThe limit of 14 queries applies to each test case and not to the entire input.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see the documentation for other languages.\n\n\n\nHacks\n\nTo hack the solution, use the following test format:\n\nThe first line should contain a single integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case should contain a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. The second line should contain two distinct integers in the range [1, n] — the hidden nodes. The next n - 1 lines should contain two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nExample\n\nInput\n\n\n1\n3\n1 2\n1 3\n\n1 1\n\n2 3\n\n3 1\n\n3 1\n\nCorrect"}
{"name": "1393_B. Applejack and Storages", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5): the initial amount of planks at the company's storehouse, the second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^5): the lengths of the planks.\n\nThe third line contains a single integer q (1 ≤ q ≤ 10^5): the number of events in the company. Each of the next q lines contains a description of the events in a given format: the type of the event (a symbol + or -) is given first, then goes the integer x (1 ≤ x ≤ 10^5)."}
{"name": "1434_E. A Convex Game", "description": "Input\n\nThe first line contains the only integer n (1 ≤ n ≤ 1000) standing for the number of games Shikamaru and Asuma play at once. Next lines describe the games.\n\nEach description starts from a line with the only number m (m≥ 1) denoting the length of the number list. The second line contains the increasing space-separated sequence v_1, v_2, ..., v_m from the game (1 ≤ v_{1} < v_{2} < ... < v_{m} ≤ 10^{5}).\n\nThe total length of all sequences doesn't exceed 10^5."}
{"name": "1485_E. Move and Swap", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line of each test case contains n-1 integers v_2, v_3, ..., v_n (1 ≤ v_i ≤ n, v_i ≠ i) — the i-th of them indicates that there is an edge between vertices i and v_i. It is guaranteed, that these edges form a tree.\n\nThe third line of each test case contains n-1 integers a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the numbers written on the vertices.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1536_A. Omkar and Bad Story", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 50), the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 100) — the length of the array a.\n\nThe second line of each test case contains n distinct integers a_1, a_2, ⋅⋅⋅, a_n (-100 ≤ a_i ≤ 100) — the elements of the array a."}
{"name": "27_A. Next Test", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3000) — the amount of previously added tests. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 3000) — indexes of these tests."}
{"name": "630_N. Forecast", "description": "Input\n\nThe only line of the input contains three integers a, b, c ( - 1000 ≤ a, b, c ≤ 1000) — the coefficients of ax2 + bx + c = 0 equation."}
{"name": "659_F. Polycarp and Hay", "description": "Input\n\nThe first line of the input contains three integers n, m (1 ≤ n, m ≤ 1000) and k (1 ≤ k ≤ 1018) — the number of rows and columns of the rectangular table where heaps of hay are lain and the required total number cubic meters of hay after the reorganization. \n\nThen n lines follow, each containing m positive integers ai, j (1 ≤ ai, j ≤ 109), where ai, j is equal to the number of cubic meters of hay making the hay stack on the i-th row and j-th column of the table."}
{"name": "682_C. Alyona and the Tree", "description": "Input\n\nIn the first line of the input integer n (1 ≤ n ≤ 105) is given — the number of vertices in the tree.\n\nIn the second line the sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 109) is given, where ai is the number written on vertex i.\n\nThe next n - 1 lines describe tree edges: ith of them consists of two integers pi and ci (1 ≤ pi ≤ n,  - 109 ≤ ci ≤ 109), meaning that there is an edge connecting vertices i + 1 and pi with number ci written on it."}
{"name": "705_B. Spider Man", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of tests Peter is about to make.\n\nThe second line contains n space separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), i-th of them stands for the number of vertices in the cycle added before the i-th test."}
{"name": "727_E. Games on a CD", "description": "Input\n\nThe first line of the input contains two positive integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105) — the amount of games Tolya burned to the CD, and the length of each of the names.\n\nThe second line of the input contains one string consisting of lowercase English letters — the string Tolya wrote on the CD, split in arbitrary place. The length of the string is n·k. It is guaranteed that the length is not greater than 106.\n\nThe third line of the input contains one positive integer g (n ≤ g ≤ 105) — the amount of popular games that could be written on the CD. It is guaranteed that the total length of names of all popular games is not greater than 2·106.\n\nEach of the next g lines contains a single string — the name of some popular game. Each name consists of lowercase English letters and has length k. It is guaranteed that the names are distinct."}
{"name": "748_F. Santa Clauses and a Soccer Championship", "description": "Input\n\nThe first line of input contains two integers n and k (2 ≤ n ≤ 2·105, 2 ≤ 2k ≤ n) — the number of cities in Treeland and the number of pairs of teams, respectively.\n\nThe following n - 1 lines describe roads in Treeland: each of these lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) which mean that there is a road between cities a and b. It's guaranteed that there is a path between any two cities.\n\nThe last line contains 2k distinct integers c1, c2, ..., c2k (1 ≤ ci ≤ n), where ci is the hometown of the i-th team. All these numbers are distinct."}
{"name": "817_A. Treasure Hunt", "description": "Input\n\nThe first line contains four integer numbers x1, y1, x2, y2 ( - 105 ≤ x1, y1, x2, y2 ≤ 105) — positions of Captain Bill the Hummingbird and treasure respectively.\n\nThe second line contains two integer numbers x, y (1 ≤ x, y ≤ 105) — values on the potion bottle."}
{"name": "888_E. Maximum Subsequence", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 35, 1 ≤ m ≤ 109).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "933_A. A Twisty Movement", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2000), denoting the length of the original sequence.\n\nThe second line contains n space-separated integers, describing the original sequence a1, a2, ..., an (1 ≤ ai ≤ 2, i = 1, 2, ..., n)."}
{"name": "p01497 Bubble Puzzle", "description": "Input\n\nThe input consists of 4 lines, each contains 4 nonnegative integers smaller than 5. Each integer describes the initial states of bubbles on grid squares. 0 indicates that the corresponding square is empty."}
{"name": "1015_D. Walking Between Houses", "description": "Input\n\nThe first line of the input contains three integers n, k, s (2 ≤ n ≤ 10^9, 1 ≤ k ≤ 2 ⋅ 10^5, 1 ≤ s ≤ 10^{18}) — the number of houses, the number of moves and the total distance you want to walk."}
{"name": "1102_E. Monotonic Renumeration", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1151_A. Maxim and Biology", "description": "Input\n\nThe first line contains a single integer n (4 ≤ n ≤ 50) — the length of the string s.\n\nThe second line contains the string s, consisting of exactly n uppercase letters of the Latin alphabet."}
{"name": "1172_F. Nauuo and Bug", "description": "Input\n\nThe first line contains three integers n, m, p (1 ≤ n ≤ 10^6, 1 ≤ m ≤ 2 ⋅ 10^5, 1 ≤ p ≤ 10^9) — the length of the given array, the number of queries and the modulus. Note that the modulus is used only in the ModAdd function.\n\nThe second line contains n integers a_1,a_2,…,a_n (-10^9≤ a_i≤10^9) — the given array.\n\nIn the following m lines, each line contains two integers l, r (1≤ l≤ r≤ n) — you have to calculate the result of Sum(a,l,r,p)."}
{"name": "1190_C. Tokitsukaze and Duel", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\n\nThe second line contains a single string of length n that only consists of 0 and 1, representing the situation of these n cards, where the color side of the i-th card faces up if the i-th character is 1, or otherwise, it faces down and the i-th character is 0."}
{"name": "1228_F. One Node is Gone", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 17).\n\nThe i-th of the next 2^{n} - 3 lines contains two integers a_{i} and b_{i} (1 ≤ a_{i} < b_{i} ≤ 2^{n} - 2) — meaning there is an edge between a_{i} and b_{i}. It is guaranteed that the given edges form a tree."}
{"name": "1293_D. Aroma's Search", "description": "Input\n\nThe first line contains integers x_0, y_0, a_x, a_y, b_x, b_y (1 ≤ x_0, y_0 ≤ 10^{16}, 2 ≤ a_x, a_y ≤ 100, 0 ≤ b_x, b_y ≤ 10^{16}), which define the coordinates of the data nodes.\n\nThe second line contains integers x_s, y_s, t (1 ≤ x_s, y_s, t ≤ 10^{16}) – the initial Aroma's coordinates and the amount of time available."}
{"name": "1313_C2. Skyscrapers (hard version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 500 000) — the number of plots.\n\nThe second line contains the integers m_1, m_2, …, m_n (1 ≤ m_i ≤ 10^9) — the limit on the number of floors for every possible number of floors for a skyscraper on each plot."}
{"name": "1358_D. The Best Vacation", "description": "Input\n\nThe first line of input contains two integers n and x (1 ≤ n ≤ 2 ⋅ 10^5) — the number of months in the year and the number of days you can spend with your friend.\n\nThe second line contains n integers d_1, d_2, …, d_n, d_i is the number of days in the i-th month (1 ≤ d_i ≤ 10^6).\n\nIt is guaranteed that 1 ≤ x ≤ d_1 + d_2 + … + d_n."}
{"name": "1442_A. Extreme Subtraction", "description": "Input\n\nThe first line contains one positive integer t (1 ≤ t ≤ 30000) — the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 30000) — the number of elements in the array.\n\nThe second line of each test case contains n integers a_1 … a_n (1 ≤ a_i ≤ 10^6).\n\nThe sum of n over all test cases does not exceed 30000."}
{"name": "1492_B. Card Deck", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (1 ≤ n ≤ 10^5) — the size of deck you have.\n\nThe second line contains n integers p_1, p_2,..., p_n (1 ≤ p_i ≤ n; p_i ≠ p_j if i ≠ j) — values of card in the deck from bottom to top.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1515_C. Phoenix and Towers", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains three integers n, m, and x (1 ≤ m ≤ n ≤ 10^5; 1 ≤ x ≤ 10^4) — the number of blocks, the number of towers to build, and the maximum acceptable height difference of any two towers, respectively. \n\nThe second line of each test case contains n space-separated integers (1 ≤ h_i ≤ x) — the heights of the blocks. \n\nIt is guaranteed that the sum of n over all the test cases will not exceed 10^5."}
{"name": "237_E. Build String", "description": "Input\n\nThe first line of the input contains string t — the string that you need to build.\n\nThe second line contains a single integer n (1 ≤ n ≤ 100) — the number of strings to which you are allowed to apply the described operation. Each of the next n lines contains a string and an integer. The i-th line contains space-separated string si and integer ai (0 ≤ ai ≤ 100). Number ai represents the maximum number of characters that can be deleted from string si.\n\nAll strings in the input only consist of lowercase English letters. All strings are non-empty. The lengths of all strings do not exceed 100 characters."}
{"name": "262_C. Maxim and Discounts", "description": "Input\n\nThe first line contains integer m (1 ≤ m ≤ 105) — the number of discount types. The second line contains m integers: q1, q2, ..., qm (1 ≤ qi ≤ 105). \n\nThe third line contains integer n (1 ≤ n ≤ 105) — the number of items Maxim needs. The fourth line contains n integers: a1, a2, ..., an (1 ≤ ai ≤ 104) — the items' prices.\n\nThe numbers in the lines are separated by single spaces."}
{"name": "357_A. Group of Students", "description": "Input\n\nThe first line contains integer m (2 ≤ m ≤ 100). The second line contains m integers c1, c2, ..., cm, separated by single spaces (0 ≤ ci ≤ 100). The third line contains two space-separated integers x and y (1 ≤ x ≤ y ≤ 10000). At least one ci is greater than 0."}
{"name": "574_A. Bear and Elections", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 100) - number of candidates.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - number of votes for each candidate. Limak is candidate number 1.\n\nNote that after bribing number of votes for some candidate might be zero or might be greater than 1000."}
{"name": "711_C. Coloring Trees", "description": "Input\n\nThe first line contains three integers, n, m and k (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of trees, number of colors and beauty of the resulting coloring respectively.\n\nThe second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ m), the initial colors of the trees. ci equals to 0 if the tree number i is uncolored, otherwise the i-th tree has color ci.\n\nThen n lines follow. Each of them contains m integers. The j-th number on the i-th of them line denotes pi, j (1 ≤ pi, j ≤ 109) — the amount of litres the friends need to color i-th tree with color j. pi, j's are specified even for the initially colored trees, but such trees still can't be colored."}
{"name": "802_C. Heidi and Library (hard)", "description": "Input\n\nThe first line of input will contain two integers n and k (<image>). The second line will contain n integers a1, a2, ..., an (1 ≤ ai ≤ n) – the sequence of book requests. The third line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 106) – the costs of the books."}
{"name": "822_E. Liar", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 105) — length of sausage bought by Leha, i.e. the length of the string s.\n\nThe second line contains string s of the length n consisting of lowercase English letters.\n\nThe third line contains single integer m (1 ≤ m ≤ n) — length of sausage bought by Noora, i.e. the length of the string t.\n\nThe fourth line contains string t of the length m consisting of lowercase English letters.\n\nThe fifth line contains single integer x (1 ≤ x ≤ 30) — the maximum number of pieces of sausage that Leha can glue so that Noora doesn’t notice anything."}
{"name": "895_D. String Mark", "description": "Input\n\nFirst line contains string a, second line contains string b. Strings a, b consist of lowercase English letters. Their lengths are equal and don't exceed 106.\n\nIt is guaranteed that a is lexicographically smaller than b."}
{"name": "916_E. Jamie and Tree", "description": "Input\n\nThe first line of input contains two space-separated integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of vertices in the tree and the number of queries to process respectively.\n\nThe second line contains n space-separated integers a1, a2, ..., an ( - 108 ≤ ai ≤ 108) — initial values of the vertices.\n\nNext n - 1 lines contains two space-separated integers ui, vi (1 ≤ ui, vi ≤ n) describing edge between vertices ui and vi in the tree.\n\nThe following q lines describe the queries.\n\nEach query has one of following formats depending on its type:\n\n1 v (1 ≤ v ≤ n) for queries of the first type.\n\n2 u v x (1 ≤ u, v ≤ n, - 108 ≤ x ≤ 108) for queries of the second type.\n\n3 v (1 ≤ v ≤ n) for queries of the third type.\n\nAll numbers in queries' descriptions are integers.\n\nThe queries must be carried out in the given order. It is guaranteed that the tree is valid."}
{"name": "939_F. Cutlet", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 100) — the number of seconds the cutlet should be cooked on each side and number of periods of time in which Arkady can flip it.\n\nThe next k lines contain descriptions of these intervals. Each line contains two integers li and ri (0 ≤ li ≤ ri ≤ 2·n), meaning that Arkady can flip the cutlet in any moment starting from li seconds after the beginning of cooking and finishing at ri seconds after beginning of cooking. In particular, if li = ri then Arkady can flip the cutlet only in the moment li = ri. It's guaranteed that li > ri - 1 for all 2 ≤ i ≤ k."}
{"name": "p00833 Color the Map", "description": "Input\n\nThe input consists of multiple map data. Each map data starts with a line containing the total number of territories n, followed by the data for those territories. n is a positive integer not more than 100. The data for a territory with m vertices has the following format:\n\n\nString\nx1 y1\nx2 y2\n...\nxm ym\n-1\n\n\n“String” (a sequence of alphanumerical characters) gives the name of the country it belongs to. A country name has at least one character and never has more than twenty. When a country has multiple territories, its name appears in each of them.\n\nRemaining lines represent the vertices of the territory. A vertex data line has a pair of nonneg- ative integers which represent the x- and y-coordinates of a vertex. x- and y-coordinates are separated by a single space, and y-coordinate is immediately followed by a newline. Edges of the territory are obtained by connecting vertices given in two adjacent vertex data lines, and byconnecting vertices given in the last and the first vertex data lines. None of x- and y-coordinates exceeds 1000. Finally, -1 in a line marks the end of vertex data lines. The number of vertices m does not exceed 100.\n\nYou may assume that the contours of polygons are simple, i.e. they do not cross nor touch themselves. No two polygons share a region of non-zero area. The number of countries in a map does not exceed 10.\n\nThe last map data is followed by a line containing only a zero, marking the end of the input data."}
{"name": "p01849 The Most Powerful Bed", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> N M\n> s1 s2 ... sN\n> d1 d2 ... dM\n\nThe first line of the dataset is given an integer representing the number of futons N and the number of days M for which the temperature is predicted, separated by spaces. On the second line, N integers s1, s2, ..., sN are given separated by spaces, and si represents the warmth supply capacity of the i-th futon. On the third line, M integers d1, d2, ..., dM are given separated by spaces, and dj represents the warmth demand on day j. These integers satisfy 1 ≤ N ≤ 15, 1 ≤ M ≤ 100, 1 ≤ si, dj ≤ 1,000,000.\n\nThe end of the input is represented by a dataset of N = M = 0. Do not output for this dataset."}
{"name": "1017_H. The Films", "description": "Input\n\nThe first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 10^5, n+q≤ 10^5) — the number of films on the shelf initially, the number of endings, and the number of months.\n\nThe second line contains n integers e_1, e_2, …, e_n (1≤ e_i≤ m) — the ending of the i-th film on the shelf.\n\nEach of the next q lines contains three integers l_i, r_i, and k_i (1 ≤ l_i ≤ r_i ≤ n, 0 ≤ k_i ≤ 10^5) — the i-th query.\n\nIt is guaranteed that there will be only no more than 100 different k values."}
{"name": "1064_D. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles."}
{"name": "1106_B. Lunar New Year and Food Ordering", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5), representing the number of different kinds of food and the number of customers, respectively.\n\nThe second line contains n positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7), where a_i denotes the initial remain of the i-th kind of dishes.\n\nThe third line contains n positive integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 10^6), where c_i denotes the cost of one dish of the i-th kind.\n\nThe following m lines describe the orders of the m customers respectively. The j-th line contains two positive integers t_j and d_j (1 ≤ t_j ≤ n, 1 ≤ d_j ≤ 10^7), representing the kind of food and the number of dishes the j-th customer orders, respectively."}
{"name": "1133_C. Balanced Team", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of students.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is a programming skill of the i-th student."}
{"name": "1276_C. Beautiful Rectangle", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 4⋅10^5). The second line contains n integers (1 ≤ a_i ≤ 10^9)."}
{"name": "1296_D. Fight with Monsters", "description": "Input\n\nThe first line of the input contains four integers n, a, b and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ a, b, k ≤ 10^9) — the number of monsters, your attack power, the opponent's attack power and the number of times you can use the secret technique.\n\nThe second line of the input contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i is the health points of the i-th monster."}
{"name": "1380_F. Strange Addition", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 5 ⋅ 10^5) — the length of the number c and the number of updates.\n\nThe second line contains a string c, consisting of exactly n digits from 0 to 9.\n\nEach of the next m lines contains two integers x and d (1 ≤ x ≤ n, 0 ≤ d ≤ 9) — the descriptions of updates."}
{"name": "1400_F. x-prime Substrings", "description": "Input\n\nThe first line contains a string s (1 ≤ |s| ≤ 1000). s contains only digits from 1 to 9 inclusive.\n\nThe second line contains an integer x (1 ≤ x ≤ 20)."}
{"name": "1546_A. AquaMoon and Two Arrays", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 100). The sum of all a_i does not exceed 100.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 100). The sum of all b_i does not exceed 100."}
{"name": "193_C. Hamming Distance", "description": "Input\n\nThe first line contains space-separated integers h(s1, s2), h(s1, s3), h(s1, s4). The second line contains space-separated integers h(s2, s3) and h(s2, s4). The third line contains the single integer h(s3, s4).\n\nAll given integers h(si, sj) are non-negative and do not exceed 105. It is guaranteed that at least one number h(si, sj) is positive."}
{"name": "28_A. Bender Problem", "description": "Input\n\nThe first line contains two positive integers n and m (4 ≤ n ≤ 500, 2 ≤ m ≤ 500, n is even) — the amount of nails and the amount of rods. i-th of the following n lines contains a pair of integers, denoting the coordinates of the i-th nail. Nails should be connected in the same order as they are given in the input. The last line contains m integers — the lenghts of the rods. All coordinates do not exceed 104 by absolute value. Lengths of the rods are between 1 and 200 000. No rod can be used twice. It is guaranteed that all segments of the given polyline are parallel to coordinate axes. No three consecutive nails lie on the same line."}
{"name": "383_C. Propagating tree", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 200000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Each of the next n–1 lines contains two integers vi and ui (1 ≤ vi, ui ≤ n), meaning that there is an edge between nodes vi and ui.\n\nEach of the next m lines contains a query in the format described above. It is guaranteed that the following constraints hold for all queries: 1 ≤ x ≤ n, 1 ≤ val ≤ 1000."}
{"name": "404_B. Marathon", "description": "Input\n\nThe first line contains two space-separated real numbers a and d (1 ≤ a, d ≤ 105), given with precision till 4 decimal digits after the decimal point. Number a denotes the length of the square's side that describes the stadium. Number d shows that after each d meters Valera gets an extra drink.\n\nThe second line contains integer n (1 ≤ n ≤ 105) showing that Valera needs an extra drink n times."}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 1000) which represents the stripe’s length. The second line contains exactly n symbols — the line’s initial coloring. 0 corresponds to a white square, 1 corresponds to a black one."}
{"name": "75_C. Modified GCD", "description": "Input\n\nThe first line contains two integers a and b, the two integers as described above (1 ≤ a, b ≤ 109). The second line contains one integer n, the number of queries (1 ≤ n ≤ 104). Then n lines follow, each line contains one query consisting of two integers, low and high (1 ≤ low ≤ high ≤ 109)."}
{"name": "780_B. The Meeting Place Cannot Be Changed", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 60 000) — the number of friends.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 109) — the current coordinates of the friends, in meters.\n\nThe third line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 109) — the maximum speeds of the friends, in meters per second."}
{"name": "803_F. Coprime Subsequences", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 100000).\n\nThe second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000)."}
{"name": "84_E. Track", "description": "Input\n\nThe first input line contains three integers n, m and k (1 ≤ n, m ≤ 50, n·m ≥ 2, 1 ≤ k ≤ 4). Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T.\n\nPretest 12 is one of the maximal tests for this problem."}
{"name": "873_B. Balanced Substring", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 100000) — the number of characters in s.\n\nThe second line contains a string s consisting of exactly n characters. Only characters 0 and 1 can appear in s."}
{"name": "899_A. Splitting in Teams", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 2·105) — the number of groups.\n\nThe second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 2), where ai is the number of people in group i."}
{"name": "91_B. Queue", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105) — the number of walruses in the queue. The second line contains integers ai (1 ≤ ai ≤ 109).\n\nNote that some walruses can have the same age but for the displeasure to emerge the walrus that is closer to the head of the queue needs to be strictly younger than the other one."}
{"name": "946_G. Almost Increasing Array", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 200000) — the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the array a."}
{"name": "p00712 Unit Fraction Partition", "description": "Input\n\nThe input is a sequence of at most 1000 data sets followed by a terminator.\n\nA data set is a line containing four positive integers p, q, a, and n satisfying p,q <= 800, a <= 12000 and n <= 7. The integers are separated by a space.\n\nThe terminator is composed of just one line which contains four zeros separated by a space. It is not a part of the input data but a mark for the end of the input."}
{"name": "p01115 Expression Mining", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n\n>  s\n>\n\nA dataset consists of two lines. In the first line, the target value n is given. n is an integer satisfying 1 ≤ n ≤ 109. The string s given in the second line is an arithmetic expression conforming to the grammar defined above. The length of s does not exceed 2×106. The nesting depth of the parentheses in the string is at most 1000.\n\nThe end of the input is indicated by a line containing a single zero. The sum of the lengths of s in all the datasets does not exceed 5×106."}
{"name": "1020_B. Badge", "description": "Input\n\nThe first line of the input contains the only integer n (1 ≤ n ≤ 1000) — the number of the naughty students.\n\nThe second line contains n integers p_1, ..., p_n (1 ≤ p_i ≤ n), where p_i indicates the student who was reported to the teacher by student i."}
{"name": "1089_F. Fractions", "description": "Input\n\nThe input consists of a single integer n (2 ≤ n ≤ 10^9)."}
{"name": "1178_B. WOW Factor", "description": "Input\n\nThe input contains a single non-empty string s, consisting only of characters \"v\" and \"o\". The length of s is at most 10^6."}
{"name": "1196_B. Odd Sum Segments", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries. Then q queries follow.\n\nThe first line of the query contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of subsegments, respectively.\n\nThe second line of the query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1213_D1. Equalizing by Division (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of elements in the array and the number of equal numbers required.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1278_C. Berry Jam", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains 2n integers a_1, a_2, ..., a_{2n} (1 ≤ a_i ≤ 2) — a_i=1 means that the i-th jar from the left is a strawberry jam jar and a_i=2 means that it is a blueberry jam jar.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1340_C. Nastya and Unexpected Guest", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^6, 2 ≤ m ≤ min(n + 1, 10^4)) — road width and the number of safety islands.\n\nThe second line contains m distinct integers d_1, d_2, …, d_m (0 ≤ d_i ≤ n) — the points where the safety islands are located. It is guaranteed that there are 0 and n among them.\n\nThe third line contains two integers g, r (1 ≤ g, r ≤ 1000) — the time that the green light stays on and the time that the red light stays on."}
{"name": "1382_D. Unmerge", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 2t lines contain descriptions of test cases. \n\nThe first line of each test case contains a single integer n (1≤ n≤ 2000).\n\nThe second line of each test case contains 2n integers p_1,…,p_{2n} (1≤ p_i≤ 2n). It is guaranteed that p is a permutation.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 2000."}
{"name": "243_B. Hydra", "description": "Input\n\nThe first line contains four integers n, m, h, t (1 ≤ n, m ≤ 105, 1 ≤ h, t ≤ 100) — the number of nodes and edges in graph G, and the number of a hydra's heads and tails.\n\nNext m lines contain the description of the edges of graph G. The i-th of these lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, a ≠ b) — the numbers of the nodes, connected by the i-th edge.\n\nIt is guaranteed that graph G contains no self-loops and multiple edges. Consider the nodes of graph G numbered with integers from 1 to n."}
{"name": "291_B. Command Line Arguments", "description": "Input\n\nThe single line contains a non-empty string s. String s consists of at most 105 characters. Each character is either an uppercase or a lowercase English letter, or a digit, or one of the \".,?!\"\" signs, or a space.\n\nIt is guaranteed that the given string is some correct command line string of the OS Pindows. It is guaranteed that the given command line string contains at least one lexeme."}
{"name": "339_E. Three Swaps", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 1000) — the number of horses in the row. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai is the number of the i-th left horse in the row after the practice."}
{"name": "362_B. Petya and Staircases", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 109, 0 ≤ m ≤ 3000) — the number of stairs in the staircase and the number of dirty stairs, correspondingly. The second line contains m different space-separated integers d1, d2, ..., dm (1 ≤ di ≤ n) — the numbers of the dirty stairs (in an arbitrary order)."}
{"name": "526_E. Transmitting Levels", "description": "Input\n\nThe first line contains two integers n, q (2 ≤ n ≤ 106, 1 ≤ q ≤ 50) — the number of levels in the game universe and the number of distinct values of b that you need to process.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — the sizes of the levels in bytes.\n\nThe next q lines contain integers bj (<image>), determining the values of constant b, for which you need to determine the answer."}
{"name": "5_E. Bindian Signalizing", "description": "Input\n\nThe first line of the input data contains an integer number n (3 ≤ n ≤ 106), n — the amount of hills around the capital. The second line contains n numbers — heights of the hills in clockwise order. All height numbers are integer and lie between 1 and 109."}
{"name": "622_C. Not Equal on a Segment", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2·105) — the number of elements in a and the number of queries.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 106) — the elements of the array a.\n\nEach of the next m lines contains three integers li, ri, xi (1 ≤ li ≤ ri ≤ n, 1 ≤ xi ≤ 106) — the parameters of the i-th query."}
{"name": "696_B. Puzzles", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of cities in USC.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 ≤ pi < i), where pi is the number of the parent city of city number i in the tree, meaning there is a road between cities numbered pi and i in USC."}
{"name": "876_B. Divisiblity of Differences", "description": "Input\n\nFirst line contains three integers n, k and m (2 ≤ k ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — number of integers in the multiset, number of integers you should select and the required divisor of any pair of selected integers.\n\nSecond line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the numbers in the multiset."}
{"name": "977_F. Consecutive Subsequence", "description": "Input\n\nThe first line of the input containing integer number n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array. The second line of the input containing n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the array itself."}
{"name": "p00587 Binary Tree Intersection And Union", "description": "Input\n\nEach line of the input contains an operation. An operation starts with a character which specifies the type of operation, either ’i’ or ’u’: ’i’ means intersection, and ’u’ means union. Following the character and a space, two tree expressions are given, separated by a space. It is assumed that 1 <= #nodes in a tree <= 100, and no tree expression contains spaces and syntax errors. Input is terminated by EOF."}
{"name": "1061_F. Lost Root", "description": "Input\n\n3 2\n\nNo\n\nYes"}
{"name": "1270_H. Number of Components", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 5 ⋅ 10^5) — the size of the array and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the initial array.\n\nEach of the next q lines contains two integers pos and x (1 ≤ pos ≤ n, 1 ≤ x ≤ 10^6, x ≠ a_{pos}). It means that you have to make a_{pos}=x.\n\nIt's guaranteed that at every moment of time, all elements of the array are different."}
{"name": "1336_C. Kaavi and Magic Spell", "description": "Input\n\nThe first line contains a string S of length n (1 ≤ n ≤ 3000).\n\nThe second line contains a string T of length m (1 ≤ m ≤ n).\n\nBoth strings contain only lowercase Latin letters."}
{"name": "1358_F. Tasty Cookie", "description": "Input\n\nThe first line contains a single integer n (1≤ n ≤ 2⋅ 10^5).\n\nThe second line contains n integers A_1, A_2, …, A_n (1 ≤ A_i ≤ 10 ^ {12}).\n\nThe third line contains n integers B_1, B_2, …, B_n (1 ≤ B_i ≤ 10 ^ {12})."}
{"name": "238_B. Boring Partition", "description": "Input\n\nThe first line of input contains integers n and h (2 ≤ n ≤ 105, 0 ≤ h ≤ 108). In the second line there is a list of n space-separated integers representing a1, a2, ..., an (0 ≤ ai ≤ 108)."}
{"name": "401_A. Vanya and Cards", "description": "Input\n\nThe first line contains two integers: n (1 ≤ n ≤ 1000) — the number of found cards and x (1 ≤ x ≤ 1000) — the maximum absolute value of the number on a card. The second line contains n space-separated integers — the numbers on found cards. It is guaranteed that the numbers do not exceed x in their absolute value."}
{"name": "497_B. Tennis Game", "description": "Input\n\nThe first line contains a single integer n — the length of the sequence of games (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers ai. If ai = 1, then the i-th serve was won by Petya, if ai = 2, then the i-th serve was won by Gena.\n\nIt is not guaranteed that at least one option for numbers s and t corresponds to the given record."}
{"name": "548_A. Mike and Fax", "description": "Input\n\nThe first line of input contains string s containing lowercase English letters (1 ≤ |s| ≤ 1000).\n\nThe second line contains integer k (1 ≤ k ≤ 1000)."}
{"name": "637_D. Running with Obstacles", "description": "Input\n\nThe first line of the input containsd four integers n, m, s and d (1 ≤ n ≤ 200 000, 2 ≤ m ≤ 109, 1 ≤ s, d ≤ 109) — the number of obstacles on the runner's way, the coordinate of the finishing point, the length of running before the jump and the maximum length of the jump, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ m - 1) — the coordinates of the obstacles. It is guaranteed that the starting and finishing point have no obstacles, also no point can have more than one obstacle, The coordinates of the obstacles are given in an arbitrary order."}
{"name": "665_D. Simple Subset", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1000) — the number of integers in the array a.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 106) — the elements of the array a."}
{"name": "732_E. Sockets", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 200 000) — the number of computers and the number of sockets.\n\nThe second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 109) — the powers of the computers. \n\nThe third line contains m integers s1, s2, ..., sm (1 ≤ si ≤ 109) — the power of the sockets."}
{"name": "778_B. Bitwise Formula", "description": "Input\n\nThe first line contains two integers n and m, the number of variables and bit depth, respectively (1 ≤ n ≤ 5000; 1 ≤ m ≤ 1000). \n\nThe following n lines contain descriptions of the variables. Each line describes exactly one variable. Description has the following format: name of a new variable, space, sign \":=\", space, followed by one of:\n\n  1. Binary number of exactly m bits. \n  2. The first operand, space, bitwise operation (\"AND\", \"OR\" or \"XOR\"), space, the second operand. Each operand is either the name of variable defined before or symbol '?', indicating the number chosen by Peter. \n\n\n\nVariable names are strings consisting of lowercase Latin letters with length at most 10. All variable names are different."}
{"name": "825_A. Binary Protocol", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 89) — length of the string s.\n\nThe second line contains string s — sequence of '0' and '1' characters, number in its encoded format. It is guaranteed that the number corresponding to the string is positive and doesn't exceed 109. The string always starts with '1'."}
{"name": "p00050 Apple and Peach", "description": "Input\n\nEnglish text (including half-width alphanumeric characters, spaces, and symbols) is given on one line. The length of the string entered is 1000 or less."}
{"name": "p00336 Repeated Spell", "description": "Input\n\nThe input is given in the following format.\n\n\nt\nb b\n\n\nThe first line is given the string t that represents the text written on the lithograph. The second line is given the string b that represents the spell written on the lithograph. Both strings are composed of only lowercase letters and have a length of 1 or more and 1000 or less."}
{"name": "p00694 Strange Key", "description": "Input\n\nAn input data is a list of pairs of key descriptions followed by a zero that indicates the end of the input. For p pairs of key descriptions, the input is given in the following format.\n\nkey-description1-a\nkey-description1-b\nkey-description2-a\nkey-description2-b\n...\nkey-descriptionp-a\nkey-descriptionp-b\n0\n\n\nEach key description (key-description) has the following format.\n\nn` ` e1 ` ` e2 ` ` ... ` ` ek ` ` ... ` ` en\n\n\nThe positive integer n indicates the number of the following elements e1, ..., en . They are separated by one or more space characters and/or newlines. Each element ek is one of the six symbols (`+x`, `-x`, `+y`, `-y`, `+z` and `-z`) or a positive integer.\n\nYou can assume that each label is a positive integer that is less than 51, the number of elements in a single key description is less than 301, and the number of characters in a line is less than 80. You can also assume that the given key descriptions are valid and contain at least one gold bar."}
{"name": "p01398 Swap Cipher", "description": "Input\n\nThe input consists of multiple datasets. The total number of datasets is 20 or less. Each dataset has the following format:\n\n\nN\nmessage\na1 b1\n...\nai bi\n...\naN bN\n\n\nN (0 <N ≤ 100) is an integer that indicates the number of swap operations when encrypting. message indicates encrypted data. Cryptographic data is a character string consisting of only lowercase letters of the alphabet. If the length of the message is len, we can assume that 2 ≤ len ≤ 100.\n\nai and bi represent two indexes that have been swapped in encryption. You can assume that 1 ≤ ai <bi ≤ len. For encryption, it is assumed that the swap operations are performed in the order in which they are entered.\n\nThe end of the input is indicated by a single line consisting of only 0s. This data does not need to be processed."}
{"name": "p01551 DNA", "description": "Input\n\n> Na Nt Ng Nc\n> m\n> Nonterminal 1: Symbol 11 Symbol 12 ... Symbol 1n1\n> Non-terminal symbol 2: Symbol 21 Symbol 22 ... Symbol 2n2\n> ...\n> Non-terminal symbol m: symbol m1 symbol m2 ... symbol mnm\n>\n\n0 ≤ Na, Nt, Ng, Nc ≤ 50\n\n1 ≤ m ≤ 50\n\n1 ≤ ni ≤ 10\n\n1 ≤ Length of the character string representing the symbol ≤ 20 (* Note that it is not the length of the character string that matches the symbol)"}
{"name": "1003_A. Polycarp's Pockets", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins."}
{"name": "1110_B. Tape", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 10^5, n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of broken segments, the length of the stick and the maximum number of pieces you can use.\n\nThe second line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ m) — the positions of the broken segments. These integers are given in increasing order, that is, b_1 < b_2 < … < b_n."}
{"name": "1158_C. Permutation recovery", "description": "Input\n\nThe first line contains one integer t — the number of test cases (1 ≤ t ≤ 100 000).\n\nNext 2 ⋅ t lines contains the description of test cases,two lines for each. The first line contains one integer n — the length of the permutation, written by Vasya (1 ≤ n ≤ 500 000). The second line contains n integers next_1, next_2, …, next_n, separated by spaces (next_i = -1 or i < next_i ≤ n + 1).\n\nIt is guaranteed, that the sum of n in all test cases doesn't exceed 500 000.\n\nIn hacks you can only use one test case, so T = 1."}
{"name": "1180_B. Nick and Array", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 10^{5}) — number of integers in the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^{6} ≤ a_i ≤ 10^{6}) — elements of the array"}
{"name": "1216_A. Prefixes", "description": "Input\n\nThe first line of the input contains one even integer n (2 ≤ n ≤ 2⋅10^{5}) — the length of string s.\n\nThe second line of the input contains the string s of length n, which consists only of lowercase Latin letters 'a' and 'b'."}
{"name": "1239_B. The World Is Just a Programming Task (Hard Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300 000), the length of the string.\n\nThe second line contains a string, consisting of exactly n characters, where each of the characters is either \"(\" or \")\"."}
{"name": "1257_D. Yet Another Monster Killing Problem", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of monsters in the dungeon.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the power of the i-th monster.\n\nThe third line contains one integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of heroes in your party.\n\nThen m lines follow, each describing a hero. Each line contains two integers p_i and s_i (1 ≤ p_i ≤ 10^9, 1 ≤ s_i ≤ n) — the power and the endurance of the i-th hero.\n\nIt is guaranteed that the sum of n + m over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1324_E. Sleeping Schedule", "description": "Input\n\nThe first line of the input contains four integers n, h, l and r (1 ≤ n ≤ 2000, 3 ≤ h ≤ 2000, 0 ≤ l ≤ r < h) — the number of times Vova goes to sleep, the number of hours in a day and the segment of the good sleeping time.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i < h), where a_i is the number of hours after which Vova goes to sleep the i-th time."}
{"name": "1343_D. Constant Palindrome Sum", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 2 ⋅ 10^5) — the length of a and the maximum possible value of some a_i correspondingly. It is guratanteed that n is even (i.e. divisible by 2). The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n (as well as the sum of k) over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ k ≤ 2 ⋅ 10^5)."}
{"name": "1407_C. Chocolate Bunny", "description": "Input\n\nThe only line of the input contains a single integer n (1 ≤ n ≤ 10^4) — length of the permutation.\n\nInteraction\n\nThe interaction starts with reading n. \n\nThen you are allowed to make at most 2 ⋅ n queries in the following way: \n\n  * \"? x y\" (1 ≤ x, y ≤ n, x ≠ y). \n\n\n\nAfter each one, you should read an integer k, that equals p_x mod p_y. \n\nWhen you have guessed the permutation, print a single line \"! \" (without quotes), followed by array p and quit.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nExit immediately after receiving \"-1\" and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nHack format\n\nIn the first line output n (1 ≤ n ≤ 10^4). In the second line print the permutation of n integers p_1, p_2, …, p_n.\n\nExample\n\nInput\n\n\n3\n\n1\n\n2\n\n1\n\n0"}
{"name": "199_D. Jumping on Walls", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 105) — the height of the canyon and the height of ninja's jump, correspondingly.\n\nThe second line contains the description of the left wall — a string with the length of n characters. The i-th character represents the state of the i-th wall area: character \"X\" represents a dangerous area and character \"-\" represents a safe area.\n\nThe third line describes the right wall in the same format.\n\nIt is guaranteed that the first area of the left wall is not dangerous."}
{"name": "246_C. Beauty Pageant", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 50; 1 ≤ k ≤  <image>) — the number of soldiers and the number of days in the pageant, correspondingly. The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 107) — the beauties of the battalion soldiers.\n\nIt is guaranteed that Payne's battalion doesn't have two soldiers with the same beauty."}
{"name": "271_D. Good Substrings", "description": "Input\n\nThe first line of the input is the non-empty string s, consisting of small English letters, the string's length is at most 1500 characters.\n\nThe second line of the input is the string of characters \"0\" and \"1\", the length is exactly 26 characters. If the i-th character of this string equals \"1\", then the i-th English letter is good, otherwise it's bad. That is, the first character of this string corresponds to letter \"a\", the second one corresponds to letter \"b\" and so on.\n\nThe third line of the input consists a single integer k (0 ≤ k ≤ |s|) — the maximum acceptable number of bad characters in a good substring."}
{"name": "295_A. Greg and Array", "description": "Input\n\nThe first line contains integers n, m, k (1 ≤ n, m, k ≤ 105). The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the initial array.\n\nNext m lines contain operations, the operation number i is written as three integers: li, ri, di, (1 ≤ li ≤ ri ≤ n), (0 ≤ di ≤ 105).\n\nNext k lines contain the queries, the query number i is written as two integers: xi, yi, (1 ≤ xi ≤ yi ≤ m).\n\nThe numbers in the lines are separated by single spaces."}
{"name": "437_C. The Child and Toy", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 2000). The second line contains n integers: v1, v2, ..., vn (0 ≤ vi ≤ 105). Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi (1 ≤ xi, yi ≤ n; xi ≠ yi).\n\nConsider all the parts are numbered from 1 to n."}
{"name": "45_E. Director", "description": "Input\n\nThe first input line contains number n (1 ≤ n ≤ 100) — the number of names and surnames. Then follow n lines — the list of names. Then follow n lines — the list of surnames. No two from those 2n strings match. Every name and surname is a non-empty string consisting of no more than 10 Latin letters. It is guaranteed that the first letter is uppercase and the rest are lowercase."}
{"name": "603_C. Lieges of Legendre", "description": "Input\n\nThe first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).\n\nThe second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game."}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out."}
{"name": "71_E. Nuclear Fusion", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 17). The second line contains space-separated symbols of elements of n atoms, which are available from the start. The third line contains space-separated symbols of elements of k atoms which need to be the result of the fusion. The symbols of the elements coincide with the symbols from the periodic table of the chemical elements. The atomic numbers do not exceed 100 (elements possessing larger numbers are highly unstable). Some atoms can have identical numbers (that is, there can be several atoms of the same element). The sum of numbers of initial atoms is equal to the sum of numbers of the atoms that need to be synthesized."}
{"name": "741_B. Arpa's weak amphitheater and Mehrdad's valuable Hoses", "description": "Input\n\nThe first line contains integers n, m and w (1 ≤ n ≤ 1000, <image>, 1 ≤ w ≤ 1000) — the number of Hoses, the number of pair of friends and the maximum total weight of those who are invited.\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the Hoses.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 106) — the beauties of the Hoses.\n\nThe next m lines contain pairs of friends, the i-th of them contains two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), meaning that Hoses xi and yi are friends. Note that friendship is bidirectional. All pairs (xi, yi) are distinct."}
{"name": "765_A. Neverending competitions", "description": "Input\n\nIn the first line of input there is a single integer n: the number of Jinotega's flights (1 ≤ n ≤ 100). In the second line there is a string of 3 capital Latin letters: the name of Jinotega's home airport. In the next n lines there is flight information, one flight per line, in form \"XXX->YYY\", where \"XXX\" is the name of departure airport \"YYY\" is the name of arrival airport. Exactly one of these airports is Jinotega's home airport.\n\nIt is guaranteed that flights information is consistent with the knowledge of Jinotega's friends, which is described in the main part of the statement."}
{"name": "788_C. The Great Mixing", "description": "Input\n\nThe first line contains two integers n, k (0 ≤ n ≤ 1000, 1 ≤ k ≤ 106) — carbon dioxide concentration the friends want and the number of Coke types.\n\nThe second line contains k integers a1, a2, ..., ak (0 ≤ ai ≤ 1000) — carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration."}
{"name": "855_A. Tom Riddle's Diary", "description": "Input\n\nFirst line of input contains an integer n (1 ≤ n ≤ 100) — the number of names in the list.\n\nNext n lines each contain a string si, consisting of lowercase English letters. The length of each string is between 1 and 100."}
{"name": "879_D. Teams Formation", "description": "Input\n\nThe first line contains three integers n, k and m (1 ≤ n ≤ 105, 2 ≤ k ≤ 109, 1 ≤ m ≤ 109).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105), where ai is the number of city, person from which must take seat i in the bus."}
{"name": "925_B. Resource Distribution", "description": "Input\n\nThe first line contains three integers n, x_1, x_2 (2 ≤ n ≤ 300 000, 1 ≤ x_1, x_2 ≤ 10^9) — the number of servers that the department may use, and resource units requirements for each of the services.\n\nThe second line contains n space-separated integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 10^9) — the number of resource units provided by each of the servers."}
{"name": "954_C. Matrix Walk", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 200000) — the number of cells you visited on your path (if some cell is visited twice, then it's listed twice).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the integers in the cells on your path."}
{"name": "9_B. Running Student", "description": "Input\n\nThe first line contains three integer numbers: 2 ≤ n ≤ 100, 1 ≤ vb, vs ≤ 1000. The second line contains n non-negative integers in ascending order: coordinates xi of the bus stop with index i. It is guaranteed that x1 equals to zero, and xn ≤ 105. The third line contains the coordinates of the University, integers xu and yu, not exceeding 105 in absolute value."}
{"name": "p00391 Treasure Map", "description": "Input\n\nThe input is given in the following format.\n\n\n$W$ $H$\n$a_1$ $a_2$ $...$ $a_W$\n$b_1$ $b_2$ $...$ $b_H$\n\n\nThe first line provides the number of horizontal partitions $W$ ($1 \\leq W \\leq 1000$) and vertical partitions $H$ ($1 \\leq H \\leq 1000$). The second line provides the $i$-th member of the first number series $a_i$ ($0 \\leq a_i \\leq H$) written on the paper, and the third line the $j$-th member of the second series $b_j$ ($0 \\leq b_j \\leq W$)."}
{"name": "p00744 Cards", "description": "Input\n\nThe input is a sequence of datasets. The number of the datasets is less than or equal to 100. Each dataset is formatted as follows.\n\n> m n\n>  b1 ... bk ... bm\n>  r1 ... rk ... rn\n>\n\nThe integers m and n are the number of blue cards and that of red cards, respectively. You may assume 1 ≤ m ≤ 500 and 1≤ n ≤ 500. bk (1 ≤ k ≤ m) and rk (1 ≤ k ≤ n) are numbers printed on the blue cards and the red cards respectively, that are integers greater than or equal to 2 and less than 10000000 (=107). The input integers are separated by a space or a newline. Each of bm and rn is followed by a newline. There are no other characters in the dataset.\n\nThe end of the input is indicated by a line containing two zeros separated by a space."}
{"name": "1033_C. Permutation Game", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of numbers.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n). Furthermore, there are no pair of indices i ≠ j such that a_i = a_j."}
{"name": "1078_B. The Unbearable Lightness of Weights", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of weights.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100) — the masses of the weights."}
{"name": "1167_F. Scalar Queries", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the length of array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9, a_i ≠ a_j for i ≠ j) — array a."}
{"name": "1205_A. Almost Equal", "description": "Input\n\nThe first and the only line contain one integer n (1 ≤ n ≤ 10^5)."}
{"name": "1221_E. Game With String", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.\n\nThe first line of each query contains two integers a and b (1 ≤ b < a ≤ 3 ⋅ 10^5).\n\nThe second line of each query contains the string s (1 ≤ |s| ≤ 3 ⋅ 10^5), consisting of only characters . and X.\n\nIt is guaranteed that sum of all |s| over all queries not exceed 3 ⋅ 10^5."}
{"name": "1248_B. Grow The Tree", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100 000) — the number of sticks Alexey got as a present.\n\nThe second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10 000) — the lengths of the sticks."}
{"name": "1351_B. Square?", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers a_1 and b_1 (1 ≤ a_1, b_1 ≤ 100) — the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers a_2 and b_2 (1 ≤ a_2, b_2 ≤ 100) — the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length)."}
{"name": "1418_F. Equal Product", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5).\n\nThe second line contains two integers l and r (1 ≤ l ≤ r ≤ nm)."}
{"name": "1461_C. Random Events", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^5) — the length of the permutation and the number of experiments, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — contents of the permutation.\n\nThe following m lines of each test case each contain an integer r_i and a real number p_i (1 ≤ r_i ≤ n, 0 ≤ p_i ≤ 1) — the length of the prefix and the probability of it being sorted. All probabilities are given with at most 6 decimal places.\n\nIt is guaranteed that the sum of n and the sum of m does not exceed 10^5 (∑ n, ∑ m ≤ 10^5)."}
{"name": "1486_D. Max Median", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n)."}
{"name": "1510_D. Digits", "description": "Input\n\nThe first line contains the integers n and d (1≤ n≤ 10^5, 0≤ d≤ 9). The second line contains n integers a_i (1≤ a_i≤ 1000)."}
{"name": "257_A. Sockets", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m, k ≤ 50) — the number of supply-line filters, the number of devices and the number of sockets that he can plug to directly, correspondingly. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 50) — number ai stands for the number of sockets on the i-th supply-line filter."}
{"name": "32_A. Reconnaissance", "description": "Input\n\nThe first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 109) — amount of soldiers in Bob's detachment and the maximum allowed height difference respectively. The second line contains n space-separated integers — heights of all the soldiers in Bob's detachment. These numbers don't exceed 109."}
{"name": "611_D. New Year and Ancient Prophecy", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 5000) — the number of digits.\n\nThe second line contains a string of digits and has length equal to n. It's guaranteed that the first digit is not '0'."}
{"name": "631_A. Interview", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the arrays.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 109).\n\nThe third line contains n integers bi (0 ≤ bi ≤ 109)."}
{"name": "706_B. Interesting drink", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of shops in the city that sell Vasiliy's favourite drink.\n\nThe second line contains n integers xi (1 ≤ xi ≤ 100 000) — prices of the bottles of the drink in the i-th shop.\n\nThe third line contains a single integer q (1 ≤ q ≤ 100 000) — the number of days Vasiliy plans to buy the drink.\n\nThen follow q lines each containing one integer mi (1 ≤ mi ≤ 109) — the number of coins Vasiliy can spent on the i-th day."}
{"name": "729_D. Sea Battle", "description": "Input\n\nThe first line contains four positive integers n, a, b, k (1 ≤ n ≤ 2·105, 1 ≤ a, b ≤ n, 0 ≤ k ≤ n - 1) — the length of the grid, the number of ships on the grid, the length of each ship and the number of shots Galya has already made.\n\nThe second line contains a string of length n, consisting of zeros and ones. If the i-th character is one, Galya has already made a shot to this cell. Otherwise, she hasn't. It is guaranteed that there are exactly k ones in this string."}
{"name": "749_E. Inversions After Shuffle", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the length of the permutation.\n\nThe second line contains n distinct integers from 1 to n — elements of the permutation."}
{"name": "843_A. Sorting by Subsequences", "description": "Input\n\nThe first line of input data contains integer n (1 ≤ n ≤ 105) — the length of the sequence.\n\nThe second line of input data contains n different integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the elements of the sequence. It is guaranteed that all elements of the sequence are distinct."}
{"name": "934_A. A Compatible Pair", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 ≤ n, m ≤ 50).\n\nThe second line contains n space-separated integers a1, a2, ..., an.\n\nThe third line contains m space-separated integers b1, b2, ..., bm.\n\nAll the integers range from  - 109 to 109."}
{"name": "1004_C. Sonya and Robots", "description": "Input\n\nThe first line contains a single integer n (1≤ n≤ 10^5) — the number of numbers in a row.\n\nThe second line contains n integers a_1, a_2, …, a_n (1≤ a_i≤ 10^5) — the numbers in a row."}
{"name": "1046_I. Say Hello", "description": "Input\n\nThe first line contains one integer number N (2 ≤ N ≤ 100 000) representing number of moments in which we captured positions for two friends.\n\nThe second line contains two integer numbers d_1 and d_2 \\ (0 < d_1 < d_2 < 1000). \n\nThe next N lines contains four integer numbers A_x,A_y,B_x,B_y (0 ≤ A_x, A_y, B_x, B_y ≤ 1000) representing coordinates of friends A and B in each captured moment."}
{"name": "1092_D1. Great Vova Wall (Version 1)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of parts in the wall.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial heights of the parts of the wall."}
{"name": "1111_B. Average Superhero Gang Power ", "description": "Input\n\nThe first line contains three integers n, k and m (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{5}, 1 ≤ m ≤ 10^{7}) — the number of superheroes, the maximum number of times you can increase power of a particular superhero, and the total maximum number of operations.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^{6}) — the initial powers of the superheroes in the cast of avengers."}
{"name": "1159_E. Permutation recovery", "description": "Input\n\nThe first line contains one integer t — the number of test cases (1 ≤ t ≤ 100 000).\n\nNext 2 ⋅ t lines contains the description of test cases,two lines for each. The first line contains one integer n — the length of the permutation, written by Vasya (1 ≤ n ≤ 500 000). The second line contains n integers next_1, next_2, …, next_n, separated by spaces (next_i = -1 or i < next_i ≤ n + 1).\n\nIt is guaranteed, that the sum of n in all test cases doesn't exceed 500 000.\n\nIn hacks you can only use one test case, so T = 1."}
{"name": "125_E. MST Company", "description": "Input\n\nThe first input line contains three integers n, m, k (1 ≤ n ≤ 5000;0 ≤ m ≤ 105;0 ≤ k < 5000), where n is the number of cities in the country, m is the number of roads in the country, k is the number of capital roads in the required set. Then m lines enumerate the roads in question. Each road is specified by three numbers ai, bi, wi (1 ≤ ai, bi ≤ n; 1 ≤ w ≤ 105), where ai, bi are the numbers of cities linked by a road and wi is its length. \n\nBetween each pair of cities no more than one road exists. There are no roads that start and finish in one city. The capital's number is 1."}
{"name": "1476_B. Inflation", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (2 ≤ n ≤ 100; 1 ≤ k ≤ 100) — the length of array p and coefficient k.\n\nThe second line of each test case contains n integers p_0, p_1, ..., p_{n - 1} (1 ≤ p_i ≤ 10^9) — the array p."}
{"name": "158_A. Next Round", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) separated by a single space.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai ≥ ai + 1)."}
{"name": "224_C. Bracket Sequence", "description": "Input\n\nThe first and the only line contains the bracket sequence as a string, consisting only of characters \"(\", \")\", \"[\" and \"]\". It is guaranteed that the string is non-empty and its length doesn't exceed 105 characters."}
{"name": "249_A. Robo-Footballer", "description": "Input\n\nThe first and the single line contains integers y1, y2, yw, xb, yb, r (1 ≤ y1, y2, yw, xb, yb ≤ 106; y1 < y2 < yw; yb + r < yw; 2·r < y2 - y1).\n\nIt is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners."}
{"name": "273_B. Dima and Two Sequences", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109). The numbers in the lines are separated by spaces.\n\nThe last line contains integer m (2 ≤ m ≤ 109 + 7)."}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 ≤ n ≤ 100; 1 ≤ d ≤ 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 ≤ ti ≤ 100)."}
{"name": "460_C. Present", "description": "Input\n\nThe first line contains space-separated integers n, m and w (1 ≤ w ≤ n ≤ 105; 1 ≤ m ≤ 105). The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "484_B. Maximum Value", "description": "Input\n\nThe first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). \n\nThe second line contains n space-separated integers ai (1 ≤ ai ≤ 106)."}
{"name": "557_C. Arthur and Table", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 105) — the initial number of legs in the table Arthur bought.\n\nThe second line of the input contains a sequence of n integers li (1 ≤ li ≤ 105), where li is equal to the length of the i-th leg of the table.\n\nThe third line of the input contains a sequence of n integers di (1 ≤ di ≤ 200), where di is the number of energy units that Arthur spends on removing the i-th leg off the table."}
{"name": "605_A. Sorting Railway Cars", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 100 000) — the number of cars in the train. \n\nThe second line contains n integers pi (1 ≤ pi ≤ n, pi ≠ pj if i ≠ j) — the sequence of the numbers of the cars in the train."}
{"name": "651_B. Beautiful Paintings", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 1000) — the number of painting.\n\nThe second line contains the sequence a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai means the beauty of the i-th painting."}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 ≤ n ≤ 105) — the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the lengths of line segments Mahmoud has."}
{"name": "810_C. Do you want a date?", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 3·105) denoting the number of hacked computers.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 109) denoting the coordinates of hacked computers. It is guaranteed that all xi are distinct."}
{"name": "926_D. Choose Place", "description": "Input\n\nThe input consists of 6 lines. Each line describes one row of desks, starting from the closest to the blackboard. Each line is given in the following format: two characters, each is '*' or '.' — the description of the left desk in the current row; a character '-' — the aisle; two characters, each is '*' or '.' — the description of the center desk in the current row; a character '-' — the aisle; two characters, each is '*' or '.' — the description of the right desk in the current row. So, the length of each of the six lines is 8.\n\nIt is guaranteed that there is at least one vacant place in the classroom."}
{"name": "981_D. Bookshelves", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of books and the number of shelves in the new office.\n\nThe second line contains n integers a_1, a_2, … a_n, (0 < a_i < 2^{50}) — the prices of the books in the order they stand on the old shelf."}
{"name": "p00105 Book Index", "description": "Input\n\n\nword page_number\n::\n::"}
{"name": "p00754 The Balance of the World", "description": "Input\n\nThe input consists of one or more lines, each of which being a dataset. A dataset is a string that consists of English alphabets, space characters, and two kinds of brackets, round (\"( )\") and square (\"[ ]\"), terminated by a period. You can assume that every line has 100 characters or less. The line formed by a single period indicates the end of the input, which is not a dataset."}
{"name": "1009_A. Game Shopping", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of games and the number of bills in Maxim's wallet.\n\nThe second line of the input contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1000), where c_i is the cost of the i-th game.\n\nThe third line of the input contains m integers a_1, a_2, ..., a_m (1 ≤ a_j ≤ 1000), where a_j is the value of the j-th bill from the Maxim's wallet."}
{"name": "1076_D. Edge Deletion", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ m ≤ 3 ⋅ 10^5, n - 1 ≤ m, 0 ≤ k ≤ m) — the number of vertices and edges in the graph, and the maximum number of edges that can be retained in the graph, respectively.\n\nThen m lines follow, each containing three integers x, y, w (1 ≤ x, y ≤ n, x ≠ y, 1 ≤ w ≤ 10^9), denoting an edge connecting vertices x and y and having weight w.\n\nThe given graph is connected (any vertex can be reached from any other vertex) and simple (there are no self-loops, and for each unordered pair of vertices there exists at most one edge connecting these vertices)."}
{"name": "1118_D2. Coffee and Coursework (Hard Version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 10^9) — the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the caffeine dosage of coffee in the i-th cup."}
{"name": "1145_A. Thanos Sort", "description": "Input\n\nThe first line of input contains a single number n (1 ≤ n ≤ 16) — the size of the array. n is guaranteed to be a power of 2.\n\nThe second line of input contains n space-separated integers a_i (1 ≤ a_i ≤ 100) — the elements of the array."}
{"name": "1165_F2. Microtransactions (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of types of microtransactions and the number of special offers in the game shop.\n\nThe second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 2 ⋅ 10^5), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 2 ⋅ 10^5.\n\nThe next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 2 ⋅ 10^5, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day."}
{"name": "1203_C. Common Divisors", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 4 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{12}), where a_i is the i-th element of a."}
{"name": "1245_B. Restricted RPS", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThen, t testcases follow, each consisting of three lines: \n\n  * The first line contains a single integer n (1 ≤ n ≤ 100). \n  * The second line contains three integers, a, b, c (0 ≤ a, b, c ≤ n). It is guaranteed that a + b + c = n. \n  * The third line contains a string s of length n. s is made up of only 'R', 'P', and 'S'. The i-th character is 'R' if for his i-th Bob plays rock, 'P' if paper, and 'S' if scissors."}
{"name": "132_A. Turing Tape", "description": "Input\n\nThe input will consist of a single line text which contains the message printed using the described method. String text will contain between 1 and 100 characters, inclusive. ASCII-code of each character of text will be between 32 (space) and 126 (tilde), inclusive."}
{"name": "136_D. Rectangle and Square", "description": "Input\n\nYou are given 8 pairs of integers, a pair per line — the coordinates of the points Petya has. The absolute value of all coordinates does not exceed 104. It is guaranteed that no two points coincide."}
{"name": "1392_D. Omkar and Bed Wars", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). The descriptions of the test cases follows.\n\nThe first line of each test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the amount of players (and therefore beds) in this game of Bed Wars.\n\nThe second line of each test case contains a string s of length n. The j-th character of s is equal to L if the j-th player is attacking the player to their left, and R if the j-th player is attacking the player to their right.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "181_D. Word Cut", "description": "Input\n\nThe first line contains a non-empty word start, the second line contains a non-empty word end. The words consist of lowercase Latin letters. The number of letters in word start equals the number of letters in word end and is at least 2 and doesn't exceed 1000 letters.\n\nThe third line contains integer k (0 ≤ k ≤ 105) — the required number of operations."}
{"name": "253_C. Text Editor", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of lines in the file. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 105), separated by single spaces. The third line contains four integers r1, c1, r2, c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1 ≤ ar1 + 1, 1 ≤ c2 ≤ ar2 + 1)."}
{"name": "327_A. Flipping Game", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100). In the second line of the input there are n integers: a1, a2, ..., an. It is guaranteed that each of those n values is either 0 or 1."}
{"name": "349_B. Color the Fence", "description": "Input\n\nThe first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105)."}
{"name": "417_A. Elimination", "description": "Input\n\nThe first line contains two integers c and d (1 ≤ c, d ≤ 100) — the number of problems in the main and additional rounds, correspondingly. The second line contains two integers n and m (1 ≤ n, m ≤ 100). Finally, the third line contains an integer k (1 ≤ k ≤ 100) — the number of the pre-chosen winners."}
{"name": "443_D. Andrey and Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of Andrey's friends. The second line contains n real numbers pi (0.0 ≤ pi ≤ 1.0) — the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point."}
{"name": "658_D. Bear and Polynomials", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 109) — the degree of the polynomial and the limit for absolute values of coefficients.\n\nThe second line contains n + 1 integers a0, a1, ..., an (|ai| ≤ k, an ≠ 0) — describing a valid polynomial <image>. It's guaranteed that P(2) ≠ 0."}
{"name": "703_E. Mishka and Divisors", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 1 000, 1 ≤ k ≤ 1012).\n\nThe second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1012) — array elements."}
{"name": "725_E. Too Much Money", "description": "Input\n\nThe first line contains c (1 ≤ c ≤ 200 000) — the price Alfred wants to pay. The second line contains n (1 ≤ n ≤ 200 000) — the number of coins Alfred initially has. Then n lines follow, each containing a single integer x (1 ≤ x ≤ c) representing the value of one of Alfred's coins."}
{"name": "860_E. Arkady and a Nobody-men", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 5·105) — the number of employees in the company.\n\nThe second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ n), where pi = 0 if the i-th employee is the CEO, otherwise pi equals the id of the immediate manager of the employee with id i. The employees are numbered from 1 to n. It is guaranteed that there is exactly one 0 among these values, and also that the CEO is a manager (not necessarily immediate) for all the other employees."}
{"name": "932_A. Palindromic Supersequence", "description": "Input\n\nFirst line contains a string A (1 ≤ |A| ≤ 103) consisting of lowercase Latin letters, where |A| is a length of A."}
{"name": "959_B. Mahmoud and Ehab and the message", "description": "Input\n\nThe first line of input contains integers n, k and m (1 ≤ k ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of words in their language, the number of groups of words, and the number of words in Mahmoud's message respectively.\n\nThe second line contains n strings consisting of lowercase English letters of length not exceeding 20 which represent the words. It's guaranteed that the words are distinct.\n\nThe third line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) where ai is the cost of sending the i-th word.\n\nThe next k lines describe the groups of words of same meaning. The next k lines each start with an integer x (1 ≤ x ≤ n) which means that there are x words in this group, followed by x integers which represent the indices of words in this group. It's guaranteed that each word appears in exactly one group.\n\nThe next line contains m space-separated words which represent Mahmoud's message. Each of these words appears in the list of language's words."}
{"name": "985_G. Team Players", "description": "Input\n\nThe first line contains two space-separated integers n and m (3 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of players and the number of conflicting pairs.\n\nThe second line contains three space-separated integers A, B and C (1 ≤ A, B, C ≤ 10^6) — coefficients for team rank calculation.\n\nEach of the next m lines contains two space-separated integers u_i and v_i (0 ≤ u_i, v_i < n, u_i ≠ v_i) — pair of conflicting players.\n\nIt's guaranteed that each unordered pair of players appears in the input file no more than once."}
{"name": "p00133 Rotation of a Pattern", "description": "Input\n\nA pattern consisting of 8 characters x 8 lines is given. Characters consist of alphanumeric characters, half-width pound'#', and asterisk'*'."}
{"name": "1011_E. Border", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000, 2 ≤ k ≤ 100 000) — the number of denominations of banknotes and the base of the number system on Mars.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — denominations of banknotes on Mars.\n\nAll numbers are given in decimal notation."}
{"name": "1059_E. Split the Tree", "description": "Input\n\nThe first line contains three integers n, L, S (1 ≤ n ≤ 10^5, 1 ≤ L ≤ 10^5, 1 ≤ S ≤ 10^{18}) — the number of vertices, the maximum number of vertices in one path and the maximum sum in one path.\n\nThe second line contains n integers w_1, w_2, …, w_n (1 ≤ w_i ≤ 10^9) — the numbers in the vertices of the tree.\n\nThe third line contains n - 1 integers p_2, …, p_n (1 ≤ p_i < i), where p_i is the parent of the i-th vertex in the tree."}
{"name": "1100_A. Roman and Browser", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ k < n ≤ 100) — the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of n integers, each of them equal either to 1 or to -1. The i-th integer denotes the type of the i-th tab: if it is equal to 1, this tab contains information for the test, and if it is equal to -1, it's a social network tab."}
{"name": "1148_G. Gold Experience", "description": "Input\n\nThe first line contains integers n and k (6 ≤ 2 ⋅ k ≤ n ≤ 10^5) — the number of vertices and parameter k.\n\nThe second line contains n integers a_1, a_2, …, a_n (2 ≤ a_i ≤ 10^7) — the values in the vertices."}
{"name": "1188_C. Array Beauty", "description": "Input\n\nThe first line contains integers n, k (2 ≤ k ≤ n ≤ 1000).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^5)."}
{"name": "1373_F. Network Coverage", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains the single integer n (2 ≤ n ≤ 10^6) — the number of cities and stations.\n\nThe second line of each test case contains n integers (1 ≤ a_i ≤ 10^9) — the number of households in the i-th city.\n\nThe third line of each test case contains n integers (1 ≤ b_i ≤ 10^9) — the capacities of the designed stations.\n\nIt's guaranteed that the sum of n over test cases doesn't exceed 10^6."}
{"name": "1420_B. Rock and Lever", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (1 ≤ n ≤ 10^5) — length of the array.\n\nThe second line contains n positive integers a_i (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "208_D. Prizes, Prizes, more Prizes", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the number of chocolate bar wrappings that brought points to Vasya. The second line contains space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 109). The third line contains 5 integers a, b, c, d, e (1 ≤ a < b < c < d < e ≤ 109) — the prizes' costs."}
{"name": "25_A. IQ test", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 100) — amount of numbers in the task. The second line contains n space-separated natural numbers, not exceeding 100. It is guaranteed, that exactly one of these numbers differs from the others in evenness."}
{"name": "305_E. Playing with String", "description": "Input\n\nThe first line contains string s (1 ≤ |s| ≤ 5000). It is guaranteed that string s only contains lowercase English letters."}
{"name": "518_B. Tanya and Postcard", "description": "Input\n\nThe first line contains line s (1 ≤ |s| ≤ 2·105), consisting of uppercase and lowercase English letters — the text of Tanya's message.\n\nThe second line contains line t (|s| ≤ |t| ≤ 2·105), consisting of uppercase and lowercase English letters — the text written in the newspaper.\n\nHere |a| means the length of the string a."}
{"name": "633_E. Startup Funding", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 1 000 000).\n\nThe second line contains n integers vi (1 ≤ vi ≤ 107) — the number of unique visitors during each week.\n\nThe third line contains n integers ci (1 ≤ ci ≤ 107) —the revenue for each week."}
{"name": "709_B. Checkpoints", "description": "Input\n\nThe first line of the input contains two integers n and a (1 ≤ n ≤ 100 000,  - 1 000 000 ≤ a ≤ 1 000 000) — the number of checkpoints and Vasya's starting position respectively.\n\nThe second line contains n integers x1, x2, ..., xn ( - 1 000 000 ≤ xi ≤ 1 000 000) — coordinates of the checkpoints."}
{"name": "730_D. Running Over The Bridges", "description": "Input\n\nThe first line contains two integers n and r (1 ≤ n ≤ 2·105, 1 ≤ r ≤ 1012) — the number of bridges and the duration of the effect of a magical drink.\n\nThe second line contains a sequence of integers l1, l2, ..., ln (1 ≤ li ≤ 5·106), where li is equal to the length of the i-th bridge.\n\nThe third line contains a sequence of integers t1, t2, ..., tn (1 ≤ ti ≤ 107), where ti is equal to the maximum allowed time which Polycarp can spend running over the i-th bridge."}
{"name": "774_H. Repairing Of String", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 2000) — the length of the Stepan's favorite string.\n\nThe second line contains the sequence of integers c1, c2, ..., cn (0 ≤ ci ≤ 2000), where ci equals the number of substrings of the string s with the length i, consisting of the same letters.\n\nIt is guaranteed that the input data is such that the answer always exists."}
{"name": "81_C. Average Score", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105), n is the number of marks in Polycarp's Journal. The second line contains two positive integers a, b (1 ≤ a, b ≤ n - 1, a + b = n). The third line contains a sequence of integers t1, t2, ..., tn (1 ≤ ti ≤ 5), they are Polycarp's marks."}
{"name": "867_A. Between the Offices", "description": "Input\n\nThe first line of input contains single integer n (2 ≤ n ≤ 100) — the number of days.\n\nThe second line contains a string of length n consisting of only capital 'S' and 'F' letters. If the i-th letter is 'S', then you were in Seattle office on that day. Otherwise you were in San Francisco. The days are given in chronological order, i.e. today is the last day in this sequence."}
{"name": "892_C. Pride", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2000) — the number of elements in the array.\n\nThe second line contains n space separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array."}
{"name": "914_C. Travelling Salesman and Special Numbers", "description": "Input\n\nThe first line contains integer n (1 ≤ n < 21000).\n\nThe second line contains integer k (0 ≤ k ≤ 1000).\n\nNote that n is given in its binary representation without any leading zeros."}
{"name": "p00029 English Sentence", "description": "Input\n\nA text is given in a line. You can assume the following conditions:\n\n* The number of letters in the text is less than or equal to 1000.\n* The number of letters in a word is less than or equal to 32.\n* There is only one word which is arise most frequently in given text.\n* There is only one word which has the maximum number of letters in given text."}
{"name": "p00816 Shredding Company", "description": "Input\n\nThe input consists of several test cases, each on one line, as follows:\n\n\nt1 num1\nt2 num2\n...\ntn numn\n0 0\n\n\nEach test case consists of the following two positive integers, which are separated by one space: (1) the first integer (ti above) is the target number; (2) the second integer (numi above) is the number that is on the paper to be shredded.\n\nNeither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input."}
{"name": "p01350 Carrot Tour", "description": "Input\n\nOne integer n is given on the first line of the input, and two real numbers r and θ are given on the second line, separated by a space.\n\n1 ≤ n ≤ 20\n0 <r <104\n0 ° <θ <180 °\n\n\nThe following n lines are given the integers xi and yi separated by spaces.\n\n-10 000 ≤ xi, yi ≤ 10 000\n\nThe answer does not change even if r and θ are changed within ± 10-3.\nThe locations of both cities are different."}
{"name": "1004_A. Sonya and Hotels", "description": "Input\n\nThe first line contains two integers n and d (1≤ n≤ 100, 1≤ d≤ 10^9) — the number of Sonya's hotels and the needed minimum distance from a new hotel to all others.\n\nThe second line contains n different integers in strictly increasing order x_1, x_2, …, x_n (-10^9≤ x_i≤ 10^9) — coordinates of Sonya's hotels."}
{"name": "1046_G. Space Isaac", "description": "Input\n\nThe first line contains two positive integer N (1 ≤ N ≤ 200 000) and M (N+1 ≤ M ≤ 10^{9}), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains N nonnegative integers a_1,a_2,…,a_N (0 ≤ a_1<a_2< …< a_N<M), the contents of the first bag."}
{"name": "1092_B. Teams Forming", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 100) — the number of students. It is guaranteed that n is even.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the skill of the i-th student."}
{"name": "1110_H. Modest Substrings", "description": "Input\n\nThe first line contains one integer l (1 ≤ l ≤ 10^{800}).\n\nThe second line contains one integer r (l ≤ r ≤ 10^{800}).\n\nThe third line contains one integer n (1 ≤ n ≤ 2 000)."}
{"name": "1140_E. Palindrome-less Arrays", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n, k ≤ 2 ⋅ 10^5) — the length of array a and the size of \"alphabet\", i. e., the upper bound on the numbers you may use to replace -1.\n\nThe second line contains n integers a_1, a_2, ..., a_n (a_i = -1 or 1 ≤ a_i ≤ k) — the array a."}
{"name": "1159_C. The Party and Sweets", "description": "Input\n\nThe first line contains two integers n and m, separated with space — the number of boys and girls, respectively (2 ≤ n, m ≤ 100 000). The second line contains n integers b_1, …, b_n, separated by spaces — b_i is equal to the minimal number of sweets, which i-th boy presented to some girl (0 ≤ b_i ≤ 10^8). The third line contains m integers g_1, …, g_m, separated by spaces — g_j is equal to the maximal number of sweets, which j-th girl received from some boy (0 ≤ g_j ≤ 10^8)."}
{"name": "119_B. Before Exam", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of theorems and the number of cards correspondingly. The second line contains n integers ai (0 ≤ ai ≤ 100), the i-th number (1 ≤ i ≤ n) corresponds to Vasya's proficiency in the i-th theorem.\n\nThe third line contains number q (0 ≤ q ≤ 100) — the number of people that have taken the exam before Vasya. Each of the following q lines contains the description of a student's card: <image> integers from 1 to n inclusive. They are the numbers of theorems included in the card in the order in which they are enumerated in the input data. The numbers are given in an arbitrary order. It is guaranteed that the given cards are valid (that is, that all theorems in one card are different and that different people get cards that either don't contain the same theorems or coincide up to the theorems' permutation)."}
{"name": "1216_F. Wi-Fi", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 2 ⋅ 10^5) — the number of rooms and the range of each router.\n\nThe second line of the input contains one string s of length n, consisting only of zeros and ones. If the i-th character of the string equals to '1' then there is a spot for a router in the i-th room. If the i-th character of the string equals to '0' then you cannot place a router in the i-th room."}
{"name": "1325_E. Ehab's REAL Number Theory Problem", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the length of a.\n\nThe second line contains n integers a_1, a_2, …, a_{n} (1 ≤ a_i ≤ 10^6) — the elements of the array a."}
{"name": "1366_D. Two Divisors", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the size of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (2 ≤ a_i ≤ 10^7) — the array a."}
{"name": "1387_A. Graph", "description": "Input\n\nThe first line contains two integers N (1 ≤ N ≤ 100 000) and M (0 ≤ M ≤ 200 000): the number of nodes and the number of edges, respectively. The nodes are numbered by consecutive integers: 1, 2, …, N.\n\nThe next M lines describe the edges. Each line contains three integers a, b and c denoting that there is an edge between nodes a and b (1 ≤ a, b ≤ N) with color c (1 denotes black, 2 denotes red)."}
{"name": "1452_B. Toy Blocks", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the integer n (2 ≤ n ≤ 10^5) — the number of boxes.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the number of blocks in each box.\n\nIt's guaranteed that the sum of n over test cases doesn't exceed 10^5."}
{"name": "1475_G. Strange Beauty", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line of each test case contains n numbers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — elements of the array a."}
{"name": "1526_A. Mean Inequality", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases. The description of testcases follows.\n\nThe first line of each testcase contains a single integer n (1 ≤ n ≤ 25).\n\nThe second line of each testcase contains 2n integers a_1, a_2, …, a_{2n} (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nNote that there is no limit to the sum of n over all testcases."}
{"name": "19_E. Fairy", "description": "Input\n\nThe first input line contains two integer numbers: n — amount of the drawn points and m — amount of the drawn segments (1 ≤ n ≤ 104, 0 ≤ m ≤ 104). The following m lines contain the descriptions of the segments. Each description contains two different space-separated integer numbers v, u (1 ≤ v ≤ n, 1 ≤ u ≤ n) — indexes of the points, joined by this segment. No segment is met in the description twice."}
{"name": "248_D. Sweets for Everyone!", "description": "Input\n\nThe first line of the input contains two space-separated integers n and t (2 ≤ n ≤ 5·105, 1 ≤ t ≤ 109). The second line of the input contains n characters, the i-th of them equals \"H\" (if the i-th segment contains a house), \"S\" (if the i-th segment contains a shop) or \".\" (if the i-th segment doesn't contain a house or a shop). \n\nIt is guaranteed that there is at least one segment with a house."}
{"name": "296_B. Yaroslav and Two Strings", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the length of both templates. The second line contains the first template — a string that consists of digits and characters \"?\". The string's length equals n. The third line contains the second template in the same format."}
{"name": "367_B. Sereja ans Anagrams", "description": "Input\n\nThe first line contains three integers n, m and p (1 ≤ n, m ≤ 2·105, 1 ≤ p ≤ 2·105). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The next line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 109)."}
{"name": "40_E. Number Table", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 1000). The second line contains the integer k (0 ≤ k < max(n, m)) — the number of cells in which the data had been preserved. The next k lines contain the data on the state of the table in the preserved cells. Each line is of the form \"a b c\", where a (1 ≤ a ≤ n) — the number of the table row, b (1 ≤ b ≤ m) — the number of the column, c — the value containing in the cell (1 or -1). They are numbered starting from 1. It is guaranteed that no two lines with same a and b values exist. The last line contains an integer p (2 ≤ p ≤ 109 + 7)."}
{"name": "438_D. The Child and Sequence", "description": "Input\n\nThe first line of input contains two integer: n, m (1 ≤ n, m ≤ 105). The second line contains n integers, separated by space: a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109) — initial value of array elements.\n\nEach of the next m lines begins with a number type <image>. \n\n  * If type = 1, there will be two integers more in the line: l, r (1 ≤ l ≤ r ≤ n), which correspond the operation 1. \n  * If type = 2, there will be three integers more in the line: l, r, x (1 ≤ l ≤ r ≤ n; 1 ≤ x ≤ 109), which correspond the operation 2. \n  * If type = 3, there will be two integers more in the line: k, x (1 ≤ k ≤ n; 1 ≤ x ≤ 109), which correspond the operation 3."}
{"name": "676_C. Vasya and String", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, 0 ≤ k ≤ n) — the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only."}
{"name": "742_C. Arpa's loud Owf and Mehrdad's evil plan", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 100) — the number of people in Arpa's land.\n\nThe second line contains n integers, i-th of them is crushi (1 ≤ crushi ≤ n) — the number of i-th person's crush."}
{"name": "810_A. Straight «A»", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ k) denoting marks received by Noora before Leha's hack."}
{"name": "926_B. Add Points", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.\n\nThe second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order."}
{"name": "1063_B. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles."}
{"name": "1104_D. Game with modulo", "description": "Input\n\n\nstart\nx\nx\nstart\nx\nx\ny\nstart\nx\nx\ny\ny\nend"}
{"name": "1132_B. Discounts", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of chocolate bars in the shop.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the cost of i-th chocolate bar.\n\nThe third line contains one integer m (1 ≤ m ≤ n - 1) — the number of coupons you have.\n\nThe fourth line contains m integers q_1, q_2, ..., q_m (2 ≤ q_i ≤ n), where q_i is the number of chocolate bars you have to buy using i-th coupon so that the least expensive of them will be for free. All values of q_i are pairwise distinct."}
{"name": "1152_E. Neko and Flashback", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in array a.\n\nThe second line contains n-1 integers b'_1, b'_2, …, b'_{n-1} (1 ≤ b'_i ≤ 10^9).\n\nThe third line contains n-1 integers c'_1, c'_2, …, c'_{n-1} (1 ≤ c'_i ≤ 10^9)."}
{"name": "1295_B. Infinite Prefixes", "description": "Input\n\nThe first line contains the single integer T (1 ≤ T ≤ 100) — the number of test cases.\n\nNext 2T lines contain descriptions of test cases — two lines per test case. The first line contains two integers n and x (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9) — the length of string s and the desired balance, respectively.\n\nThe second line contains the binary string s (|s| = n, s_i ∈ \\{0, 1\\}).\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5."}
{"name": "1316_B. String Modification", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 5000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 5000) — the length of the string s.\n\nThe second line of each test case contains the string s of n lowercase latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5000."}
{"name": "1337_D. Xenia and Colorful Gems", "description": "Input\n\nThe first line contains a single integer t (1≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers n_r,n_g,n_b (1≤ n_r,n_g,n_b≤ 10^5) — the number of red gems, green gems and blue gems respectively.\n\nThe second line of each test case contains n_r integers r_1,r_2,…,r_{n_r} (1≤ r_i ≤ 10^9) — r_i is the weight of the i-th red gem.\n\nThe third line of each test case contains n_g integers g_1,g_2,…,g_{n_g} (1≤ g_i ≤ 10^9) — g_i is the weight of the i-th green gem.\n\nThe fourth line of each test case contains n_b integers b_1,b_2,…,b_{n_b} (1≤ b_i ≤ 10^9) — b_i is the weight of the i-th blue gem.\n\nIt is guaranteed that ∑ n_r ≤ 10^5, ∑ n_g ≤ 10^5, ∑ n_b ≤ 10^5 (the sum for all test cases)."}
{"name": "135_B. Rectangle and Square", "description": "Input\n\nYou are given 8 pairs of integers, a pair per line — the coordinates of the points Petya has. The absolute value of all coordinates does not exceed 104. It is guaranteed that no two points coincide."}
{"name": "1468_N. Waste Sorting", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 3 ⋅ 10^4) — the number of test cases. \n\nEach test case consists of two lines. The first line of each test case contains three integers c_1, c_2, c_3 (0 ≤ c_1, c_2, c_3 ≤ 10^8) — the capacities of the containers. \n\nThe second line of each test case contains five integers a_1, a_2, a_3, a_4, a_5 (0 ≤ a_i ≤ 10^8), where a_i is the number of items of the i-th category Monocarp has to throw out (i = 1 is paper waste, i = 2 is plastic waste, i = 3 is general waste, i = 4 is partially-paper waste, i = 5 is partially-plastic waste)."}
{"name": "1543_E. The Final Pursuit", "description": "Input\n\nThe first line of input contains a single integer t (1≤ t≤ 4096) — the number of test cases.\n\nFor each test case, the first line contains a single integer n (1≤ n≤ 16).\n\nEach of the next n⋅ 2^{n-1} lines contain two integers u and v (0≤ u, v < 2^n) denoting that there is an edge between the vertices numbered u and v.\n\nIt is guaranteed that the graph described in the input is a permuted n-dimensional hypercube.\n\nAdditionally, it is guaranteed that the sum of 2^n over all test cases does not exceed 2^{16}=65 536."}
{"name": "191_E. Thwarting Demonstrations", "description": "Input\n\nThe first line contains two integers n and k <image> — the number of soldiers in the detachment and the number of times somebody goes on duty.\n\nThe second line contains n space-separated integers ai, their absolute value doesn't exceed 109 — the soldiers' reliabilities.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in С++, it is preferred to use cin, cout streams of the %I64d specifier."}
{"name": "215_E. Periodical Numbers", "description": "Input\n\nThe single input line contains two integers l and r (1 ≤ l ≤ r ≤ 1018). The numbers are separated by a space.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier."}
{"name": "264_C. Choosing Balls", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 105; 1 ≤ q ≤ 500). The second line contains n integers: v1, v2, ..., vn (|vi| ≤ 105). The third line contains n integers: c1, c2, ..., cn (1 ≤ ci ≤ n).\n\nThe following q lines contain the values of the constants a and b for queries. The i-th of these lines contains two integers ai and bi (|ai|, |bi| ≤ 105).\n\nIn each line integers are separated by single spaces."}
{"name": "288_C. Polo the Penguin and XOR operation", "description": "Input\n\nThe single line contains a positive integer n (1 ≤ n ≤ 106)."}
{"name": "618_F. Double Knapsack", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 1 000 000) — the size of both multisets.\n\nThe second line contains n integers, denoting the elements of A. Each element will be between 1 and n inclusive.\n\nThe third line contains n integers, denoting the elements of B. Each element will be between 1 and n inclusive."}
{"name": "667_A. Pouring Rain", "description": "Input\n\nThe only line of the input contains four integer numbers d, h, v, e (1 ≤ d, h, v, e ≤ 104), where:\n\n  * d — the diameter of your cylindrical cup, \n  * h — the initial level of water in the cup, \n  * v — the speed of drinking process from the cup in milliliters per second, \n  * e — the growth of water because of rain if you do not drink from the cup."}
{"name": "734_A. Anton and Danik", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of games played.\n\nThe second line contains a string s, consisting of n uppercase English letters 'A' and 'D' — the outcome of each of the games. The i-th character of the string is equal to 'A' if the Anton won the i-th game and 'D' if Danik won the i-th game."}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 ≤ n ≤ 100) — the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 ≤ ai ≤ 106) — the welfare of the i-th citizen."}
{"name": "779_E. Bitwise Formula", "description": "Input\n\nThe first line contains two integers n and m, the number of variables and bit depth, respectively (1 ≤ n ≤ 5000; 1 ≤ m ≤ 1000). \n\nThe following n lines contain descriptions of the variables. Each line describes exactly one variable. Description has the following format: name of a new variable, space, sign \":=\", space, followed by one of:\n\n  1. Binary number of exactly m bits. \n  2. The first operand, space, bitwise operation (\"AND\", \"OR\" or \"XOR\"), space, the second operand. Each operand is either the name of variable defined before or symbol '?', indicating the number chosen by Peter. \n\n\n\nVariable names are strings consisting of lowercase Latin letters with length at most 10. All variable names are different."}
{"name": "802_M. April Fools' Problem (easy)", "description": "Input\n\nThe first line of the input contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 2200). The second line contains n space-separated integers a1, ..., an (1 ≤ ai ≤ 104)."}
{"name": "849_B. Tell Your World", "description": "Input\n\nThe first line of input contains a positive integer n (3 ≤ n ≤ 1 000) — the number of points.\n\nThe second line contains n space-separated integers y1, y2, ..., yn ( - 109 ≤ yi ≤ 109) — the vertical coordinates of each point."}
{"name": "940_E. Cashback", "description": "Input\n\nThe first line contains integers n and c (1 ≤ n, c ≤ 100 000).\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — elements of a."}
{"name": "994_B. Knights of a Polygonal Table", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ min(n-1,10)) — the number of knights and the number k from the statement.\n\nThe second line contains n integers p_1, p_2 ,…,p_n (1 ≤ p_i ≤ 10^9) — powers of the knights. All p_i are distinct.\n\nThe third line contains n integers c_1, c_2 ,…,c_n (0 ≤ c_i ≤ 10^9) — the number of coins each knight has."}
{"name": "p00344 Cyclic Sugoroku", "description": "Input\n\nThe input is given in the following format.\n\n\nN\na1 a2 ... aN\n\n\nThe number N (1 ≤ N ≤ 100000) of all the cells contained in the sugoroku is given in the first line. On the second line, the number ai (1 ≤ ai ≤ 109) written in each cell is given in turn clockwise."}
{"name": "p01995 Palindromic Subsequences", "description": "Input\n\nacpc"}
{"name": "1089_L. Lazyland", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of idlers and the number of jobs.\n\nThe second line of the input contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ k) — the jobs chosen by each idler.\n\nThe third line of the input contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 10^9) — the time the King needs to spend to persuade the i-th idler."}
{"name": "1108_E2. Array and Segments (Hard version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 300) — the length of the array a and the number of segments, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6), where a_i is the value of the i-th element of the array a.\n\nThe next m lines are contain two integers each. The j-th of them contains two integers l_j and r_j (1 ≤ l_j ≤ r_j ≤ n), where l_j and r_j are the ends of the j-th segment."}
{"name": "1138_B. Circus", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 5 000, n is even) — the number of artists in the troupe.\n\nThe second line contains n digits c_1 c_2 … c_n, the i-th of which is equal to 1 if the i-th artist can perform as a clown, and 0 otherwise.\n\nThe third line contains n digits a_1 a_2 … a_n, the i-th of which is equal to 1, if the i-th artist can perform as an acrobat, and 0 otherwise."}
{"name": "1214_A. Optimal Currency Exchange", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^8) — the initial sum in rubles Andrew has. \n\nThe second line of the input contains one integer d (30 ≤ d ≤ 100) — the price of one dollar in rubles. \n\nThe third line of the input contains integer e (30 ≤ e ≤ 100) — the price of one euro in rubles."}
{"name": "1279_B. Verse For Santa", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9) — the number of parts in the verse and the maximum number of seconds Santa will listen to Vasya, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the time it takes to recite each part of the verse.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1322_C. Instant Noodles", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500 000) — the number of test cases in the given test set. Test case descriptions follow.\n\nThe first line of each case description contains two integers n and m (1~≤~n,~m~≤~500 000) — the number of vertices in either half of the graph, and the number of edges respectively.\n\nThe second line contains n integers c_i (1 ≤ c_i ≤ 10^{12}). The i-th number describes the integer in the vertex i of the right half of the graph.\n\nEach of the following m lines contains a pair of integers u_i and v_i (1 ≤ u_i, v_i ≤ n), describing an edge between the vertex u_i of the left half and the vertex v_i of the right half. It is guaranteed that the graph does not contain multiple edges.\n\nTest case descriptions are separated with empty lines. The total value of n across all test cases does not exceed 500 000, and the total value of m across all test cases does not exceed 500 000 as well."}
{"name": "1341_B. Nastya and Door", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of each test case contains two integers n and k (3 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of mountains and the length of the door.\n\nThe second line of the input data set contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10 ^ 9, a_i ≠ a_{i + 1}) — the heights of mountains.\n\nIt is guaranteed that the sum of n over all the test cases will not exceed 2 ⋅ 10^5."}
{"name": "1404_D. Game of Pairs", "description": "Input\n\n\n2\n\n1 1 2 2\n\n0"}
{"name": "363_B. Fence", "description": "Input\n\nThe first line of the input contains integers n and k (1 ≤ n ≤ 1.5·105, 1 ≤ k ≤ n) — the number of planks in the fence and the width of the hole for the piano. The second line contains the sequence of integers h1, h2, ..., hn (1 ≤ hi ≤ 100), where hi is the height of the i-th plank of the fence."}
{"name": "387_A. George and Sleep", "description": "Input\n\nThe first line contains current time s as a string in the format \"hh:mm\". The second line contains time t in the format \"hh:mm\" — the duration of George's sleep. It is guaranteed that the input contains the correct time in the 24-hour format, that is, 00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59."}
{"name": "579_F. LCS Again", "description": "Input\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 ≤ n ≤ 100 000, 2 ≤ m ≤ 26).\n\nThe second line contains string S."}
{"name": "600_E. Lomsat gelral", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of vertices in the tree.\n\nThe second line contains n integers ci (1 ≤ ci ≤ n), ci — the colour of the i-th vertex.\n\nEach of the next n - 1 lines contains two integers xj, yj (1 ≤ xj, yj ≤ n) — the edge of the tree. The first vertex is the root of the tree."}
{"name": "623_B. Array GCD", "description": "Input\n\nThe first line of the input contains integers n, a and b (1 ≤ n ≤ 1 000 000, 0 ≤ a, b ≤ 109) — the length of the array, the cost of removing a single element in the first operation and the cost of changing an element, respectively.\n\nThe second line contains n integers ai (2 ≤ ai ≤ 109) — elements of the array."}
{"name": "762_C. Two strings", "description": "Input\n\nThe first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 105 characters."}
{"name": "831_E. Cards Sorting", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 100 000) — the number of cards in the deck.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000), where ai is the number written on the i-th from top card in the deck."}
{"name": "922_F. Divisibility", "description": "Input\n\nThe only line contains two integers n and k <image>."}
{"name": "950_B. Intercepted Message", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 105) — the number of blocks in the first and in the second messages.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 106) — the length of the blocks that form the first message.\n\nThe third line contains m integers y1, y2, ..., ym (1 ≤ yi ≤ 106) — the length of the blocks that form the second message.\n\nIt is guaranteed that x1 + ... + xn = y1 + ... + ym. Also, it is guaranteed that x1 + ... + xn ≤ 106."}
{"name": "978_E. Bus Video System", "description": "Input\n\nThe first line contains two integers n and w (1 ≤ n ≤ 1 000, 1 ≤ w ≤ 10^{9}) — the number of bus stops and the capacity of the bus.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (-10^{6} ≤ a_i ≤ 10^{6}), where a_i equals to the number, which has been recorded by the video system after the i-th bus stop."}
{"name": "p01132 Make Purse Light", "description": "Input\n\nThe input contains several test cases.\n\nEach test case consists of two lines. The first line contains a single integer representing Mr. Bill's payment in yen. The second line contains four integers, which in turn represent the number of 10-yen coins, 50-yen coins, 100-yen coins, and 500-yen coins in your wallet.\n\nThe payment amount is always in units of 10 yen. That is, the one-yen place of the payment amount is always 0. You can also assume that you can only have up to 20 coins of the same type in your wallet. No non-payable cases are given during input.\n\nThe end of input is represented by a line containing a single 0."}
{"name": "1023_C. Bracket Subsequence", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ k ≤ n ≤ 2 ⋅ 10^5, both n and k are even) — the length of s and the length of the sequence you are asked to find.\n\nThe second line is a string s — regular bracket sequence of length n."}
{"name": "1138_C. Skyscrapers", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\n\nEach of the following n lines contains m integers a_{i,1}, a_{i,2}, ..., a_{i,m} (1 ≤ a_{i,j} ≤ 10^9). The integer a_{i,j}, located on j-th position in the i-th line denotes the height of the skyscraper at the intersection of the i-th Eastern street and j-th Southern direction."}
{"name": "1156_E. Special Segments of Permutation", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n). All these integers are pairwise distinct."}
{"name": "1178_G. The Awesomest Vertex", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 2⋅ 10^5, 1 ≤ q ≤ 10^5) — the number of vertices in the tree and the number of queries, respectively.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_n (1 ≤ p_i < i), where p_i means that there is an edge between vertices i and p_i.\n\nThe third line contains n integers a_1, a_2, ..., a_n (-5000 ≤ a_i ≤ 5000), the initial values of a_i for each vertex.\n\nThe fourth line contains n integers b_1, b_2, ..., b_n (-5000 ≤ b_i ≤ 5000), the values of b_i for each vertex.\n\nEach of the next q lines describes a query. It has one of the following forms: \n\n  * 1 v x (1 ≤ v ≤ n, 1≤ x ≤ 5000). \n  * 2 v (1 ≤ v ≤ n)."}
{"name": "1197_A. DIY Wooden Ladder", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100) — the number of queries. The queries are independent.\n\nEach query consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of planks you have.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the lengths of the corresponding planks.\n\nIt's guaranteed that the total number of planks from all queries doesn't exceed 10^5."}
{"name": "1214_B. Badges", "description": "Input\n\nThe first line contains an integer b (1 ≤ b ≤ 300), the number of boys. \n\nThe second line contains an integer g (1 ≤ g ≤ 300), the number of girls. \n\nThe third line contains an integer n (1 ≤ n ≤ b + g), the number of the board games tournament participants."}
{"name": "1237_D. Balanced Playlist", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5), denoting the number of tracks in the playlist.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), denoting coolnesses of the tracks."}
{"name": "1279_C. Stack of Presents", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThen the test cases follow, each represented by three lines.\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 10^5) — the number of presents in the stack and the number of presents Santa wants to send, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n, all a_i are unique) — the order of presents in the stack.\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ n, all b_i are unique) — the ordered list of presents Santa has to send.\n\nThe sum of n over all test cases does not exceed 10^5."}
{"name": "129_A. Cookies", "description": "Input\n\nThe first line contains the only integer n (1 ≤ n ≤ 100) — the number of cookie bags Anna and Maria have. The second line contains n integers ai (1 ≤ ai ≤ 100) — the number of cookies in the i-th bag."}
{"name": "1322_D. Reality Show", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2000) — the number of candidates and an upper bound for initial aggressiveness levels.\n\nThe second line contains n integers l_i (1 ≤ l_i ≤ m) — initial aggressiveness levels of all candidates.\n\nThe third line contains n integers s_i (0 ≤ s_i ≤ 5000) — the costs (in roubles) to recruit each of the candidates.\n\nThe fourth line contains n + m integers c_i (|c_i| ≤ 5000) — profitability for each aggrressiveness level.\n\nIt is guaranteed that aggressiveness level of any participant can never exceed n + m under given conditions."}
{"name": "1341_C. Nastya and Strange Generator", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of the test case contains a single integer n (1 ≤ n ≤ 10^5) — the size of the permutation.\n\nThe second line of the test case contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n) — the permutation written by Denis.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1426_B. Symmetric Matrix", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next 2n lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding 100 — the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding 100 — the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input."}
{"name": "1473_A. Replacing Elements", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000) — the number of test cases.\n\nThe first line of each test case contains two integers n and d (3 ≤ n ≤ 100; 1 ≤ d ≤ 100) — the number of elements in the array a and the value d.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the array a."}
{"name": "1499_C. Minimum Grid Path", "description": "Input\n\nThe first line contains the single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (2 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9) — the costs of each segment.\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5."}
{"name": "244_C. The Brand New Function", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements of sequence a. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 106) — the elements of sequence a."}
{"name": "363_C. Fixing Typos", "description": "Input\n\nThe single line of the input contains word s, its length is from 1 to 200000 characters. The given word s consists of lowercase English letters."}
{"name": "387_B. George and Round", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3000) — the minimal number of problems in a good round and the number of problems George's prepared. The second line contains space-separated integers a1, a2, ..., an (1 ≤ a1 < a2 < ... < an ≤ 106) — the requirements for the complexity of the problems in a good round. The third line contains space-separated integers b1, b2, ..., bm (1 ≤ b1 ≤ b2... ≤ bm ≤ 106) — the complexities of the problems prepared by George."}
{"name": "600_F. Edge coloring of bipartite graph", "description": "Input\n\nThe first line contains three integers a, b, m (1 ≤ a, b ≤ 1000, 0 ≤ m ≤ 105), a is the size of the first part, b is the size of the second part, m is the number of edges in the graph.\n\nEach of the next m lines contains two integers x, y (1 ≤ x ≤ a, 1 ≤ y ≤ b), where x is the number of the vertex in the first part and y is the number of the vertex in the second part. It is guaranteed that there are no multiple edges."}
{"name": "739_E. Gosha is hunting", "description": "Input\n\nThe first line contains three integers n, a and b (2 ≤ n ≤ 2000, 0 ≤ a, b ≤ n) — the number of Pokemons, the number of Poke Balls and the number of Ultra Balls.\n\nThe second line contains n real values p1, p2, ..., pn (0 ≤ pi ≤ 1), where pi is the probability of catching the i-th Pokemon if Gosha throws a Poke Ball to it.\n\nThe third line contains n real values u1, u2, ..., un (0 ≤ ui ≤ 1), where ui is the probability of catching the i-th Pokemon if Gosha throws an Ultra Ball to it.\n\nAll the probabilities are given with exactly three digits after the decimal separator."}
{"name": "807_E. Prairie Partition", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of numbers given from Alice to Borys.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1012; a1 ≤ a2 ≤ ... ≤ an) — the numbers given from Alice to Borys."}
{"name": "900_C. Remove Extra One", "description": "Input\n\nThe first line contains the only integer n (1 ≤ n ≤ 105) — the length of the permutation.\n\nThe second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the permutation. All the integers are distinct."}
{"name": "978_F. Mentors", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ min(2 ⋅ 10^5, (n ⋅ (n - 1))/(2))) — total number of programmers and number of pairs of programmers which are in a quarrel.\n\nThe second line contains a sequence of integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 10^{9}), where r_i equals to the skill of the i-th programmer.\n\nEach of the following k lines contains two distinct integers x, y (1 ≤ x, y ≤ n, x ≠ y) — pair of programmers in a quarrel. The pairs are unordered, it means that if x is in a quarrel with y then y is in a quarrel with x. Guaranteed, that for each pair (x, y) there are no other pairs (x, y) and (y, x) in the input."}
{"name": "p01442 Mysterious Maze", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nH W N\ns1 ... sN\nc1,1c1,2...c1,W\n...\ncH,1cH,2...cH,W\n\n\nThe first line of a dataset contains three integers H, W and N (1 ≤ H, W ≤ 1,000, 1 ≤ N ≤ 1,000,000).\n\nThe second line contains a program of N commands.\n\nEach of the following H lines contains exactly W characters. Each of these characters represents a cell of the maze. \".\" indicates empty, \"#\" indicates a wall, \"S\" indicates an entrance, and \"G\" indicates an exit. There is exactly one entrance cell and one exit cell.\n\nThe end of input is indicated by a line with three zeros."}
{"name": "1081_B. Farewell Party", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of persons in the party.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ n-1), the statements of people."}
{"name": "1100_B. Build a Contest", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of difficulty levels and the number of problems Arkady created.\n\nThe second line contains m integers a_1, a_2, …, a_m (1 ≤ a_i ≤ n) — the problems' difficulties in the order Arkady created them."}
{"name": "1121_F. Compress String", "description": "Input\n\nThe first line contains three positive integers, separated by spaces: n, a and b (1 ≤ n, a, b ≤ 5000) — the length of the string, the cost to compress a one-character string and the cost to compress a string that appeared before.\n\nThe second line contains a single string s, consisting of n lowercase English letters."}
{"name": "1188_D. Make Equal", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^{17})."}
{"name": "1225_F. Tree Factory", "description": "Input\n\nThe first line contains a single integer n — the number of vertices in the tree (2 ≤ n ≤ 10^5).\n\nThe second line contains n - 1 integers p(1), …, p(n - 1) — indices of parent vertices of 1, …, n - 1 respectively (0 ≤ p(i) < i)."}
{"name": "1420_C1. Pokémon Army (easy version)", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and q (1 ≤ n ≤ 3 ⋅ 10^5, q = 0) denoting the number of pokémon and number of operations respectively.\n\nThe second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) denoting the strengths of the pokémon.\n\ni-th of the last q lines contains two positive integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) denoting the indices of pokémon that were swapped in the i-th operation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5, and the sum of q over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "234_C. Weather", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 105) — the number of days for which Vasya has been measuring the temperature. \n\nThe second line contains a sequence of n integers t1, t2, ..., tn (|ti| ≤ 109) — the sequence of temperature values. Numbers ti are separated by single spaces."}
{"name": "25_B. Phone numbers", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 100) — amount of digits in the phone number. The second line contains n digits — the phone number to divide into groups."}
{"name": "424_D. Biathlon Track", "description": "Input\n\nThe first line of the input contains three integers n, m and t (3 ≤ n, m ≤ 300, 1 ≤ t ≤ 109) — the sizes of the land plot and the desired distance covering time.\n\nThe second line also contains three integers tp, tu and td (1 ≤ tp, tu, td ≤ 100) — the time the average biathlete needs to cover a flat piece of the track, an ascent and a descent respectively.\n\nThen n lines follow, each line contains m integers that set the heights of each square of the given plot of land. Each of the height values is a positive integer, not exceeding 106."}
{"name": "633_F. The Chocolate Spree", "description": "Input\n\nThe first line of the input contains the single integer n (2 ≤ n ≤ 100 000) — the number of vertices in the tree.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109), i-th of these numbers stands for the number of chocolates stored at the node i.\n\nThen follow n - 1 lines that describe the tree. Each of them contains two integers ui and vi (1 ≤ ui, vi ≤ n) — indices of vertices connected by the i-th edge."}
{"name": "81_D. Polycarp's Picture Gallery", "description": "Input\n\nThe first line contains two integers n and m (3 ≤ n ≤ 1000, 1 ≤ m ≤ 40), where n is the number of photos on the widget, and m is the number of albums. The second line contains m integers a1, a2, ..., am (1 ≤ ai ≤ 1000), where ai is the number of photos in the i-th album."}
{"name": "892_D. Gluttony", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 22) — the size of the array.\n\nThe second line contains n space-separated distinct integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the elements of the array."}
{"name": "914_D. Bash and a Tough Math Puzzle", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 5·105) — the size of the array.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array.\n\nThe third line contains an integer q (1 ≤ q ≤ 4·105) — the number of queries.\n\nThe next q lines describe the queries and may have one of the following forms:\n\n  * 1 l r x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 109). \n  * 2 i y (1 ≤ i ≤ n, 1 ≤ y ≤ 109). \n\n\n\nGuaranteed, that there is at least one query of first type."}
{"name": "962_D. Merge Equals", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 150 000) — the number of elements in the array.\n\nThe second line contains a sequence from n elements a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{9}) — the elements of the array."}
{"name": "p01689 Dowsing Machine", "description": "Input\n\nInput can be given in the following format.\n\n\nh w d n\nt_ {0,0} t_ {0,1} ... t_ {0, w-1}\n...\nt_ {h-1,0} t_ {h-1,1} ... t_ {h-1, w-1}\nr_1 r_2 ... r_d\nx_1 y_1 s_1\n...\nx_n y_n s_n\n\nThe first line consists of four integers, each of which has a vertical width h, a horizontal width w, the number of squares d, and the number of times n using the D machine, separated by one blank character. In the following h line, the character of each cell is given. The character t_ {i, j} at the j + 1th (0 \\ leq j <w) on the second line (0 \\ leq i <h) of i + represents the character of the square (j, i). In the h + 2nd line, the radius r_k (1 \\ leq k \\ leq d) of each square is given by one space delimiter. The next n lines give the reaction of the D machine. In line l + h + 3 (1 \\ leq l \\ leq n), x_l, y_l, s_l are given with one space delimiter, and the reaction s_l is shown when using the D machine in the mass (x_l, y_l) Indicates that it was done.\n\nConstraint\n\n* 1 \\ leq h \\ leq 50, 1 \\ leq w \\ leq 50, 1 \\ leq d \\ leq 10, 1 \\ leq n \\ leq 50\n* t_ {i, j} is one of \"#\", \".\", \"D\", and there is always only one letter \"D\"\n* 0 \\ leq r_k \\ leq 50, and for k> 1, r_ {k-1} <r_k\n* 0 \\ leq x_l <w, 0 \\ leq y_l <h, 0 \\ leq s_l \\ leq d\n* You can reach the square (x_l, y_l) by repeating the movement from the square represented by the letter \"D\"."}
{"name": "1005_E2. Median on Segments (General Case Edition)", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n,m ≤ 2⋅10^5) — the length of the given sequence and the required value of the median.\n\nThe second line contains an integer sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2⋅10^5)."}
{"name": "1029_D. Concatenated Multiples", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 2 ≤ k ≤ 10^9).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1093_F. Vasya and Array", "description": "Input\n\nThe first line contains three integers n, k and len (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100, 1 ≤ len ≤ n).\n\nThe second line contains n numbers — the array. Each number is either -1 or between 1 and k (inclusive)."}
{"name": "1142_A. The Beatles", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100 000) — the number of fast food restaurants on the circle and the distance between the neighboring restaurants, respectively.\n\nThe second line contains two integers a and b (0 ≤ a, b ≤ k/2) — the distances to the nearest fast food restaurants from the initial city and from the city Sergey made the first stop at, respectively."}
{"name": "1162_C. Hide and Seek", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n,k ≤ 10^5) — the number of cells and the number of questions Bob asked.\n\nThe second line contains k integers x_1, x_2, …, x_k (1 ≤ x_i ≤ n) — Bob's questions."}
{"name": "1183_B. Equalize Prices", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of queries. Each query is presented by two lines.\n\nThe first line of the query contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^8) — the number of products and the value k. The second line of the query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^8), where a_i is the price of the i-th product."}
{"name": "1261_B2. Optimal Subsequences (Hard Version)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2⋅10^5) — the length of the sequence a.\n\nThe second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line contains an integer m (1 ≤ m ≤ 2⋅10^5) — the number of requests.\n\nThe following m lines contain pairs of integers k_j and pos_j (1 ≤ k ≤ n, 1 ≤ pos_j ≤ k_j) — the requests."}
{"name": "1283_D. Christmas Trees", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of Christmas trees and the number of people.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (-10^9 ≤ x_i ≤ 10^9), where x_i is the position of the i-th Christmas tree. It is guaranteed that all x_i are distinct."}
{"name": "1409_F. Subsequences of Length Two", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters."}
{"name": "1430_D. String Deletion", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the string s.\n\nThe second line contains string s of n characters. Each character is either 0 or 1.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1453_F. Even Harder", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 500).\n\nEach test case contains two lines. The first line of each test case consists of an integer n (2 ≤ n ≤ 3000) — the number of platforms of the game.\n\nThe second line of each test case contains n integers. The i-th integer is a_i (0 ≤ a_i ≤ n-i) — the integer of the i-th platform.\n\nIt is guaranteed that: \n\n  * For each test case, there is at least one way to win initially. \n  * The sum of n in all test cases doesn't exceed 3000."}
{"name": "159_E. Zebra Tower", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105) — the number of cubes. Next n lines contain the descriptions of the cubes, one description per line. A cube description consists of two space-separated integers ci and si (1 ≤ ci, si ≤ 109) — the i-th cube's color and size, correspondingly. It is guaranteed that there are at least two cubes of different colors."}
{"name": "201_C. Fragile Bridges", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 105) — the number of platforms on the bonus level. The second line contains (n - 1) integers ai (1 ≤ ai ≤ 109, 1 ≤ i < n) — the number of transitions from one end to the other that the bridge between platforms i and i + 1 can bear."}
{"name": "226_B. Naughty Stone Piles", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of stone piles. The second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 109) — the initial sizes of the stone piles. \n\nThe third line contains integer q (1 ≤ q ≤ 105) — the number of queries. The last line contains q space-separated integers k1, k2, ..., kq (1 ≤ ki ≤ 105) — the values of number k for distinct queries. Note that numbers ki can repeat."}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed."}
{"name": "298_C. Parity Game", "description": "Input\n\nThe first line contains the string a and the second line contains the string b (1 ≤ |a|, |b| ≤ 1000). Both strings contain only the characters \"0\" and \"1\". Here |x| denotes the length of the string x."}
{"name": "321_A. Ciel and Robot", "description": "Input\n\nThe first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command."}
{"name": "369_C. Valera and Elections", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 105) — the number of districts in the city.\n\nThen n - 1 lines follow. Each line contains the description of a city road as three positive integers xi, yi, ti (1 ≤ xi, yi ≤ n, 1 ≤ ti ≤ 2) — the districts connected by the i-th bidirectional road and the road type. If ti equals to one, then the i-th road isn't the problem road; if ti equals to two, then the i-th road is the problem road.\n\nIt's guaranteed that the graph structure of the city is a tree."}
{"name": "413_C. Jeopardy!", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100; m ≤ min(n, 30)) — the total number of questions and the number of auction questions, correspondingly. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 107) — the prices of the questions. The third line contains m distinct integers bi (1 ≤ bi ≤ n) — the numbers of auction questions. Assume that the questions are numbered from 1 to n."}
{"name": "509_F. Progress Monitoring", "description": "Input\n\nThe first line contains the positive integer n (1 ≤ n ≤ 500) — the length of sequence b. \n\nThe second line contains n positive integers b1, b2, ..., bn (1 ≤ bi ≤ n). It is guaranteed that b is a permutation, or in other words, each of the numbers 1, 2, ..., n appears exactly once in the sequence b. Also it is guaranteed that b1 = 1."}
{"name": "534_B. Covered Path", "description": "Input\n\nThe first line contains two integers v1 and v2 (1 ≤ v1, v2 ≤ 100) — the speeds in meters per second at the beginning of the segment and at the end of the segment, respectively.\n\nThe second line contains two integers t (2 ≤ t ≤ 100) — the time when the car moves along the segment in seconds, d (0 ≤ d ≤ 10) — the maximum value of the speed change between adjacent seconds.\n\nIt is guaranteed that there is a way to complete the segment so that:\n\n  * the speed in the first second equals v1, \n  * the speed in the last second equals v2, \n  * the absolute value of difference of speeds between any two adjacent seconds doesn't exceed d."}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length."}
{"name": "584_E. Anton and Ira", "description": "Input\n\nThe first line contains a single number n (1 ≤ n ≤ 2000) — the length of the permutations.\n\nThe second line contains a sequence of n numbers from 1 to n — permutation p. Each number from 1 to n occurs exactly once in this line.\n\nThe third line contains a sequence of n numbers from 1 to n — permutation s. Each number from 1 to n occurs once in this line."}
{"name": "700_D. Huffman Coding on Segment", "description": "Input\n\nThe first line of the input contains the single integer n (1 ≤ n ≤ 100 000) — the length of the initial message. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000) — characters of the message.\n\nNext line contains the single integer q (1 ≤ q ≤ 100 000) — the number of queries.\n\nThen follow q lines with queries descriptions. The i-th of these lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the position of the left and right ends of the i-th substring respectively. Positions are numbered from 1. Substrings may overlap in any way. The same substring may appear in the input more than once."}
{"name": "791_E. Bear and Company", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 75) — the length of the string.\n\nThe second line contains a string s, consisting of uppercase English letters. The length of the string is equal to n."}
{"name": "883_K. Road Widening", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2·105) — number of parts of the street.\n\nEach of the following n lines contains two integers si, gi (1 ≤ si ≤ 106, 0 ≤ gi ≤ 106) — current width of road and width of the lawn on the i-th part of the street."}
{"name": "p00769 Hierarchical Democracy", "description": "Input\n\nThe entire input looks like:\n\n> the number of datasets (=n)\n>  1st dataset\n>  2nd dataset\n>  …\n>  n-th dataset\n>\n\nThe number of datasets, n, is no more than 100.\n\nThe number of the eligible voters of each district and the part-whole relations among districts are denoted as follows.\n\n* An electoral district of the first stage is denoted as [c], where c is the number of the eligible voters of the district.\n* A district of the k-th stage (k > 1) is denoted as [d1d2…dm], where d1, d2, …, dm denote its sub-districts of the (k − 1)-th stage in this notation.\n\n\n\nFor instance, an electoral district of the first stage that has 123 eligible voters is denoted as [123]. A district of the second stage consisting of three sub-districts of the first stage that have 123, 4567, and 89 eligible voters, respectively, is denoted as [[123][4567][89]].\n\nEach dataset is a line that contains the character string denoting the district of the final stage in the aforementioned notation. You can assume the following.\n\n* The character string in each dataset does not include any characters except digits ('0', '1', …, '9') and square brackets ('[', ']'), and its length is between 11 and 10000, inclusive.\n* The number of the eligible voters of each electoral district of the first stage is between 3 and 9999, inclusive.\n\n\n\nThe number of stages is a nation-wide constant. So, for instance, [[[9][9][9]][9][9]] never appears in the input. [[[[9]]]] may not appear either since each district of the second or later stage must have multiple sub-districts of the previous stage."}
{"name": "p01303 Petting Cats", "description": "Input\n\nOn the first line of input, four integers X, Y, W, H are given, separated by a space character. These represent the x-coordinate of the southwestern end of the campus, the y-coordinate of the same point, the east-west width of the campus, and the north-south length of the campus, respectively. These values ​​satisfy -10000 <= X, Y <= 10000 and 0 <W, H <= 10000.\n\nThe second line of input is given the number of cats N (0 <N <= 100).\n\nThe following N lines are given a set of integers (-50000 <= x, y <= 50000) representing the x, y coordinates of the cat's position, one per line for each cat.\n\nThe positive direction on the x-axis is east, the positive direction on the y-axis is north, and all numbers given are integers."}
{"name": "p01919 Country in Distortion", "description": "Input\n\n4 4\n1 2 3\n2 3 1\n2 4 5\n3 4 2\n5\n4 5 6"}
{"name": "1006_D. Two Strings Swaps", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the length of strings a and b.\n\nThe second line contains the string a consisting of exactly n lowercase English letters.\n\nThe third line contains the string b consisting of exactly n lowercase English letters."}
{"name": "102_C. Homework", "description": "Input\n\nThe first input data line contains a string whose length is equal to n (1 ≤ n ≤ 105). The string consists of lowercase Latin letters. The second line contains the number k (0 ≤ k ≤ 105)."}
{"name": "1051_C. Vasya and Multisets", "description": "Input\n\nThe first line contains a single integer n~(2 ≤ n ≤ 100).\n\nThe second line contains n integers s_1, s_2, ... s_n~(1 ≤ s_i ≤ 100) — the multiset s."}
{"name": "1073_D. Berland Fair", "description": "Input\n\nThe first line contains two integers n and T (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ T ≤ 10^{18}) — the number of booths at the fair and the initial amount of burles Polycarp has.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the price of the single candy at booth number i."}
{"name": "1114_E. Arithmetic Progression", "description": "Input\n\n\n4\n\n0\n\n1\n\n14\n\n24\n\n9\n\n19"}
{"name": "1163_B1. Cat Party (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the total number of days.\n\nThe second line contains n integers u_1, u_2, …, u_n (1 ≤ u_i ≤ 10) — the colors of the ribbons the cats wear."}
{"name": "1201_B. Zero Array", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the size of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1303_E. Erase Subsequences", "description": "Input\n\nThe first line contains the single integer T (1 ≤ T ≤ 100) — the number of test cases.\n\nNext 2T lines contain test cases — two per test case. The first line contains string s consisting of lowercase Latin letters (1 ≤ |s| ≤ 400) — the initial string.\n\nThe second line contains string t consisting of lowercase Latin letters (1 ≤ |t| ≤ |s|) — the string you'd like to build.\n\nIt's guaranteed that the total length of strings s doesn't exceed 400."}
{"name": "1478_C. Nezzar and Symmetric Array", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. \n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains 2n integers d_1, d_2, …, d_{2n} (0 ≤ d_i ≤ 10^{12}).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "227_B. Effective Approach", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n distinct space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n) — the elements of array. \n\nThe third line contains integer m (1 ≤ m ≤ 105) — the number of queries. The last line contains m space-separated integers b1, b2, ..., bm (1 ≤ bi ≤ n) — the search queries. Note that the queries can repeat."}
{"name": "299_C. Weird Game", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106). The second line contains string s — Yaroslav's word. The third line contains string t — Andrey's word.\n\nIt is guaranteed that both words consist of 2·n characters \"0\" and \"1\"."}
{"name": "414_C. Mashmokh and Reverse Operation", "description": "Input\n\nThe first line of input contains a single integer n (0 ≤ n ≤ 20). \n\nThe second line of input contains 2n space-separated integers a[1], a[2], ..., a[2n] (1 ≤ a[i] ≤ 109), the initial array.\n\nThe third line of input contains a single integer m (1 ≤ m ≤ 106). \n\nThe fourth line of input contains m space-separated integers q1, q2, ..., qm (0 ≤ qi ≤ n), the queries.\n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++."}
{"name": "441_A. Valera and Antique Items", "description": "Input\n\nThe first line contains two space-separated integers n, v (1 ≤ n ≤ 50; 104 ≤ v ≤ 106) — the number of sellers and the units of money the Valera has.\n\nThen n lines follow. The i-th line first contains integer ki (1 ≤ ki ≤ 50) the number of items of the i-th seller. Then go ki space-separated integers si1, si2, ..., siki (104 ≤ sij ≤ 106) — the current prices of the items of the i-th seller."}
{"name": "487_A. Fight the Monster", "description": "Input\n\nThe first line contains three integers HPY, ATKY, DEFY, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\n\nThe second line contains three integers HPM, ATKM, DEFM, separated by a space, denoting the HP, ATK and DEF of the monster.\n\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1 HP, 1 ATK and 1 DEF.\n\nAll numbers in input are integer and lie between 1 and 100 inclusively."}
{"name": "792_E. Colored Balls", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 500).\n\nThe second line contains n integer numbers a1, a2, ... , an (1 ≤ ai ≤ 109)."}
{"name": "839_A. Arya and Bran", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10000).\n\nThe second line contains n integers a1, a2, a3, ..., an (1 ≤ ai ≤ 100)."}
{"name": "884_C. Bertown Subway", "description": "Input\n\nThe first line contains one integer number n (1 ≤ n ≤ 100000) — the number of stations.\n\nThe second line contains n integer numbers p1, p2, ..., pn (1 ≤ pi ≤ n) — the current structure of the subway. All these numbers are distinct."}
{"name": "92_D. Queue", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105) — the number of walruses in the queue. The second line contains integers ai (1 ≤ ai ≤ 109).\n\nNote that some walruses can have the same age but for the displeasure to emerge the walrus that is closer to the head of the queue needs to be strictly younger than the other one."}
{"name": "p00630 CamelCase", "description": "Input\n\nMultiple datasets are given as input. Each dataset is given in the following format:\n\nname type (identifier, naming convention: space-separated strings and characters)\n\ntype is a character indicating the naming convention and is as shown in the table below:\n\ntype | Naming convention\n--- | ---\nU | Upper CamelCase\nL | Lower CamelCase\nD | Connect with underscore\n\nThe number of characters in the given identifier is 1 or more and 100 or less.\n\nEnd of input when type is'X'. Do not output to this input."}
{"name": "p00905 Stylish", "description": "Input\n\nThe input consists of multiple datasets. The first line of a dataset contains two integers p (1 ≤ p ≤ 10) and q (1 ≤ q ≤ 10). The next p lines form a well-indented program P written by a Stylish master and the following q lines form another program Q. You may assume that every line of both programs has at least one character and at most 80 characters. Also, you may assume that no line of Q starts with a period.\n\nThe last dataset is followed by a line containing two zeros."}
{"name": "p01308 Angel Stairs", "description": "Input\n\nThe first line of input gives the number of steps n of the stairs and the length m of the song that the angel wants to play. The second line is the information of the stairs, and T1, T2, ..., Tn are given in this order. The third line is the song that the angel wants to play, and S1, S2, ..., Sm are given in this order. All of these are separated by a single space character and satisfy 1 <= n, m <= 50000."}
{"name": "1013_B. And", "description": "Input\n\nThe first line contains integers n and x (2 ≤ n ≤ 100 000, 1 ≤ x ≤ 100 000), number of elements in the array and the number to and with.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 100 000), the elements of the array."}
{"name": "1037_H. Security", "description": "Input\n\nThe first line of input contains a non-empty string s (1 ≤ |s| ≤ 10^{5}) consisting of lowercase English letters.\n\nThe second line contains an integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of strings to select.\n\nEach of the next q lines contains two integers l, r (1 ≤ l ≤ r ≤ |s|) and a non-empty string x consisting of lowercase English letters. The total length of strings x for all queries does not exceed 2 ⋅ 10^{5}."}
{"name": "1082_B. Vova and Trophies", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 10^5) — the number of trophies.\n\nThe second line contains n characters, each of them is either G or S. If the i-th character is G, then the i-th trophy is a golden one, otherwise it's a silver trophy."}
{"name": "1101_D. GCD Counting", "description": "Input\n\nThe first line contains one integer n — the number of vertices (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the numbers written on vertices.\n\nThen n - 1 lines follow, each containing two integers x and y (1 ≤ x, y ≤ n, x ≠ y) denoting an edge connecting vertex x with vertex y. It is guaranteed that these edges form a tree."}
{"name": "1189_F. Array Beauty", "description": "Input\n\nThe first line contains integers n, k (2 ≤ k ≤ n ≤ 1000).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^5)."}
{"name": "1292_B. Aroma's Search", "description": "Input\n\nThe first line contains integers x_0, y_0, a_x, a_y, b_x, b_y (1 ≤ x_0, y_0 ≤ 10^{16}, 2 ≤ a_x, a_y ≤ 100, 0 ≤ b_x, b_y ≤ 10^{16}), which define the coordinates of the data nodes.\n\nThe second line contains integers x_s, y_s, t (1 ≤ x_s, y_s, t ≤ 10^{16}) – the initial Aroma's coordinates and the amount of time available."}
{"name": "1312_C. Adding Powers", "description": "Input\n\nThe first line contains one integer T (1 ≤ T ≤ 1000) — the number of test cases. Next 2T lines contain test cases — two lines per test case.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 30, 2 ≤ k ≤ 100) — the size of arrays v and a and value k used in the algorithm.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{16}) — the array you'd like to achieve."}
{"name": "1334_G. Substring Search", "description": "Input\n\nThe first line contains 26 integers p_1, p_2, ..., p_{26} (1 ≤ p_i ≤ 26, all these integers are pairwise distinct).\n\nThe second line contains one string s, and the third line contains one string t (2 ≤ |s| ≤ |t| ≤ 2 ⋅ 10^5) both consisting of lowercase Latin letters."}
{"name": "1355_B. Young Explorers", "description": "Input\n\nThe first line contains the number of independent test cases T(1 ≤ T ≤ 2 ⋅ 10^5). Next 2T lines contain description of test cases.\n\nThe first line of description of each test case contains the number of young explorers N (1 ≤ N ≤ 2 ⋅ 10^5).\n\nThe second line contains N integers e_1, e_2, …, e_N (1 ≤ e_i ≤ N), where e_i is the inexperience of the i-th explorer.\n\nIt's guaranteed that sum of all N doesn't exceed 3 ⋅ 10^5."}
{"name": "1375_A. Sign Flipping", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 500) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (3 ≤ n ≤ 99, n is odd) — the number of integers given to you.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the numbers themselves.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10000."}
{"name": "1398_D. Colored Rectangles", "description": "Input\n\nThe first line contains three integers R, G, B (1 ≤ R, G, B ≤ 200) — the number of pairs of red sticks, the number of pairs of green sticks and the number of pairs of blue sticks.\n\nThe second line contains R integers r_1, r_2, ..., r_R (1 ≤ r_i ≤ 2000) — the lengths of sticks in each pair of red sticks.\n\nThe third line contains G integers g_1, g_2, ..., g_G (1 ≤ g_i ≤ 2000) — the lengths of sticks in each pair of green sticks.\n\nThe fourth line contains B integers b_1, b_2, ..., b_B (1 ≤ b_i ≤ 2000) — the lengths of sticks in each pair of blue sticks."}
{"name": "1421_E. Swedish Heroes", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200000).\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — powers of the heroes."}
{"name": "1491_C. Pekora and Trampoline", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 5000) — the number of trampolines.\n\nThe second line of each test case contains n integers S_1, S_2, ..., S_n (1 ≤ S_i ≤ 10^9), where S_i is the strength of the i-th trampoline.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 5000."}
{"name": "1513_F. Swapping Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ {10^9}). \n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ {10^9})."}
{"name": "260_E. Dividing Kingdom", "description": "Input\n\nThe first line contains integer n (9 ≤ n ≤ 105) — the number of cities in Flatland. Next n lines each contain two space-separated integers: xi, yi ( - 109 ≤ xi, yi ≤ 109) — the coordinates of the i-th city. No two cities are located at the same point. The last line contains nine space-separated integers: <image>."}
{"name": "355_C. Vasya and Robot", "description": "Input\n\nThe first line contains five integers n, l, r, Ql, Qr (1 ≤ n ≤ 105; 1 ≤ l, r ≤ 100; 1 ≤ Ql, Qr ≤ 104).\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 100)."}
{"name": "379_D. New Year Letter", "description": "Input\n\nThe first line contains four integers k, x, n, m (3 ≤ k ≤ 50; 0 ≤ x ≤ 109; 1 ≤ n, m ≤ 100)."}
{"name": "44_E. Anfisa the Monkey", "description": "Input\n\nThe first line contains three integers k, a and b (1 ≤ k ≤ 200, 1 ≤ a ≤ b ≤ 200). The second line contains a sequence of lowercase Latin letters — the text typed by Anfisa. It is guaranteed that the given line is not empty and its length does not exceed 200 symbols."}
{"name": "594_A. Warrior and Archer", "description": "Input\n\nThe first line on the input contains a single integer n (2 ≤ n ≤ 200 000, n is even) — the number of positions available initially. The second line contains n distinct integers x1, x2, ..., xn (0 ≤ xi ≤ 109), giving the coordinates of the corresponding positions."}
{"name": "615_D. Multipliers", "description": "Input\n\nThe first line of the input contains a single integer m (1 ≤ m ≤ 200 000) — the number of primes in factorization of n. \n\nThe second line contains m primes numbers pi (2 ≤ pi ≤ 200 000)."}
{"name": "755_C. PolandBall and Forest", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 104) — the number of Balls living in the forest.\n\nThe second line contains a sequence p1, p2, ..., pn of length n, where (1 ≤ pi ≤ n) holds and pi denotes the most distant from Ball i relative living on the same tree. If there are several most distant relatives living on the same tree, pi is the id of one with the smallest id.\n\nIt's guaranteed that the sequence p corresponds to some valid forest.\n\nHacking: To hack someone, you should provide a correct forest as a test. The sequence p will be calculated according to the forest and given to the solution you try to hack as input. Use the following format:\n\nIn the first line, output the integer n (1 ≤ n ≤ 104) — the number of Balls and the integer m (0 ≤ m < n) — the total number of edges in the forest. Then m lines should follow. The i-th of them should contain two integers ai and bi and represent an edge between vertices in which relatives ai and bi live. For example, the first sample is written as follows:\n    \n    \n      \n    5 3  \n    1 2  \n    3 4  \n    4 5"}
{"name": "847_B. Preparing for Merge Sort", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2·105) — the number of elements in Ivan's array.\n\nThe second line contains a sequence consisting of distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) — Ivan's array."}
{"name": "p00683 A Simple Offline Text Editor", "description": "Input\n\nThe first input line contains a positive integer, which represents the number of texts the editor will edit. For each text, the input contains the following descriptions:\n\n* The first line is an initial text whose length is at most 100.\n* The second line contains an integer M representing the number of editing commands.\n* Each of the third through the M+2nd lines contains an editing command.\n\n\n\nYou can assume that every input line is in a proper format or has no syntax errors. You can also assume that every input line has no leading or trailing spaces and that just a single blank character occurs between a command name (e.g., forward) and its argument (e.g., char)."}
{"name": "p01225 Rummy", "description": "Input\n\nThe first line of input is given the number T (0 <T ≤ 50), which represents the number of datasets. This line is followed by T datasets.\n\nEach dataset consists of two lines, the first line is given the number ni of the i-th (i = 1, 2, ..., 9) card, each separated by a space, and the second line is i. The letters ci representing the color of the second card are given, separated by spaces. The number ni on the card is an integer that satisfies 1 ≤ ni ≤ 9, and the color ci on the card is one of the letters \"` R` \",\" `G`\", and \"` B` \", respectively.\n\nNo more than 5 cards with the same color and number will appear in one dataset."}
{"name": "p01841 Rooted Tree for Misawa-san", "description": "Input\n\nThe input is expressed in the following format.\n\n$ A $\n$ B $\n\n$ A $ and $ B $ are character strings that represent the information of the rooted binary tree that you bought, and the length is $ 7 $ or more and $ 1000 $ or less. The information given follows the format described above and does not include extra whitespace. Also, rooted trees that do not have nodes are not input. You can assume that the integers written at each node are greater than or equal to $ 0 $ and less than or equal to $ 1000 $. However, note that the integers written at each node of the output may not fall within this range."}
{"name": "1040_C. Timetable", "description": "Input\n\nThe first line of the input contains two integers n and t (1 ≤ n ≤ 200 000, 1 ≤ t ≤ 10^{18}) — the number of buses in timetable for and the minimum possible travel time from stop A to stop B.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_1 < a_2 < … < a_n ≤ 10^{18}), defining the moments of time when the buses leave stop A.\n\nThe third line contains n integers x_1, x_2, …, x_n (1 ≤ x_i ≤ n), the i-th of them stands for the maximum possible timetable position, at which the i-th bus leaving stop A can arrive at stop B."}
{"name": "1063_C. Dwarves, Hats and Extrasensory Abilities", "description": "Input\n\n5\n<span class=\"tex-span\"></span>\nblack\n<span class=\"tex-span\"></span>\nblack\n<span class=\"tex-span\"></span>\nwhite\n<span class=\"tex-span\"></span>\nwhite\n<span class=\"tex-span\"></span>\nblack"}
{"name": "1104_E. Johnny Solving", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ k ≤ n ≤ 2.5 ⋅ 10^5, 1 ≤ m ≤ 5 ⋅ 10^5)\n\nNext m lines describe edges of the graph in format v, u (1 ≤ v, u ≤ n). It's guaranteed that v ≠ u and all m pairs are distinct.\n\nIt's guaranteed that a degree of each vertex is at least 3."}
{"name": "1174_D. Ehab and the Expected XOR Problem", "description": "Input\n\nThe only line contains two integers n and x (1 ≤ n ≤ 18, 1 ≤ x<2^{18})."}
{"name": "1210_B. Marcin and Training Camp", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 7000) — the number of students interested in the camp.\n\nThe second line contains n integers. The i-th of them is a_i (0 ≤ a_i < 2^{60}).\n\nThe third line contains n integers. The i-th of them is b_i (1 ≤ b_i ≤ 10^9)."}
{"name": "1272_B. Snow Walking Robot", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^4) — the number of test cases.\n\nThe next q lines contain test cases. The i-th test case is given as the string s consisting of at least 1 and no more than 10^5 characters 'L', 'R', 'U' and 'D' — the initial sequence of instructions.\n\nIt is guaranteed that the sum of |s| (where |s| is the length of s) does not exceed 10^5 over all test cases (∑ |s| ≤ 10^5)."}
{"name": "1295_C. Obtain The String", "description": "Input\n\nThe first line contains the integer T (1 ≤ T ≤ 100) — the number of test cases.\n\nThe first line of each testcase contains one string s (1 ≤ |s| ≤ 10^5) consisting of lowercase Latin letters.\n\nThe second line of each testcase contains one string t (1 ≤ |t| ≤ 10^5) consisting of lowercase Latin letters.\n\nIt is guaranteed that the total length of all strings s and t in the input does not exceed 2 ⋅ 10^5."}
{"name": "1316_C. Primitive Primes", "description": "Input\n\nThe first line of the input contains three integers, n, m and p (1 ≤ n, m ≤ 10^6, 2 ≤ p ≤ 10^9), — n and m are the number of terms in f(x) and g(x) respectively (one more than the degrees of the respective polynomials) and p is the given prime number.\n\nIt is guaranteed that p is prime.\n\nThe second line contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_{i} ≤ 10^{9}) — a_i is the coefficient of x^{i} in f(x).\n\nThe third line contains m integers b_0, b_1, ..., b_{m-1} (1 ≤ b_{i} ≤ 10^{9}) — b_i is the coefficient of x^{i} in g(x)."}
{"name": "1337_E. Kaavi and Magic Spell", "description": "Input\n\nThe first line contains a string S of length n (1 ≤ n ≤ 3000).\n\nThe second line contains a string T of length m (1 ≤ m ≤ n).\n\nBoth strings contain only lowercase Latin letters."}
{"name": "137_D. Palindromes", "description": "Input\n\nThe first input line contains a non-empty string s which is the text of \"Storm and Calm\" (without spaces). The length of the string s does not exceed 500 characters. String s consists of uppercase and lowercase Latin letters. The second line contains a single number k (1 ≤ k ≤ |s|, where |s| represents the length of the string s)."}
{"name": "1443_F. Identify the Operations", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ k < n ≤ 200 000): sizes of arrays a and b.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): elements of a. All elements of a are distinct.\n\nThe third line of each test case contains k integers b_1, b_2, …, b_k (1 ≤ b_i ≤ n): elements of b. All elements of b are distinct.\n\nThe sum of all n among all test cases is guaranteed to not exceed 200 000."}
{"name": "1494_C. 1D Sokoban", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of boxes and the number of special positions, respectively.\n\nThe second line of each testcase contains n distinct integers in the increasing order a_1, a_2, ..., a_n (-10^9 ≤ a_1 < a_2 < ... < a_n ≤ 10^9; a_i ≠ 0) — the initial positions of the boxes.\n\nThe third line of each testcase contains m distinct integers in the increasing order b_1, b_2, ..., b_m (-10^9 ≤ b_1 < b_2 < ... < b_m ≤ 10^9; b_i ≠ 0) — the special positions.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5. The sum of m over all testcases doesn't exceed 2 ⋅ 10^5."}
{"name": "1545_A. AquaMoon and Strange Sort", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of Aquamoon's friends.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the numbers, written on the T-shirts.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 10^5."}
{"name": "382_A. Ksenia and Pan Scales", "description": "Input\n\nThe first line has a non-empty sequence of characters describing the scales. In this sequence, an uppercase English letter indicates a weight, and the symbol \"|\" indicates the delimiter (the character occurs in the sequence exactly once). All weights that are recorded in the sequence before the delimiter are initially on the left pan of the scale. All weights that are recorded in the sequence after the delimiter are initially on the right pan of the scale. \n\nThe second line contains a non-empty sequence containing uppercase English letters. Each letter indicates a weight which is not used yet. \n\nIt is guaranteed that all the English letters in the input data are different. It is guaranteed that the input does not contain any extra characters."}
{"name": "475_B. Strongly Connected City", "description": "Input\n\nThe first line of input contains two integers n and m, (2 ≤ n, m ≤ 20), denoting the number of horizontal streets and the number of vertical streets.\n\nThe second line contains a string of length n, made of characters '<' and '>', denoting direction of each horizontal street. If the i-th character is equal to '<', the street is directed from east to west otherwise, the street is directed from west to east. Streets are listed in order from north to south.\n\nThe third line contains a string of length m, made of characters '^' and 'v', denoting direction of each vertical street. If the i-th character is equal to '^', the street is directed from south to north, otherwise the street is directed from north to south. Streets are listed in order from west to east."}
{"name": "522_C. Chicken or Fish?", "description": "Input\n\nEach test in this problem consists of one or more input sets. First goes a string that contains a single integer t (1 ≤ t ≤ 100 000) — the number of input data sets in the test. Then the sets follow, each set is preceded by an empty line.\n\nThe first line of each set of the input contains integers m, k (2 ≤ m ≤ 100 000, 1 ≤ k ≤ 100 000) — the number of Polycarp's seat and the number of dishes, respectively.\n\nThe second line contains a sequence of k integers a1, a2, ..., ak (1 ≤ ai ≤ 100 000), where ai is the initial number of portions of the i-th dish.\n\nThen m - 1 lines follow, each line contains the description of Polycarp's observations about giving food to a passenger sitting in front of him: the j-th line contains a pair of integers tj, rj (0 ≤ tj ≤ k, 0 ≤ rj ≤ 1), where tj is the number of the dish that was given to the j-th passenger (or 0, if Polycarp didn't notice what dish was given to the passenger), and rj — a 1 or a 0, depending on whether the j-th passenger was or wasn't disappointed, respectively.\n\nWe know that sum ai equals at least m, that is,Polycarp will definitely get some dish, even if it is the last thing he wanted. It is guaranteed that the data is consistent.\n\nSum m for all input sets doesn't exceed 100 000. Sum k for all input sets doesn't exceed 100 000."}
{"name": "667_B. Coat of Anticubism", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 105) — a number of rod-blanks.\n\nThe second line contains n integers li (1 ≤ li ≤ 109) — lengths of rods, which Cicasso already has. It is guaranteed that it is impossible to make a polygon with n vertices and nonzero area using the rods Cicasso already has."}
{"name": "802_N. April Fools' Problem (medium)", "description": "Input\n\nThe first line of input contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 2200). The second line contains n space-separated integers a1, ..., an (<image>) — the preparation costs. The third line contains n space-separated integers b1, ..., bn (<image>) — the printing costs."}
{"name": "849_C. From Y to Y", "description": "Input\n\nThe first and only line of input contains a non-negative integer k (0 ≤ k ≤ 100 000) — the required minimum cost."}
{"name": "940_F. Machine Learning", "description": "Input\n\nThe first line of input contains two integers n and q (1 ≤ n, q ≤ 100 000) — the length of the array and the number of queries respectively.\n\nThe second line of input contains n integers — a1, a2, ..., an (1 ≤ ai ≤ 109).\n\nEach of the next q lines describes a single query.\n\nThe first type of query is described by three integers ti = 1, li, ri, where 1 ≤ li ≤ ri ≤ n — the bounds of the subarray.\n\nThe second type of query is described by three integers ti = 2, pi, xi, where 1 ≤ pi ≤ n is the index of the element, which must be changed and 1 ≤ xi ≤ 109 is the new value."}
{"name": "994_C. Two Squares", "description": "Input\n\nThe input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.\n\nThe first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.\n\nAll the values are integer and between -100 and 100."}
{"name": "1065_E. Side Transmutations", "description": "Input\n\nThe first line contains three integers n, m and |A| (2 ≤ n ≤ 10^9, 1 ≤ m ≤ min(\\frac n 2, 2 ⋅ 10^5), 1 ≤ |A| ≤ 10^9) — the length of the strings, the size of the array b and the size of the set A, respectively.\n\nThe second line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ \\frac n 2, b_1 < b_2 < ... < b_m)."}
{"name": "1088_C. Ehab and a 2-operation task", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2000), the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^5), the elements of the array a."}
{"name": "1107_C. Brutality", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of hits and the maximum number of times you can push the same button in a row.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the damage of the i-th hit.\n\nThe third line of the input contains the string s consisting of exactly n lowercase Latin letters — the sequence of hits (each character is the letter on the button you need to press to perform the corresponding hit)."}
{"name": "1154_G. Minimum Possible LCM", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 10^6) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^7), where a_i is the i-th element of a."}
{"name": "1176_E. Cover it!", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of queries.\n\nThen t queries follow.\n\nThe first line of each query contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, n - 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2))) — the number of vertices and the number of edges, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge.\n\nThere are no self-loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied. It is guaranteed that the given graph is connected.\n\nIt is guaranteed that ∑ m ≤ 2 ⋅ 10^5 over all queries."}
{"name": "1195_D1. Submarine in the Rybinsk Sea (easy edition)", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. All numbers a_1, a_2, ..., a_n are of equal length (that is, they consist of the same number of digits)."}
{"name": "1277_D. Let's Play the Words?", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains one integer n (1 ≤ n ≤ 2⋅10^5) — the number of words in the Polycarp's set. Next n lines contain these words. All of n words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed 4⋅10^6. All words are different.\n\nGuaranteed, that the sum of n for all test cases in the input doesn't exceed 2⋅10^5. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed 4⋅10^6."}
{"name": "133_C. Turing Tape", "description": "Input\n\nThe input will consist of a single line text which contains the message printed using the described method. String text will contain between 1 and 100 characters, inclusive. ASCII-code of each character of text will be between 32 (space) and 126 (tilde), inclusive."}
{"name": "1401_F. Reverse and Swap", "description": "Input\n\nThe first line contains two integers n, q (0 ≤ n ≤ 18; 1 ≤ q ≤ 10^5) — the length of array a and the number of queries.\n\nThe second line contains 2^n integers a_1, a_2, …, a_{2^n} (0 ≤ a_i ≤ 10^9).\n\nNext q lines contains queries — one per line. Each query has one of 4 types: \n\n  * \"1 x k\" (1 ≤ x ≤ 2^n; 0 ≤ k ≤ 10^9) — Replace(x, k); \n  * \"2 k\" (0 ≤ k ≤ n) — Reverse(k); \n  * \"3 k\" (0 ≤ k < n) — Swap(k); \n  * \"4 l r\" (1 ≤ l ≤ r ≤ 2^n) — Sum(l, r). \n\n\n\nIt is guaranteed that there is at least one Sum query."}
{"name": "1424_M. Ancient Language", "description": "Input\n\nFirst-line contains two integers: n and k (1 ≤ n, k ≤ 10^3) — the number of pages that scientists have found and the number of words present at each page. Following n groups contain a line with a single integer p_i (0 ≤ n < 10^3) — the number of i-th page, as well as k lines, each line containing one of the strings (up to 100 characters) written on the page numbered p_i."}
{"name": "1446_D1. Frequency Problem (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ min(n, 100)) — elements of the array."}
{"name": "151_B. Phone Numbers", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of friends. \n\nThen follow n data blocks that describe each friend's phone books. Each block is presented in the following form: first goes the line that contains integer si and string namei (0 ≤ si ≤ 100) — the number of phone numbers in the phone book of the i-th friend and the name of the i-th friend. The name is a non-empty sequence of uppercase and lowercase Latin letters, containing no more than 20 characters. Next si lines contain numbers as \"XX-XX-XX\", where X is arbitrary digits from 0 to 9."}
{"name": "194_E. Hamming Distance", "description": "Input\n\nThe first line contains space-separated integers h(s1, s2), h(s1, s3), h(s1, s4). The second line contains space-separated integers h(s2, s3) and h(s2, s4). The third line contains the single integer h(s3, s4).\n\nAll given integers h(si, sj) are non-negative and do not exceed 105. It is guaranteed that at least one number h(si, sj) is positive."}
{"name": "316_B1. EKG", "description": "Input\n\nThe first line contains two integers n (1 ≤ n ≤ 103) and x (1 ≤ x ≤ n) — the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n) — the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary."}
{"name": "500_B. New Year Permutation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300) — the size of the permutation p.\n\nThe second line contains n space-separated integers p1, p2, ..., pn — the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation.\n\nNext n lines describe the matrix A. The i-th line contains n characters '0' or '1' and describes the i-th row of A. The j-th character of the i-th line Ai, j is the element on the intersection of the i-th row and the j-th column of A. It is guaranteed that, for all integers i, j where 1 ≤ i < j ≤ n, Ai, j = Aj, i holds. Also, for all integers i where 1 ≤ i ≤ n, Ai, i = 0 holds."}
{"name": "525_E. Anya and Cubes", "description": "Input\n\nThe first line of the input contains three space-separated integers n, k and S (1 ≤ n ≤ 25, 0 ≤ k ≤ n, 1 ≤ S ≤ 1016) — the number of cubes and the number of stickers that Anya has, and the sum that she needs to get. \n\nThe second line contains n positive integers ai (1 ≤ ai ≤ 109) — the numbers, written on the cubes. The cubes in the input are described in the order from left to right, starting from the first one. \n\nMultiple cubes can contain the same numbers."}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 ≤ ai ≤ 2000) where ai is the rating of i-th student (1 ≤ i ≤ n)."}
{"name": "578_B. \"Or\" Game", "description": "Input\n\nThe first line contains three integers n, k and x (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 10, 2 ≤ x ≤ 8).\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109)."}
{"name": "59_E. Shortest Path", "description": "Input\n\nThe first line contains three integers n, m, k (2 ≤ n ≤ 3000, 1 ≤ m ≤ 20000, 0 ≤ k ≤ 105) which are the number of cities, the number of roads and the number of the forbidden triplets correspondingly. \n\nThen follow m lines each containing two integers xi, yi (1 ≤ xi, yi ≤ n) which are the road descriptions. The road is described by the numbers of the cities it joins. No road joins a city with itself, there cannot be more than one road between a pair of cities. \n\nThen follow k lines each containing three integers ai, bi, ci (1 ≤ ai, bi, ci ≤ n) which are the forbidden triplets. Each ordered triplet is listed mo more than one time. All three cities in each triplet are distinct.\n\nCity n can be unreachable from city 1 by roads."}
{"name": "643_A. Bear and Colors", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 5000) — the number of balls.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ n) where ti is the color of the i-th ball."}
{"name": "875_C. National Property", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format li, si, 1, si, 2, ..., si, li (1 ≤ li ≤ 100 000, 1 ≤ si, j ≤ m), where li is the length of the word, and si, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000."}
{"name": "920_D. Tanks", "description": "Input\n\nThe first line contains 3 integers: N (2 ≤ N ≤ 5000), K (1 ≤ K ≤ 5000), and V (0 ≤ V ≤ 109) — the number of tanks, the maximum volume of water the scoop can contain, and the required amount of water in some tank, respectively.\n\nThe second line contains N integers ai (0 ≤ ai ≤ 105), where ai is initial volume of water in i-th tank."}
{"name": "p00719 Traveling by Stagecoach", "description": "Input\n\nThe input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).\n\n> n m p a b\n>  t1 t2 ... tn\n>  x1 y1 z1\n>  x2 y2 z2\n>  ...\n>  xp yp zp\n>\n\nEvery input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.\n\nn is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.\n\na is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.\n\nThe second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1<=i<=n). You can assume that the number of horses is between 1 and 10.\n\nThe following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1<=i<=p). You can assume that the distance is between 1 and 100.\n\nNo two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions."}
{"name": "p00859 Slim Span", "description": "Input\n\nThe input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format.\n\n\nn     m\na1  b1  w1\n.\n.\n.\nam  bm  wm\n\n\nEvery input item in a dataset is a non-negative integer. Items in a line are separated by a space.\n\nn is the number of the vertices and m the number of the edges. You can assume 2 ≤ n ≤ 100 and 0 ≤ m ≤ n(n - 1)/2. ak and bk (k = 1, ... , m) are positive integers less than or equal to n, which represent the two vertices vak and vbk connected by the kth edge ek. wk is a positive integer less than or equal to 10000, which indicates the weight of ek . You can assume that the graph G = (V, E) is simple, that is, there are no self-loops (that connect the same vertex) nor parallel edges (that are two or more edges whose both ends are the same two vertices)."}
{"name": "p01421 Reverse Roads", "description": "Input\n\nThe first line of a data set contains two integers N (2 \\leq N \\leq 300) and M (0 \\leq M \\leq {\\rm min} (1\\,000,\\ N(N-1)/2)). N is the number of crossings in the city and M is the number of roads.\n\nThe following M lines describe one-way roads in the city. The i-th line (1-based) contains two integers X_i and Y_i (1 \\leq X_i, Y_i \\leq N, X_i \\neq Y_i). X_i is the ID number (1-based) of the starting point of the i-th road and Y_i is that of the terminal point. The last line contains two integers S and T (1 \\leq S, T \\leq N, S \\neq T, 1-based).\n\nThe capacity of each road is 1. You can assume that i \\neq j implies either X_i \\neq X_j or Y_i \\neq Y_j, and either X_i \\neq Y_j or X_j \\neq Y_i."}
{"name": "1023_A. Single Wildcard Pattern Matching", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of the string s and the length of the string t, respectively.\n\nThe second line contains string s of length n, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string t of length m, which consists only of lowercase Latin letters."}
{"name": "1044_B. Intersecting Subtrees", "description": "Input\n\n1\n3\n1 2\n2 3\n1\n1\n1\n2\n2\n1"}
{"name": "1108_E1. Array and Segments (Easy version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 300, 0 ≤ m ≤ 300) — the length of the array a and the number of segments, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6), where a_i is the value of the i-th element of the array a.\n\nThe next m lines are contain two integers each. The j-th of them contains two integers l_j and r_j (1 ≤ l_j ≤ r_j ≤ n), where l_j and r_j are the ends of the j-th segment."}
{"name": "1138_A. Sushi for Two", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of pieces of sushi.\n\nThe second line contains n integers t_1, t_2, ..., t_n (t_i = 1, denoting a sushi with tuna or t_i = 2, denoting a sushi with eel), representing the types of sushi from left to right.\n\nIt is guaranteed that there is at least one piece of sushi of each type. Note that it means that there is at least one valid continuous segment."}
{"name": "1156_C. Match Points", "description": "Input\n\nThe first line contains two integers n and z (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ z ≤ 10^9) — the number of points and the constraint on the distance between matched points, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^9)."}
{"name": "1178_F1. Short Colorful Strip", "description": "Input\n\nThe first line contains a two integers n, m (1 ≤ n ≤ 500, n = m) — the number of colours excluding the colour 0 and the length of the paper, respectively.\n\nThe second line contains m space separated integers c_1, c_2, …, c_m (1 ≤ c_i ≤ n) — the colour visible on the segment [i-1, i] after the process ends. It is guaranteed that for all j between 1 and n there is an index k such that c_k = j.\n\nNote that since in this subtask n = m, this means that c is a permutation of integers 1 through n."}
{"name": "1255_B. Fridge Lockers", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 ≤ T ≤ 10). Then the descriptions of the test cases follow.\n\nThe first line of each test case contains two integers n, m (2 ≤ n ≤ 1000, 1 ≤ m ≤ n) — the number of people living in Hanh's apartment and the number of steel chains that the landlord requires, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^4) — weights of all fridges."}
{"name": "1322_B. Present", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.\n\nThe second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7)."}
{"name": "1404_C. Fixed Point Removal", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the length of the array and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array.\n\nThe i-th of the next q lines contains two integers x and y (x, y ≥ 0 and x+y < n)."}
{"name": "1447_F1. Frequency Problem (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ min(n, 100)) — elements of the array."}
{"name": "1499_A. Domino on Windowsill", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 3000) — the number of test cases.\n\nThe first line of each test case contains three integers n, k_1 and k_2 (1 ≤ n ≤ 1000; 0 ≤ k_1, k_2 ≤ n).\n\nThe second line of each test case contains two integers w and b (0 ≤ w, b ≤ n)."}
{"name": "176_B. Word Cut", "description": "Input\n\nThe first line contains a non-empty word start, the second line contains a non-empty word end. The words consist of lowercase Latin letters. The number of letters in word start equals the number of letters in word end and is at least 2 and doesn't exceed 1000 letters.\n\nThe third line contains integer k (0 ≤ k ≤ 105) — the required number of operations."}
{"name": "244_A. Dividing Orange", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n, k ≤ 30). The second line contains k space-separated integers a1, a2, ..., ak (1 ≤ ai ≤ n·k), where ai is the number of the orange segment that the i-th child would like to get.\n\nIt is guaranteed that all numbers ai are distinct."}
{"name": "386_D. Game with Points", "description": "Input\n\nIn the first line there is one integer n (3 ≤ n ≤ 70) — the number of points. In the second line there are three space-separated integer from 1 to n — numbers of vertices, where stones are initially located.\n\nEach of the following n lines contains n symbols — the matrix denoting the colors of the diagonals. Colors are denoted by lowercase English letters. The symbol j of line i denotes the color of diagonal between points i and j. Matrix is symmetric, so j-th symbol of i-th line is equal to i-th symbol of j-th line. Main diagonal is filled with '*' symbols because there is no diagonal, connecting point to itself."}
{"name": "457_A. Golden System", "description": "Input\n\nInput consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000."}
{"name": "479_D. Long Jumps", "description": "Input\n\nThe first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 105, 2 ≤ l ≤ 109, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (0 = a1 < a2 < ... < an = l), where ai shows the distance from the i-th mark to the origin."}
{"name": "501_D. Misha and Permutations Summation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 200 000).\n\nThe second line contains n distinct integers from 0 to n - 1, separated by a space, forming permutation p.\n\nThe third line contains n distinct integers from 0 to n - 1, separated by spaces, forming permutation q."}
{"name": "527_B. Error Correct System", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 200 000) — the length of strings S and T.\n\nThe second line contains string S.\n\nThe third line contains string T.\n\nEach of the lines only contains lowercase Latin letters."}
{"name": "579_E. Weakness and Poorness", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 200 000), the length of a sequence.\n\nThe second line contains n integers a1, a2, ..., an (|ai| ≤ 10 000)."}
{"name": "600_D. Area of Two Circles' Intersection", "description": "Input\n\nThe first line contains three integers x1, y1, r1 ( - 109 ≤ x1, y1 ≤ 109, 1 ≤ r1 ≤ 109) — the position of the center and the radius of the first circle.\n\nThe second line contains three integers x2, y2, r2 ( - 109 ≤ x2, y2 ≤ 109, 1 ≤ r2 ≤ 109) — the position of the center and the radius of the second circle."}
{"name": "623_A. Graph and String", "description": "Input\n\nThe first line of the input contains two integers n and m <image> — the number of vertices and edges in the graph found by Petya, respectively.\n\nEach of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the edges of the graph G. It is guaranteed, that there are no multiple edges, that is any pair of vertexes appear in this list no more than once."}
{"name": "717_G. Underfail", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 500) — the length of the crossword. The second line contains the crossword string. The third line contains a single integer m (1 ≤ m ≤ 100) — the number of given words, and next m lines contain description of words: each line will have a string representing a non-empty word (its length doesn't exceed the length of the crossword) and integer pi (0 ≤ pi ≤ 100). Last line of the input will contain x (1 ≤ x ≤ 100) — maximum number of times a position in crossword can be used."}
{"name": "739_C. Alyona and towers", "description": "Input\n\nThe first line contain single integer n (1 ≤ n ≤ 3·105) — the number of towers.\n\nThe second line contain n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the number of cubes in each tower. \n\nThe third line contain single integer m (1 ≤ m ≤ 3·105) — the number of additions.\n\nThe next m lines contain 3 integers each. The i-th of these lines contains integers li, ri and di (1 ≤ l ≤ r ≤ n, 1 ≤ di ≤ 109), that mean that Alyona puts di cubes on the tio of each of the towers from li to ri."}
{"name": "831_D. Office Keys", "description": "Input\n\nThe first line contains three integers n, k and p (1 ≤ n ≤ 1 000, n ≤ k ≤ 2 000, 1 ≤ p ≤ 109) — the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) — positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 ≤ bj ≤ 109) — positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point."}
{"name": "922_E. Birds", "description": "Input\n\nThe first line contains four integers n, W, B, X (1 ≤ n ≤ 103, 0 ≤ W, B, X ≤ 109) — the number of trees, the initial points of mana, the number of points the mana capacity increases after a bird is summoned, and the number of points restored when Imp moves from a tree to the next one.\n\nThe second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 104) — where ci is the number of birds living in the i-th nest. It is guaranteed that <image>.\n\nThe third line contains n integers cost1, cost2, ..., costn (0 ≤ costi ≤ 109), where costi is the mana cost to summon a bird from the i-th nest."}
{"name": "978_D. Almost Arithmetic Progression", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in b.\n\nThe second line contains a sequence b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^{9})."}
{"name": "998_C. Convert to Ones", "description": "Input\n\nThe first line of input contains integers n, x and y (1 ≤ n ≤ 300 000, 0 ≤ x, y ≤ 10^9) — length of the string, cost of the first operation (substring reverse) and cost of the second operation (inverting all elements of substring).\n\nThe second line contains the string a of length n, consisting of zeros and ones."}
{"name": "p00728 ICPC Score Totalizer Software", "description": "Input\n\nThe input consists of a number of datasets, each corresponding to a contestant's performance. There are no more than 20 datasets in the input.\n\nA dataset begins with a line with an integer n, the number of judges participated in scoring the performance (3 ≤ n ≤ 100). Each of the n lines following it has an integral score s (0 ≤ s ≤ 1000) marked by a judge. No other characters except for digits to express these numbers are in the input. Judges' names are kept secret.\n\nThe end of the input is indicated by a line with a single zero in it."}
{"name": "1009_E. Intercity Travelling", "description": "Input\n\nThe first line contains one number n (1 ≤ n ≤ 10^6) — the distance from Moscow to Saratov.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_1 ≤ a_2 ≤ ... ≤ a_n ≤ 10^6), where a_i is the difficulty of i-th kilometer after Leha has rested."}
{"name": "1119_A. Ilya and a Colorful Walk", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 300 000) — the number of cities on the street.\n\nThe second line contains n integers c_1, c_2, …, c_n (1 ≤ c_i ≤ n) — the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices i and j so that 1 ≤ i < j ≤ n and c_i ≠ c_j."}
{"name": "1185_B. Email from Polycarp", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of pairs to check. Further input contains n descriptions of pairs.\n\nThe first line of each description contains a single non-empty word s consisting of lowercase Latin letters. The second line of the description contains a single non-empty word t consisting of lowercase Latin letters. The lengths of both strings are not greater than 10^6.\n\nIt is guaranteed that the total length of all words s in the input is not greater than 10^6. Also, it is guaranteed that the total length of all words t in the input is not greater than 10^6."}
{"name": "1220_D. Alex and Julian", "description": "Input\n\nFirst line contains an integer n ~ (1 ⩽ n ⩽ 200 000) — size of B\n\nSecond line contains n integers b_1, b_2, …, b_n ~ (1 ⩽ b_i ⩽ 10^{18}) — numbers of B, all b_i are unique"}
{"name": "1265_D. Beautiful Sequence", "description": "Input\n\nThe only input line contains four non-negative integers a, b, c and d (0 < a+b+c+d ≤ 10^5)."}
{"name": "134_C. Swaps", "description": "Input\n\nThe first line contains integers n (1 ≤ n ≤ 200000) and s (1 ≤ s ≤ 200000). The second line contains n numbers, the i-th number stands for how many cards the i-th player has by the moment the game starts. It is possible that a player has no cards initially."}
{"name": "1417_D. Make Them Equal", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^4) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4."}
{"name": "1434_B. Shurikens", "description": "Input\n\nThe first line contains the only integer n (1≤ n≤ 10^5) standing for the number of shurikens. \n\nThe following 2n lines describe the events in the format described above. It's guaranteed that there are exactly n events of the first type, and each price from 1 to n occurs exactly once in the events of the second type."}
{"name": "1485_B. Replace and Keep Sorted", "description": "Input\n\nThe first line contains three integers n, q and k (1≤ n, q ≤ 10^5, n≤ k ≤ 10^9) — the length of array a, the number of queries and number k.\n\nThe second line contains n integers a_1, a_2, …,a_n (1 ≤ a_i ≤ k). This array is strictly increasing — a_1 < a_2 < … < a_n.\n\nEach of the following q lines contains two integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n)."}
{"name": "1509_C. The Sports Festival", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2000) — the number of members of the student council.\n\nThe second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) – the running speeds of the members."}
{"name": "1535_D. Playoff Tournament", "description": "Input\n\nThe first line contains one integer k (1 ≤ k ≤ 18).\n\nThe second line contains a string consisting of 2^k - 1 characters — the initial state of the string s. Each character is either ?, 0, or 1.\n\nThe third line contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries.\n\nThen q lines follow, the i-th line contains an integer p and a character c (1 ≤ p ≤ 2^k - 1; c is either ?, 0, or 1), describing the i-th query."}
{"name": "182_C. Optimal Sum", "description": "Input\n\nThe first line contains two integers n, len (1 ≤ len ≤ n ≤ 105) — the number of elements in the array and the length of the chosen subinterval of the array, correspondingly. \n\nThe second line contains a sequence consisting of n integers a1, a2, ..., an (|ai| ≤ 109) — the original array. \n\nThe third line contains a single integer k (0 ≤ k ≤ n) — the maximum allowed number of operations. \n\nAll numbers in lines are separated by a single space."}
{"name": "22_D. Segments", "description": "Input\n\nThe first line of the input contains single integer number n (1 ≤ n ≤ 1000) — amount of segments. Following n lines contain descriptions of the segments. Each description is a pair of integer numbers — endpoints coordinates. All the coordinates don't exceed 10000 by absolute value. Segments can degenarate to points."}
{"name": "279_C. Ladder", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of array elements and the number of queries. The second line contains the sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 109), where number ai stands for the i-th array element.\n\nThe following m lines contain the description of the queries. The i-th line contains the description of the i-th query, consisting of two integers li, ri (1 ≤ li ≤ ri ≤ n) — the boundaries of the subsegment of the initial array.\n\nThe numbers in the lines are separated by single spaces."}
{"name": "301_B. Yaroslav and Time", "description": "Input\n\nThe first line contains integers n and d (3 ≤ n ≤ 100, 103 ≤ d ≤ 105) — the number of stations and the constant from the statement.\n\nThe second line contains n - 2 integers: a2, a3, ..., an - 1 (1 ≤ ai ≤ 103). The next n lines contain the coordinates of the stations. The i-th of them contains two integers xi, yi (-100 ≤ xi, yi ≤ 100).\n\nIt is guaranteed that no two stations are located at the same point."}
{"name": "394_D. Physical Education and Buns", "description": "Input\n\nThe single line contains integer n (2 ≤ n ≤ 103) — the number of students. The second line contains n space-separated integers — the heights of all students. The height of one student is an integer which absolute value doesn't exceed 104."}
{"name": "513_E1. Subarray Cuts", "description": "Input\n\nThe first line of input contains two integers n and k. The second line contains n integers — the elements of the array. The absolute values of elements do not exceed 104.\n\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem E1 (9 points), constraints 2 ≤ n ≤ 400, 2 ≤ k ≤ min(n, 50) will hold. \n  * In subproblem E2 (12 points), constraints 2 ≤ n ≤ 30000, 2 ≤ k ≤ min(n, 200) will hold."}
{"name": "659_C. Tanya and Toys", "description": "Input\n\nThe first line contains two integers n (1 ≤ n ≤ 100 000) and m (1 ≤ m ≤ 109) — the number of types of toys that Tanya already has and the number of bourles that her mom is willing to spend on buying new toys.\n\nThe next line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the types of toys that Tanya already has."}
{"name": "704_D. Captain America", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the number of shields and the number of constraints respectively.\n\nThe second line contains two integers r and b (1 ≤ r, b ≤ 109).\n\nThe next n lines contain the shields coordinates. The i-th of these lines contains two integers xi and yi (1 ≤ xi, yi ≤ 109).\n\nThe next m lines contain the constrains. The j-th of these lines contains three integers tj, lj and dj (1 ≤ tj ≤ 2, 1 ≤ lj ≤ 109, 0 ≤ dj ≤ n)."}
{"name": "748_C. Santa Claus and Robot", "description": "Input\n\nThe first line of input contains the only positive integer n (1 ≤ n ≤ 2·105) which equals the number of unit segments the robot traveled. The second line contains the movements protocol, which consists of n letters, each being equal either L, or R, or U, or D. k-th letter stands for the direction which Robot traveled the k-th unit segment in: L means that it moved to the left, R — to the right, U — to the top and D — to the bottom. Have a look at the illustrations for better explanation."}
{"name": "771_B. Bear and Different Names", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ k ≤ n ≤ 50) — the number of soldiers and the size of a group respectively.\n\nThe second line contains n - k + 1 strings s1, s2, ..., sn - k + 1. The string si is \"YES\" if the group of soldiers i through i + k - 1 is effective, and \"NO\" otherwise."}
{"name": "796_B. Find The Bone", "description": "Input\n\nThe first line contains three integers n, m, and k (2 ≤ n ≤ 106, 1 ≤ m ≤ n, 1 ≤ k ≤ 3·105) — the number of cups, the number of holes on the table, and the number of swapping operations, respectively.\n\nThe second line contains m distinct integers h1, h2, ..., hm (1 ≤ hi ≤ n) — the positions along the x-axis where there is a hole on the table.\n\nEach of the next k lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the positions of the cups to be swapped."}
{"name": "888_B. Buggy Robot", "description": "Input\n\nThe first line contains one number n — the length of sequence of commands entered by Ivan (1 ≤ n ≤ 100).\n\nThe second line contains the sequence itself — a string consisting of n characters. Each character can be U, D, L or R."}
{"name": "1234_B2. Social Network (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 2 ⋅ 10^5) — the number of messages and the number of conversations your smartphone can show.\n\nThe second line of the input contains n integers id_1, id_2, ..., id_n (1 ≤ id_i ≤ 10^9), where id_i is the ID of the friend which sends you the i-th message."}
{"name": "1253_A. Single Push", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 20) — the number of test cases in the input.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100\\ 000) — the number of elements in each array.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000).\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5."}
{"name": "1320_A. Journey Planning", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of cities in Berland.\n\nThe second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 4 ⋅ 10^5), where b_i is the beauty value of the i-th city."}
{"name": "1401_B. Ternary Sequence", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nEach test case consists of two lines. The first line of each test case contains three integers x_1, y_1, z_1 (0 ≤ x_1, y_1, z_1 ≤ 10^8) — the number of 0-s, 1-s and 2-s in the sequence a.\n\nThe second line of each test case also contains three integers x_2, y_2, z_2 (0 ≤ x_2, y_2, z_2 ≤ 10^8; x_1 + y_1 + z_1 = x_2 + y_2 + z_2 > 0) — the number of 0-s, 1-s and 2-s in the sequence b."}
{"name": "1496_A. Split it!", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case description contains two integers n, k (1≤ n≤ 100, 0≤ k≤ ⌊ n/2 ⌋) — the length of the string s and the parameter k.\n\nThe second line of each test case description contains a single string s of length n, consisting of lowercase English letters."}
{"name": "1519_D. Maximum Sum of Products", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5000).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^7).\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^7)."}
{"name": "1546_D. AquaMoon and Chess", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the chessboard.\n\nThe second line contains a string of n characters, consists of characters \"0\" and \"1\". If the i-th character is \"1\", the i-th cell is initially occupied; otherwise, the i-th cell is initially unoccupied.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "28_D. Don't fear, DravDe is kind", "description": "Input\n\nThe first input line contains integer number n (1 ≤ n ≤ 105) — amount of trucks in the motorcade. The following n lines contain four integers each. Numbers in the i-th line: vi, ci, li, ri (1 ≤ vi ≤ 104, 1 ≤ ci ≤ 105, 0 ≤ li, ri ≤ 105) — describe the i-th truck. The trucks are numbered from 1, counting from the front of the motorcade."}
{"name": "315_D. Sereja and Periods", "description": "Input\n\nThe first line contains two integers b, d (1 ≤ b, d ≤ 107). The second line contains string a. The third line contains string c. The given strings are not empty and consist of lowercase English letters. Their lengths do not exceed 100."}
{"name": "4_B. Before an Exam", "description": "Input\n\nThe first input line contains two integer numbers d, sumTime (1 ≤ d ≤ 30, 0 ≤ sumTime ≤ 240) — the amount of days, during which Peter studied, and the total amount of hours, spent on preparation. Each of the following d lines contains two integer numbers minTimei, maxTimei (0 ≤ minTimei ≤ maxTimei ≤ 8), separated by a space — minimum and maximum amount of hours that Peter could spent in the i-th day."}
{"name": "525_A. Vitaliy and Pie", "description": "Input\n\nThe first line of the input contains a positive integer n (2 ≤ n ≤ 105) — the number of rooms in the house.\n\nThe second line of the input contains string s of length 2·n - 2. Let's number the elements of the string from left to right, starting from one. \n\nThe odd positions in the given string s contain lowercase Latin letters — the types of the keys that lie in the corresponding rooms. Thus, each odd position i of the given string s contains a lowercase Latin letter — the type of the key that lies in room number (i + 1) / 2.\n\nThe even positions in the given string contain uppercase Latin letters — the types of doors between the rooms. Thus, each even position i of the given string s contains an uppercase letter — the type of the door that leads from room i / 2 to room i / 2 + 1."}
{"name": "550_B. Preparing Olympiad", "description": "Input\n\nThe first line contains four integers n, l, r, x (1 ≤ n ≤ 15, 1 ≤ l ≤ r ≤ 109, 1 ≤ x ≤ 106) — the number of problems you have, the minimum and maximum value of total difficulty of the problemset and the minimum difference in difficulty between the hardest problem in the pack and the easiest one, respectively.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 106) — the difficulty of each problem."}
{"name": "620_E. New Year Tree", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 4·105) — the number of vertices in the tree and the number of the queries.\n\nThe second line contains n integers ci (1 ≤ ci ≤ 60) — the colour of the i-th vertex.\n\nEach of the next n - 1 lines contains two integers xj, yj (1 ≤ xj, yj ≤ n) — the vertices of the j-th edge. It is guaranteed that you are given correct undirected tree.\n\nThe last m lines contains the description of the queries. Each description starts with the integer tk (1 ≤ tk ≤ 2) — the type of the k-th query. For the queries of the first type then follows two integers vk, ck (1 ≤ vk ≤ n, 1 ≤ ck ≤ 60) — the number of the vertex whose subtree will be recoloured with the colour ck. For the queries of the second type then follows integer vk (1 ≤ vk ≤ n) — the number of the vertex for which subtree you should find the number of different colours."}
{"name": "641_D. Little Artem and Random Variable", "description": "Input\n\nFirst line contains the integer n (1 ≤ n ≤ 100 000) — the number of different values for both dices.\n\nSecond line contains an array consisting of n real values with up to 8 digits after the decimal point — probability distribution for max(a, b), the i-th of these values equals to the probability that max(a, b) = i. It's guaranteed that the sum of these values for one dice is 1. The third line contains the description of the distribution min(a, b) in the same format."}
{"name": "66_B. Petya and Countryside", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 1000). The second line contains n positive integers which are the height of the sections. All the numbers are no less than 1 and not more than 1000."}
{"name": "850_C. Arpa and a game with Mojtaba", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the list."}
{"name": "873_E. Awards For Contestants", "description": "Input\n\nThe first line contains one integer number n (3 ≤ n ≤ 3000).\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 5000)."}
{"name": "948_C. Producing Snow", "description": "Input\n\nThe first line contains a single integer N (1 ≤ N ≤ 105) — the number of days. \n\nThe second line contains N integers V1, V2, ..., VN (0 ≤ Vi ≤ 109), where Vi is the initial size of a snow pile made on the day i.\n\nThe third line contains N integers T1, T2, ..., TN (0 ≤ Ti ≤ 109), where Ti is the temperature on the day i."}
{"name": "p00069 Drawing Lots II", "description": "Input\n\nGiven multiple datasets. Each dataset is as follows:\n\nThe number of vertical lines n (1 <n ≤ 10) is written on the first line.\nOn the second line, the number m (1 ≤ m ≤ n) of the selected vertical line is written.\nOn the third line, the number of the hit place (☆ in the figure) is written counting from the left.\nOn the 4th line, the number of stages d (1 ≤ d ≤ 30) of Amidakuji is written.\nFrom the 5th line onward, n-1 numbers are lined up in order from the top of the Amidakuji, with 1 being the horizontal line between each vertical line and 0 being the absence, as in the sequence of numbers corresponding to the figure. is.\n\n\nThe input ends on a line with a single 0."}
{"name": "p00715 Name the Crossing", "description": "Input\n\nThe input is a sequence of data sets, each of the form\n\n>\n>     N\n>     Crossing1\n>     ...\n>     CrossingN\n>     M\n>     Question1\n>     ...\n>     QuestionM\n>\n\nBoth Crossings and Questions are of the form\n\n> X-Y\n\nwhere X and Y are strings of alphanumerical characters, of lengths no more than 16. There is no white space, and case matters for alphabetical characters.\nN and M are between 1 and 1000 inclusive, and there are no more than 200 streets in a data set.\n\nThe last data set is followed by a line containing a zero."}
{"name": "p00855 Prime Gap", "description": "Input\n\nThe input is a sequence of lines each of which contains a single positive integer. Each positive integer is greater than 1 and less than or equal to the 100000th prime number, which is 1299709. The end of the input is indicated by a line containing a single zero."}
{"name": "p01872 My Number", "description": "Input\n\n?12345678901"}
{"name": "1000_F. One Occurrence", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5).\n\nThe third line contains one integer q (1 ≤ q ≤ 5 ⋅ 10^5).\n\nThen q lines follow, i-th line containing two integers l_i and r_i representing i-th query (1 ≤ l_i ≤ r_i ≤ n)."}
{"name": "1158_A. The Party and Sweets", "description": "Input\n\nThe first line contains two integers n and m, separated with space — the number of boys and girls, respectively (2 ≤ n, m ≤ 100 000). The second line contains n integers b_1, …, b_n, separated by spaces — b_i is equal to the minimal number of sweets, which i-th boy presented to some girl (0 ≤ b_i ≤ 10^8). The third line contains m integers g_1, …, g_m, separated by spaces — g_j is equal to the maximal number of sweets, which j-th girl received from some boy (0 ≤ g_j ≤ 10^8)."}
{"name": "1198_F. GCD Groups 2", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1215_E. Marbles", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 4 ⋅ 10^5) — the number of marbles.\n\nThe second line contains an integer sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 20), where a_i is the color of the i-th marble."}
{"name": "1300_B. Assigning to Classes", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of students halved.\n\nThe second line of each test case contains 2n integers a_1, a_2, ..., a_{2 n} (1 ≤ a_i ≤ 10^9) — skill levels of students.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1343_B. Balanced Array", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of the array. It is guaranteed that that n is even (i.e. divisible by 2).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1365_C. Rotation Matching", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the size of the arrays.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the elements of the first permutation.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — the elements of the second permutation."}
{"name": "1385_C. Make It Good", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1407_A. Ahahahahahahahaha", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^3, n is even) — length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^3."}
{"name": "1450_G. Communism", "description": "Input\n\nThe first line contains three integers n, a, b (1 ≤ n ≤ 5000, 1≤ a≤ b≤ 10^5) — the number of workers and the numerator and denominator of the parameter k, respectively.\n\nThe second line contains a string s of length n, consisting of lowercase English characters — the job categories of each worker. The characters 't', 'r', 'y', 'g', 'u', and 'b' do not appear in the string s."}
{"name": "156_A. Message", "description": "Input\n\nThe first line contains a non-empty string s, consisting of lowercase Latin letters. The second line contains a non-empty string u, consisting of lowercase Latin letters. The lengths of both strings are in the range from 1 to 2000, inclusive."}
{"name": "318_B. Strings of Power", "description": "Input\n\nInput contains a single non-empty string consisting of the lowercase Latin alphabet letters. Length of this string will not be greater than 106 characters."}
{"name": "482_B. Interesting Array", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of elements in the array and the number of limits.\n\nEach of the next m lines contains three integers li, ri, qi (1 ≤ li ≤ ri ≤ n, 0 ≤ qi < 230) describing the i-th limit."}
{"name": "52_A. 123-sequence", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 106). The second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 3)."}
{"name": "581_B. Luxurious Houses", "description": "Input\n\nThe first line of the input contains a single number n (1 ≤ n ≤ 105) — the number of houses in the capital of Berland.\n\nThe second line contains n space-separated positive integers hi (1 ≤ hi ≤ 109), where hi equals the number of floors in the i-th house."}
{"name": "699_A. Launch of Collider", "description": "Input\n\nThe first line contains the positive integer n (1 ≤ n ≤ 200 000) — the number of particles. \n\nThe second line contains n symbols \"L\" and \"R\". If the i-th symbol equals \"L\", then the i-th particle will move to the left, otherwise the i-th symbol equals \"R\" and the i-th particle will move to the right.\n\nThe third line contains the sequence of pairwise distinct even integers x1, x2, ..., xn (0 ≤ xi ≤ 109) — the coordinates of particles in the order from the left to the right. It is guaranteed that the coordinates of particles are given in the increasing order."}
{"name": "71_C. Round Table Knights", "description": "Input\n\nThe first line contains number n, which is the number of knights at the round table (3 ≤ n ≤ 105). The second line contains space-separated moods of all the n knights in the order of passing them around the table. \"1\" means that the knight is in a good mood an \"0\" means that he is in a bad mood."}
{"name": "788_A. Functions again", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 105) — the size of the array a.\n\nThe second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the array elements."}
{"name": "834_A. The Useless Toy", "description": "Input\n\nThere are two characters in the first string – the starting and the ending position of a spinner. The position is encoded with one of the following characters: v (ASCII code 118, lowercase v), < (ASCII code 60), ^ (ASCII code 94) or > (ASCII code 62) (see the picture above for reference). Characters are separated by a single space.\n\nIn the second strings, a single number n is given (0 ≤ n ≤ 109) – the duration of the rotation.\n\nIt is guaranteed that the ending position of a spinner is a result of a n second spin in any of the directions, assuming the given starting position."}
{"name": "879_B. Table Tennis", "description": "Input\n\nThe first line contains two integers: n and k (2 ≤ n ≤ 500, 2 ≤ k ≤ 1012) — the number of people and the number of wins.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — powers of the player. It's guaranteed that this line contains a valid permutation, i.e. all ai are distinct."}
{"name": "902_D. GCD of Polynomials", "description": "Input\n\nYou are given a single integer n (1 ≤ n ≤ 150) — the number of steps of the algorithm you need to reach."}
{"name": "954_A. Diagonal Walking", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains the sequence consisting of n characters U and R."}
{"name": "p00227 Thanksgiving", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nn m\np1 p2 ... pn\n\n\nThe first line gives the number of vegetables to buy n (1 ≤ n ≤ 1000) and the number of vegetables to put in the bag m (1 ≤ m ≤ 1000). The second line gives the price pi (10 ≤ pi ≤ 10000) for each vegetable.\n\nThe number of datasets does not exceed 100."}
{"name": "p01899 Yamanote-line Game", "description": "Input\n\n5 130\n130 170 100 120 140"}
{"name": "1020_D. The hat", "description": "Input\n\nAt the beginning the even integer n (2 ≤ n ≤ 100 000) is given — the total number of students.\n\nYou are allowed to ask no more than 60 questions."}
{"name": "1066_E. Binary Numbers AND Sum", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of a and the length of b correspondingly.\n\nThe second line of the input contains one huge integer a. It is guaranteed that this number consists of exactly n zeroes and ones and the first digit is always 1.\n\nThe third line of the input contains one huge integer b. It is guaranteed that this number consists of exactly m zeroes and ones and the first digit is always 1."}
{"name": "1108_C. Nice Garland", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of lamps.\n\nThe second line of the input contains the string s consisting of n characters 'R', 'G' and 'B' — colors of lamps in the garland."}
{"name": "1156_A. Inscribed Figures", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of figures.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 3, a_i ≠ a_{i + 1}) — types of the figures."}
{"name": "1196_D1. RGB Substring (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2000) — the number of queries. Then q queries follow.\n\nThe first line of the query contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the length of the string s and the length of the substring.\n\nThe second line of the query contains a string s consisting of n characters 'R', 'G' and 'B'.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2000 (∑ n ≤ 2000)."}
{"name": "1213_E. Two Small Strings", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of characters 'a', 'b' and 'c' in the resulting string.\n\nThe second line of the input contains one string s of length 2 consisting of characters 'a', 'b' and 'c'.\n\nThe third line of the input contains one string t of length 2 consisting of characters 'a', 'b' and 'c'."}
{"name": "1362_E. Johnny and Grandmaster", "description": "Input\n\nInput consists of multiple test cases. The first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers n and p (1 ≤ n, p ≤ 10^6). The second line contains n integers k_i (0 ≤ k_i ≤ 10^6).\n\nThe sum of n over all test cases doesn't exceed 10^6."}
{"name": "1383_A. String Transformation 1", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of strings A and B.\n\nThe second line of each test case contains string A (|A|=n).\n\nThe third line of each test case contains string B (|B|=n).\n\nBoth strings consists of the first 20 lowercase English alphabet letters (ie. from a to t).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1447_D. Catching Cheaters", "description": "Input\n\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 5000) — lengths of the two strings A and B. \n\nThe second line contains a string consisting of n lowercase Latin letters — string A.\n\nThe third line contains a string consisting of m lowercase Latin letters — string B."}
{"name": "1520_D. Same Differences", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "21_B. Intersection", "description": "Input\n\nThe first line of the input contains three integer numbers A1, B1, C1 separated by space. The second line contains three integer numbers A2, B2, C2 separated by space. All the numbers are between -100 and 100, inclusive."}
{"name": "291_D. Parallel Programming", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ n ≤ 104, 1 ≤ k ≤ 20).\n\nIt is guaranteed that at the given n and k the required sequence of operations exists."}
{"name": "316_E1. Summer Homework", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2·105) — the number of integers in the sequence and the number of operations, correspondingly. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 105). Then follow m lines, each describes an operation. Each line starts with an integer ti (1 ≤ ti ≤ 3) — the operation type: \n\n  * if ti = 1, then next follow two integers xi vi (1 ≤ xi ≤ n, 0 ≤ vi ≤ 105); \n  * if ti = 2, then next follow two integers li ri (1 ≤ li ≤ ri ≤ n); \n  * if ti = 3, then next follow three integers li ri di (1 ≤ li ≤ ri ≤ n, 0 ≤ di ≤ 105). \n\n\n\nThe input limits for scoring 30 points are (subproblem E1): \n\n  * It is guaranteed that n does not exceed 100, m does not exceed 10000 and there will be no queries of the 3-rd type. \n\n\n\nThe input limits for scoring 70 points are (subproblems E1+E2): \n\n  * It is guaranteed that there will be queries of the 1-st and 2-nd type only. \n\n\n\nThe input limits for scoring 100 points are (subproblems E1+E2+E3): \n\n  * No extra limitations."}
{"name": "386_B. Fly, freebies, fly!", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 100), where n — the number of students shouted \"Fly, freebie, fly!\" The second line contains n positive integers ti (1 ≤ ti ≤ 1000).\n\nThe last line contains integer T (1 ≤ T ≤ 1000) — the time interval during which the freebie was near the dormitory."}
{"name": "479_B. Towers", "description": "Input\n\nThe first line contains two space-separated positive integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of towers in the given set and the maximum number of operations Petya can perform. The second line contains n space-separated positive integers ai (1 ≤ ai ≤ 104) — the towers' initial heights."}
{"name": "600_B. Queries about less or equal elements", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2·105) — the sizes of arrays a and b.\n\nThe second line contains n integers — the elements of array a ( - 109 ≤ ai ≤ 109).\n\nThe third line contains m integers — the elements of array b ( - 109 ≤ bj ≤ 109)."}
{"name": "739_A. Alyona and mex", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105).\n\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), that describe the subarray a[li], a[li + 1], ..., a[ri]."}
{"name": "831_B. Keyboard Layouts", "description": "Input\n\nThe first line contains a string of length 26 consisting of distinct lowercase English letters. This is the first layout.\n\nThe second line contains a string of length 26 consisting of distinct lowercase English letters. This is the second layout.\n\nThe third line contains a non-empty string s consisting of lowercase and uppercase English letters and digits. This is the text typed in the first layout. The length of s does not exceed 1000."}
{"name": "852_C. Property", "description": "Input\n\nThe first line contains one integer number n (2 ≤ n ≤ 50000), representing number of edges of 2n-sided polygon.\n\nThe second line contains n distinct integer numbers B2k (0 ≤ B2k ≤ n - 1, k = 0... n - 1) separated by a single space, representing points the court chose. If B2k = i, the court chose point Pi on side A2k A2k + 1."}
{"name": "8_D. Two Friends", "description": "Input\n\nThe first line contains two integers: t1, t2 (0 ≤ t1, t2 ≤ 100). The second line contains the cinema's coordinates, the third one — the house's, and the last line — the shop's. \n\nAll the coordinates are given in meters, are integer, and do not exceed 100 in absolute magnitude. No two given places are in the same building."}
{"name": "978_B. File Name", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 100) — the length of the file name.\n\nThe second line contains a string of length n consisting of lowercase Latin letters only — the file name."}
{"name": "998_A. Balloons", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 10) — the number of packets with balloons.\n\nThe second line contains n integers: a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000) — the number of balloons inside the corresponding packet."}
{"name": "p00589 Extraordinary Girl II", "description": "Input\n\nInput consists of several lines. Each line contains the sequence of button numbers without any spaces. You may assume one line contains no more than 10000 numbers. Input terminates with EOF."}
{"name": "p00726 The Genome Database of All Space Life", "description": "Input\n\nThe input consists of multiple lines, each of which contains a character string s and an integer i separated by a single space.\n\nThe character string s, in the aforementioned manner, represents a genome sequence. You may assume that the length of s is between 1 and 100, inclusive. However, of course, the genome sequence represented by s may be much, much, and much longer than 100. You may also assume that each natural number in s representing the number of repetitions is at most 1,000.\n\nThe integer i is at least zero and at most one million.\n\nA line containing two zeros separated by a space follows the last input line and indicates the end of the input."}
{"name": "1105_B. Zuhair and Strings", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the length of the string and the value of k.\n\nThe second line contains the string s of length n consisting only of lowercase Latin letters."}
{"name": "1132_E. Knapsack", "description": "Input\n\nThe first line contains one integer W (0 ≤ W ≤ 10^{18}) — the maximum total weight of a good subset.\n\nThe second line denotes the set of items you have. It contains 8 integers cnt_1, cnt_2, ..., cnt_8 (0 ≤ cnt_i ≤ 10^{16}), where cnt_i is the number of items having weight i in the set."}
{"name": "1231_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 200 000, 0 ≤ k ≤ n) — the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes."}
{"name": "1272_D. Remove One Element", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a."}
{"name": "1295_E. Permutation Separation", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of permutation.\n\nThe second line contains n integers p_1, p_2, ... , p_n (1 ≤ p_i ≤ n). It's guaranteed that this sequence contains each element from 1 to n exactly once.\n\nThe third line contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9)."}
{"name": "1316_E. Team Building", "description": "Input\n\nThe first line contains 3 integers n,p,k (2 ≤ n ≤ 10^{5}, 1 ≤ p ≤ 7, 1 ≤ k, p+k ≤ n).\n\nThe second line contains n integers a_{1},a_{2},…,a_{n}. (1 ≤ a_{i} ≤ 10^{9}).\n\nThe i-th of the next n lines contains p integers s_{i, 1}, s_{i, 2}, ..., s_{i, p}. (1 ≤ s_{i,j} ≤ 10^{9})"}
{"name": "1338_A. Powered Addition", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^{4}) — the number of test cases.\n\nThe first line of each test case contains single integer n (1 ≤ n ≤ 10^{5}) — the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, …, a_{n} (-10^{9} ≤ a_{i} ≤ 10^{9})."}
{"name": "1380_A. Three Indices", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 200) — the number of test cases.\n\nNext 2T lines contain test cases — two lines per test case. The first line of each test case contains the single integer n (3 ≤ n ≤ 1000) — the length of the permutation p.\n\nThe second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n; p_i ≠ p_j if i ≠ j) — the permutation p."}
{"name": "1400_A. String Similarity", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 50).\n\nThe second line of each test case contains the binary string s of length 2n - 1. Each character s_i is either 0 or 1."}
{"name": "1444_B. Divide and Sum", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 150 000).\n\nThe second line contains 2n integers a_1, a_2, …, a_{2n} (1 ≤ a_i ≤ 10^9) — elements of array a."}
{"name": "1469_C. Building a Fence", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5; 2 ≤ k ≤ 10^8) — the number of sections in the fence and the height of each section.\n\nThe second line of each test case contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^8), where h_i is the ground level beneath the i-th section.\n\nIt's guaranteed that the sum of n over test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "216_C. Hiring Staff", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ m ≤ n ≤ 1000, n ≠ 1, 1 ≤ k ≤ 1000)."}
{"name": "23_C. Oranges and Apples", "description": "Input\n\nThe first input line contains one number T — amount of tests. The description of each test starts with a natural number N — amount of boxes. Each of the following 2N - 1 lines contains numbers ai and oi — amount of apples and oranges in the i-th box (0 ≤ ai, oi ≤ 109). The sum of N in all the tests in the input doesn't exceed 105. All the input numbers are integer."}
{"name": "265_A. Colorful Stones (Simplified Edition)", "description": "Input\n\nThe input contains two lines. The first line contains the string s (1 ≤ |s| ≤ 50). The second line contains the string t (1 ≤ |t| ≤ 50). The characters of each string will be one of \"R\", \"G\", or \"B\". It is guaranteed that Liss don't move out of the sequence."}
{"name": "314_A. Sereja and Contest", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n ≤ 2·105, - 109 ≤ k ≤ 0). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — ratings of the participants in the initial table."}
{"name": "336_C. Vasily the Bear and Sequence", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ a1 < a2 < ... < an ≤ 109)."}
{"name": "359_D. Pair of Numbers", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105).\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 106)."}
{"name": "382_C. Arithmetic Progression", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of cards. The next line contains the sequence of integers — the numbers on Alexander's cards. The numbers are positive integers, each of them doesn't exceed 108."}
{"name": "549_G. Happy Line", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 200 000) — the number of residents who stand in the line.\n\nThe second line contains n space-separated integers ai (0 ≤ ai ≤ 109), where ai is the number of Berland dollars of a man standing on the i-th position in the line. The positions are numbered starting from the end of the line."}
{"name": "61_B. Hard Work", "description": "Input\n\nThe first three lines contain a string each. These are the initial strings. They consists only of lowercase and uppercase Latin letters and signs (\"-\", \";\" and \"_\"). All the initial strings have length from 1 to 100, inclusively.\n\nIn the fourth line there is a single integer n (0 ≤ n ≤ 1000), the number of students.\n\nNext n lines contain a student's answer each. It is guaranteed that the answer meets what the teacher said. Each answer iconsists only of lowercase and uppercase Latin letters and signs (\"-\", \";\" and \"_\"). Length is from 1 to 600, inclusively."}
{"name": "734_D. Anton and Chess", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 500 000) — the number of black pieces.\n\nThe second line contains two integers x0 and y0 ( - 109 ≤ x0, y0 ≤ 109) — coordinates of the white king.\n\nThen follow n lines, each of them contains a character and two integers xi and yi ( - 109 ≤ xi, yi ≤ 109) — type of the i-th piece and its position. Character 'B' stands for the bishop, 'R' for the rook and 'Q' for the queen. It's guaranteed that no two pieces occupy the same position."}
{"name": "758_D. Ability To Convert", "description": "Input\n\nThe first line contains the integer n (2 ≤ n ≤ 109). The second line contains the integer k (0 ≤ k < 1060), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.\n\nAlexander guarantees that the answer exists and does not exceed 1018.\n\nThe number k doesn't contain leading zeros."}
{"name": "994_E. Careful Maneuvering", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 60), the number of enemy spaceships with x = -100 and the number of enemy spaceships with x = 100, respectively.\n\nThe second line contains n integers y_{1,1}, y_{1,2}, …, y_{1,n} (|y_{1,i}| ≤ 10 000) — the y-coordinates of the spaceships in the first group.\n\nThe third line contains m integers y_{2,1}, y_{2,2}, …, y_{2,m} (|y_{2,i}| ≤ 10 000) — the y-coordinates of the spaceships in the second group.\n\nThe y coordinates are not guaranteed to be unique, even within a group."}
{"name": "p01725 Unordered Operators", "description": "Input\n\nThe input is given in the following format.\nA formula consisting of numbers from 0 to 9 and the operators'+','-','*' and parentheses'(',')'\n\n\n* To be precise, the input is in the format shown in BNF below.\n\n\n\n> <expr> :: = (<expr>) | <number> | <expr> <op> <expr>\n> <op> :: = + |-| *\n\n<number> represents a non-negative integer.\n\nConstraints\n\nThe input satisfies the following constraints.\n\n* The formula is 200 characters or less.\n* No matter what priority is set, it will not overflow as a result of calculation or in the middle of it as a 64-bit integer type."}
{"name": "p01863 Miko Mi String", "description": "Input\n\nNicoNicoNi"}
{"name": "1070_E. Getting Deals Done", "description": "Input\n\nThe first line of the input contains single integer c (1 ≤ c ≤ 5 ⋅ 10^4) — number of test cases. Then description of c test cases follows. Solve test cases separately, test cases are completely independent and do not affect each other.\n\nEach test case is described by two lines. The first of these lines contains three space-separated integers n, m and t (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5, 1 ≤ t ≤ 4 ⋅ 10^{10}) — the number of tasks in Polycarp's list, the number of tasks he can do without a break and the total amount of time Polycarp can work on tasks. The second line of the test case contains n space separated integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 2 ⋅ 10^5) — difficulties of the tasks.\n\nThe sum of values n for all test cases in the input does not exceed 2 ⋅ 10^5."}
{"name": "1181_B. Split a Number", "description": "Input\n\nThe first line contains a single integer l (2 ≤ l ≤ 100 000) — the length of the Dima's favorite number.\n\nThe second line contains the positive integer n initially written on the strip: the Dima's favorite number.\n\nThe integer n consists of exactly l digits and it does not contain leading zeros. Dima guarantees, that there is at least one valid way to split the strip."}
{"name": "123_A. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 ≤ |s| ≤ 1000)."}
{"name": "125_B. Simple XML", "description": "Input\n\nThe input data consists on the only non-empty string — the XML-text, its length does not exceed 1000 characters. It is guaranteed that the text is valid. The text contains no spaces."}
{"name": "1301_D. Time to Run", "description": "Input\n\nThe only line contains three integers n, m and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 10 ^{9}), which are the number of rows and the number of columns in the grid and the total distance Bashar wants to run."}
{"name": "1408_C. Discrete Acceleration", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4): the number of test cases.\n\nThe first line of each test case contains two integers n, l (1 ≤ n ≤ 10^5, 1 ≤ l ≤ 10^9): the number of flags and the length of the road.\n\nThe second line contains n integers a_1, a_2, …, a_n in the increasing order (1 ≤ a_1 < a_2 < … < a_n < l).\n\nIt is guaranteed that the sum of n among all test cases does not exceed 10^5."}
{"name": "157_C. Message", "description": "Input\n\nThe first line contains a non-empty string s, consisting of lowercase Latin letters. The second line contains a non-empty string u, consisting of lowercase Latin letters. The lengths of both strings are in the range from 1 to 2000, inclusive."}
{"name": "248_C. Robo-Footballer", "description": "Input\n\nThe first and the single line contains integers y1, y2, yw, xb, yb, r (1 ≤ y1, y2, yw, xb, yb ≤ 106; y1 < y2 < yw; yb + r < yw; 2·r < y2 - y1).\n\nIt is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners."}
{"name": "272_D. Dima and Two Sequences", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109). The numbers in the lines are separated by spaces.\n\nThe last line contains integer m (2 ≤ m ≤ 109 + 7)."}
{"name": "296_A. Yaroslav and Permutations", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the array elements."}
{"name": "367_A. Sereja and Algorithm ", "description": "Input\n\nThe first line contains non-empty string s, its length (n) doesn't exceed 105. It is guaranteed that string s only contains characters: 'x', 'y', 'z'.\n\nThe second line contains integer m (1 ≤ m ≤ 105) — the number of tests. Next m lines contain the tests. The i-th line contains a pair of integers li, ri (1 ≤ li ≤ ri ≤ n)."}
{"name": "483_D. Interesting Array", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of elements in the array and the number of limits.\n\nEach of the next m lines contains three integers li, ri, qi (1 ≤ li ≤ ri ≤ n, 0 ≤ qi < 230) describing the i-th limit."}
{"name": "507_D. The Maths Lecture", "description": "Input\n\nInput consists of three integers n, k, m (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100, 1 ≤ m ≤ 109)."}
{"name": "626_F. Group Projects", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 ≤ n ≤ 200, 0 ≤ k ≤ 1000) — the number of students and the maximum total imbalance allowed, respectively.\n\nThe second line contains n space-separated integers ai (1 ≤ ai ≤ 500) — the time it takes the i-th student to complete his/her independent piece of work."}
{"name": "765_F. Souvenirs", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers a1, ..., an (0 ≤ ai ≤ 109).\n\nThe third line contains the number of queries m (1 ≤ m ≤ 3·105).\n\nNext m lines describe the queries. i-th of these lines contains two space-separated integers li and ri denoting the range of shops working on i-th day (1 ≤ li < ri ≤ n)."}
{"name": "789_C. Functions again", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 105) — the size of the array a.\n\nThe second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the array elements."}
{"name": "80_E. Beavermuncher-0xFF", "description": "Input\n\nThe first line contains integer n — the number of vertices in the tree (1 ≤ n ≤ 105). The second line contains n integers ki (1 ≤ ki ≤ 105) — amounts of beavers on corresponding vertices. Following n - 1 lines describe the tree. Each line contains two integers separated by space. These integers represent two vertices connected by an edge. Vertices are numbered from 1 to n. The last line contains integer s — the number of the starting vertex (1 ≤ s ≤ n)."}
{"name": "87_D. Beautiful Road", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105), which represents the number of cities. Next n - 1 lines contain three integers each: the numbers of cities ai, bi (1 ≤ ai, bi ≤ n), connected by the i-th road and the number of days di the army spends to go on it (1 ≤ di ≤ 109). The lengths of several roads may coincide."}
{"name": "903_F. Clear The Matrix", "description": "Input\n\nThe first line contains one integer n (4 ≤ n ≤ 1000) — the number of columns in f.\n\nThe second line contains 4 integers a1, a2, a3, a4 (1 ≤ ai ≤ 1000) — the cost to replace the square submatrix of size 1 × 1, 2 × 2, 3 × 3 or 4 × 4, respectively.\n\nThen four lines follow, each containing n characters and denoting a row of matrix f. Each character is either a dot or an asterisk."}
{"name": "p01772 A-Z Cat", "description": "Input\n\nAIZUNYANPEROPERO"}
{"name": "p02044 Equal Split", "description": "Input\n\nThe input consists of up to 50 datasets. Each dataset is represented in the following format.\n\n> N M A1 A2 ... AN\n\nThe dataset consists of two lines. The first line gives the number of participants N in the party and the cost M incurred. N and M are integers, and 2 ≤ N ≤ 100 and N ≤ M ≤ 10 000, respectively. Also, M is a multiple of N. The second line gives each of the N participants their own money. Ai is an integer representing the possession of the i-th participant, and 1 ≤ Ai ≤ 10 000.\n\nThe end of the input is represented by a line consisting of only two 0s."}
{"name": "1008_E. Guess two numbers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nInteraction\n\nFirst, you need to read the number n, after that you can make queries.\n\nTo make a query, print two integers: x and y (1 ≤ x, y ≤ n), then flush the output.\n\nAfter each query, read a single integer ans (0 ≤ ans ≤ 3).\n\nIf ans > 0, then it is the number of the phrase said by Vasya.\n\nIf ans = 0, it means that you win and your program should terminate.\n\nIf you make more than 600 queries or make an incorrect query, you will get Wrong Answer.\n\nYour solution will get Idleness Limit Exceeded, if you don't print anything or forget to flush the output.\n\nTo flush you need to do the following right after printing a query and a line end: \n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * For other languages see documentation. \n\n\n\nHacks format\n\nFor hacks, use the following format:\n\nIn the first line, print a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nIn the second line, print two integers a and b (1 ≤ a, b ≤ n) — the numbers which Vasya thought of.\n\nIn the third line, print a single integer m (1 ≤ m ≤ 10^5) — the number of instructions for the interactor.\n\nIn each of the next m lines, print five integers: x_i, y_i, r^{12}_i, r^{13}_i, and r^{23}_i (1 ≤ x_i, y_i ≤ n), where r^{ST}_i equals to either number S or number T.\n\nWhile answering the query x   y, the interactor finds a number i from 1 to n with the minimal value |x-x_i| + |y-y_i|. If multiple numbers can be chosen, the least i is preferred. Then the interactor answers to the query, but if there are two phrases S and T that can be given, then r^{ST}_i is chosen.\n\nFor example, the sample test data file contains the following: \n    \n    \n      \n    5  \n    2 4  \n    2  \n    2 5 1 1 2  \n    4 1 2 3 3  \n    \n\nExample\n\nInput\n\n5\n3\n3\n2\n1\n0"}
{"name": "1031_C. Cram Time", "description": "Input\n\nThe only line of input contains two integers a and b (0 ≤ a, b ≤ 10^{9}) — the number of hours Lesha has today and the number of hours Lesha has tomorrow."}
{"name": "1118_D1. Coffee and Coursework (Easy version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^4) — the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the caffeine dosage of coffee in the i-th cup."}
{"name": "1144_G. Two Merged Sequences", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a."}
{"name": "1165_F1. Microtransactions (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.\n\nThe second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.\n\nThe next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day."}
{"name": "1203_B. Equal Rectangles", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 100) — the number of rectangles.\n\nThe second line of the query contains 4n integers a_1, a_2, ..., a_{4n} (1 ≤ a_i ≤ 10^4), where a_i is the length of the i-th stick."}
{"name": "1286_B. Numbers on Tree", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2000) — the number of vertices in the tree.\n\nThe next n lines contain descriptions of vertices: the i-th line contains two integers p_i and c_i (0 ≤ p_i ≤ n; 0 ≤ c_i ≤ n-1), where p_i is the parent of vertex i or 0 if vertex i is root, and c_i is the number of vertices j in the subtree of vertex i, such that a_j < a_i.\n\nIt is guaranteed that the values of p_i describe a rooted tree with n vertices."}
{"name": "1305_C. Kuroni and Impossible Calculation", "description": "Input\n\nThe first line contains two integers n, m (2≤ n ≤ 2⋅ 10^5, 1≤ m ≤ 1000) — number of numbers and modulo.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9)."}
{"name": "1349_E. Slime and Hats", "description": "Input\n\nThe first line contains a integer n\\ (1≤ n≤ 200 000).\n\nThe second line contains n integers t_1,t_2,...,t_n\\ (0≤ t_i≤ 10^{15}). If t_i=0, then there are no data about player i; otherwise it means player i leaves in the t_i-th round.\n\nAt least one solution exists for the given input."}
{"name": "1392_C. Omkar and Waterslide", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of supports Omkar has.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (0 ≤ a_{i} ≤ 10^9) — the heights of the supports.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1433_D. Districts Connection", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 500) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 ≤ n ≤ 5000) — the number of districts. The second line of the test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), where a_i is the gang the i-th district belongs to.\n\nIt is guaranteed that the sum of n does not exceed 5000 (∑ n ≤ 5000)."}
{"name": "1481_C. Fence Painting", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of planks in the fence and the number of painters.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the initial colors of the fence.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — the desired colors of the fence.\n\nThe fourth line of each test case contains m integers c_1, c_2, ..., c_m (1 ≤ c_j ≤ n) — the colors painters have.\n\nIt's guaranteed that the sum of n doesn't exceed 10^5 and the sum of m doesn't exceed 10^5 over all test cases."}
{"name": "1534_E. Lost Array", "description": "Input\n\nThe only line of input contains the integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ n), the length of the lost array and the configured query size of the XOR machine.\n\nElements of the original array satisfy 1 ≤ a_i ≤ 10^9.\n\nIt can be proven that that if it is possible to recover the XOR sum under the given constraints, it can be done in at most 500 queries. That is, d ≤ 500.\n\nAfter taking n and k, begin interaction."}
{"name": "253_B. Physics Practical", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 105) — the number of measurements Vasya made. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 5000) — the results of the measurements. The numbers on the second line are separated by single spaces."}
{"name": "703_D. Mishka and Interesting sum", "description": "Input\n\nThe first line of the input contains single integer n (1 ≤ n ≤ 1 000 000) — the number of elements in the array.\n\nThe second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — array elements.\n\nThe third line of the input contains single integer m (1 ≤ m ≤ 1 000 000) — the number of queries.\n\nEach of the next m lines describes corresponding query by a pair of integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of query segment."}
{"name": "747_D. Winter Is Coming", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 2·105, 0 ≤ k ≤ n) — the number of winter days and the number of days winter tires can be used. It is allowed to drive on winter tires at any temperature, but no more than k days in total.\n\nThe second line contains a sequence of n integers t1, t2, ..., tn ( - 20 ≤ ti ≤ 20) — the average air temperature in the i-th winter day."}
{"name": "985_F. Isomorphic Strings", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n ≤ 2·105, 1 ≤ m ≤ 2·105) — the length of the string s and the number of queries.\n\nThe second line contains string s consisting of n lowercase English letters.\n\nThe following m lines contain a single query on each line: xi, yi and leni (1 ≤ xi, yi ≤ n, 1 ≤ leni ≤ n - max(xi, yi) + 1) — the description of the pair of the substrings to check."}
{"name": "p01321 Final Examination!", "description": "Input\n\n\nn\ns11 s12 s13 s14 s15\n...\nsn1 sn2 sn3 sn4 sn5\n\n\nn is the number of tests taken so far. The number of tests is 1 or more and 100 or less. The next n lines are given scores for 5 subjects in each exam. The range of points is an integer between 0 and 100."}
{"name": "p01802 Koto Municipal Subway", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 100 or less. The format of each data set is as follows.\n\n> D E\n\nD (1 ≤ D ≤ 100) is an integer that represents the shortest distance when walking along the road from Koto station to Shin-Koto station. E (1 ≤ E ≤ 100) is an integer representing the budget for rail construction.\n\nThe end of the input is indicated by a line of two zeros separated by a blank."}
{"name": "1005_A. Tanya and Stairways", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 1000) — the total number of numbers pronounced by Tanya.\n\nThe second line contains integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — all the numbers Tanya pronounced while climbing the stairs, in order from the first to the last pronounced number. Passing a stairway with x steps, she will pronounce the numbers 1, 2, ..., x in that order.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways."}
{"name": "1047_C. Enlarge GCD", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of integers Mr. F has.\n\nThe second line contains n integers, a_1, a_2, …, a_n (1 ≤ a_i ≤ 1.5 ⋅ 10^7)."}
{"name": "1141_D. Colored Boots", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 150000), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).\n\nThe second line contains the string l of length n. It contains only lowercase Latin letters or question marks. The i-th character stands for the color of the i-th left boot.\n\nThe third line contains the string r of length n. It contains only lowercase Latin letters or question marks. The i-th character stands for the color of the i-th right boot."}
{"name": "1182_C. Beautiful Lyrics", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 10^{5}) — the number of words.\n\nThe i-th of the next n lines contains string s_{i} consisting lowercase alphabet letters — the i-th word. It is guaranteed that the sum of the total word length is equal or less than 10^{6}. Each word contains at least one vowel."}
{"name": "1260_D. A Game with Traps", "description": "Input\n\nThe first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.\n\nThe second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.\n\nThen k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively."}
{"name": "1282_D. Enchanted Artifact", "description": "Input\n\n\n\n2\n\n2\n\n1\n\n2\n\n3\n\n0"}
{"name": "1367_C. Social Distance", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.\n\nEach test case starts with a line containing two integers n and k (1 ≤ k ≤ n ≤ 2⋅ 10^5) — the number of tables in the restaurant and the minimum allowed distance between two people.\n\nThe second line of each test case contains a binary string s of length n consisting of \"0\" and \"1\" — a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant — the difference between indices of any two \"1\" is more than k.\n\nThe sum of n for all test cases in one test does not exceed 2⋅ 10^5."}
{"name": "1388_C. Uncle Bogdan and Country Happiness", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10000) — the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^5; 0 ≤ m ≤ 10^9) — the number of cities and citizens.\n\nThe second line of each test case contains n integers p_1, p_2, …, p_{n} (0 ≤ p_i ≤ m; p_1 + p_2 + … + p_{n} = m), where p_i is the number of people living in the i-th city.\n\nThe third line contains n integers h_1, h_2, …, h_{n} (-10^9 ≤ h_i ≤ 10^9), where h_i is the calculated happiness index of the i-th city.\n\nNext n − 1 lines contain description of the roads, one per line. Each line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i), where x_i and y_i are cities connected by the i-th road.\n\nIt's guaranteed that the sum of n from all test cases doesn't exceed 2 ⋅ 10^5."}
{"name": "1453_A. Cancel the Trains", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nEach test case contains three lines. The first line of each test case consists of two integers n and m (1 ≤ n, m ≤ 100) — the number of trains scheduled to depart from the bottom end, and the number of trains scheduled to depart from the left end, respectively.\n\nThe second line of each test case contains n integers. Each integer is a train number that is scheduled to start from the bottom end. The numbers are given in strictly increasing order, and are between 1 and 100, inclusive.\n\nThe third line of each test case contains m integers. Each integer is a train number that is scheduled to start from the left end. The numbers are given in strictly increasing order, and are between 1 and 100, inclusive."}
{"name": "1476_F. Lanterns", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of lanterns.\n\nThe second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ n) — the power of the i-th lantern.\n\nThe sum of n over all test cases does not exceed 3 ⋅ 10^5."}
{"name": "200_C. Football Championship", "description": "Input\n\nThe input has five lines.\n\nEach line describes a game as \"team1 team2 goals1:goals2\" (without the quotes), what means that team team1 played a game with team team2, besides, team1 scored goals1 goals and team2 scored goals2 goals. The names of teams team1 and team2 are non-empty strings, consisting of uppercase English letters, with length of no more than 20 characters; goals1, goals2 are integers from 0 to 9. \n\nThe Berland team is called \"BERLAND\". It is guaranteed that the Berland team and one more team played exactly 2 games and the the other teams played exactly 3 games."}
{"name": "225_B. Well-known Numbers", "description": "Input\n\nThe first line contains two integers s and k (1 ≤ s, k ≤ 109; k > 1)."}
{"name": "249_E. Endless Matrix", "description": "Input\n\nThe first input line contains a single integer t (1 ≤ t ≤ 105) — the number of test sets for which you should solve the problem. \n\nEach of the next t lines contains the description of a test — four positive integers x1, y1, x2 and y2 (1 ≤ x1 ≤ x2 ≤ 109, 1 ≤ y1 ≤ y2 ≤ 109), separated by spaces."}
{"name": "368_C. Sereja and Algorithm ", "description": "Input\n\nThe first line contains non-empty string s, its length (n) doesn't exceed 105. It is guaranteed that string s only contains characters: 'x', 'y', 'z'.\n\nThe second line contains integer m (1 ≤ m ≤ 105) — the number of tests. Next m lines contain the tests. The i-th line contains a pair of integers li, ri (1 ≤ li ≤ ri ≤ n)."}
{"name": "461_B. Appleman and Tree", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 105) — the number of tree vertices. \n\nThe second line contains the description of the tree: n - 1 integers p0, p1, ..., pn - 2 (0 ≤ pi ≤ i). Where pi means that there is an edge connecting vertex (i + 1) of the tree and vertex pi. Consider tree vertices are numbered from 0 to n - 1.\n\nThe third line contains the description of the colors of the vertices: n integers x0, x1, ..., xn - 1 (xi is either 0 or 1). If xi is equal to 1, vertex i is colored black. Otherwise, vertex i is colored white."}
{"name": "558_B. Amr and The Large Array", "description": "Input\n\nThe first line contains one number n (1 ≤ n ≤ 105), the size of the array.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 106), representing elements of the array."}
{"name": "583_E. Superior Periodic Subarrays", "description": "Input\n\nThe first line contains number n (1 ≤ n ≤ 2·105). The second line contains n numbers a0, a1, ..., an - 1 (1 ≤ ai ≤ 106), separated by a space."}
{"name": "652_A. Gabriel and Caterpillar", "description": "Input\n\nThe first line contains two integers h1, h2 (1 ≤ h1 < h2 ≤ 105) — the heights of the position of the caterpillar and the apple in centimeters.\n\nThe second line contains two integers a, b (1 ≤ a, b ≤ 105) — the distance the caterpillar goes up by day and slips down by night, in centimeters per hour."}
{"name": "6_D. Lizards and Basements 2", "description": "Input\n\nThe first line of the input contains three integers n, a, b (3 ≤ n ≤ 10; 1 ≤ b < a ≤ 10). The second line contains a sequence of n integers — h1, h2, ..., hn (1 ≤ hi ≤ 15), where hi is the amount of health points the i-th archer has."}
{"name": "722_A. Broken Clock", "description": "Input\n\nThe first line of the input contains one integer 12 or 24, that denote 12-hours or 24-hours format respectively.\n\nThe second line contains the time in format HH:MM, that is currently displayed on the clock. First two characters stand for the hours, while next two show the minutes."}
{"name": "767_A. Snacktower", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 100 000) — the total number of snacks.\n\nThe second line contains n integers, the i-th of them equals the size of the snack which fell on the i-th day. Sizes are distinct integers from 1 to n."}
{"name": "837_D. Round Subset", "description": "Input\n\nThe first line contains two integer numbers n and k (1 ≤ n ≤ 200, 1 ≤ k ≤ n).\n\nThe second line contains n space-separated integer numbers a1, a2, ..., an (1 ≤ ai ≤ 1018)."}
{"name": "926_H. Endless Roses Most Beautiful", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 200 000) — the number of roses in the show and the number of roses Arkady wants to buy.\n\nThe second line contains a sequence of integers b1, b2, ..., bn (1 ≤ bi ≤ 10 000), where bi equals the beauty of the i-th rose.\n\nThe third line contains a string c of length n, consisting of uppercase English letters 'W', 'O' and 'R', where ci denotes the color of the i-th rose: 'W' denotes white, 'O' — orange, 'R' — red."}
{"name": "p00763 Railway Connection", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n m c s g\n>  x1 y1 d1 c1\n>  ...\n>  xm ym dm cm\n>  p1 ... pc\n>  q1,1 ... q1,p1-1\n>  r1,1 ... r1,p1\n>  ...\n>  qc,1 ... qc,pc-1\n>  rc,1 ... rc,pc\n>\n\nEvery input item in a dataset is a non-negative integer. Input items in the same input line are separated by a space.\n\nThe first input line gives the size of the railway network and the intended trip. n  is the number of stations (2 ≤ n ≤ 100). m  is the number of lines connecting two stations (0 ≤ m ≤ 10000). c  is the number of railway companies (1 ≤ c ≤ 20). s  is the station index of the starting point (1 ≤ s ≤ n ). g  is the station index of the goal point (1 ≤ g ≤ n, g ≠ s ).\n\nThe following m  input lines give the details of (railway) lines. The i -th line connects two stations xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ n, xi ≠ yi ). Each line can be traveled in both directions. There may be two or more lines connecting the same pair of stations. di is the distance of the i -th line (1 ≤ di ≤ 200). ci is the company index of the railway company operating the line (1 ≤ ci ≤ c ).\n\nThe fare table (the relation between the distance and the fare) of each railway company can be expressed as a line chart. For the railway company j , the number of sections of the line chart is given by pj (1 ≤ pj ≤ 50). qj,k (1 ≤ k ≤ pj-1) gives the distance separating two sections of the chart (1 ≤ qj,k ≤ 10000). rj,k (1 ≤ k ≤ pj ) gives the fare increment per unit distance for the corresponding section of the chart (1 ≤ rj,k ≤ 100). More precisely, with the fare for the distance z  denoted by fj (z ), the fare for distance z  satisfying qj,k-1+1 ≤ z ≤ qj,k is computed by the recurrence relation fj (z) = fj (z-1)+rj,k. Assume that qj,0 and fj (0) are zero, and qj,pj is infinity.\n\nFor example, assume pj = 3, qj,1 = 3, qj,2 = 6, rj,1 = 10, rj,2 = 5, and rj,3 = 3. The fare table in this case is as follows.\n\ndistance| 1| 2| 3| 4| 5| 6| 7| 8| 9\n---|---|---|---|---|---|---|---|---|---\nfare| 10| 20| 30| 35| 40| 45| 48| 51| 54\n\nqj,k increase monotonically with respect to k . rj,k decrease monotonically with respect to k .\n\nThe last dataset is followed by an input line containing five zeros (separated by a space)."}
{"name": "108_D. Basketball Team", "description": "Input\n\nThe first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. \n\nThe second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa."}
{"name": "1197_D. Yet Another Subarray Problem", "description": "Input\n\nThe first line contains three integers n, m, and k (1 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ m ≤ 10, 1 ≤ k ≤ 10^9).\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9)."}
{"name": "1279_F. New Year and Handle Change", "description": "Input\n\nThe first line of the input contains three integers n, k and l (1 ≤ n, k, l ≤ 10^6, l ≤ n) — the length of Mishka's handle, the number of changes and the length of the segment.\n\nThe second line of the input contains one string s, consisting of n lowercase and uppercase Latin letters — Mishka's handle."}
{"name": "129_D. String", "description": "Input\n\nThe first line contains a non-empty string that only consists of small Latin letters (\"a\"-\"z\"), whose length does not exceed 105. The second line contains the only integer k (1 ≤ k ≤ 105)."}
{"name": "1323_A. Even Subset Sum Problem", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100), number of test cases to solve. Descriptions of t test cases follow.\n\nA description of each test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 100), length of array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100), elements of a. The given array a can contain equal values (duplicates)."}
{"name": "1384_B1. Koa and the Beach (Easy Version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers n, k and l (1 ≤ n ≤ 100; 1 ≤ k ≤ 100; 1 ≤ l ≤ 100) — the number of meters of sea Koa measured and parameters k and l.\n\nThe second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 100) — the depths of each meter of sea Koa measured.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100."}
{"name": "1426_E. Rock, Paper, Scissors", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^{9}) — the number of rounds.\n\nThe second line of the input contains three integers a_1, a_2, a_3 (0 ≤ a_i ≤ n) — the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that a_1 + a_2 + a_3 = n.\n\nThe third line of the input contains three integers b_1, b_2, b_3 (0 ≤ b_j ≤ n) — the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that b_1 + b_2 + b_3 = n."}
{"name": "1473_D. Program", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the description of t testcases follows.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of instructions in the program and the number of queries.\n\nThe second line of each testcase contains a program — a string of n characters: each character is either '+' or '-' — increment and decrement instruction, respectively.\n\nEach of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the description of the query.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5. The sum of m over all testcases doesn't exceed 2 ⋅ 10^5."}
{"name": "245_A. System Administrator", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — the number of commands Polycarpus has fulfilled. Each of the following n lines contains three integers — the description of the commands. The i-th of these lines contains three space-separated integers ti, xi, yi (1 ≤ ti ≤ 2; xi, yi ≥ 0; xi + yi = 10). If ti = 1, then the i-th command is \"ping a\", otherwise the i-th command is \"ping b\". Numbers xi, yi represent the result of executing this command, that is, xi packets reached the corresponding server successfully and yi packets were lost.\n\nIt is guaranteed that the input has at least one \"ping a\" command and at least one \"ping b\" command."}
{"name": "293_A. Weird Game", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106). The second line contains string s — Yaroslav's word. The third line contains string t — Andrey's word.\n\nIt is guaranteed that both words consist of 2·n characters \"0\" and \"1\"."}
{"name": "364_A. Matrix", "description": "Input\n\nThe first line contains integer a (0 ≤ a ≤ 109), the second line contains a string of decimal integers s (1 ≤ |s| ≤ 4000)."}
{"name": "387_E. George and Cards", "description": "Input\n\nThe first line contains integers n and k (1 ≤ k ≤ n ≤ 106) — the initial and the final number of cards.\n\nThe second line contains n distinct space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the initial row of cards. \n\nThe third line contains k space-separated integers b1, b2, ..., bk — the row of cards that you need to get. It is guaranteed that it's possible to obtain the given row by using the remove operation for n - k times."}
{"name": "645_E. Intellectual Inquiry", "description": "Input\n\nThe first line of the input contains two integers n and k (0 ≤ n ≤ 1 000 000, 1 ≤ k ≤ 26).\n\nThe second line contains a string t (|t| = m, 1 ≤ m ≤ 1 000 000) consisting of only first k lowercase English letters."}
{"name": "697_E. PLEASE", "description": "Input\n\nThe first line of input contains a single integer k (1 ≤ k ≤ 105) — the number of elements in array Barney gave you.\n\nThe second line contains k integers a1, a2, ..., ak (1 ≤ ai ≤ 1018) — the elements of the array."}
{"name": "73_C. LionAge II", "description": "Input\n\nThe first line contains character's name s and an integer number k (0 ≤ k ≤ 100). The length of the nonempty string s does not exceed 100. The second line contains an integer number n (0 ≤ n ≤ 676) — amount of pairs of letters, giving bonus to the euphony. The next n lines contain description of these pairs «x y c», which means that sequence xy gives bonus c (x, y — lowercase Latin letters,  - 1000 ≤ c ≤ 1000). It is guaranteed that no pair x y mentioned twice in the input data."}
{"name": "763_A. Timofey and a tree", "description": "Input\n\nThe first line contains single integer n (2 ≤ n ≤ 105) — the number of vertices in the tree.\n\nEach of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting there is an edge between vertices u and v. It is guaranteed that the given graph is a tree.\n\nThe next line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 105), denoting the colors of the vertices."}
{"name": "786_C. Till I Collapse", "description": "Input\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 105) — number of Mr. Meeseeks.\n\nThe second line contains n integers a1, a2, ..., an separated by spaces (1 ≤ ai ≤ n) — colors of Mr. Meeseeks in order they standing in a line."}
{"name": "808_B. Average Sleep Time", "description": "Input\n\nThe first line contains two integer numbers n and k (1 ≤ k ≤ n ≤ 2·105).\n\nThe second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105)."}
{"name": "853_A. Planning", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 300 000), here n is the number of flights, and k is the number of minutes in the beginning of the day that the flights did not depart.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 107), here ci is the cost of delaying the i-th flight for one minute."}
{"name": "877_E. Danil and a Part-time Job", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n - 1 space-separated integers p2, p3, ..., pn (1 ≤ pi < i), where pi is the ancestor of vertex i.\n\nThe third line contains n space-separated integers t1, t2, ..., tn (0 ≤ ti ≤ 1), where ti is 1, if the light is turned on in vertex i and 0 otherwise.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 200 000) — the number of tasks.\n\nThe next q lines are get v or pow v (1 ≤ v ≤ n) — the tasks described above."}
{"name": "901_A. Hashing Trees", "description": "Input\n\nThe first line contains a single integer h (2 ≤ h ≤ 105) — the height of the tree.\n\nThe second line contains h + 1 integers — the sequence a0, a1, ..., ah (1 ≤ ai ≤ 2·105). The sum of all ai does not exceed 2·105. It is guaranteed that there is at least one tree matching this sequence."}
{"name": "923_D. Picking Strings", "description": "Input\n\nThe first line contains a string S (1 ≤ |S| ≤ 105). The second line contains a string T (1 ≤ |T| ≤ 105), each of these strings consists only of uppercase English letters 'A', 'B' and 'C'.\n\nThe third line contains the number of queries Q (1 ≤ Q ≤ 105).\n\nThe following Q lines describe queries. The i-th of these lines contains four space separated integers ai, bi, ci, di. These represent the i-th query: is it possible to create T[ci..di] from S[ai..bi] by applying the above transitions finite amount of times?\n\nHere, U[x..y] is a substring of U that begins at index x (indexed from 1) and ends at index y. In particular, U[1..|U|] is the whole string U.\n\nIt is guaranteed that 1 ≤ a ≤ b ≤ |S| and 1 ≤ c ≤ d ≤ |T|."}
{"name": "999_C. Alphabetic Removals", "description": "Input\n\nThe first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 4 ⋅ 10^5) — the length of the string and the number of letters Polycarp will remove.\n\nThe second line contains the string s consisting of n lowercase Latin letters."}
{"name": "p00381 Transporter", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$\n$s$\n$t$\n\n\nThe first line provides the number of the stars on which the warp machine is located $N$ ($2 \\leq N \\leq 100,000$). The second line provides a string $s$ of length $N$, each component of which represents the letter inscribed on the entrance of the machine on the star. By the same token, the third line provides a string $t$ of length $N$ consisting of the letters inscribed on the exit of the machine. Two strings $s$ and $t$ consist all of lower-case alphabetical letters, and the $i$-th letter of these strings corresponds respectively to the entrance and exit of Star $i$ machine."}
{"name": "p01275 Dial Lock", "description": "Input\n\nThe input consists of multiple datasets. Each datset consists of two lines. The first line contains an integer k. The second lines contain two strings, separated by a space, which indicate the initial and unlocking sequences.\n\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed."}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 ≤ x, y, z ≤ 10^5) — the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 ≤ a, b, c ≤ 10^5) — the number of green, purple and black grapes in the box."}
{"name": "1283_E. New Year Parties", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of friends.\n\nThe second line contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ n) — the coordinates of the houses of the friends."}
{"name": "1327_B. Princesses and Princes", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of daughters and the number of kingdoms.\n\nEach of the next n lines contains the description of each daughter's list. The first integer k (0 ≤ k ≤ n) is the number of entries in the i-th daughter's list. After that k distinct integers follow g_i[1], g_i[2], ..., g_i[k] (1 ≤ g_i[j] ≤ n) — the indices of the kingdoms in the list in the increasing order (g_i[1] < g_i[2] < ... < g_i[k]).\n\nIt's guaranteed that the total number of daughters over all test cases does not exceed 10^5.\n\nIt's also guaranteed that the total number of kingdoms in lists over all test cases does not exceed 10^5."}
{"name": "1389_D. Segment Intersections", "description": "Input\n\nThe first line contains the single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^9) — the length of lists and the minimum required total intersection.\n\nThe second line of each test case contains two integers l_1 and r_1 (1 ≤ l_1 ≤ r_1 ≤ 10^9) — the segment all [al_i, ar_i] are equal to initially.\n\nThe third line of each test case contains two integers l_2 and r_2 (1 ≤ l_2 ≤ r_2 ≤ 10^9) — the segment all [bl_i, br_i] are equal to initially.\n\nIt's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5."}
{"name": "1430_E. String Reversal", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 200 000) — the length of s.\n\nThe second line contains s — a string consisting of n lowercase Latin letters."}
{"name": "201_D. Brand New Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 15) — the number of words in Lesha's problem. The second line contains n space-separated words — the short description of the problem.\n\nThe third line contains a single integer m (1 ≤ m ≤ 10) — the number of problems in the Torcoder.com archive. Next m lines contain the descriptions of the problems as \"k s1 s2 ... sk\", where k (1 ≤ k ≤ 500000) is the number of words in the problem and si is a word of the problem description.\n\nAll words from all problem descriptions contain no more than 10 lowercase English letters. It is guaranteed that the total length of words in all problem descriptions does not exceed 500015."}
{"name": "250_A. Paper Work", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 100), n is the number of days. The second line contains a sequence of integers a1, a2, ..., an (|ai| ≤ 100), where ai means the company profit on the i-th day. It is possible that the company has no days with the negative ai."}
{"name": "298_D. Fish Weight", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m ≤ 105, 1 ≤ k ≤ 109) — the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species."}
{"name": "440_A. Forgotten Episode", "description": "Input\n\nThe first line of the input contains integer n (2 ≤ n ≤ 100000) — the number of episodes in a season. Assume that the episodes are numbered by integers from 1 to n.\n\nThe second line contains n - 1 integer a1, a2, ..., an (1 ≤ ai ≤ n) — the numbers of episodes that Polycarpus has watched. All values of ai are distinct."}
{"name": "462_C. Appleman and Toastman", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3·105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the initial group that is given to Toastman."}
{"name": "534_C. Polycarpus' Dice", "description": "Input\n\nThe first line contains two integers n, A (1 ≤ n ≤ 2·105, n ≤ A ≤ s) — the number of dice and the sum of shown values where s = d1 + d2 + ... + dn.\n\nThe second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 106), where di is the maximum value that the i-th dice can show."}
{"name": "585_A. Gennady the Dentist", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 4000) — the number of kids in the line. \n\nNext n lines contain three integers each vi, di, pi (1 ≤ vi, di, pi ≤ 106) — the volume of the cry in the doctor's office, the volume of the cry in the hall and the confidence of the i-th child."}
{"name": "653_A. Bear and Three Balls", "description": "Input\n\nThe first line of the input contains one integer n (3 ≤ n ≤ 50) — the number of balls Limak has.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) where ti denotes the size of the i-th ball."}
{"name": "700_E. Cool Slogans", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the company name that asks Bomboslav to help. The second line contains the string w of length n, that consists of lowercase English letters."}
{"name": "792_A. New Bus Route", "description": "Input\n\nThe first line contains one integer number n (2 ≤ n ≤ 2·105).\n\nThe second line contains n integer numbers a1, a2, ..., an ( - 109 ≤ ai ≤ 109). All numbers ai are pairwise distinct."}
{"name": "812_C. Sagheer and Nubian Market", "description": "Input\n\nThe first line contains two integers n and S (1 ≤ n ≤ 105 and 1 ≤ S ≤ 109) — the number of souvenirs in the market and Sagheer's budget.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the base costs of the souvenirs."}
{"name": "p00116 Rectangular Searching", "description": "Input\n\nGiven multiple datasets. Each dataset starts with a line of H and W separated by spaces, followed by an H x W rectangle. Both H and W shall be 500 or less.\n\nThe input ends with a line containing two 0s. The number of datasets does not exceed 20."}
{"name": "p00901 ASCII Expression", "description": "Input\n\nThe input consists of multiple datasets, followed by a line containing a zero. Each dataset has the following format.\n\n\nn\nstr1\nstr2\n.\n.\n.\nstrn\n\n\nn is a positive integer, which indicates the number of the following lines with the same length that represent the cell of an ASCII expression. strk is the k-th line of the cell where each space character is replaced with a period.\n\nYou may assume that n ≤ 20 and that the length of the lines is no more than 80."}
{"name": "p01304 Heian-Kyo Walking", "description": "Input\n\nThe first line of input is given the coordinates of the secret location (gx, gy). All of these are integers between 1 and 15 and are given separated by a single space. The second line is given the number of sections where Actinidia polygama is falling p (0 ≤ p ≤ 100), and the following lines p are given one section for each line where Actinidia polygama is falling. The p sections are different from each other. One interval is expressed in the form of x1 y1 x2 y2 and is a line segment of length 1 parallel to the x-axis or y-axis, with (x1, y1) and (x2, y2) as endpoints. x1 and x2 are in the range [0, gx] and y1 and y2 are in the range [0, gy]."}
{"name": "109_D. Lucky Sorting", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n positive integers, not exceeding 109 — the array that needs to be sorted in the non-decreasing order."}
{"name": "1120_D. Power Tree", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n integers c_1, c_2, …, c_n (0 ≤ c_i ≤ 10^9), where c_i is the price of the i-th vertex.\n\nEach of the next n - 1 lines contains two integers a and b (1 ≤ a, b ≤ n), denoting an edge of the tree."}
{"name": "1187_D. Subarray Sorting", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 3 ⋅ 10^5) — the number of queries.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 3 ⋅ 10^5).\n\nThe second line of each query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n).\n\nThe third line of each query contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n).\n\nIt is guaranteed that ∑ n ≤ 3 ⋅ 10^5 over all queries in a test."}
{"name": "1206_C. Almost Equal", "description": "Input\n\nThe first and the only line contain one integer n (1 ≤ n ≤ 10^5)."}
{"name": "1249_B2. Books Exchange (hard version)", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 1000) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.\n\nIt is guaranteed that ∑ n ≤ 2 ⋅ 10^5 (sum of n over all queries does not exceed 2 ⋅ 10^5)."}
{"name": "1511_C. Yet Another Card Deck", "description": "Input\n\nThe first line contains two integers n and q (2 ≤ n ≤ 3 ⋅ 10^5; 1 ≤ q ≤ 3 ⋅ 10^5) — the number of cards in the deck and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 50) — the colors of cards.\n\nThe third line contains q integers t_1, t_2, ..., t_q (1 ≤ t_j ≤ 50) — the query colors. It's guaranteed that queries ask only colors that are present in the deck."}
{"name": "165_C. Another Problem on Strings", "description": "Input\n\nThe first line contains the single integer k (0 ≤ k ≤ 106). The second line contains a non-empty binary string s. The length of s does not exceed 106 characters."}
{"name": "186_D. Mushroom Scientists", "description": "Input\n\nThe first line contains a single integer S (1 ≤ S ≤ 103) — the maximum sum of coordinates of the sought point.\n\nThe second line contains three space-separated integers a, b, c (0 ≤ a, b, c ≤ 103) — the numbers that describe the metric of mushroom scientists."}
{"name": "258_D. Little Elephant and Broken Sorting", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000, n > 1) — the permutation size and the number of moves. The second line contains n distinct integers, not exceeding n — the initial permutation. Next m lines each contain two integers: the i-th line contains integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) — the positions of elements that were changed during the i-th move."}
{"name": "281_D. Maximum Xor Secondary", "description": "Input\n\nThe first line contains integer n (1 < n ≤ 105). The second line contains n distinct integers s1, s2, ..., sn (1 ≤ si ≤ 109)."}
{"name": "304_C. Lucky Permutation Triple", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105)."}
{"name": "56_B. Spoilt Permutation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 1000) which is the number of coins in Vasya's collection. The second line contains space-separated n integers which are the spoilt sequence of coins. It is guaranteed that the given sequence is a permutation, i.e. it contains only integers from 1 to n, and every number is used exactly 1 time."}
{"name": "590_E. Birthday", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 750) — the number of Dasha's relatives and friends.\n\nEach of the next n lines contains exactly one greeting. Each greeting consists of characters 'a' and 'b' only.\n\nThe total length of all greetings won't exceed 10 000 000 characters."}
{"name": "632_D. Longest Subsequence", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 106) — the size of the array a and the parameter from the problem statement.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of a."}
{"name": "774_A. Amusement Park", "description": "Input\n\nThe first line contains three integers n, c1 and c2 (1 ≤ n ≤ 200 000, 1 ≤ c1, c2 ≤ 107) — the number of visitors and parameters for determining the ticket prices for a group.\n\nThe second line contains the string of length n, which consists of zeros and ones. If the i-th symbol of the string is zero, then the i-th visitor is a pupil, otherwise the i-th person is an adult. It is guaranteed that there is at least one adult. It is possible that there are no pupils."}
{"name": "819_A. Mister B and Boring Game", "description": "Input\n\nFirst and only line contains four space-separated integers: a, b, l and r (1 ≤ a, b ≤ 12, 1 ≤ l ≤ r ≤ 109) — the numbers of letters each player appends and the bounds of the segment."}
{"name": "891_A. Pride", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2000) — the number of elements in the array.\n\nThe second line contains n space separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array."}
{"name": "913_D. Too Easy Problems", "description": "Input\n\nThe first line contains two integers n and T (1 ≤ n ≤ 2·105; 1 ≤ T ≤ 109) — the number of problems in the exam and the length of the exam in milliseconds, respectively.\n\nEach of the next n lines contains two integers ai and ti (1 ≤ ai ≤ n; 1 ≤ ti ≤ 104). The problems are numbered from 1 to n."}
{"name": "935_D. Fafa and Ancient Alphabet", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105) — the length of each of the two words and the size of the alphabet <image>, respectively.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ m) — the symbols of S1. If ai = 0, then the symbol at position i was erased.\n\nThe third line contains n integers representing S2 with the same format as S1."}
{"name": "989_B. A Tide of Riverscape", "description": "Input\n\nThe first line contains two space-separated integers n and p (1 ≤ p ≤ n ≤ 2000) — the length of the given string and the supposed period, respectively.\n\nThe second line contains a string s of n characters — Mino's records. s only contains characters '0', '1' and '.', and contains at least one '.' character."}
{"name": "1031_E. Triple Flips", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1) — the elements of the array."}
{"name": "1097_E. Egor and an RPG game", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nYou can only use t = 1 in hacks.\n\nNext, descriptions of t test cases come, each of them in the following format.\n\nThe first line of a single test case contains one integer n (1 ≤ n ≤ 10^5) — the length of the permutation. The second line contains n distinct integers a_i (1 ≤ a_i ≤ n) — the permutation itself.\n\nThe sum of the values of n over all test cases doesn't exceed 10^5."}
{"name": "1203_D1. Remove the Substring (easy version)", "description": "Input\n\nThe first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.\n\nThe second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.\n\nIt is guaranteed that t is a subsequence of s."}
{"name": "1220_A. Cards", "description": "Input\n\nThe first line contains a single integer n (1 ⩽ n ⩽ 10^5) — the length of the string. The second line contains a string consisting of English lowercase letters: 'z', 'e', 'r', 'o' and 'n'.\n\nIt is guaranteed that it is possible to rearrange the letters in such a way that they form a sequence of words, each being either \"zero\" which corresponds to the digit 0 or \"one\" which corresponds to the digit 1."}
{"name": "1417_A. Copy-paste", "description": "Input\n\nThe first line contains one integer T (1 ≤ T ≤ 500) — the number of test cases.\n\nEach test case consists of two lines: \n\n  * the first line contains two integers n and k (2 ≤ n ≤ 1000, 2 ≤ k ≤ 10^4); \n  * the second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k). \n\n\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of k over all test cases does not exceed 10^4."}
{"name": "1481_E. Sorting Books", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the number of books.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the book colors."}
{"name": "254_A. Cards with Numbers", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105). The second line contains the sequence of 2n positive integers a1, a2, ..., a2n (1 ≤ ai ≤ 5000) — the numbers that are written on the cards. The numbers on the line are separated by single spaces."}
{"name": "278_E. Game", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m ≤ 109, 0 ≤ k ≤ 105) — the sizes of the piece of paper and the number of cuts. Then follow k lines, each containing 4 integers xbi, ybi, xei, yei (0 ≤ xbi, xei ≤ n, 0 ≤ ybi, yei ≤ m) — the coordinates of the ends of the existing cuts. \n\nIt is guaranteed that each cut has a non-zero length, is either vertical or horizontal and doesn't go along the sheet border.\n\nThe cuts may intersect, overlap and even be the same. That is, it is not guaranteed that the cuts were obtained during any correct game."}
{"name": "349_C. Mafia", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the i-th number in the list is the number of rounds the i-th person wants to play."}
{"name": "394_A. Counting Sticks", "description": "Input\n\nThe single line contains the initial expression. It is guaranteed that the expression looks like A + B = C, where 1 ≤ A, B, C ≤ 100."}
{"name": "566_F. Clique in the Divisibility Graph", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.\n\nThe second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order."}
{"name": "658_E. Bear and Contribution", "description": "Input\n\nThe first line contains four integers n, k, b and c (2 ≤ k ≤ n ≤ 200 000, 1 ≤ b, c ≤ 1000) — the number of registered users, the required minimum number of users with the same contribution, time needed to read and upvote a blog, and time needed to read and upvote a comment, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (|ti| ≤ 109) where ti denotes contribution of the i-th registered user."}
{"name": "770_C. Online Courses In BSU", "description": "Input\n\nThe first line contains n and k (1 ≤ k ≤ n ≤ 105) — the number of online-courses and the number of main courses of Polycarp's specialty. \n\nThe second line contains k distinct integers from 1 to n — numbers of main online-courses of Polycarp's specialty. \n\nThen n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer ti (0 ≤ ti ≤ n - 1) — the number of courses on which the i-th depends. Then there follows the sequence of ti distinct integers from 1 to n — numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. \n\nIt is guaranteed that the sum of all values ti doesn't exceed 105."}
{"name": "862_A. Mahmoud and Ehab and the MEX", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 100, 0 ≤ x ≤ 100) — the size of the set Dr. Evil owns, and the desired MEX.\n\nThe second line contains n distinct non-negative integers not exceeding 100 that represent the set."}
{"name": "p00789 Square Coins", "description": "Input\n\nThe input consists of lines each containing an integer meaning an amount to be paid, followed by a line containing a zero. You may assume that all the amounts are positive and less than 300."}
{"name": "p02088 Union Ball", "description": "Input\n\n\nN\nA_1 A_2 ... A_N\n\n\n* The first line gives an integer N representing the initial number of balls in a box.\n* The second line contains N integers, the i-th of which is the integer on the i-th ball.\n\n\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* Inputs consist only of integers."}
{"name": "1007_A. Reorder the Array", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array."}
{"name": "1030_A. In Search of an Easy Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of people who were asked to give their opinions.\n\nThe second line contains n integers, each integer is either 0 or 1. If i-th integer is 0, then i-th person thinks that the problem is easy; if it is 1, then i-th person thinks that the problem is hard."}
{"name": "1073_G. Yet Another LCP Problem", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the length of string s and the number of queries, respectively.\n\nThe second line contains a string s consisting of lowercase Latin letters (|s| = n).\n\nNext 3q lines contains descriptions of queries — three lines per query. The first line of each query contains two integers k_i and l_i (1 ≤ k_i, l_i ≤ n) — sizes of sets a and b respectively.\n\nThe second line of each query contains k_i integers a_1, a_2, ... a_{k_i} (1 ≤ a_1 < a_2 < ... < a_{k_i} ≤ n) — set a.\n\nThe third line of each query contains l_i integers b_1, b_2, ... b_{l_i} (1 ≤ b_1 < b_2 < ... < b_{l_i} ≤ n) — set b.\n\nIt is guaranteed that ∑_{i = 1}^{i = q}{k_i} ≤ 2 ⋅ 10^5 and ∑_{i = 1}^{i = q}{l_i} ≤ 2 ⋅ 10^5."}
{"name": "1117_B. Emotes", "description": "Input\n\nThe first line of the input contains three integers n, m and k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k ≤ m ≤ 2 ⋅ 10^9) — the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is value of the happiness of the i-th emote."}
{"name": "1143_D. The Beatles", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100 000) — the number of fast food restaurants on the circle and the distance between the neighboring restaurants, respectively.\n\nThe second line contains two integers a and b (0 ≤ a, b ≤ k/2) — the distances to the nearest fast food restaurants from the initial city and from the city Sergey made the first stop at, respectively."}
{"name": "1184_A2. Heidi Learns Hashing (Medium)", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5), the length of the bitstring y.\n\nThe second line contains the bitstring y."}
{"name": "1348_B. Phoenix and Beauty", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 100).\n\nThe second line of each test case contains n space-separated integers (1 ≤ a_i ≤ n) — the array that Phoenix currently has. This array may or may not be already beautiful."}
{"name": "1479_C. Continuous City", "description": "Input\n\nThe single line contains two integers L and R (1 ≤ L ≤ R ≤ 10^6)."}
{"name": "1506_B. Partial Replacement", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 500). Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 50).\n\nThe second line of each test case contains a string s of length n, consisting of the characters '.' and '*'.\n\nIt is guaranteed that there is at least one '*' in the string s.\n\nIt is guaranteed that the distance between any two neighboring '*' characters does not exceed k."}
{"name": "152_A. Marks", "description": "Input\n\nThe first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of subjects, correspondingly. Next n lines each containing m characters describe the gradebook. Each character in the gradebook is a number from 1 to 9. Note that the marks in a rows are not sepatated by spaces."}
{"name": "160_C. Find Pair", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n2). The second line contains the array containing n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109). The numbers in the array can coincide. All numbers are separated with spaces.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use cin, cout, streams or the %I64d specificator instead."}
{"name": "347_B. Fixed Points", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105). The second line contains n integers a0, a1, ..., an - 1 — the given permutation."}
{"name": "370_C. Mittens", "description": "Input\n\nThe first line contains two integers n and m — the number of the children and the number of possible mitten colors (1 ≤ n ≤ 5000, 1 ≤ m ≤ 100). The second line contains n integers c1, c2, ... cn, where ci is the color of the mittens of the i-th child (1 ≤ ci ≤ m)."}
{"name": "441_D. Valera and Swaps", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3000) — the length of permutation p. The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n) — Valera's initial permutation. The last line contains integer m (0 ≤ m < n)."}
{"name": "463_E. Caisa and Tree", "description": "Input\n\nThe first line contains two space-separated integers n, q (1 ≤ n, q ≤ 105). \n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 2·106), where ai represent the value of node i.\n\nEach of the next n - 1 lines contains two integers xi and yi (1 ≤ xi, yi ≤ n; xi ≠ yi), denoting the edge of the tree between vertices xi and yi.\n\nEach of the next q lines contains a query in the format that is given above. For each query the following inequalities hold: 1 ≤ v ≤ n and 1 ≤ w ≤ 2·106. Note that: there are no more than 50 queries that changes the value of a vertex."}
{"name": "535_D. Tavas and Malekas", "description": "Input\n\nThe first line contains two integers n and m, the length of s and the length of the subsequence Malekas wrote down (1 ≤ n ≤ 106 and 0 ≤ m ≤ n - |p| + 1).\n\nThe second line contains string p (1 ≤ |p| ≤ n).\n\nThe next line contains m space separated integers y1, y2, ..., ym, Malekas' subsequence (1 ≤ y1 < y2 < ... < ym ≤ n - |p| + 1)."}
{"name": "67_A. Partial Teacher", "description": "Input\n\nThe first line of input contains the number of students n (2 ≤ n ≤ 1000). The second line gives (n - 1) characters consisting of \"L\", \"R\" and \"=\". For each pair of adjacent students \"L\" means that the left student has higher marks, \"R\" means that the right student has higher marks and \"=\" means that both have equal marks."}
{"name": "702_A. Maximum Increase", "description": "Input\n\nThe first line contains single positive integer n (1 ≤ n ≤ 105) — the number of integers.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "746_B. Decoding", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 2000) — the length of the encoded word.\n\nThe second line contains the string s of length n consisting of lowercase English letters — the encoding."}
{"name": "769_B. News About Credit", "description": "Input\n\nThe first line contains the positive integer n (2 ≤ n ≤ 100) — the number of students. \n\nThe second line contains the sequence a1, a2, ..., an (0 ≤ ai ≤ 100), where ai equals to the maximum number of messages which can the i-th student agree to send. Consider that Polycarp always has the number 1."}
{"name": "813_E. Army Creation", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100000).\n\nThe second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 100000).\n\nThe third line contains one integer q (1 ≤ q ≤ 100000).\n\nThen q lines follow. ith line contains two numbers xi and yi which represent ith plan (1 ≤ xi, yi ≤ n).\n\nYou have to keep track of the answer to the last plan (let's call it last). In the beginning last = 0. Then to restore values of li and ri for the ith plan, you have to do the following:\n\n  1. li = ((xi + last) mod n) + 1; \n  2. ri = ((yi + last) mod n) + 1; \n  3. If li > ri, swap li and ri."}
{"name": "839_D. Winter is here", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 200000) — the size of the army.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000000) — denoting the strengths of his soldiers."}
{"name": "884_F. Anti-Palindromize", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 100, n is even) — the number of characters in s.\n\nThe second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string.\n\nThe third line contains n integer numbers b1, b2, ..., bn (1 ≤ bi ≤ 100), where bi is the beauty of index i."}
{"name": "1076_F. Summer Practice Report", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ k ≤ 10^6).\n\nThe second line contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^6) — the number of tables on the i-th page.\n\nThe third line contains n integers y_1, y_2, ..., y_n (1 ≤ y_i ≤ 10^6) — the number of formulas on the i-th page."}
{"name": "1118_F1. Tree Cutting (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2) — the colors of the vertices. a_i = 1 means that vertex i is colored red, a_i = 2 means that vertex i is colored blue and a_i = 0 means that vertex i is uncolored.\n\nThe i-th of the next n - 1 lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ n, v_i ≠ u_i) — the edges of the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the tree contains at least one red vertex and at least one blue vertex."}
{"name": "1166_B. All the Vowels Please", "description": "Input\n\nInput consists of a single line containing the integer k (1≤ k ≤ 10^4) — the required length."}
{"name": "1203_D2. Remove the Substring (hard version)", "description": "Input\n\nThe first line of the input contains one string s consisting of at least 1 and at most 2 ⋅ 10^5 lowercase Latin letters.\n\nThe second line of the input contains one string t consisting of at least 1 and at most 2 ⋅ 10^5 lowercase Latin letters.\n\nIt is guaranteed that t is a subsequence of s."}
{"name": "1305_F. Kuroni and the Punishment", "description": "Input\n\nThe first line contains an integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_n. (1 ≤ a_i ≤ 10^{12}) — the elements of the array."}
{"name": "132_C. Logo Turtle", "description": "Input\n\nThe first line of input contains a string commands — the original list of commands. The string commands contains between 1 and 100 characters, inclusive, and contains only characters \"T\" and \"F\".\n\nThe second line contains an integer n (1 ≤ n ≤ 50) — the number of commands you have to change in the list."}
{"name": "134_A. Average Numbers", "description": "Input\n\nThe first line contains the integer n (2 ≤ n ≤ 2·105). The second line contains elements of the sequence a1, a2, ..., an (1 ≤ ai ≤ 1000). All the elements are positive integers."}
{"name": "1392_F. Omkar and Landslide", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6). \n\nThe second line contains n integers h_1, h_2, ..., h_n satisfying 0 ≤ h_1 < h_2 < ... < h_n ≤ 10^{12} — the heights."}
{"name": "1417_B. Two Arrays", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and T (1 ≤ n ≤ 10^5, 0 ≤ T ≤ 10^9) — the number of elements in the array and the unlucky integer, respectively. \n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. \n\nThe sum of n over all test cases does not exceed 10^5."}
{"name": "1481_F. AB Tree", "description": "Input\n\nThe first line contains two integers n and x (1 ≤ n ≤ 10^5; 0 ≤ x ≤ n) — the number of vertices in the tree the number of a's.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_{n} (1 ≤ p_i ≤ n; p_i ≠ i), where p_i is the parent of node i.\n\nIt is guaranteed that the input describes a connected tree."}
{"name": "1509_A. Average Height", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 500) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2000) — the number of other council members.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the heights of each of the other members in millimeters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2000."}
{"name": "255_A. Greg's Workout", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 20). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 25) — the number of times Greg repeats the exercises."}
{"name": "327_C. Magic Five", "description": "Input\n\nIn the first line you're given a string a (1 ≤ |a| ≤ 105), containing digits only. In the second line you're given an integer k (1 ≤ k ≤ 109). The plate s is formed by concatenating k copies of a together. That is n = |a|·k."}
{"name": "444_A. DZY Loves Physics", "description": "Input\n\nThe first line contains two space-separated integers n (1 ≤ n ≤ 500), <image>. Integer n represents the number of nodes of the graph G, m represents the number of edges.\n\nThe second line contains n space-separated integers xi (1 ≤ xi ≤ 106), where xi represents the value of the i-th node. Consider the graph nodes are numbered from 1 to n.\n\nEach of the next m lines contains three space-separated integers ai, bi, ci (1 ≤ ai < bi ≤ n; 1 ≤ ci ≤ 103), denoting an edge between node ai and bi with value ci. The graph won't contain multiple edges."}
{"name": "538_F. A Heap of Heaps", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 2·105).\n\nThe second line contains n space-separated integers a1, ..., an ( - 109 ≤ ai ≤ 109)."}
{"name": "566_G. Max and Min", "description": "Input\n\nThe first line contains two integers, n and m (1 ≤ n, m ≤ 100 000) — the number of pairs of numbers available to Max and Min, correspondingly.\n\nThe second line contains two integers x, y (1 ≤ x, y ≤ 109) — the initial values of numbers with which the kittens are playing.\n\nNext n lines contain the pairs of numbers ai, bi (1 ≤ ai, bi ≤ 109) — the pairs available to Max.\n\nThe last m lines contain pairs of numbers cj, dj (1 ≤ cj, dj ≤ 109) — the pairs available to Min."}
{"name": "770_D. Draw Brackets!", "description": "Input\n\nThe first line contains an even integer n (2 ≤ n ≤ 100) — the length of the sequence of brackets.\n\nThe second line contains the sequence of brackets — these are n symbols \"[\" and \"]\". It is guaranteed that the given sequence of brackets is regular."}
{"name": "910_A. The Way to Home", "description": "Input\n\nThe first line contains two integers n and d (2 ≤ n ≤ 100, 1 ≤ d ≤ n - 1) — the point, which the frog wants to reach, and the maximal length of the frog jump.\n\nThe second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one."}
{"name": "959_D. Mahmoud and Ehab and another array construction task", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105), the number of elements in a and b.\n\nThe second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 105), the elements of a."}
{"name": "986_B. Petr and Permutations", "description": "Input\n\nIn the first line of input there is one integer n (10^{3} ≤ n ≤ 10^{6}).\n\nIn the second line there are n distinct integers between 1 and n — the permutation of size n from the test.\n\nIt is guaranteed that all tests except for sample are generated this way: First we choose n — the size of the permutation. Then we randomly choose a method to generate a permutation — the one of Petr or the one of Alex. Then we generate a permutation using chosen method."}
{"name": "p01940 Unique Subsequence", "description": "Input\n\naizucamp\nazu"}
{"name": "p02089 AddMulSubDiv", "description": "Input\n\n\nN Q L R\nA_1 A_2 ... A_N\nq_1 x_1 s_1 t_1\n:\nq_Q x_Q s_Q t_Q\n\n\n* The first line contains four integers N, Q, L, and R. N is the number of elements in an integer array A, Q is the number of queries, and L and R specify the range of integers you want to count within after the queries.\n* The second line consists of N integers, the i-th of which is the i-th element of A.\n* The following Q lines represent information of queries. The j-th line of them corresponds to the j-th query and consists of four integers q_j, x_j, s_j, and t_j. Here, q_j = 1 stands for the j-th query is Query 1, and q_j = 2 stands for the j-th query is Query 2. x_j, s_j, and t_j are parameters used for the j-th query.\n\n\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* -2^{63} < L \\leq R < 2^{63}\n* 0 \\leq |A_i| \\leq 10^9\n* q_j \\in \\\\{ 1, 2 \\\\}\n* 0 \\leq x_j < 2^{63}\n* 1 \\leq s_j, t_j \\leq 10^9\n* Inputs consist only of integers.\n* The absolute value of any element in the array dosen't exceed 2^{63} at any point during query processing."}
{"name": "1148_B. Born This Way", "description": "Input\n\nThe first line contains five integers n, m, t_a, t_b and k (1 ≤ n, m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ n + m, 1 ≤ t_a, t_b ≤ 10^9) — the number of flights from A to B, the number of flights from B to C, the flight time from A to B, the flight time from B to C and the number of flights you can cancel, respectively.\n\nThe second line contains n distinct integers in increasing order a_1, a_2, a_3, ..., a_n (1 ≤ a_1 < a_2 < … < a_n ≤ 10^9) — the times the flights from A to B depart.\n\nThe third line contains m distinct integers in increasing order b_1, b_2, b_3, ..., b_m (1 ≤ b_1 < b_2 < … < b_m ≤ 10^9) — the times the flights from B to C depart."}
{"name": "1187_F. Expected Square Beauty", "description": "Input\n\nThe first line contains the single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the size of the array x.\n\nThe second line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 10^9).\n\nThe third line contains n integers r_1, r_2, ..., r_n (l_i ≤ r_i ≤ 10^9)."}
{"name": "1310_A. Recommendations", "description": "Input\n\nThe first line of input consists of single integer n — the number of news categories (1 ≤ n ≤ 200 000).\n\nThe second line of input consists of n integers a_i — the number of publications of i-th category selected by the batch algorithm (1 ≤ a_i ≤ 10^9).\n\nThe third line of input consists of n integers t_i — time it takes for targeted algorithm to find one new publication of category i (1 ≤ t_i ≤ 10^5)."}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 200) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 30; 0 ≤ k ≤ n) — the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 30), where b_i is the i-th element of b."}
{"name": "1438_B. Valerii Against Everyone", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of every test case contains a single integer n (2 ≤ n ≤ 1000).\n\nThe second line of every test case contains n integers b_1,b_2,…,b_n (0 ≤ b_i ≤ 10^9)."}
{"name": "1539_C. Stable Groups", "description": "Input\n\nThe first line contains three integers n, k, x (1 ≤ n ≤ 200 000, 0 ≤ k ≤ 10^{18}, 1 ≤ x ≤ 10^{18}) — the initial number of students, the number of students you can additionally invite, and the maximum allowed level difference.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{18}) — the students levels."}
{"name": "165_E. Compatible Numbers", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 106) — the number of elements in the given array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 4·106) — the elements of the given array. The numbers in the array can coincide."}
{"name": "304_E. Minimum Modular", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 5000, 0 ≤ k ≤ 4), which we have mentioned above. \n\nThe second line contains n distinct integers a1, a2, ..., an (0 ≤ ai ≤ 106)."}
{"name": "331_A1. Oh Sweet Beaverette", "description": "Input\n\nThe first line contains a single integer n — the initial number of trees in the woodland belt, 2 ≤ n. The second line contains space-separated integers ai — the esthetic appeals of each tree. All esthetic appeals do not exceed 109 in their absolute value.\n\n  * to get 30 points, you need to solve the problem with constraints: n ≤ 100 (subproblem A1); \n  * to get 100 points, you need to solve the problem with constraints: n ≤ 3·105 (subproblems A1+A2)."}
{"name": "399_B. Red and Blue Balls", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 50) — the number of balls inside the stack.\n\nThe second line contains a string s (|s| = n) describing the initial state of the stack. The i-th character of the string s denotes the color of the i-th ball (we'll number the balls from top to bottom of the stack). If the character is \"R\", the color is red. If the character is \"B\", the color is blue."}
{"name": "448_A. Rewards", "description": "Input\n\nThe first line contains integers a1, a2 and a3 (0 ≤ a1, a2, a3 ≤ 100). The second line contains integers b1, b2 and b3 (0 ≤ b1, b2, b3 ≤ 100). The third line contains integer n (1 ≤ n ≤ 100).\n\nThe numbers in the lines are separated by single spaces."}
{"name": "46_B. T-shirts from Sponsor", "description": "Input\n\nThe first line contains five non-negative integers NS, NM, NL, NXL, NXXL not exceeding 1000 which represent the number of T-shirts of the corresponding sizes. The second line contains an integer K (1 ≤ K ≤ 1000) which represents the number of participants. The next K lines contain the optimal T-shirt sizes for the contestants. The sizes are given in the order in which the participants stand in the line. It is guaranteed that NS + NM + NL + NXL + NXXL ≥ K."}
{"name": "56_D. Changing a String", "description": "Input\n\nThe first line contains s, the second line contains t. The lines consist only of capital Latin letters, their lengths are positive numbers from 1 to 1000."}
{"name": "591_B. Rebranding", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 200 000) — the length of the initial name and the number of designers hired, respectively.\n\nThe second line consists of n lowercase English letters and represents the original name of the corporation.\n\nNext m lines contain the descriptions of the designers' actions: the i-th of them contains two space-separated lowercase English letters xi and yi."}
{"name": "612_F. Simba on the Circle", "description": "Input\n\nThe first line contains two integers n and s (1 ≤ s ≤ n ≤ 2000) — the number of cells in the circular array and the starting position of Simba.\n\nThe second line contains n integers ai ( - 109 ≤ ai ≤ 109) — the number written in the i-th cell. The numbers are given for cells in order from 1 to n. Some of numbers ai can be equal."}
{"name": "750_E. New Year and Old Subsequence", "description": "Input\n\nThe first line of the input contains two integers n and q (4 ≤ n ≤ 200 000, 1 ≤ q ≤ 200 000) — the length of the string s and the number of queries respectively.\n\nThe second line contains a string s of length n. Every character is one of digits '0'–'9'.\n\nThe i-th of next q lines contains two integers ai and bi (1 ≤ ai ≤ bi ≤ n), describing a substring in the i-th query."}
{"name": "845_A. Chess Tourney", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 100).\n\nThe second line contains 2·n integers a1, a2, ... a2n (1 ≤ ai ≤ 1000)."}
{"name": "935_F. Fafa and Array", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 105) — the length of the array.\n\nThe second line contains n positive integers a1, a2, ..., an (0 < ai ≤ 109) — the array elements.\n\nThe third line contains an integer q (1 ≤ q ≤ 105) — the number of queries. \n\nThen q lines follow, line i describes the i-th query and contains four integers ti li ri xi <image>. \n\nIt is guaranteed that at least one of the queries is of type 1."}
{"name": "961_E. Tufurama", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2·105) — the number of seasons.\n\nThe second line contains n integers separated by space a1, a2, ..., an (1 ≤ ai ≤ 109) — number of episodes in each season."}
{"name": "p00811 Calling Extraterrestrial Intelligence Again", "description": "Input\n\nThe input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicates the end of the input and should not be treated as data to be processed.\n\nThe integers of each input triplet are the integer m, the numerator a, and the denominator b described above, in this order. You may assume 4 < m < 100000 and 1 ≤ a ≤ b ≤ 1000."}
{"name": "p01515 Equation", "description": "Input\n\nThe input consists of multiple lines, each line being a dataset. The dataset is a string consisting of T, F, a, b, c, d, e, f, g, h, i, j, k, (,), =,-, +, *,> and is blank. Does not include other characters such as. It can be assumed that the number of characters in one line is 1000 characters or less.\n\nOne dataset contains one equation. The grammar of the equation is given by the following BNF. All equations follow this syntax rule.\n\n\n<equation> :: = <formula> \"=\" <formula>\n<formula> :: = \"T\" | \"F\" |\n\"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" |\n\"g\" | \"h\" | \"i\" | \"j\" | \"k\" |\n\"-\" <formula> |\n\"(\" <formula> \"*\" <formula> \")\" |\n\"(\" <formula> \"+\" <formula> \")\" |\n\"(\" <formula> \"->\" <formula> \")\"\n\n\nThe end of the input is indicated by a line consisting only of \"#\", which is not a dataset."}
{"name": "1038_C. Gambling", "description": "Input\n\nThe first line of input contains an integer n (1 ≤ n ≤ 100 000) — the sizes of the list.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^6), describing the list of the player A, who starts the game.\n\nThe third line contains n integers b_i (1 ≤ b_i ≤ 10^6), describing the list of the player B."}
{"name": "1082_E. Increasing Frequency", "description": "Input\n\nThe first line contains two integers n and c (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ c ≤ 5 ⋅ 10^5) — the length of array and the value c to obtain.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5 ⋅ 10^5) — array a."}
{"name": "1101_G. (Zero XOR Subset)-less", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the size of the array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9)."}
{"name": "118_C. Fancy Number", "description": "Input\n\nThe first line contains two space-separated integers n and k (2 ≤ n ≤ 104, 2 ≤ k ≤ n) which represent how many digits the number has and how many equal digits a beautiful number should have. The second line consists of n digits. It describes the old number of Vasya's car. It is guaranteed that the number contains no spaces and only contains digits."}
{"name": "1270_A. Card Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). The description of the test cases follows.\n\nThe first line of each test case contains three integers n, k_1, k_2 (2 ≤ n ≤ 100, 1 ≤ k_1 ≤ n - 1, 1 ≤ k_2 ≤ n - 1, k_1 + k_2 = n) — the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains k_1 integers a_1, ..., a_{k_1} (1 ≤ a_i ≤ n) — the values of cards of the first player.\n\nThe third line of each test case contains k_2 integers b_1, ..., b_{k_2} (1 ≤ b_i ≤ n) — the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different."}
{"name": "1292_E. Rin and The Unknown Flower", "description": "Input\n\n\n1\n4\n\n2 1 2\n\n1 2\n\n0\n\n1"}
{"name": "1312_F. Attack on Red Kingdom", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThen, the test cases follow. Each test case is represented by two lines. \n\nThe first line contains four integers n, x, y and z (1 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ x, y, z ≤ 5). \n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{18}).\n\nIt is guaranteed that the sum of values of n over all test cases in the input does not exceed 3 ⋅ 10^5."}
{"name": "1335_C. Two Teams Composing", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of students. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the skill of the i-th student. Different students can have the same skills.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1355_E. Restorer Distance", "description": "Input\n\nThe first line of input contains four integers N, A, R, M (1 ≤ N ≤ 10^{5}, 0 ≤ A, R, M ≤ 10^{4}) — the number of pillars and the costs of operations.\n\nThe second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^{9}) — initial heights of pillars."}
{"name": "1375_D. Replace by MEX", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 200) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 1000) — length of the array.\n\nThe second line of each test case contains n integers a_1, …, a_n (0 ≤ a_i ≤ n) — elements of the array. Note that they don't have to be distinct.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 1000."}
{"name": "1398_G. Running Competition", "description": "Input\n\nThe first line contains three integers n, x and y (1 ≤ n, x, y ≤ 2 ⋅ 10^5, n ≤ x).\n\nThe second line contains n + 1 integers a_0, a_1, ..., a_n (0 = a_0 < a_1 < a_2 < ... < a_{n - 1} < a_n = x).\n\nThe third line contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of stages.\n\nThe fourth line contains q even integers l_1, l_2, ..., l_q (4 ≤ l_i ≤ 10^6) — the lengths of the stages."}
{"name": "1440_B. Sum of Medians", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2t lines contain descriptions of test cases.\n\nThe first line of the description of each test case contains two integers n, k (1 ≤ n, k ≤ 1000).\n\nThe second line of the description of each test case contains nk integers a_1, a_2, …, a_{nk} (0 ≤ a_i ≤ 10^9) — given array. It is guaranteed that the array is non-decreasing: a_1 ≤ a_2 ≤ … ≤ a_{nk}.\n\nIt is guaranteed that the sum of nk for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1491_F. Magnets", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nInteraction\n\nFor each test case you should start by reading an integer n (3 ≤ n ≤ 2000) — the number of the magnets. \n\nIt is guaranteed that the total sum of all n over all test cases doesn't exceed 2000.\n\nAfter that you can put some magnets into the machine and make a query from the statement.\n\nYou have to print each query in three lines:\n\n  * In the first line print \"? l r\" (without quotes) where l and r (1 ≤ l,r < n, l+r ≤ n) respectively denote the number of the magnets you put to left and right.\n  * In the second line print l integers a_1, ..., a_l (1 ≤ a_i ≤ n, a_i ≠ a_j if i ≠ j) — the indices of the magnets you put to left.\n  * In the third line print r integers b_1, ..., b_r (1 ≤ b_i ≤ n, b_i ≠ b_j if i ≠ j) — the indices of the magnets you put to right.\n  * The same magnet can't be put to both sides in the same query. Formally, you should guarantee that a_i ≠ b_j for any i and j. However, you may leave some magnets unused.\n\n\n\nAfter printing a query do not forget to output end of line and flush the output. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nAfter this, you should read an integer F — the force these magnets produce.\n\nNote that if your query is invalid(either the query limit exceeds, the machine crashes or the arguments are invalid), the interactor will terminate immediately. In this case terminate your program to receive verdict Wrong Answer instead of arbitrary verdicts.\n\nIf you are confident about your answer, use the following format to report it:\n\n  * \"! k A\", where k is the number of magnets you found, and A is an array consisting of k different integers from 1 to n denoting the indices of the magnets of type - that you found. You may print elements of A in arbitrary order.\n  * After that, if this is the last test case, you have to terminate your program; otherwise you should immediately continue to deal with the next test case.\n\n\n\nNote that the interactor is not adaptive. The types of the magnets are fixed before the start of interaction and do not change with queries.\n\nHacks\n\nTo hack a solution, use the following format:\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases in your hack.\n\nThen follow the descriptions of the t test cases, each printed in two lines:\n\n  * The first line contains a single integer n (3 ≤ n ≤ 2000) — the number of magnets.\n  * The second line contains a string S of length n consisting of only N, S and -, denoting the magnets' types.\n  * Each of your test case should guarantee that there are at least 2 magnets whose type is not -, and at least 1 magnet of type -. Meanwhile, the total sum of n in all test cases should not exceed 2000.\n\nExample\n\nInput\n\n\n1\n4\n\n\n\n0\n\n\n\n1\n\n\n\n0\n\n\n\n0"}
{"name": "1514_C. Product 1 Modulo N", "description": "Input\n\nThe only line contains the integer n (2 ≤ n ≤ 10^5)."}
{"name": "1541_C. Great Graphs", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of pastures.\n\nThe second line of each test case contains n space separated integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 10^9) — the array d. It is guaranteed that d_1 = 0.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "169_B. Replacing Digits", "description": "Input\n\nThe first line contains positive integer a. Its length n is positive and doesn't exceed 105. The second line contains sequence of digits s. Its length m is positive and doesn't exceed 105. The digits in the sequence s are written consecutively without any separators.\n\nThe given number a doesn't contain leading zeroes."}
{"name": "285_C. Building Permutation", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the size of the sought permutation. The second line contains n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109)."}
{"name": "3_C. Tic-tac-toe", "description": "Input\n\nThe input consists of three lines, each of the lines contains characters \".\", \"X\" or \"0\" (a period, a capital letter X, or a digit zero)."}
{"name": "471_D. MUH and Cube Walls", "description": "Input\n\nThe first line contains two integers n and w (1 ≤ n, w ≤ 2·105) — the number of towers in the bears' and the elephant's walls correspondingly. The second line contains n integers ai (1 ≤ ai ≤ 109) — the heights of the towers in the bears' wall. The third line contains w integers bi (1 ≤ bi ≤ 109) — the heights of the towers in the elephant's wall."}
{"name": "51_C. Three Base Stations", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 2·105) which represents the number of houses in the village. The second line contains the coordinates of houses — the sequence x1, x2, ..., xn of integer numbers (1 ≤ xi ≤ 109). It is possible that two or more houses are located on one point. The coordinates are given in a arbitrary order."}
{"name": "594_D. REQ", "description": "Input\n\nThe first line of the input contains number n (1 ≤ n ≤ 200 000) — the length of the array given to Vovochka. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106).\n\nThe third line contains integer q (1 ≤ q ≤ 200 000) — the number of queries. Next q lines contain the queries, one per line. Each query is defined by the boundaries of the segment li and ri (1 ≤ li ≤ ri ≤ n)."}
{"name": "664_B. Rebus", "description": "Input\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks."}
{"name": "755_F. PolandBall and Gifts", "description": "Input\n\nThe first line of input contains two integers n and k (2 ≤ n ≤ 106, 0 ≤ k ≤ n), representing the number of Balls and the number of Balls who will forget to bring their presents. \n\nThe second line contains the permutation p of integers from 1 to n, where pi is the index of Ball who should get a gift from the i-th Ball. For all i, pi ≠ i holds."}
{"name": "776_G. Sherlock and the Encrypted Data", "description": "Input\n\nFirst line contains the integer q (1 ≤ q ≤ 10000).\n\nEach of the next q lines contain two hexadecimal integers l and r (0 ≤ l ≤ r < 1615).\n\nThe hexadecimal integers are written using digits from 0 to 9 and/or lowercase English letters a, b, c, d, e, f.\n\nThe hexadecimal integers do not contain extra leading zeros."}
{"name": "847_E. Packmen", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 105) — the length of the game field.\n\nThe second line contains the description of the game field consisting of n symbols. If there is symbol '.' in position i — the cell i is empty. If there is symbol '*' in position i — in the cell i contains an asterisk. If there is symbol 'P' in position i — Packman is in the cell i.\n\nIt is guaranteed that on the game field there is at least one Packman and at least one asterisk."}
{"name": "939_A. Love Triangle", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 5000) — the number of planes.\n\nThe second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ n, fi ≠ i), meaning that the i-th plane likes the fi-th."}
{"name": "964_C. Alternating Sum", "description": "Input\n\nThe first line contains four integers n, a, b and k (1 ≤ n ≤ 10^{9}, 1 ≤ a, b ≤ 10^{9}, 1 ≤ k ≤ 10^{5}).\n\nThe second line contains a sequence of length k consisting of characters '+' and '-'. \n\nIf the i-th character (0-indexed) is '+', then s_{i} = 1, otherwise s_{i} = -1.\n\nNote that only the first k members of the sequence are given, the rest can be obtained using the periodicity property."}
{"name": "p00041 Expression", "description": "Input\n\nGiven multiple datasets. The format of each dataset is as follows:\n\n\na b c d\n\nInput ends with four 0s. The number of datasets does not exceed 40."}
{"name": "p00173 Haunted House", "description": "Input\n\nThe input is given in the following format:\n\n\nname1 a1 b1\nname2 a2 b2\n::\nname9 a9 b9\n\n\nThe input consists of 9 lines, the class name of the i-th class on the i-line namei (a half-width character string of 1 to 15 characters including numbers and alphabets), the number of visitors in the morning ai (0 ≤ ai ≤ 400) , Afternoon attendance bi (0 ≤ bi ≤ 400) is given."}
{"name": "p00828 Make a Sequence", "description": "Input\n\nThe input consists of multiple datasets each corresponding to the record of a game. A dataset starts with a line containing three positive integers n, m, and p separated by a space. The relations 3 ≤ m ≤ n ≤ 7 and 1 ≤ p ≤ n3 hold between them. n and m are the parameter values of the game as described above. p is the number of moves in the game.\n\nThe rest of the dataset is p lines each containing two positive integers x and y. Each of these lines describes a move, i.e. the player on turn puts his ball on the peg specified. You can assume that 1 ≤ x ≤ n and 1 ≤ y ≤ n. You can also assume that at most n balls are put on a peg throughout a game.\n\nThe end of the input is indicated by a line with three zeros separated by a space."}
{"name": "p01228 Rhythm Machine", "description": "Input\n\nThe number of datasets is given in the first row. From the next line onward, each dataset is described in turn. You can assume that the number of datasets does not exceed 120.\n\nEach dataset is given in the following format.\n\n\nN\nR1\nR2\n...\nRN\n\n\nRi (1 ≤ i ≤ N) is a rhythm pattern for older products.\n\nEach rhythm pattern has a maximum of 2048 characters (1024 chord expression). Note that the given rhythm pattern is not always the shortest expression."}
{"name": "p01362 Dice Room", "description": "Input\n\nThe input consists of several datasets. Each dataset contains 6 tables of 3x3 characters which describe the initial position of holes on each side. Each character is either '*' or '.'. A hole is indicated by '*'. The order which six sides appears in is: front, right, back, left, top, bottom. The order and orientation of them are described by this development view:\n\n<image>\n\nFigure 4: Dice Room\n\n<image>\n\nFigure 5: available dice rotations\n\n<image>\n\nThere is a blank line after each dataset. The end of the input is indicated by a single '#'."}
{"name": "1042_D. Petya and Array", "description": "Input\n\nThe first line contains two integers n and t (1 ≤ n ≤ 200 000, |t| ≤ 2⋅10^{14}).\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (|a_{i}| ≤ 10^{9}) — the description of Petya's array. Note that there might be negative, zero and positive elements."}
{"name": "1065_C. Make It Equal", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, n ≤ k ≤ 10^9) — the number of towers and the restriction on slices, respectively.\n\nThe second line contains n space separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 2 ⋅ 10^5) — the initial heights of towers."}
{"name": "1107_A. Digits Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 300) — the number of queries.\n\nThe first line of the i-th query contains one integer number n_i (2 ≤ n_i ≤ 300) — the number of digits in the i-th query.\n\nThe second line of the i-th query contains one string s_i of length n_i consisting only of digits from 1 to 9."}
{"name": "1154_E. Two Teams", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of students and the value determining the range of chosen students during each move, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the programming skill of the i-th student. It is guaranteed that all programming skills are distinct."}
{"name": "1176_C. Lose it!", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (each a_i is one of the following numbers: 4, 8, 15, 16, 23, 42), where a_i is the i-th element of a."}
{"name": "1234_D. Distinct Characters Queries", "description": "Input\n\nThe first line of the input contains one string s consisting of no more than 10^5 lowercase Latin letters.\n\nThe second line of the input contains one integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines contain queries, one per line. Each query is given in the format described in the problem statement. It is guaranteed that there is at least one query of the second type."}
{"name": "1253_C. Sweets Eating", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 200\\ 000).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 200\\ 000)."}
{"name": "1277_B. Make Them Odd", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains n (1 ≤ n ≤ 2⋅10^5) — the number of integers in the sequence a. The second line contains positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nThe sum of n for all test cases in the input doesn't exceed 2⋅10^5."}
{"name": "133_A. HQ9+", "description": "Input\n\nThe input will consist of a single line p which will give a program in HQ9+. String p will contain between 1 and 100 characters, inclusive. ASCII-code of each character of p will be between 33 (exclamation mark) and 126 (tilde), inclusive."}
{"name": "1361_B. Johnny and Grandmaster", "description": "Input\n\nInput consists of multiple test cases. The first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers n and p (1 ≤ n, p ≤ 10^6). The second line contains n integers k_i (0 ≤ k_i ≤ 10^6).\n\nThe sum of n over all test cases doesn't exceed 10^6."}
{"name": "1381_C. Mastermind", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains three integers n,x,y (1≤ n≤ 10^5, 0≤ x≤ y≤ n) — the length of the codes, and two values Alice responds with.\n\nThe second line of each test case contains n integers b_1,…,b_n (1≤ b_i≤ n+1) — Bob's guess, where b_i is the i-th color of the guess.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5."}
{"name": "1446_B. Catching Cheaters", "description": "Input\n\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 5000) — lengths of the two strings A and B. \n\nThe second line contains a string consisting of n lowercase Latin letters — string A.\n\nThe third line contains a string consisting of m lowercase Latin letters — string B."}
{"name": "1497_A. Meximization", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 100)."}
{"name": "384_C. Milking cows", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 200000). The second line contains n integers a1, a2, ..., an, where ai is 0 if the cow number i is facing left, and 1 if it is facing right."}
{"name": "477_C. Dreamoon and Strings", "description": "Input\n\nThe first line of the input contains the string s (1 ≤ |s| ≤ 2 000).\n\nThe second line of the input contains the string p (1 ≤ |p| ≤ 500).\n\nBoth strings will only consist of lower case English letters."}
{"name": "4_D. Mysterious Present", "description": "Input\n\nThe first line contains integers n, w, h (1 ≤ n ≤ 5000, 1 ≤ w, h ≤ 106) — amount of envelopes Peter has, the card width and height respectively. Then there follow n lines, each of them contains two integer numbers wi and hi — width and height of the i-th envelope (1 ≤ wi, hi ≤ 106)."}
{"name": "525_C. Ilya and Sticks", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.\n\nThe second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks."}
{"name": "59_C. Title", "description": "Input\n\nThe first line contains an integer k (1 ≤ k ≤ 26) which is the number of allowed alphabet letters. The second line contains s which is the given template. In s only the first k lowercase letters of Latin alphabet and question marks can be present, the length of s is from 1 to 100 characters inclusively."}
{"name": "691_A. Fashion in Berland", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 1000) — the number of buttons on the jacket.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 1). The number ai = 0 if the i-th button is not fastened. Otherwise ai = 1."}
{"name": "760_C. Pavel and barbecue", "description": "Input\n\nThe first line contain the integer n (1 ≤ n ≤ 2·105) — the number of skewers.\n\nThe second line contains a sequence of integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the permutation, according to which Pavel wants to move the skewers.\n\nThe third line contains a sequence b1, b2, ..., bn consisting of zeros and ones, according to which Pavel wants to reverse the skewers."}
{"name": "899_F. Letters Removing", "description": "Input\n\nThe first string contains two integers n and m (1 ≤ n, m ≤ 2·105) — the length of the string and the number of operations.\n\nThe second line contains the string of length n, consisting of small and large English letters and digits. Positions in the string are enumerated from 1.\n\nEach of the next m lines contains two integers l and r (1 ≤ l ≤ r), followed by a character c, which is a small or large English letter or a digit. This line describes one operation. It is guaranteed that r doesn't exceed the length of the string s before current operation."}
{"name": "p00717 Polygonal Line Search", "description": "Input\n\nThe input consists of multiple datasets. The end of the input is indicated by a line which contains a zero.\n\nA dataset is given as follows.\n\n> n\n>  Polygonal line0\n>  Polygonal line1\n>  Polygonal line2\n>  ...\n>  Polygonal linen\n\nn is the number of polygonal lines for the object of search on xy-plane. n is an integer, and 1 <= n <= 50. Polygonal line0 indicates the template.\n\nA polygonal line is given as follows.\n\n> m\n>  x1 y1\n>  x2 y2\n>  ...\n>  xm ym\n>\n\nm is the number of the vertices of a polygonal line (3 <= m <= 10). xi and yi, separated by a space, are the x- and y-coordinates of a vertex, respectively (-10000 < xi < 10000, -10000 <yi < 10000)."}
{"name": "p01120 Tally Counters", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n m\n>  a1 a2 ... an\n>  b1 b2 ... bn\n>\n\nEach dataset consists of 3 lines. The first line contains n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), the number of counters and the maximum value displayed on counters, respectively. The second line contains the initial values on counters, ai (1 ≤ ai ≤ m), separated by spaces. The third line contains the target values on counters, bi (1 ≤ bi ≤ m), separated by spaces.\n\nThe end of the input is indicated by a line containing two zeros. The number of datasets does not exceed 100."}
{"name": "p01735 Optimal alpha beta pruning", "description": "Input\n\nInput follows following format:\n\n\nn\np_1 p_2 ... p_n\nk_1 t_{11} t_{12} ... t_{1k}\n:\n:\nk_n t_{n1} t_{n2} ... t_{nk}\n\n\nThe first line contains an integer n, which means the number of vertices in game tree T.\nThe second line contains n integers p_i, which means the evaluation value of vertex i.\nThen, next n lines which contain the information of game tree T.\nk_i is the number of child nodes of vertex i, and t_{ij} is the indices of the child node of vertex i.\nInput follows following constraints:\n\n* 2 \\leq n \\leq 100\n* -10,000 \\leq p_i \\leq 10,000\n* 0 \\leq k_i \\leq 5\n* 2 \\leq t_{ij} \\leq n\n* Index of root node is 1.\n* Evaluation value except leaf node is always 0. This does not mean the evaluation values of non-leaf nodes are 0. You have to calculate them if necessary.\n* Leaf node sometimes have evaluation value of 0.\n* Game tree T is tree structure."}
{"name": "1039_A. Timetable", "description": "Input\n\nThe first line of the input contains two integers n and t (1 ≤ n ≤ 200 000, 1 ≤ t ≤ 10^{18}) — the number of buses in timetable for and the minimum possible travel time from stop A to stop B.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_1 < a_2 < … < a_n ≤ 10^{18}), defining the moments of time when the buses leave stop A.\n\nThe third line contains n integers x_1, x_2, …, x_n (1 ≤ x_i ≤ n), the i-th of them stands for the maximum possible timetable position, at which the i-th bus leaving stop A can arrive at stop B."}
{"name": "1083_B. The Fair Nut and Strings", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 5 ⋅ 10^5, 1 ≤ k ≤ 10^9).\n\nThe second line contains a string s (|s| = n) — the string consisting of letters \"a\" and \"b.\n\nThe third line contains a string t (|t| = n) — the string consisting of letters \"a\" and \"b.\n\nIt is guaranteed that string s is lexicographically not bigger than t."}
{"name": "1102_D. Balanced Ternary String", "description": "Input\n\nThe first line of the input contains one integer n (3 ≤ n ≤ 3 ⋅ 10^5, n is divisible by 3) — the number of characters in s.\n\nThe second line contains the string s consisting of exactly n characters '0', '1' and '2'."}
{"name": "1190_B. Tokitsukaze, CSL and Stone Game", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of piles.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_1, a_2, …, a_n ≤ 10^9), which mean the i-th pile has a_i stones."}
{"name": "1270_E. Divide Points", "description": "Input\n\nThe first line contains one integer n (2 ≤ n ≤ 10^3) — the number of points.\n\nThe i-th of the next n lines contains two integers x_i and y_i (-10^6 ≤ x_i, y_i ≤ 10^6) — the coordinates of the i-th point. \n\nIt is guaranteed that all n points are pairwise different."}
{"name": "1313_C1. Skyscrapers (easy version)", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of plots.\n\nThe second line contains the integers m_1, m_2, …, m_n (1 ≤ m_i ≤ 10^9) — the limit on the number of floors for every possible number of floors for a skyscraper on each plot."}
{"name": "1399_D. Binary String To Subsequences", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of s. The second line of the test case contains n characters '0' and '1' — the string s.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1468_B. Bakery", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ m ≤ 2 ⋅ 10^5) — the number of days the bakery is open and the number of possible values of consumer demand.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of bread loaves that will be baked each day.\n\nThe third line contains m integers k_1, k_2, ..., k_m (1 ≤ k_1 < k_2 < ... < k_m ≤ 10^9) — the possible consumer demand values in the ascending order."}
{"name": "1542_A. Odd Set", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1≤ n≤ 100).\n\nThe second line of each test case contains 2n integers a_1,a_2,..., a_{2n} (0≤ a_i≤ 100) — the numbers in the set."}
{"name": "262_B. Roma and Changing Signs", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 105), showing, how many numbers are in the sequence and how many swaps are to be made.\n\nThe second line contains a non-decreasing sequence, consisting of n integers ai (|ai| ≤ 104).\n\nThe numbers in the lines are separated by single spaces. Please note that the given sequence is sorted in non-decreasing order."}
{"name": "311_B. Cats Transport", "description": "Input\n\nThe first line of the input contains three integers n, m, p (2 ≤ n ≤ 105, 1 ≤ m ≤ 105, 1 ≤ p ≤ 100).\n\nThe second line contains n - 1 positive integers d2, d3, ..., dn (1 ≤ di < 104).\n\nEach of the next m lines contains two integers hi and ti (1 ≤ hi ≤ n, 0 ≤ ti ≤ 109)."}
{"name": "427_D. Match & Catch", "description": "Input\n\nThe first line of input contains s1 and the second line contains s2 (1 ≤ |s1|, |s2| ≤ 5000). Both strings consist of lowercase Latin letters."}
{"name": "450_B. Jzzhu and Sequences", "description": "Input\n\nThe first line contains two integers x and y (|x|, |y| ≤ 109). The second line contains a single integer n (1 ≤ n ≤ 2·109)."}
{"name": "496_D. Tennis Game", "description": "Input\n\nThe first line contains a single integer n — the length of the sequence of games (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers ai. If ai = 1, then the i-th serve was won by Petya, if ai = 2, then the i-th serve was won by Gena.\n\nIt is not guaranteed that at least one option for numbers s and t corresponds to the given record."}
{"name": "520_A. Pangram", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of characters in the string.\n\nThe second line contains the string. The string consists only of uppercase and lowercase Latin letters."}
{"name": "573_E. Bear and Bowling", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 107) - scores for Limak's rolls."}
{"name": "595_C. Warrior and Archer", "description": "Input\n\nThe first line on the input contains a single integer n (2 ≤ n ≤ 200 000, n is even) — the number of positions available initially. The second line contains n distinct integers x1, x2, ..., xn (0 ≤ xi ≤ 109), giving the coordinates of the corresponding positions."}
{"name": "637_A. Voting for Photos", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the total likes to the published photoes. \n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000), where ai is the identifier of the photo which got the i-th like."}
{"name": "665_A. Buses Between Cities", "description": "Input\n\nThe first line contains two integers a, ta (1 ≤ a, ta ≤ 120) — the frequency of the buses from the city A to the city B and the travel time. Both values are given in minutes.\n\nThe second line contains two integers b, tb (1 ≤ b, tb ≤ 120) — the frequency of the buses from the city B to the city A and the travel time. Both values are given in minutes.\n\nThe last line contains the departure time of Simion from the city A in the format hh:mm. It is guaranteed that there are a bus from the city A at that time. Note that the hours and the minutes are given with exactly two digits."}
{"name": "689_D. Friends and Subsequences", "description": "Input\n\nThe first line contains only integer n (1 ≤ n ≤ 200 000).\n\nThe second line contains n integer numbers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the sequence a.\n\nThe third line contains n integer numbers b1, b2, ..., bn ( - 109 ≤ bi ≤ 109) — the sequence b."}
{"name": "732_B. Cormen — The Best Friend Of a Man", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of days and the minimum number of walks with Cormen for any two consecutive days. \n\nThe second line contains integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of walks with Cormen on the i-th day which Polycarp has already planned."}
{"name": "p00045 Sum and Average", "description": "Input\n\nThe input is given in the following format:\n\n\nSales unit price, sales quantity\nSales unit price, sales quantity\n::\n::\n\n\nA comma-separated pair of unit price and quantity is given across multiple lines. All values ​​entered are greater than or equal to 0 and less than or equal to 1,000, and the number of unit price and quantity pairs does not exceed 100."}
{"name": "p00691 Fermat's Last Theorem", "description": "Input\n\nThe input is a sequence of lines each containing one positive integer number followed by a line containing a zero. You may assume that all of the input integers are greater than 1 and less than 1111."}
{"name": "p01704 Flowers", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets does not exceed $100$, and the data size of the input does not exceed $20\\mathrm{MB}$. Each dataset is formatted as follows.\n\n> $N$\n> $\\mathit{pw}$\n> $\\mathit{vw}_1$ $\\mathit{pf}_1$ $\\mathit{vf}_1$ $\\mathit{th}_1$\n> :\n> :\n> $\\mathit{vw}_N$ $\\mathit{pf}_N$ $\\mathit{vf}_N$ $\\mathit{th}_N$\n\nThe first line of a dataset contains a single integer $N$, number of flower seeds. The second line of a dataset contains a single integer $\\mathit{pw}$, cost of watering one liter. Each of the following $N$ lines describes a flower. The $i$-th line contains four integers, $\\mathit{vw}_i$, $\\mathit{pf}_i$, $\\mathit{vf}_i$, and $\\mathit{th}_i$, separated by a space.\n\nYou can assume that $1 \\le N \\le 10^5$, $1 \\le \\mathit{pw} \\le 100$, $-100 \\le \\mathit{vw}_i \\le 100$, $1 \\le \\mathit{pf}_i \\le 100$, $1 \\le \\mathit{vf}_i \\le 100$, and $-100 \\le \\mathit{th}_i \\le 100$.\n\nThe end of the input is indicated by a line containing a zero."}
{"name": "1034_E. Little C Loves 3 III", "description": "Input\n\nThe first line contains one integer n (0 ≤ n ≤ 21).\n\nThe second line contains 2^n integers in [0,3] without spaces — the i-th of them is a_{i-1}.\n\nThe third line contains 2^n integers in [0,3] without spaces — the i-th of them is b_{i-1}."}
{"name": "1057_B. DDoS", "description": "Input\n\nThe first line contains n (1 ≤ n ≤ 5000) — number of seconds since server has been booted. The second line contains sequence of integers r_1, r_2, ..., r_n (0 ≤ r_i ≤ 5000), r_i — number of requests in the i-th second."}
{"name": "1206_D. Shortest Cycle", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 10^5) — number of numbers.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{18})."}
{"name": "1267_J. Just Arrange the Icons", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10 000) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2⋅10^6) — the number of the icons. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ n), where c_i is the category of the i-th application.\n\nIt is guaranteed that the sum of the values of n for all test cases in the input does not exceed 2⋅10^6."}
{"name": "1372_F. Omkar and Modes", "description": "Input\n\nThe only line of the input contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5), which equals to the length of the array that you are trying to find.\n\nInteraction\n\nThe interaction starts with reading n.\n\nThen you can make one type of query:\n\n  * \"? \\enspace l \\enspace r\" (1 ≤ l ≤ r ≤ n) where l and r are the bounds of the subarray that you wish to query. \n\n\n\nThe answer to each query will be in the form \"x \\enspace f\" where x is the mode of the subarray and f is the number of times x appears in the subarray.\n\n  * x satisfies (1 ≤ x ≤ 10^9). \n  * f satisfies (1 ≤ f ≤ r-l+1). \n  * If you make more than 4k queries or violate the number range in the query, you will get an output \"-1.\" \n  * If you terminate after receiving the response \"-1\", you will get the \"Wrong answer\" verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream. \n\n\n\nTo output your answer, print:\n\n  * \"! \\enspace a_1 \\enspace a_2 \\enspace … \\enspace a_{n-1} \\enspace a_n\" which is an exclamation point followed by the array with a space between every element. \n\n\n\nAnd quit after that. This query is not counted towards the 4k queries limit.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nHack Format\n\nTo hack, output 1 integer on the first line, n (1 ≤ n ≤ 2 ⋅ 10^5). On the second line output n integers a_1, a_2, …, a_{n-1}, a_n separated by a space such that there are at most 25000 distinct numbers and a_j ≤ a_{j+1} for all j from 1 to n-1.\n\nExample\n\nInput\n\n\n6\n\n2 2\n\n2 2\n\n3 2\n\n2 1"}
{"name": "141_A. Amusing Joke", "description": "Input\n\nThe input file consists of three lines: the first line contains the guest's name, the second line contains the name of the residence host and the third line contains letters in a pile that were found at the door in the morning. All lines are not empty and contain only uppercase Latin letters. The length of each line does not exceed 100."}
{"name": "1487_G. String Counting", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 400).\n\nThe second line contains 26 integers c_1, c_2, ..., c_{26} (n/3 < c_i ≤ n)."}
{"name": "1539_B. Love Song", "description": "Input\n\nThe first line contains two integers n and q (1≤ n≤ 100 000, 1≤ q ≤ 100 000) — the length of the song and the number of questions. \n\nThe second line contains one string s — the song, consisting of n lowercase letters of English letters.\n\nVasya's questions are contained in the next q lines. Each line contains two integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of the question."}
{"name": "516_A. Drazil and Factorial", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 15) — the number of digits in a.\n\nThe second line contains n digits of a. There is at least one digit in a that is larger than 1. Number a may possibly contain leading zeroes."}
{"name": "56_C. Corporation Mail", "description": "Input\n\nThe first and single line contains the corporation structure which is a string of length from 1 to 1000 characters. It is guaranteed that the description is correct. Every name is a string consisting of capital Latin letters from 1 to 10 symbols in length."}
{"name": "591_A. Wizards' Duel", "description": "Input\n\nThe first line of the input contains a single integer l (1 ≤ l ≤ 1 000) — the length of the corridor where the fight takes place.\n\nThe second line contains integer p, the third line contains integer q (1 ≤ p, q ≤ 500) — the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively."}
{"name": "612_E. Square Root of Permutation", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106) — the number of elements in permutation p.\n\nThe second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the elements of permutation p."}
{"name": "632_E. Thief in a Shop", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of kinds of products and the number of products the thief will take.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 1000) — the costs of products for kinds from 1 to n."}
{"name": "685_B. Kay and Snowflake", "description": "Input\n\nThe first line of the input contains two integers n and q (2 ≤ n ≤ 300 000, 1 ≤ q ≤ 300 000) — the size of the initial tree and the number of queries respectively.\n\nThe second line contains n - 1 integer p2, p3, ..., pn (1 ≤ pi ≤ n) — the indices of the parents of the nodes from 2 to n. Node 1 is a root of the tree. It's guaranteed that pi define a correct tree.\n\nEach of the following q lines contain a single integer vi (1 ≤ vi ≤ n) — the index of the node, that define the subtree, for which we want to find a centroid."}
{"name": "750_D. New Year and Fireworks", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 30) — the total depth of the recursion.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 5). On the i-th level each of 2i - 1 parts will cover ti cells before exploding."}
{"name": "891_B. Gluttony", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 22) — the size of the array.\n\nThe second line contains n space-separated distinct integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the elements of the array."}
{"name": "935_E. Fafa and Ancient Mathematics", "description": "Input\n\nThe first line contains a string E (1 ≤ |E| ≤ 104) — a valid Ahmes arithmetic expression. All operators are erased and replaced with '?'.\n\nThe second line contains two space-separated integers P and M (0 ≤ min(P, M) ≤ 100) — the number of plus and minus operators, respectively. \n\nIt is guaranteed that P + M =  the number of erased operators."}
{"name": "p00311 Fishing Competition", "description": "Input\n\nThe input is given in the following format.\n\n\nh1 h2\nk1 k2\na b c d\n\n\nThe first line gives the number of chars h1 (0 ≤ h1 ≤ 100) and the number of yamame trout h2 (0 ≤ h2 ≤ 100) caught by Hiroshi. The second line gives the number of chars k1 (0 ≤ k1 ≤ 100) and the number of yamame trout k2 (0 ≤ k2 ≤ 100) caught by Kenjiro. On the third line, the score for each char is a (1 ≤ a ≤ 100), the score for each yamame trout is b (1 ≤ b ≤ 100), and the additional score for every 10 chars is c (0 ≤ c ≤ 100). ), An additional score d (0 ≤ d ≤ 100) is given for every 20 chars."}
{"name": "p00667 11224111122411", "description": "Input\n\nThe input consists of multiple cases.\nEach case is given in the following format.\n\n\nstring\n\n\nThe end of the input is given by the line where the input consists of \"#\"\n\nstring contains up to 100,000 numbers between 0 and 9.\nNo more than 50 inputs have a string length greater than 10,000.\n\n\nThe test case file size is guaranteed to be 5MB or less.\nAlso, the number of test cases does not exceed 100.\n\n\nThe characters that can be entered with each number key are as shown in the table below.\n\nNumbers | Enterable characters\n--- | ---\n1 | Aiueo\n2 | Kakikukeko\n3 |\n4 |\n5 | What is it?\n6 | Hahifuheho\n7 | Mamimumemo\n8 | Yayuyo\n9 | Larry Lero\n0 | Won"}
{"name": "1015_B. Obtaining the String", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 50) — the length of strings s and t.\n\nThe second line of the input contains the string s consisting of n lowercase Latin letters.\n\nThe third line of the input contains the string t consisting of n lowercase Latin letters."}
{"name": "1061_B. Views Matter", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 10^9) — the number of stacks and the height of the exhibit.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ m) — the number of blocks in each stack from left to right."}
{"name": "1083_A. The Fair Nut and the Best Path", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of cities.\n\nThe second line contains n integers w_1, w_2, …, w_n (0 ≤ w_{i} ≤ 10^9) — the maximum amounts of liters of gasoline that Nut can buy in cities.\n\nEach of the next n - 1 lines describes road and contains three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^9, u ≠ v), where u and v — cities that are connected by this road and c — its length.\n\nIt is guaranteed that graph of road connectivity is a tree."}
{"name": "1102_C. Doors Breaking and Repairing", "description": "Input\n\nThe first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door."}
{"name": "1130_C. Connect", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 50) — the width of the square grid.\n\nThe second line contains two space-separated integers r_1 and c_1 (1 ≤ r_1, c_1 ≤ n) — denoting the cell where Alice resides.\n\nThe third line contains two space-separated integers r_2 and c_2 (1 ≤ r_2, c_2 ≤ n) — denoting the cell to which Alice wishes to travel.\n\nEach of the following n lines contains a string of n characters. The j-th character of the i-th such line (1 ≤ i, j ≤ n) is 0 if (i, j) is land or 1 if (i, j) is water.\n\nIt is guaranteed that (r_1, c_1) and (r_2, c_2) are land."}
{"name": "1172_D. Nauuo and Portals", "description": "Input\n\nThe first line contains a single integer n (1≤ n≤ 1000) — the side length of the grid.\n\nThe second line contains n integers r_1,r_2,…,r_n (1≤ r_i≤ n) — if you walk into (i,1) facing right, you should exit the grid from (r_i,n). It is guaranteed that r_{1..n} is a permutation of n elements.\n\nThe third line contains n integers c_1,c_2,…,c_n (1≤ c_i≤ n) — if you walk into (1,i) facing bottom, you should exit the grid from (n,c_i). It is guaranteed that c_{1..n} is a permutation of n elements."}
{"name": "1190_A. Tokitsukaze and Discard Items", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 10^{18}, 1 ≤ m ≤ 10^5, 1 ≤ m, k ≤ n) — the number of items, the number of special items to be discarded and the number of positions in each page.\n\nThe second line contains m distinct integers p_1, p_2, …, p_m (1 ≤ p_1 < p_2 < … < p_m ≤ n) — the indices of special items which should be discarded."}
{"name": "1335_E2. Three Blocks Palindrome (hard version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 200), where a_i is the i-th element of a. Note that the maximum value of a_i can be up to 200.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1358_B. Maria Breaks the Self-isolation", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then test cases follow.\n\nThe first line of a test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of grannies (Maria is not included in this number).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2⋅10^5).\n\nIt is guaranteed that the sum of the values n over all test cases of the input does not exceed 10^5."}
{"name": "1399_C. Boats Competition", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the number of participants. The second line of the test case contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ n), where w_i is the weight of the i-th participant."}
{"name": "1422_F. Boring Queries", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 2 ⋅ 10^5) — the elements of the array.\n\nThe third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines contain two integers x and y each (1 ≤ x, y ≤ n) — the description of the corresponding query."}
{"name": "1440_D. Graph Subset Problem", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The next lines contain descriptions of test cases.\n\nThe first line of the description of each test case contains three integers n, m, k (1 ≤ n, m, k ≤ 10^5, k ≤ n).\n\nEach of the next m lines contains two integers u, v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between vertices u and v.\n\nIt is guaranteed that there are no self-loops or multiple edges. It is guaranteed that the sum of n for all test cases and the sum of m for all test cases does not exceed 2 ⋅ 10^5."}
{"name": "1468_A. LaIS", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of independent test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 5 ⋅ 10^5) — the length of the sequence a.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the sequence itself.\n\nIt's guaranteed that the total sum of n over all test cases doesn't exceed 5 ⋅ 10^5."}
{"name": "1515_A. Phoenix and Gold", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 100; 1 ≤ x ≤ 10^4) — the number of gold pieces that Phoenix has and the weight to avoid, respectively. \n\nThe second line of each test case contains n space-separated integers (1 ≤ w_i ≤ 100) — the weights of the gold pieces. It is guaranteed that the weights are pairwise distinct."}
{"name": "262_A. Roma and Lucky Numbers", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ n, k ≤ 100). The second line contains n integers ai (1 ≤ ai ≤ 109) — the numbers that Roma has. \n\nThe numbers in the lines are separated by single spaces."}
{"name": "37_C. Old Berland Language", "description": "Input\n\nThe first line contains one integer N (1 ≤ N ≤ 1000) — the number of words in Old Berland language. The second line contains N space-separated integers — the lengths of these words. All the lengths are natural numbers not exceeding 1000."}
{"name": "450_A. Jzzhu and Children", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n ≤ 100; 1 ≤ m ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100)."}
{"name": "547_B. Mike and Feet", "description": "Input\n\nThe first line of input contains integer n (1 ≤ n ≤ 2 × 105), the number of bears.\n\nThe second line contains n integers separated by space, a1, a2, ..., an (1 ≤ ai ≤ 109), heights of bears."}
{"name": "595_B. Pasha and Phone", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ min(n, 9)) — the length of all phone numbers and the length of each block, respectively. It is guaranteed that n is divisible by k.\n\nThe second line of the input contains n / k space-separated positive integers — sequence a1, a2, ..., an / k (1 ≤ ai < 10k).\n\nThe third line of the input contains n / k space-separated positive integers — sequence b1, b2, ..., bn / k (0 ≤ bi ≤ 9)."}
{"name": "802_A. Heidi and Library (easy)", "description": "Input\n\nThe first line of input will contain two integers n and k (1 ≤ n, k ≤ 80). The second line will contain n integers a1, a2, ..., an (1 ≤ ai ≤ n) – the sequence of book requests."}
{"name": "847_H. Load Testing", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100 000) — the duration of the load testing.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the number of requests from friends in the i-th minute of the load testing."}
{"name": "895_B. XK Segments", "description": "Input\n\nThe first line contains 3 integers n, x, k (1 ≤ n ≤ 105, 1 ≤ x ≤ 109, 0 ≤ k ≤ 109), where n is the size of the array a and x and k are numbers from the statement.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array a."}
{"name": "939_D. Love Rescue", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the length of the letterings.\n\nThe second line contains a string with length n, consisting of lowercase English letters — the lettering on Valya's pullover.\n\nThe third line contains the lettering on Tolya's t-shirt in the same format."}
{"name": "992_A. Nastya and an Array", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the size of the array.\n\nThe second line contains n integers a1, a2, ..., an ( - 105 ≤ ai ≤ 105) — the elements of the array."}
{"name": "p00831 Confusing Login Names", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n\nn\nd\nname1\nname2\n...\nnamen\n\n\nThe first integer n is the number of login names. Then comes a positive integer d. Two login names whose distance is less than or equal to d are deemed to be confusing. You may assume that 0 < n ≤ 200 and 0 < d ≤ 2. The i-th student’s login name is given by namei, which is composed of only lowercase letters. Its length is less than 16. You can assume that there are no duplicates in namei (1 ≤ i ≤ n).\n\nThe end of the input is indicated by a line that solely contains a zero."}
{"name": "p01983 Proof of Knowledge", "description": "Input\n\nThe input consists of up to 50 datasets. Each dataset is represented in the following format.\n\n> SP\n\nThe first line of each dataset is the hash function formula S. The second line of each dataset is the password P, which consists of four digits in the range 0-9. It can be assumed that the length of the hash function S is 80 or less.\n\nThe end of the input is represented by a line containing only one character,'.'."}
{"name": "1006_B. Polycarp's Practice", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the number of problems and the number of days, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2000) — difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them)."}
{"name": "1073_B. Vasya and Books", "description": "Input\n\nThe first line contains one integer n~(1 ≤ n ≤ 2 ⋅ 10^5) — the number of books in the stack.\n\nThe second line contains n integers a_1, a_2, ..., a_n~(1 ≤ a_i ≤ n) denoting the stack of books.\n\nThe third line contains n integers b_1, b_2, ..., b_n~(1 ≤ b_i ≤ n) denoting the steps Vasya is going to perform.\n\nAll numbers a_1 ... a_n are distinct, the same goes for b_1 ... b_n."}
{"name": "1095_B. Array Stabilization", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 10^5) — the number of elements in the array a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — elements of the array a."}
{"name": "1183_E. Subsequences (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 100) — the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string s consisting of n lowercase Latin letters."}
{"name": "1200_F. Graph Traveler", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of vertices in the graph.\n\nThe second line contains n integers. The i-th integer is k_i (-10^9 ≤ k_i ≤ 10^9), the integer written on the i-th vertex.\n\nNext 2 ⋅ n lines describe the edges of each vertex. The (2 ⋅ i + 1)-st line contains an integer m_i (1 ≤ m_i ≤ 10), the number of outgoing edges of the i-th vertex. The (2 ⋅ i + 2)-nd line contains m_i integers e_i[0], e_i[1], …, e_i[m_i-1], each having an integer value between 1 and n, inclusive.\n\nNext line contains an integer q (1 ≤ q ≤ 10^5), the number of queries Gildong wants to ask.\n\nNext q lines contains two integers x and y (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9) each, which mean that the start vertex is x and the starting value of c is y."}
{"name": "1327_D. Infinite Path", "description": "Input\n\nThe first line contains single integer T (1 ≤ T ≤ 10^4) — the number of test cases.\n\nNext 3T lines contain test cases — one per three lines. The first line contains single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the size of the permutation.\n\nThe second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n, p_i ≠ p_j for i ≠ j) — the permutation p.\n\nThe third line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ n) — the colors of elements of the permutation.\n\nIt is guaranteed that the total sum of n doesn't exceed 2 ⋅ 10^5."}
{"name": "1368_D. AND, OR and square sum", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, …, a_n (0 ≤ a_i < 2^{20})."}
{"name": "1454_C. Sequence Transformation", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a. The second line of the test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5)."}
{"name": "1478_A. Nezzar and Colorful Balls", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of testcases. \n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100).\n\nThe second line of each test case contains n integers a_1,a_2,…,a_n (1 ≤ a_i ≤ n). It is guaranteed that a_1 ≤ a_2 ≤ … ≤ a_n."}
{"name": "202_A. LLPS", "description": "Input\n\nThe only input line contains a non-empty string s consisting of lowercase English letters only. Its length does not exceed 10."}
{"name": "250_C. Movie Critics", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ k ≤ n ≤ 105), where n is the number of movies and k is the number of genres.\n\nThe second line of the input contains a sequence of n positive integers a1, a2, ..., an (1 ≤ ai ≤ k), where ai is the genre of the i-th movie. It is guaranteed that each number from 1 to k occurs at least once in this sequence."}
{"name": "346_B. Lucky Common Subsequence", "description": "Input\n\nThe input contains three strings in three separate lines: s1, s2 and virus (1 ≤ |s1|, |s2|, |virus| ≤ 100). Each string consists only of uppercase English letters."}
{"name": "36_A. Extra-terrestrial Intelligence", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 100) — amount of days during which Vasya checked if there were any signals. The second line contains n characters 1 or 0 — the record Vasya kept each of those n days. It’s guaranteed that the given record sequence contains at least three 1s."}
{"name": "486_D. Valid Sets", "description": "Input\n\nThe first line contains two space-separated integers d (0 ≤ d ≤ 2000) and n (1 ≤ n ≤ 2000).\n\nThe second line contains n space-separated positive integers a1, a2, ..., an(1 ≤ ai ≤ 2000).\n\nThen the next n - 1 line each contain pair of integers u and v (1 ≤ u, v ≤ n) denoting that there is an edge between u and v. It is guaranteed that these edges form a tree."}
{"name": "534_E. Berland Local Positioning System", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 2·105) — the number of stops.\n\nThe second line contains n integers (1 ≤ ai ≤ 109) — the distance from the i-th stop to the central square. The numbers in the second line go in the increasing order.\n\nThe third line contains integer m (1 ≤ m ≤ 4·105) — the number of stops the bus visited on some segment of the path.\n\nThe fourth line contains m integers (1 ≤ bi ≤ n) — the sorted list of numbers of the stops visited by the bus on the segment of the path. The number of a stop occurs as many times as it was visited by a bus.\n\nIt is guaranteed that the query corresponds to some segment of the path."}
{"name": "607_C. Marbles", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 1 000 000) — the length of the paths.\n\nThe second line of the input contains a string consisting of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string \"NNESWW\".\n\nThe third line of the input contains a string of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the second grid path."}
{"name": "653_C. Bear and Up-Down", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 150 000) — the length of the sequence.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 150 000) — the initial sequence. It's guaranteed that the given sequence is not nice."}
{"name": "723_C. Polycarp at the Radio", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 2000).\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the performer of the i-th song."}
{"name": "812_E. Sagheer and Apple Tree", "description": "Input\n\nThe first line will contain one integer n (2 ≤ n ≤ 105) — the number of nodes in the apple tree.\n\nThe second line will contain n integers a1, a2, ..., an (1 ≤ ai ≤ 107) — the number of apples on each node of the tree.\n\nThe third line will contain n - 1 integers p2, p3, ..., pn (1 ≤ pi ≤ n) — the parent of each node of the tree. Node i has parent pi (for 2 ≤ i ≤ n). Node 1 is the root of the tree.\n\nIt is guaranteed that the input describes a valid tree, and the lengths of all paths from the root to any leaf will have the same parity."}
{"name": "884_A. Book Reading", "description": "Input\n\nThe first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 106) — the number of days and the time required to read the book.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 86400) — the time Luba has to spend on her work during i-th day."}
{"name": "983_B. XOR-pyramid", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 5000) — the length of a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2^{30}-1) — the elements of the array.\n\nThe third line contains a single integer q (1 ≤ q ≤ 100 000) — the number of queries.\n\nEach of the next q lines contains a query represented as two integers l, r (1 ≤ l ≤ r ≤ n)."}
{"name": "p00118 Property Distribution", "description": "Input\n\nGiven multiple datasets. Each dataset is given a string of H lines consisting of the characters H x W, starting with a line containing H, W (H, W ≤ 100) separated by blanks. Only three characters appear in this string:'@' for apples,'#' for oysters, and'*' for oranges.\n\nThe input ends with two lines of zeros. The number of datasets does not exceed 20."}
{"name": "p00628 Yes", "description": "Input\n\nMultiple datasets are given as input. For each dataset, a string containing alphabets and spaces is given on one line.\n\nWhen the character string is \"END OF INPUT\", it is the end of input. Do not output to this input."}
{"name": "p01787 RLE Replacement", "description": "Input\n\nThe input consists of three lines.\n\n> $A$\n>  $B$\n>  $C$\n\nThe lines represent strings $A$, $B$, and $C$ that are encoded by RLE, respectively. Each of the lines has the following format:\n\n> $c_1$ $l_1$ $c_2$ $l_2$ $\\ldots$ $c_n$ $l_n$ \\$\n\nEach $c_i$ ($1 \\leq i \\leq n$) is an uppercase English letter (`A`-`Z`) and $l_i$ ($1 \\leq i \\leq n$, $1 \\leq l_i \\leq 10^8$) is an integer which represents the length of the repetition of $c_i$. The number $n$ of the pairs of a letter and an integer satisfies $1 \\leq n \\leq 10^3$. A terminal symbol `$` indicates the end of a string encoded by RLE. The letters and the integers are separated by a single space. It is guaranteed that $c_i \\neq c_{i+1}$ holds for any $1 \\leq i \\leq n-1$."}
{"name": "p02060 Four Tea", "description": "Input\n\n10\n1 2 3 4\n1 2 4 8"}
{"name": "1015_A. Points in Segments", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of segments and the upper bound for coordinates.\n\nThe next n lines contain two integers each l_i and r_i (1 ≤ l_i ≤ r_i ≤ m) — the endpoints of the i-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that l_i=r_i, i.e. a segment can degenerate to a point."}
{"name": "1102_B. Array K-Coloring", "description": "Input\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 5000) — the length of the array a and the number of colors, respectively.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 5000) — elements of the array a."}
{"name": "1130_B. Two Cakes", "description": "Input\n\nThe first line of the input contains an integer number n — the number of tiers in each cake (1 ≤ n ≤ 10^5).\n\nThe second line contains 2 ⋅ n integers a_1, a_2, ..., a_{2n} (1 ≤ a_i ≤ n), where a_i is equal to the size of the tier, which can be bought in the i-th house. Remember that in each house you can buy only one tier. It is guaranteed that every number from 1 to n occurs in a exactly two times."}
{"name": "1172_C2. Nauuo and Pictures (hard version)", "description": "Input\n\nThe first line contains two integers n and m (1≤ n≤ 2⋅ 10^5, 1≤ m≤ 3000) — the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,…,a_n (a_i is either 0 or 1) — if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n positive integers w_1,w_2,…,w_n (w_i ≥ 1) — the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed 998244352-m."}
{"name": "1270_C. Make Good", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10 000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1≤ n ≤ 10^5) — the size of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0≤ a_i ≤ 10^9) — the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1293_A. ConneR and the A.R.C. Markland-N", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases in the test. Then the descriptions of t test cases follow.\n\nThe first line of a test case contains three integers n, s and k (2 ≤ n ≤ 10^9, 1 ≤ s ≤ n, 1 ≤ k ≤ min(n-1, 1000)) — respectively the number of floors of A.R.C. Markland-N, the floor where ConneR is in, and the number of closed restaurants.\n\nThe second line of a test case contains k distinct integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — the floor numbers of the currently closed restaurants.\n\nIt is guaranteed that the sum of k over all test cases does not exceed 1000."}
{"name": "1335_E1. Three Blocks Palindrome (easy version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2000) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 26), where a_i is the i-th element of a. Note that the maximum value of a_i can be up to 26.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2000 (∑ n ≤ 2000)."}
{"name": "1399_B. Gifts Fixing", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the number of gifts. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of candies in the i-th gift. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), where b_i is the number of oranges in the i-th gift."}
{"name": "1541_E1. Converging Array (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100).\n\nThe second line contains n integers c_1, c_2 …, c_n (0 ≤ c_i ≤ 100).\n\nThe third line contains n-1 integers b_1, b_2, …, b_{n-1} (0 ≤ b_i ≤ 100).\n\nThe fourth line contains a single integer q (q=1).\n\nThe fifth line contains q space separated integers x_1, x_2, …, x_q (-10^5 ≤ x_i ≤ 10^5)."}
{"name": "237_B. Young Table", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) that shows the number of rows in the table. The second line contains n space-separated integers ci (1 ≤ ci ≤ 50; ci ≤ ci - 1) — the numbers of cells on the corresponding rows.\n\nNext n lines contain table а. The i-th of them contains ci space-separated integers: the j-th integer in this line represents ai, j.\n\nIt is guaranteed that all the given numbers ai, j are positive and do not exceed s. It is guaranteed that all ai, j are distinct."}
{"name": "356_C. Compartments", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 106) — the number of compartments in the carriage. The second line contains n integers a1, a2, ..., an showing how many students ride in each compartment (0 ≤ ai ≤ 4). It is guaranteed that at least one student is riding in the train."}
{"name": "37_B. Computer Game", "description": "Input\n\nThe first line contains three integers N, max and reg (1 ≤ N, max, reg ≤ 1000) –– the amount of scrolls and the parameters of the boss. The next N lines contain two integers powi and dmgi each — the parameters of the i-th scroll (0 ≤ powi ≤ 100, 1 ≤ dmgi ≤ 2000)."}
{"name": "496_B. Secret Combination", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of digits on the display.\n\nThe second line contains n digits — the initial state of the display."}
{"name": "547_A. Mike and Frog", "description": "Input\n\nThe first line of input contains integer m (2 ≤ m ≤ 106).\n\nThe second line of input contains integers h1 and a1 (0 ≤ h1, a1 < m).\n\nThe third line of input contains integers x1 and y1 (0 ≤ x1, y1 < m).\n\nThe fourth line of input contains integers h2 and a2 (0 ≤ h2, a2 < m).\n\nThe fifth line of input contains integers x2 and y2 (0 ≤ x2, y2 < m).\n\nIt is guaranteed that h1 ≠ a1 and h2 ≠ a2."}
{"name": "616_D. Longest k-Good Segment", "description": "Input\n\nThe first line contains two integers n, k (1 ≤ k ≤ n ≤ 5·105) — the number of elements in a and the parameter k.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 106) — the elements of the array a."}
{"name": "689_B. Mike and Shortcuts", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 200 000) — the number of Mike's city intersection.\n\nThe second line contains n integers a1, a2, ..., an (i ≤ ai ≤ n , <image>, describing shortcuts of Mike's city, allowing to walk from intersection i to intersection ai using only 1 unit of energy. Please note that the shortcuts don't allow walking in opposite directions (from ai to i)."}
{"name": "731_F. Video Cards", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of video cards in the shop.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 200 000) — powers of video cards."}
{"name": "756_A. Pavel and barbecue", "description": "Input\n\nThe first line contain the integer n (1 ≤ n ≤ 2·105) — the number of skewers.\n\nThe second line contains a sequence of integers p1, p2, ..., pn (1 ≤ pi ≤ n) — the permutation, according to which Pavel wants to move the skewers.\n\nThe third line contains a sequence b1, b2, ..., bn consisting of zeros and ones, according to which Pavel wants to reverse the skewers."}
{"name": "777_B. Game of Credit Cards", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of digits in the cards Sherlock and Moriarty are going to use.\n\nThe second line contains n digits — Sherlock's credit card number.\n\nThe third line contains n digits — Moriarty's credit card number."}
{"name": "822_B. Crossword solving", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ m ≤ 1000) — the length of the string s and the length of the string t correspondingly.\n\nThe second line contains n lowercase English letters — string s.\n\nThe third line contains m lowercase English letters — string t."}
{"name": "895_A. Pizza Separation", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 360) — the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 360) — the angles of the sectors into which the pizza was cut. The sum of all ai is 360."}
{"name": "916_B. Jamie and Binary Sequence (changed after round)", "description": "Input\n\nThe first line consists of two integers n and k (1 ≤ n ≤ 1018, 1 ≤ k ≤ 105) — the required sum and the length of the sequence."}
{"name": "939_C. Convenient For Everybody", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of hours in day.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10 000), where ai is the number of people in the i-th timezone who want to participate in the contest.\n\nThe third line contains two space-separated integers s and f (1 ≤ s < f ≤ n)."}
{"name": "p01094 Look for the Winner!", "description": "Input\n\nThe input consists of at most 1500 datasets, each consisting of two lines in the following format.\n\nn\nc1 c2 … cn\n\n\nn in the first line represents the number of votes, and is a positive integer no greater than 100. The second line represents the n votes, separated by a space. Each ci (1 ≤ i ≤ n) is a single uppercase letter, i.e. one of 'A' through 'Z'. This represents the election candidate for which the i-th vote was cast. Counting shall be done in the given order from c1 to cn.\n\nYou should assume that at least two stand as candidates even when all the votes are cast for one candidate.\n\nThe end of the input is indicated by a line containing a zero."}
{"name": "p01364 Two-Wheel Buggy", "description": "Input\n\nThe input consists of several datasets. Each dataset is formatted as follows.\n\nN D\nLspeed1 Rspeed1 time1\n.\n.\n.\nLspeedi Rspeedi timei\n.\n.\n.\nLspeedN RspeedN timeN\n\n\nThe first line of a dataset contains two positive integers, N and D (1 ≤ N ≤ 100, 1 ≤ D ≤ 10). N indicates the number of instructions in the dataset, and D indicates the distance between the center of axle and the wheels. The following N lines describe the instruction sequence. The i-th line contains three integers, Lspeedi, i, and timei (-360 ≤ Lspeedi, Rspeedi ≤ 360, 1 ≤ timei ), describing the i-th instruction to the buggy. You can assume that the sum of timei is at most 500.\n\nThe end of input is indicated by a line containing two zeros. This line is not part of any dataset and hence should not be processed."}
{"name": "p01846 jfen", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> S\n> a b c d\n\nEach dataset consists of two lines, and the first line is given the jfen-formatted string S, which represents the state of the board. Here, the size of the board satisfies 2 ≤ W and H ≤ 9. Instructions to the robot are given to the following lines. This represents an instruction to move the ball at (a, b) to (c, d). The end of the input is represented by #."}
{"name": "1013_A. Piles With Stones", "description": "Input\n\nThe first line of the input file contains a single integer n, the number of piles with stones in the garden (1 ≤ n ≤ 50).\n\nThe second line contains n integers separated by spaces x_1, x_2, …, x_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time (0 ≤ x_i ≤ 1000).\n\nThe third line contains n integers separated by spaces y_1, y_2, …, y_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time (0 ≤ y_i ≤ 1000)."}
{"name": "1037_G. A Game on Strings", "description": "Input\n\nThe first line contains the string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. This is the string Alice and Bob used to start with.\n\nThe second line contains a single integer m (1 ≤ m ≤ 10^5) — the number of games to analyze.\n\nEach of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|) — the bounds of the starting substring in the string s."}
{"name": "1060_C. Maximum Subrectangle", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2000).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2000).\n\nThe third line contains m integers b_1, b_2, …, b_m (1 ≤ b_i ≤ 2000).\n\nThe fourth line contains a single integer x (1 ≤ x ≤ 2 ⋅ 10^{9})."}
{"name": "1189_E. Count Pairs", "description": "Input\n\nThe first line contains integers n, p, k (2 ≤ n ≤ 3 ⋅ 10^5, 2 ≤ p ≤ 10^9, 0 ≤ k ≤ p-1). p is guaranteed to be prime.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ p-1). It is guaranteed that all elements are different."}
{"name": "1312_B. Bogosort", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 100) — the length of array a.\n\nThe second line of each test case contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 100)."}
{"name": "1334_F. Strange Function", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the length of array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the array a.\n\nThe third line contains n integers p_1, p_2, ..., p_n (|p_i| ≤ 10^9) — the array p.\n\nThe fourth line contains one integer m (1 ≤ m ≤ n) — the length of array b.\n\nThe fifth line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ n, b_{i-1} < b_i) — the array b."}
{"name": "1374_F. Cyclic Shifts Sorting", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (3 ≤ n ≤ 500) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 500), where a_i is the i-th element a.\n\nIt is guaranteed that the sum of n does not exceed 500."}
{"name": "1398_C. Good Subarrays", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of the array a.\n\nThe second line of each test case contains a string consisting of n decimal digits, where the i-th digit is equal to the value of a_i.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5."}
{"name": "1421_D. Hexagons", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^{4}). Description of the test cases follows.\n\nThe first line of each test case contains two integers x and y (-10^{9} ≤ x, y ≤ 10^{9}) representing the coordinates of the target hexagon.\n\nThe second line of each test case contains six integers c_1, c_2, c_3, c_4, c_5, c_6 (1 ≤ c_1, c_2, c_3, c_4, c_5, c_6 ≤ 10^{9}) representing the six costs of the making one step in a particular direction (refer to the picture above to see which edge is for each value)."}
{"name": "1491_B. Minimal Cost", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains three integers n, u and v (2 ≤ n ≤ 100, 1 ≤ u, v ≤ 10^9) — the number of rows in the graph and the numbers of coins needed to move vertically and horizontally respectively.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — where a_i represents that the obstacle in the i-th row is in node (i, a_i).\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^4."}
{"name": "1513_E. Cost Equilibrium", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. \n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9)."}
{"name": "355_B. Vasya and Public Transport", "description": "Input\n\nThe first line contains four integers c1, c2, c3, c4 (1 ≤ c1, c2, c3, c4 ≤ 1000) — the costs of the tickets.\n\nThe second line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of buses and trolleys Vasya is going to use.\n\nThe third line contains n integers ai (0 ≤ ai ≤ 1000) — the number of times Vasya is going to use the bus number i.\n\nThe fourth line contains m integers bi (0 ≤ bi ≤ 1000) — the number of times Vasya is going to use the trolley number i."}
{"name": "39_J. Spelling Check", "description": "Input\n\nThe input data contains two strings, consisting of lower-case Latin letters. The length of each string is from 1 to 106 symbols inclusive, the first string contains exactly 1 symbol more than the second one."}
{"name": "519_D. A and B and Interesting Substrings", "description": "Input\n\nThe first line contains 26 integers xa, xb, ..., xz ( - 105 ≤ xi ≤ 105) — the value assigned to letters a, b, c, ..., z respectively.\n\nThe second line contains string s of length between 1 and 105 characters, consisting of Lating lowercase letters— the string for which you need to calculate the answer."}
{"name": "634_E. Preorder Test", "description": "Input\n\nThe first line of the input contains two positive integers, n and k (2 ≤ n ≤ 200 000, 1 ≤ k ≤ n) — the number of balls in Jacob's tree and the number of balls the teacher will inspect.\n\nThe second line contains n integers, ai (1 ≤ ai ≤ 1 000 000), the time Jacob used to build the i-th ball.\n\nEach of the next n - 1 lines contains two integers ui, vi (1 ≤ ui, vi ≤ n, ui ≠ vi) representing a connection in Jacob's tree between balls ui and vi."}
{"name": "730_L. Expression Queries", "description": "Input\n\nThe first line of the input contains non-empty string s (1 ≤ |s| ≤ 4·105) which represents a correct SAE. Each character of the string can be one of the following characters: '*', '+', '(', ')' or a digit ('0'-'9'). The expression might contain extra-huge numbers.\n\nThe second line contains an integer m (1 ≤ m ≤ 4·105) which is the number of queries. Each of the next m lines contains two space-separated integers li, ri (1 ≤ li ≤ ri ≤ |s|) — the i-th query."}
{"name": "915_C. Permute Digits", "description": "Input\n\nThe first line contains integer a (1 ≤ a ≤ 1018). The second line contains integer b (1 ≤ b ≤ 1018). Numbers don't have leading zeroes. It is guaranteed that answer exists."}
{"name": "963_D. Frequency of String", "description": "Input\n\nThe first line contains string s (1 ≤ \\left | s \\right | ≤ 10^{5}).\n\nThe second line contains an integer n (1 ≤ n ≤ 10^5).\n\nEach of next n lines contains an integer k_i (1 ≤ k_i ≤ |s|) and a non-empty string m_i — parameters of the query with number i, in this order.\n\nAll strings in input consists of lowercase English letters. Sum of length of all strings in input doesn't exceed 10^5. All m_i are distinct."}
{"name": "990_G. GCD Counting", "description": "Input\n\nThe first line contains one integer n — the number of vertices (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the numbers written on vertices.\n\nThen n - 1 lines follow, each containing two integers x and y (1 ≤ x, y ≤ n, x ≠ y) denoting an edge connecting vertex x with vertex y. It is guaranteed that these edges form a tree."}
{"name": "p00037 Path on a Grid", "description": "Input\n\nThe input consists of 9 lines and is given in the following format, with 1 being the presence of a wall and 0 being the absence of a wall, as shown in Figure 2 below.\n\nThe first line is a character string that indicates the presence or absence of the top horizontal line wall as 0 and 1 from the left.\nThe second line is a character string that indicates the presence or absence of the vertical line wall below it with 0 and 1 from the left.\nThe third line is a character string that indicates the presence or absence of the wall of the second horizontal line from the top by 0 and 1 from the left.\n...\nThe 9th line is a character string representing the presence or absence of the bottom horizontal line wall with 0 and 1 from the left.\n\n\n<image>\n---\nFigure 2 (Thick line shows where the wall is) (corresponding numbers)\n\n\n\nHowever, as shown by the thick line in Fig. 1, it is assumed that there is always a wall for one section to the right of point A. That is, the first character on the first line is always 1."}
{"name": "p00682 Area of Polygons", "description": "Input\n\nThe input contains multiple data sets, each representing a polygon. A data set is given in the following format.\n\n\nn\nx1 y1\nx2 y2\n...\nxn yn\n\n\nThe first integer n is the number of vertices, such that 3 <= n <= 50. The coordinate of a vertex pi is given by (xi, yi). xi and yi are integers between 0 and 1000 inclusive. The coordinates of vertices are given in the order of clockwise visit of them.\n\nThe end of input is indicated by a data set with 0 as the value of n."}
{"name": "p01696 Broken Cipher Generator", "description": "Input\n\nThe input consists of multiple datasets. Each dataset consists of one line containing a string in which some uppercase letters have been replaced with ‘?’ In the ciphertext defined by BNF above. You can assume that the length of each string is less than $ 80 $. You can also assume that the number of'?' In each dataset is greater than or equal to $ 0 $ and less than or equal to $ 3 $.\n\nThe end of the input is represented by a line containing only one character,'.'."}
{"name": "p01840 Delivery to a Luxurious House", "description": "Input\n\nEach dataset consists of two lines. The first line consists of three integers $ N, M, T $ separated by blanks. These integers satisfy $ 1 \\ leq N \\ leq 100 $, $ 1 \\ leq M \\ leq 10 {,} 000 $, $ 1 \\ leq T \\ leq 10 {,} 000 $. The second line consists of $ N $ integers $ a_1, a_2, \\ dots, a_N $ separated by blanks. Each $ a_i $ fills $ M \\ leq a_i \\ leq T $ and is also $ a_i <a_ {i + 1} $ ($ 1 \\ leq i <N $)."}
{"name": "1009_G. Allowed Letters", "description": "Input\n\nThe first line is the string s (1 ≤ |s| ≤ 10^5) — the name Polycarp has came up with. The string consists only of lowercase Latin letters from \"a\" to \"f\".\n\nThe second line contains a single integer m (0 ≤ m ≤ |s|) — the number of investors.\n\nThe i-th of the next m lines contain an integer number pos_i and a non-empty string of allowed characters for pos_i (1 ≤ pos_i ≤ |s|). Each string contains pairwise distinct letters from \"a\" to \"f\". pos_1, pos_2, ..., pos_m are pairwise distinct. If any position of the string doesn't appear in the investors demands then any letter can go in this position."}
{"name": "1055_B. Alice and Hairdresser", "description": "Input\n\nThe first line contains three integers n, m and l (1 ≤ n, m ≤ 100 000, 1 ≤ l ≤ 10^9) — the number of hairlines, the number of requests and the favorite number of Alice.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the initial lengths of all hairlines of Alice.\n\nEach of the following m lines contains a request in the format described in the statement.\n\nThe request description starts with an integer t_i. If t_i = 0, then you need to find the time the haircut would take. Otherwise, t_i = 1 and in this moment one hairline grows. The rest of the line than contains two more integers: p_i and d_i (1 ≤ p_i ≤ n, 1 ≤ d_i ≤ 10^9) — the number of the hairline and the length it grows by."}
{"name": "1077_C. Good Array", "description": "Input\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — elements of the array a."}
{"name": "1098_B. Nice table", "description": "Input\n\nFirst line contains two positive integers n and m — number of rows and columns in the table you are given (2 ≤ n, m, n × m ≤ 300 000). Then, n lines describing the table follow. Each line contains exactly m characters «A», «G», «C», «T»."}
{"name": "1185_C2. Exam in BerSU (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and M (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ M ≤ 2 ⋅ 10^7) — the number of students and the total duration of the exam in minutes, respectively.\n\nThe second line of the input contains n integers t_i (1 ≤ t_i ≤ 100) — time in minutes that i-th student spends to answer to a ticket.\n\nIt's guaranteed that all values of t_i are not greater than M."}
{"name": "1246_B. Power Products", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).\n\nThe second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5)."}
{"name": "1307_B. Cow and Friend", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Next 2t lines contain test cases — two lines per test case.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of favorite numbers and the distance Rabbit wants to travel, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — Rabbit's favorite numbers. It is guaranteed that the favorite numbers are distinct.\n\nIt is guaranteed that the sum of n over all the test cases will not exceed 10^5."}
{"name": "1330_B. Dreamoon Likes Permutations", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10 000) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer n (2 ≤ n ≤ 200 000): the length of a. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n-1).\n\nThe total sum of n is less than 200 000."}
{"name": "1350_B. Orac and Models", "description": "Input\n\nThe first line contains one integer t\\ (1 ≤ t≤ 100): the number of queries.\n\nEach query contains two lines. The first line contains one integer n\\ (1≤ n≤ 100 000): the number of models in the shop, and the second line contains n integers s_1,...,s_n\\ (1≤ s_i≤ 10^9): the sizes of models.\n\nIt is guaranteed that the total sum of n is at most 100 000."}
{"name": "1370_E. Binary Subsequence Rotation", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the strings.\n\nThe second line contains the binary string s of length n.\n\nThe third line contains the binary string t of length n."}
{"name": "301_D. Yaroslav and Divisors", "description": "Input\n\nThe first line contains the integers n and m (1 ≤ n, m ≤ 2·105). The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n). The following m lines contain Yaroslav's queries. The i-th line contains integers li, ri (1 ≤ li ≤ ri ≤ n)."}
{"name": "328_B. Sheldon and Ice Pieces", "description": "Input\n\nThe first line contains integer t (1 ≤ t ≤ 10000). The second line contains the sequence of digits on the pieces. The length of line is equal to the number of pieces and between 1 and 200, inclusive. It contains digits between 0 and 9."}
{"name": "396_A. On Number of Decompositions into Multipliers", "description": "Input\n\nThe first line contains positive integer n (1 ≤ n ≤ 500). The second line contains space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109)."}
{"name": "48_D. Permutations", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105). The next line contains the mixed array of n integers, divided with a single space. The numbers in the array are from 1 to 105."}
{"name": "567_D. One-Dimensional Battle Ships", "description": "Input\n\nThe first line of the input contains three integers: n, k and a (1 ≤ n, k, a ≤ 2·105) — the size of the field, the number of the ships and the size of each ship. It is guaranteed that the n, k and a are such that you can put k ships of size a on the field, so that no two ships intersect or touch each other.\n\nThe second line contains integer m (1 ≤ m ≤ n) — the number of Bob's moves.\n\nThe third line contains m distinct integers x1, x2, ..., xm, where xi is the number of the cell where Bob made the i-th shot. The cells are numbered from left to right from 1 to n."}
{"name": "682_B. Alyona and Mex", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the Alyona's array.\n\nThe second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array."}
{"name": "727_D. T-shirts Distribution", "description": "Input\n\nThe first line of the input contains six non-negative integers — the number of t-shirts of each size. The numbers are given for the sizes S, M, L, XL, XXL, XXXL, respectively. The total number of t-shirts doesn't exceed 100 000.\n\nThe second line contains positive integer n (1 ≤ n ≤ 100 000) — the number of participants.\n\nThe following n lines contain the sizes specified by the participants, one line per participant. The i-th line contains information provided by the i-th participant: single size or two sizes separated by comma (without any spaces). If there are two sizes, the sizes are written in increasing order. It is guaranteed that two sizes separated by comma are neighboring."}
{"name": "748_E. Santa Claus and Tangerines", "description": "Input\n\nThe first line contains two positive integers n and k (1 ≤ n ≤ 106, 1 ≤ k ≤ 2·109) denoting the number of tangerines and the number of pupils, respectively.\n\nThe second line consists of n positive integers a1, a2, ..., an (1 ≤ ai ≤ 107), where ai stands for the number of slices the i-th tangerine consists of."}
{"name": "771_D. Bear and Company", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 75) — the length of the string.\n\nThe second line contains a string s, consisting of uppercase English letters. The length of the string is equal to n."}
{"name": "796_D. Police Stations", "description": "Input\n\nThe first line contains three integers n, k, and d (2 ≤ n ≤ 3·105, 1 ≤ k ≤ 3·105, 0 ≤ d ≤ n - 1) — the number of cities, the number of police stations, and the distance limitation in kilometers, respectively.\n\nThe second line contains k integers p1, p2, ..., pk (1 ≤ pi ≤ n) — each denoting the city each police station is located in.\n\nThe i-th of the following n - 1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the cities directly connected by the road with index i.\n\nIt is guaranteed that it is possible to travel from one city to any other city using only the roads. Also, it is possible from any city to reach a police station within d kilometers."}
{"name": "862_F. Mahmoud and Ehab and the final stage", "description": "Input\n\nThe first line of input contains 2 integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105) – The number of strings and the number of queries, respectively.\n\nThe second line contains n strings stri consisting of lowercase English letters.\n\nThe next q lines describe the queries and may have one of the 2 forms:\n\n  * 1 a b (1 ≤ a ≤ b ≤ n).\n  * 2 x y (1 ≤ x ≤ n), where y is a string consisting of lowercase English letters.\n\n\n\nthe total length of all strings in input won't exceed 105"}
{"name": "p01329 Stolen Jewel", "description": "Input\n\nThe inputs include the shape of the underground warehouse and the prohibition pattern.\n\nThe shape of the underground warehouse is represented as follows. First, two integers N and M are given. It means the number of rows and columns of the underground warehouse, respectively. (1 ≤ N, M ≤ 50)\n\nSubsequently, N lines of character strings consisting of M characters are given. The characters included and their meanings are as follows.\n\nCharacter | Meaning\n--- | ---\nS | The entrance to the underground warehouse. Only one is always included per underground warehouse.\nG | Magic circle. Only one is always included per underground warehouse.\n. | Aisle. You can pass (if you don't take the prohibition pattern).\n| Wall. You can't go through the wall.\n\nNext, a prohibition pattern is given. The prohibition pattern is expressed as follows. First, one integer P is given. Means the number of prohibited patterns. (0 ≤ P ≤ 10)\n\nSubsequently, a character string meaning a prohibition pattern is given over P lines. The characters included in the prohibited pattern and their meanings are as follows.\n\nCharacter | Meaning\n--- | ---\nU | ↑ move.\nMove R |->.\nD | ↓ movement.\nL | <-Move.\n\nThe length of the prohibited pattern is 1 or more and 10 or less. One prohibition pattern may be a substring of another prohibition pattern. It may also include the same prohibition pattern."}
