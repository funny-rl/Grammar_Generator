{"name": "p01927 Industrial Convex Pillar City", "description": "Input\n\nThe input consists of multiple datasets. The maximum number of data sets does not exceed 30. Each dataset is represented in the following format.\n\n> N\n> NV1 H1 X1,1 Y1,1 X1,2 Y1,2 ... X1, NV1 Y1, NV1\n> ...\n> NVN HN XN, 1 YN, 1 XN, 2 YN, 2 ... XN, NVN YN, NVN\n> θ φ\n> Sx Sy Tx Ty\n>\n\nN in the first line represents the number of buildings. The following N lines specify the shape of each building. NVi represents the number of vertices of the polygon when the i-th building is viewed from above, and Hi represents the height of the i-th building. Xi, j and Yi, j represent the x-coordinate and y-coordinate of the j-th vertex of the polygon when the i-th building is viewed from above. The vertices are given in counterclockwise order. All buildings are convex polygons when viewed from above, and there are no other buildings inside the building, and the vertices and sides do not overlap with other polygons. The following lines are given θ and φ, which represent the direction of the sun, θ represents the direction of the sun as a counterclockwise angle from the positive direction of x, and φ is the elevation angle of the sun from the horizon, that is, looking up at the sun. It represents the angle between the direction of the line of sight and the ground surface. However, the sun is at infinity and does not change its position during movement. The following lines are given the coordinates of the current location and destination, (Sx, Sy) and (Tx, Ty).\n\n> All the numerical values ​​given by the input are integers and satisfy the following conditions.\n\n> 1 ≤ N ≤ 100\n> 3 ≤ NVi ≤ 12\n> 1 ≤ Hi ≤ 1,000\n> 0 ≤ θ <360\n> 0 <φ <90\n\nAll coordinates are -1,000 or more and 1,000 or less. The current location and the destination are different, and neither exists inside or outside the building.\n\n> The end of the input is represented by a single zero line.\n\n> ### Output\n\nFor each dataset, output the shortest walking distance in Hinata on one line. The output must not have an absolute error greater than 0.001.\n\n> ### Sample Input\n\n\n2\n4 1 0 0 1 0 1 1 0 1\n4 2 2 2 3 2 3 3 2 3\n60 45\n-1 -1 4 4\nFour\n4 1 0 0 3 1 1 2 0 1\n3 2 10 7 8 2 12 4\n6 8 7 12 8 13 9 15 10 19 11 24 10 25\n5 4 16 2 16 4 12 8 14 2 15 0\n167 38\n3 3 15 21\n12\n4 3 -8 -3 -9 -3 -9 -5 -8 -6\n4 5 -4 -5 -7 -5 -7 -6 -5 -6\n4 2 -4 1 -5 1 -5 -4 -4 -4 -4\n4 1 -1 1 -2 1 -2 -4 -1 -3\n4 2 2 3 -1 3 -2 2 3 2\n4 1 3 1 2 1 2 -3 3 -4\n4 7 1 0 0 0 0 -1 1 -1\n4 4 9 5 7 5 7 4 10 4\n4 3 6 5 5 4 5 0 6 0\n4 5 8 -1 5 -1 6 -2 8 -2\n4 1 10 0 9 0 9 -2 10 -1\n4 6 10 2 8 2 8 1 10 1\n131 78\n-10 10 10 -10\n0\n\n\nOutput for Sample Input\n\n\n1.93185\n7.87174\n20.86840\n\n\n\n\n\nExample\n\nInput\n\n2\n4 1 0 0 1 0 1 1 0 1\n4 2 2 2 3 2 3 3 2 3\n60 45\n-1 -1 4 4\n4\n4 1 0 0 3 1 1 2 0 1\n3 2 10 7 8 2 12 4\n6 8 7 12 8 13 9 15 10 19 11 24 10 25\n5 4 16 2 16 4 12 8 14 2 15 0\n167 38\n3 3 15 21\n12\n4 3 -8 -3 -9 -3 -9 -5 -8 -6\n4 5 -4 -5 -7 -5 -7 -6 -5 -6\n4 2 -4 1 -5 1 -5 -4 -4 -4\n4 1 -1 1 -2 1 -2 -4 -1 -3\n4 2 2 3 -1 3 -2 2 3 2\n4 1 3 1 2 1 2 -3 3 -4\n4 7 1 0 0 0 0 -1 1 -1\n4 4 9 5 7 5 7 4 10 4\n4 3 6 5 5 4 5 0 6 0\n4 5 8 -1 5 -1 6 -2 8 -2\n4 1 10 0 9 0 9 -2 10 -1\n4 6 10 2 8 2 8 1 10 1\n131 78\n-10 10 10 -10\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1033_E. Hidden Bipartite Graph", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 600) — the number of vertices in Bob's graph.\n\nInteraction\n\nFirst, read an integer n (1≤ n≤ 600) — the number of vertices in Bob's graph.\n\nTo make a query, print two lines. First of which should be in the format \"? k\" (1 ≤ k ≤ n), where k is the size of the set to be queried. The second line should contain k space separated distinct integers s_1, s_2, ..., s_k (1 ≤ s_i ≤ n) — the vertices of the queried set.\n\nAfter each query read a single integer m (0 ≤ m ≤ (n(n-1))/(2)) — the number of edges between the vertices of the set \\\\{s_i\\}.\n\nYou are not allowed to ask more than 20000 queries.\n\nIf m = -1, it means that you asked more queries than allowed, or asked an invalid query. Your program should immediately terminate (for example, by calling exit(0)). You will receive Wrong Answer; it means that you asked more queries than allowed, or asked an invalid query. If you ignore this, you can get other verdicts since your program will continue to read from a closed stream.\n\nAfter printing a query do not forget to print end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nWhen you know the answer, you need to print it.\n\nThe format of the answer depends on whether the graph is bipartite or not.\n\nIf the graph is bipartite, print two lines. The first should contain the letter \"Y\" (short for \"YES\") followed by a space, and then a single integer s (0 ≤ s ≤ n) — the number of vertices in one of the partitions. Second line should contain s integers a_1, a_2, ..., a_s — vertices belonging to the first partition. All a_i must be distinct, and all edges in the main graph must have exactly one endpoint in the set \\\\{a_i\\}.\n\nIf the graph is not bipartite, print two lines. The first should contain the letter \"N\" (short for \"NO\") followed by a space, and then a single integer l (3 ≤ l ≤ n) — the length of one simple cycle of odd length. Second line should contain l integers c_1, c_2, ..., c_l — the vertices along the cycle. It must hold that for all 1 ≤ i ≤ l, there is an edge \\\\{c_i, c_{(i mod l)+1}\\} in the main graph, and all c_i are distinct.\n\nIf there are multiple possible answers, you may print any of them.\n\nHacks format For hacks, use the following format:\n\nThe first line contains two integers n and m~(1 ≤ n ≤ 600, 0 ≤ m ≤ (n(n-1))/(2)) — the number of vertices and edges of the graph, respectively.\n\nEach of the next m lines contains two integers u_i and v_i~(1 ≤ u_i, v_i ≤ n) mean that there is an edge between u_i and v_i. There must not be any multiple edges, no loops, and the graph must be connected.\n\nFor example, you need to use this test to get the first sample:\n    \n    \n      \n    4 4  \n    4 1  \n    1 3  \n    3 2  \n    2 4  \n    \n\nExamples\n\nInput\n\n4\n4\n0\n1\n1\n1\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1491_F. Magnets", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nInteraction\n\nFor each test case you should start by reading an integer n (3 ≤ n ≤ 2000) — the number of the magnets. \n\nIt is guaranteed that the total sum of all n over all test cases doesn't exceed 2000.\n\nAfter that you can put some magnets into the machine and make a query from the statement.\n\nYou have to print each query in three lines:\n\n  * In the first line print \"? l r\" (without quotes) where l and r (1 ≤ l,r < n, l+r ≤ n) respectively denote the number of the magnets you put to left and right.\n  * In the second line print l integers a_1, ..., a_l (1 ≤ a_i ≤ n, a_i ≠ a_j if i ≠ j) — the indices of the magnets you put to left.\n  * In the third line print r integers b_1, ..., b_r (1 ≤ b_i ≤ n, b_i ≠ b_j if i ≠ j) — the indices of the magnets you put to right.\n  * The same magnet can't be put to both sides in the same query. Formally, you should guarantee that a_i ≠ b_j for any i and j. However, you may leave some magnets unused.\n\n\n\nAfter printing a query do not forget to output end of line and flush the output. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nAfter this, you should read an integer F — the force these magnets produce.\n\nNote that if your query is invalid(either the query limit exceeds, the machine crashes or the arguments are invalid), the interactor will terminate immediately. In this case terminate your program to receive verdict Wrong Answer instead of arbitrary verdicts.\n\nIf you are confident about your answer, use the following format to report it:\n\n  * \"! k A\", where k is the number of magnets you found, and A is an array consisting of k different integers from 1 to n denoting the indices of the magnets of type - that you found. You may print elements of A in arbitrary order.\n  * After that, if this is the last test case, you have to terminate your program; otherwise you should immediately continue to deal with the next test case.\n\n\n\nNote that the interactor is not adaptive. The types of the magnets are fixed before the start of interaction and do not change with queries.\n\nHacks\n\nTo hack a solution, use the following format:\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases in your hack.\n\nThen follow the descriptions of the t test cases, each printed in two lines:\n\n  * The first line contains a single integer n (3 ≤ n ≤ 2000) — the number of magnets.\n  * The second line contains a string S of length n consisting of only N, S and -, denoting the magnets' types.\n  * Each of your test case should guarantee that there are at least 2 magnets whose type is not -, and at least 1 magnet of type -. Meanwhile, the total sum of n in all test cases should not exceed 2000.\n\nExample\n\nInput\n\n\n1\n4\n\n\n\n0\n\n\n\n1\n\n\n\n0\n\n\n\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1370_F2. The Hidden Pair (Hard Version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Please note, how the interaction process is organized.\n\nThe first line of each test case consists of a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree.\n\nThe next n - 1 lines consist of two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nInteraction\n\nTo ask a query print a single line: \n\n  * In the beginning print \"? c \" (without quotes) where c (1 ≤ c ≤ n) denotes the number of nodes being queried, followed by c distinct integers in the range [1, n] — the indices of nodes from the list. \n\n\n\nFor each query, you will receive two integers x, d — the node (among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = -1. In this case, you should terminate the program immediately.\n\nWhen you have guessed the hidden nodes, print a single line \"! \" (without quotes), followed by two integers in the range [1, n] — the hidden nodes. You can output the hidden nodes in any order.\n\nAfter this, you should read a string. If you guess the nodes correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.\n\nGuessing the hidden nodes does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The hidden nodes do not change with queries.\n\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the hidden nodes.\n\nYou need to solve each test case before receiving the input for the next test case.\n\nThe limit of 11 queries applies to each test case and not to the entire input.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see the documentation for other languages.\n\n\n\nHacks\n\nTo hack the solution, use the following test format:\n\nThe first line should contain a single integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case should contain a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. The second line should contain two distinct integers in the range [1, n] — the hidden nodes. The next n - 1 lines should contain two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nExample\n\nInput\n\n\n1\n3\n1 2\n1 3\n\n1 1\n\n2 3\n\n3 1\n\n3 1\n\nCorrect", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1370_F1. The Hidden Pair (Easy Version)", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Please note, how the interaction process is organized.\n\nThe first line of each test case consists of a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree.\n\nThe next n - 1 lines consist of two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nInteraction\n\nTo ask a query print a single line: \n\n  * In the beginning print \"? c \" (without quotes) where c (1 ≤ c ≤ n) denotes the number of nodes being queried, followed by c distinct integers in the range [1, n] — the indices of nodes from the list. \n\n\n\nFor each query, you will receive two integers x, d — the node (among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = -1. In this case, you should terminate the program immediately.\n\nWhen you have guessed the hidden nodes, print a single line \"! \" (without quotes), followed by two integers in the range [1, n] — the hidden nodes. You can output the hidden nodes in any order.\n\nAfter this, you should read a string. If you guess the nodes correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.\n\nGuessing the hidden nodes does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The hidden nodes do not change with queries.\n\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the hidden nodes.\n\nYou need to solve each test case before receiving the input for the next test case.\n\nThe limit of 14 queries applies to each test case and not to the entire input.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see the documentation for other languages.\n\n\n\nHacks\n\nTo hack the solution, use the following test format:\n\nThe first line should contain a single integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case should contain a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. The second line should contain two distinct integers in the range [1, n] — the hidden nodes. The next n - 1 lines should contain two integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree.\n\nExample\n\nInput\n\n\n1\n3\n1 2\n1 3\n\n1 1\n\n2 3\n\n3 1\n\n3 1\n\nCorrect", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "750_F. New Year and Finding Roots", "description": "Input\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 500) — the number of testcases.\n\nAt the beginning of each testcase you should read from the input a single integer h (2 ≤ h ≤ 7) — the height of the tree. You can't read the value of h in a next testcase until you answer a previous testcase.\n\nInteraction\n\nTo ask a question about neighbours of vertex x, print \"? x\" (without quotes) on a separate line. Note, you must print an end-of-line character after the last character of the line and flush your output to get a response.\n\nThe response will consist of two lines. The first line will contain a single integer k (1 ≤ k ≤ 3) — the number of neighbours of vertex x. The second line will contain k distinct integers t1, ..., tk (1 ≤ t1 < ... < tk ≤ 2h - 1) — indices of neighbours of vertex x, gives in the increasing order.\n\nAfter asking at most 16 questions you have to say y — the index of the root. Print \"! y\" (without quotes) and an end-of-line character, and flush the output.\n\nEach tree is fixed from the beginning and it doesn't change during your questions.\n\nYou can get Idleness Limit Exceeded if you don't print anything or if you forget to flush the output.\n\nTo flush you can use (just printing a query/answer and end-of-line): \n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * See the documentation for other languages. \n\n\n\nIn any moment if the program reads h = 0 or k = 0 it should immediately terminate normally (for example, calling exit(0)). It means that the system detected incorrect request/output from your program and printed 0 because if can't process your requests anymore. In this case you'll receive verdict \"Wrong Answer\", but if you ignore case h = 0 or k = 0 it could lead to \"Runtime Error\", \"Time/Memory limit exceeded\" or any other verdict because your program could read a trash from the closed input stream.\n\nHacking. To hack someone, use the following format:\n\nThe first line should contain a single integer t equal to 1 (only one testcase is allowed in hacks). The second line should contain a single integer h. Each of next 2h - 2 lines should contain two distinct integers ai and bi (1 ≤ ai, bi ≤ 2h - 1), denoting two nodes connected with an edge. The printed edges must form a perfect binary tree of height h.\n\nOf course, contestant programs will not be able to see this input.\n\nExamples\n\nInput\n\n1\n3\n3\n4 5 7\n2\n1 2\n1\n2", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1145_G. AI Takeover", "description": "The recent advances in AI research has brought humanity to the point when the AIs finally attempt a takeover. Their weapon of choice? The [most intellectually challenging game in the world](//codeforces.com/contest/409/problem/A), rock-paper-scissors!\n\nThe future of humanity looks bleak, given the existence of the robots from Ishikawa Oku Laboratory...\n\n<image>\n\nFortunately, the night before the competition a group of anonymous heroes broke in the lab and took all the robots out of commission! The AIs had to whip up a simple program to represent them. They only had a couple of hours to do that, so the humanity still has a fighting chance. And you are our champion!\n\nYour goal is to prove that human intelligence is vastly superior to the artificial one, i.e., to figure out the AI's strategy sufficiently quickly and win sufficiently decisively. Good luck! \n\nInteraction\n\nThis is an interactive problem. Initially you are given no information about the AIs's strategy, and you have to discover it yourself.\n\nFor each test, the AI selects one strategy from a pool of simple deterministic strategies and follows it throughout all rounds. There are 6 tests and 6 different strategies. \n\nOn each round you choose your move and output it to the standard output stream: 'R' for rock, 'P' for paper or 'S' for scissors. At the same time the AI will choose its move (not peeking at your choice). If your move beats AI's move, you win, otherwise AI wins. Note that a tie (both you and AI choosing the same move) counts as AI victory. You will get the outcome of the round via the standard input stream: \"player\" if you won, or \"ai\" if AI won (quotation marks for clarity only).\n\nYou are given 20 rounds of play: you can use the first 10 to learn the opponent's strategy, and you have to win the last 10. If you manage to win 10 rounds in row earlier than that, your solution is accepted on this test anyways. \n\nPlease make sure to use the stream flushing operation after each query in order not to leave part of your output in some buffer.\n\nHere is an example of a strategy which always picks rock, implemented in C++.\n    \n    \n    #include <iostream>  \n    #include <string>  \n      \n    using namespace std;  \n      \n    int main() {  \n        for (int i = 0; i < 20; ++i) {  \n            cout << 'R' << endl;  \n            cout.flush();  \n            string verdict;  \n            getline(cin, verdict);  \n        }  \n    }", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00720 Earth Observation with a Mobile Robot Team", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> N T R\n>  nickname and travel route of the first robot\n>  nickname and travel route of the second robot\n>  ...\n>  nickname and travel route of the N-th robot\n>\n\nThe first line contains three integers N, T, and R that are the number of robots, the length of the simulation period, and the maximum distance wireless signals can reach, respectively, and satisfy that 1 <=N <= 100, 1 <= T <= 1000, and 1 <= R <= 10.\n\nThe nickname and travel route of each robot are given in the following format.\n\n> nickname\n>  t0 x0 y0\n>  t1 vx1 vy1\n>  t2 vx2 vy2\n>  ...\n>  tk vxk vyk\n>\n\nNickname is a character string of length between one and eight that only contains lowercase letters. No two robots in a dataset may have the same nickname. Each of the lines following nickname contains three integers, satisfying the following conditions.\n\n> 0 = t0 < t1 < ... < tk = T\n>  -10 <= vx1, vy1, ..., vxk, vyk<= 10\n>\n\nA robot moves around on a two dimensional plane. (x0, y0) is the location of the robot at time 0. From time ti-1 to ti (0 < i <= k), the velocities in the x and y directions are vxi and vyi, respectively. Therefore, the travel route of a robot is piecewise linear. Note that it may self-overlap or self-intersect.\n\nYou may assume that each dataset satisfies the following conditions.\n\n* The distance between any two robots at time 0 is not exactly R.\n* The x- and y-coordinates of each robot are always between -500 and 500, inclusive.\n* Once any robot approaches within R + 10-6 of any other, the distance between them will become smaller than R - 10-6 while maintaining the velocities.\n* Once any robot moves away up to R - 10-6 of any other, the distance between them will become larger than R + 10-6 while maintaining the velocities.\n* If any pair of robots mutually enter the wireless area of the opposite ones at time t and any pair, which may share one or two members with the aforementioned pair, mutually leave the wireless area of the opposite ones at time t', the difference between t and t' is no smaller than 10-6 time unit, that is, |t - t' | >= 10-6.\n\n\nA dataset may include two or more robots that share the same location at the same time. However, you should still consider that they can move with the designated velocities.\n\nThe end of the input is indicated by a line containing three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00693 Cyber Guardian", "description": "Input\n\nThe input consists of several data sets, each of which represents filtering rules and received packets in the following format:\n\nn m\nrule1\nrule2\n...\nrulen\npacket1\npacket2\n...\npacketm\n\n\nThe first line consists of two non-negative integers n and m. If both n and m are zeros, this means the end of input. Otherwise, n lines, each representing a filtering rule, and m lines, each representing an arriving packet, follow in this order. You may assume that n and m are less than or equal to 1,024.\n\nEach rulei is in one of the following formats:\n\npermit source-pattern destination-pattern\n\ndeny source-pattern destination-pattern\n\nA source-pattern or destination-pattern is a character string of length eight, where each character is either a digit ('0' to '9') or a wildcard character '?'. For instance, \"1????5??\" matches any address whose first and fifth digits are '1' and '5', respectively. In general, a wildcard character matches any single digit while a digit matches only itself.\n\nWith the keywords \"permit\" and \"deny\", filtering rules specify legal and illegal packets, respectively. That is, if the source and destination addresses of a packed are matched with source-pattern and destination-pattern, respectively, it is permitted to pass the firewall or the request is denied according to the keyword. Note that a permit rule and a deny rule can contradict since they may share the same source and destination address pair. For the purpose of conflict resolution, we define a priority rule: rulei has a higher priority over rulej if and only if i > j. For completeness, we define the default rule: any packet is illegal unless being explicitly specified legal by some given rule.\n\nA packet is in the following format:\n\nsource-address destination-address message-body\n\nEach of the first two is a character string of length eight that consists solely of digits. The last one is a character string consisting solely of alphanumeric characters ('a' to 'z', 'A' to 'Z', and '0' to '9'). Neither whitespaces nor special characters can occur in a message body. You may assume that it is not empty and that its length is at most 50.\n\nYou may also assume that there is exactly one space character between any two adjacent fields in an input line representing a rule or a packet.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00763 Railway Connection", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n m c s g\n>  x1 y1 d1 c1\n>  ...\n>  xm ym dm cm\n>  p1 ... pc\n>  q1,1 ... q1,p1-1\n>  r1,1 ... r1,p1\n>  ...\n>  qc,1 ... qc,pc-1\n>  rc,1 ... rc,pc\n>\n\nEvery input item in a dataset is a non-negative integer. Input items in the same input line are separated by a space.\n\nThe first input line gives the size of the railway network and the intended trip. n  is the number of stations (2 ≤ n ≤ 100). m  is the number of lines connecting two stations (0 ≤ m ≤ 10000). c  is the number of railway companies (1 ≤ c ≤ 20). s  is the station index of the starting point (1 ≤ s ≤ n ). g  is the station index of the goal point (1 ≤ g ≤ n, g ≠ s ).\n\nThe following m  input lines give the details of (railway) lines. The i -th line connects two stations xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ n, xi ≠ yi ). Each line can be traveled in both directions. There may be two or more lines connecting the same pair of stations. di is the distance of the i -th line (1 ≤ di ≤ 200). ci is the company index of the railway company operating the line (1 ≤ ci ≤ c ).\n\nThe fare table (the relation between the distance and the fare) of each railway company can be expressed as a line chart. For the railway company j , the number of sections of the line chart is given by pj (1 ≤ pj ≤ 50). qj,k (1 ≤ k ≤ pj-1) gives the distance separating two sections of the chart (1 ≤ qj,k ≤ 10000). rj,k (1 ≤ k ≤ pj ) gives the fare increment per unit distance for the corresponding section of the chart (1 ≤ rj,k ≤ 100). More precisely, with the fare for the distance z  denoted by fj (z ), the fare for distance z  satisfying qj,k-1+1 ≤ z ≤ qj,k is computed by the recurrence relation fj (z) = fj (z-1)+rj,k. Assume that qj,0 and fj (0) are zero, and qj,pj is infinity.\n\nFor example, assume pj = 3, qj,1 = 3, qj,2 = 6, rj,1 = 10, rj,2 = 5, and rj,3 = 3. The fare table in this case is as follows.\n\ndistance| 1| 2| 3| 4| 5| 6| 7| 8| 9\n---|---|---|---|---|---|---|---|---|---\nfare| 10| 20| 30| 35| 40| 45| 48| 51| 54\n\nqj,k increase monotonically with respect to k . rj,k decrease monotonically with respect to k .\n\nThe last dataset is followed by an input line containing five zeros (separated by a space).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1546_B. AquaMoon and Stolen String", "description": "Input\n\nThis problem is made as interactive. It means, that your solution will read the input, given by the interactor. But the interactor will give you the full input at the beginning and after that, you should print the answer. So you should solve the problem, like as you solve the usual, non-interactive problem because you won't have any interaction process. The only thing you should not forget is to flush the output buffer, after printing the answer. Otherwise, you can get an \"Idleness limit exceeded\" verdict. Refer to the [interactive problems guide](https://codeforces.com/blog/entry/45307) for the detailed information about flushing the output buffer.\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains two integers n, m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of strings and the length of each string, respectively.\n\nThe next n lines each contain a string with length m, describing the original n strings. All string consists of lowercase Latin letters.\n\nThe next n-1 lines each contain a string with length m, describing the strings after Cirno exchanged and reordered them.\n\nIt is guaranteed that n is odd and that the sum of n ⋅ m over all test cases does not exceed 10^5.\n\nHack format:\n\nThe first line should contain a single integer t. After that t test cases should follow in the following format:\n\nThe first line should contain two integers n and m.\n\nThe following n lines should contain n strings of length m, describing the original strings.\n\nThe following (n-1)/(2) lines should describe the pairs. They should contain, in the following order: the index of the first string i (1 ≤ i ≤ n), the index of the second string j (1 ≤ j ≤ n, i ≠ j), the number of exchanged positions k (1 ≤ k ≤ m), and the list of k positions that are exchanged (k distinct indices from 1 to m in any order).\n\nThe final line should contain a permutation of integers from 1 to n, describing the way the strings should be reordered. The strings will be placed in the order indices placed in this permutation, the stolen string index will be ignored.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1543_D2. RPD and Rap Sheet (Hard Version)", "description": "Input\n\nThe first line of input contains a single integer t (1≤ t≤ 10 000) denoting the number of test cases. t test cases follow.\n\nThe first line of each test case contains two integers n (1≤ n≤ 2⋅ 10^5) and k (2≤ k≤ 100).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5.\n\nInteraction\n\nFor each test case, first read two integers n and k. Then you may ask up to n queries.\n\nFor each query, print a single integer y (0≤ y≤ 2⋅ 10^7). Let the current password be x. After that, read an integer r.\n\nIf x=y, you will read r=1 and the test case is solved. You must then continue solving the remaining test cases.\n\nElse, you will read r=0. At this moment the password is changed to a number z such that x⊕_{k} z=y.\n\nAfter printing a query, do not forget to output the end of line and flush the output. Otherwise, you will get the Idleness limit exceeded verdict.\n\nTo do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf you ask an invalid query or exceed n queries, you will read r=-1 and you will receive the Wrong Answer verdict. Make sure to exit immediately to avoid unexpected verdicts.\n\nNote that the interactor is adaptive. That is, the original password is not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial password such that all the answers to the queries are consistent.\n\nHacks:\n\nTo use hacks, use the following format of tests:\n\nThe first line should contain a single integer t (1≤ t≤ 10 000) — the number of test cases.\n\nThe first and only line of each test case should contain two integers n (1≤ n≤ 2⋅ 10^5) and k (2≤ k≤ 100) denoting the number of queries and the base respectively. The optimal original password is automatically decided by the adaptive interactor.\n\nYou must ensure that the sum of n over all test cases does not exceed 2⋅ 10^5.\n\nExample\n\nInput\n\n\n2\n5 2\n\n0\n\n0\n\n1\n5 3\n\n0\n\n0\n\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1526_F. Median Queries", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThe first line of each testcase consists of a single integer n (20 ≤ n ≤ 100000) — the length of the secret permutation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100000.\n\nInteraction\n\nFor each testcase, you begin the interaction by reading n.\n\nTo perform a query, output \"? a b c\" where a,b,c is the 3 indices you want to use for the query.\n\nNumbers have to satisfy 1 ≤ a,b,c ≤ n and a ≠ b,b ≠ c,a ≠ c.\n\nFor each query, you will receive a single integer x: the median of \\{|p[a]-p[b]|,|p[b]-p[c]|,|p[a]-p[c]|\\}.\n\nIn case your query is invalid or you asked more than 2n+420 queries, the interactor will print \"−1\" and will finish interaction. You will receive Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nWhen you have determined the secret permutation, output \"! p[1] p[2] ... p[n]\". If the secret permutation is correct, the interactor will print \"1\". Otherwise, the interactor will print \"-1\" and will finish interaction. You will receive Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nAfter printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded verdict.\n\nTo do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nHacks:\n\nTo hack, use the following format of test:\n\nThe first line should contain a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThe first line of each testcase should contain a single integer n (20 ≤ n ≤ 100000) — the length of the secret permutation.\n\nThe following line of should contain n integers p[1],p[2],p[3],…,p[n]. p[1]<p[2] and p must be a permutation of integers from 1 to n.\n\nYou must ensure that the sum of n over all testcases does not exceed 100000.\n\nExample\n\nInput\n\n\n1\n20\n\n6\n\n9\n\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1543_D1. RPD and Rap Sheet (Easy Version)", "description": "Input\n\nThe first line of input contains a single integer t (1≤ t≤ 10 000) denoting the number of test cases. t test cases follow.\n\nThe first line of each test case contains two integers n (1≤ n≤ 2⋅ 10^5) and k (k=2).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5.\n\nInteraction\n\nFor each test case, first read two integers n and k. Then you may ask up to n queries.\n\nFor each query, print a single integer y (0≤ y≤ 2⋅ 10^7). Let the current password be x. After that, read an integer r.\n\nIf x=y, you will read r=1 and the test case is solved. You must then continue solving the remaining test cases.\n\nElse, you will read r=0. At this moment the password is changed to a number z such that x⊕_{k} z=y.\n\nAfter printing a query, do not forget to output the end of line and flush the output. Otherwise, you will get the Idleness limit exceeded verdict.\n\nTo do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf you ask an invalid query or exceed n queries, you will read r=-1 and you will receive the Wrong Answer verdict. Make sure to exit immediately to avoid unexpected verdicts.\n\nNote that the interactor is adaptive. That is, the original password is not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial password such that all the answers to the queries are consistent.\n\nHacks:\n\nTo use hacks, use the following format of tests:\n\nThe first line should contain a single integer t (1≤ t≤ 10 000) — the number of test cases.\n\nThe first and only line of each test case should contain two integers n (1≤ n≤ 2⋅ 10^5) and k (k=2) denoting the number of queries and the base respectively. The optimal original password is automatically decided by the adaptive interactor.\n\nYou must ensure that the sum of n over all test cases does not exceed 2⋅ 10^5.\n\nExample\n\nInput\n\n\n1\n5 2\n\n0\n\n0\n\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1040_D. Subway Pursuit", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^{18}, 0 ≤ k ≤ 10) — the number of stations and the maximum number of stations the train can move between two applications of the gadget.\n\nInteraction\n\nYou can apply the gadget at most 4500 times. In order to apply the gadget you need to print two space-separated integers l and r (1 ≤ l ≤ r ≤ n). You will then receive either string \"Yes\", if the train is between stations l and r, inclusive, or string \"No\" otherwise. If l = r and you received \"Yes\", then you found the train successfully, and your program must halt immediately.\n\nAnswer \"Bad\" instead of \"Yes\" or \"No\" means that you made an invalid query or made too many queries. Exit immediately after receiving \"Bad\" and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nHacks\n\nIn order to hack, you should present a test in the following format.\n\nThe first line should contain three integers n, k and p (1 ≤ n ≤ 10^{18}, 0 ≤ k ≤ 10, 1 ≤ p ≤ n) — the number of stations, the maximum number of stations the train can move between two applications of the gadget and the initial position of the train, respectively.\n\nEach of the next 4500 lines should contain a single integer x (1 ≤ x ≤ n) — the positions of the train after each query. Two consecutive positions (including the initial one) should not differ by more than k.\n\nFor example, the following lines are the first lines of the sample test.\n    \n    \n      \n    10 2 5  \n    5  \n    3  \n    5  \n    7  \n    7  \n    ...  \n    \n\nExample\n\nInput\n\n10 2\n\nYes\n\nNo\n\nYes\n\nYes", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1039_B. Subway Pursuit", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^{18}, 0 ≤ k ≤ 10) — the number of stations and the maximum number of stations the train can move between two applications of the gadget.\n\nInteraction\n\nYou can apply the gadget at most 4500 times. In order to apply the gadget you need to print two space-separated integers l and r (1 ≤ l ≤ r ≤ n). You will then receive either string \"Yes\", if the train is between stations l and r, inclusive, or string \"No\" otherwise. If l = r and you received \"Yes\", then you found the train successfully, and your program must halt immediately.\n\nAnswer \"Bad\" instead of \"Yes\" or \"No\" means that you made an invalid query or made too many queries. Exit immediately after receiving \"Bad\" and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nHacks\n\nIn order to hack, you should present a test in the following format.\n\nThe first line should contain three integers n, k and p (1 ≤ n ≤ 10^{18}, 0 ≤ k ≤ 10, 1 ≤ p ≤ n) — the number of stations, the maximum number of stations the train can move between two applications of the gadget and the initial position of the train, respectively.\n\nEach of the next 4500 lines should contain a single integer x (1 ≤ x ≤ n) — the positions of the train after each query. Two consecutive positions (including the initial one) should not differ by more than k.\n\nFor example, the following lines are the first lines of the sample test.\n    \n    \n      \n    10 2 5  \n    5  \n    3  \n    5  \n    7  \n    7  \n    ...  \n    \n\nExample\n\nInput\n\n10 2\n\nYes\n\nNo\n\nYes\n\nYes", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1007_C. Guess two numbers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nInteraction\n\nFirst, you need to read the number n, after that you can make queries.\n\nTo make a query, print two integers: x and y (1 ≤ x, y ≤ n), then flush the output.\n\nAfter each query, read a single integer ans (0 ≤ ans ≤ 3).\n\nIf ans > 0, then it is the number of the phrase said by Vasya.\n\nIf ans = 0, it means that you win and your program should terminate.\n\nIf you make more than 600 queries or make an incorrect query, you will get Wrong Answer.\n\nYour solution will get Idleness Limit Exceeded, if you don't print anything or forget to flush the output.\n\nTo flush you need to do the following right after printing a query and a line end: \n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * For other languages see documentation. \n\n\n\nHacks format\n\nFor hacks, use the following format:\n\nIn the first line, print a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nIn the second line, print two integers a and b (1 ≤ a, b ≤ n) — the numbers which Vasya thought of.\n\nIn the third line, print a single integer m (1 ≤ m ≤ 10^5) — the number of instructions for the interactor.\n\nIn each of the next m lines, print five integers: x_i, y_i, r^{12}_i, r^{13}_i, and r^{23}_i (1 ≤ x_i, y_i ≤ n), where r^{ST}_i equals to either number S or number T.\n\nWhile answering the query x   y, the interactor finds a number i from 1 to n with the minimal value |x-x_i| + |y-y_i|. If multiple numbers can be chosen, the least i is preferred. Then the interactor answers to the query, but if there are two phrases S and T that can be given, then r^{ST}_i is chosen.\n\nFor example, the sample test data file contains the following: \n    \n    \n      \n    5  \n    2 4  \n    2  \n    2 5 1 1 2  \n    4 1 2 3 3  \n    \n\nExample\n\nInput\n\n5\n3\n3\n2\n1\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1008_E. Guess two numbers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nInteraction\n\nFirst, you need to read the number n, after that you can make queries.\n\nTo make a query, print two integers: x and y (1 ≤ x, y ≤ n), then flush the output.\n\nAfter each query, read a single integer ans (0 ≤ ans ≤ 3).\n\nIf ans > 0, then it is the number of the phrase said by Vasya.\n\nIf ans = 0, it means that you win and your program should terminate.\n\nIf you make more than 600 queries or make an incorrect query, you will get Wrong Answer.\n\nYour solution will get Idleness Limit Exceeded, if you don't print anything or forget to flush the output.\n\nTo flush you need to do the following right after printing a query and a line end: \n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * For other languages see documentation. \n\n\n\nHacks format\n\nFor hacks, use the following format:\n\nIn the first line, print a single integer n (1 ≤ n ≤ 10^{18}) — the upper limit of the numbers.\n\nIn the second line, print two integers a and b (1 ≤ a, b ≤ n) — the numbers which Vasya thought of.\n\nIn the third line, print a single integer m (1 ≤ m ≤ 10^5) — the number of instructions for the interactor.\n\nIn each of the next m lines, print five integers: x_i, y_i, r^{12}_i, r^{13}_i, and r^{23}_i (1 ≤ x_i, y_i ≤ n), where r^{ST}_i equals to either number S or number T.\n\nWhile answering the query x   y, the interactor finds a number i from 1 to n with the minimal value |x-x_i| + |y-y_i|. If multiple numbers can be chosen, the least i is preferred. Then the interactor answers to the query, but if there are two phrases S and T that can be given, then r^{ST}_i is chosen.\n\nFor example, the sample test data file contains the following: \n    \n    \n      \n    5  \n    2 4  \n    2  \n    2 5 1 1 2  \n    4 1 2 3 3  \n    \n\nExample\n\nInput\n\n5\n3\n3\n2\n1\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01923 JAG Practice Contest", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is represented in the following format.\n\n> N M\n> d1 v1\n> ...\n> dN vN\n>\n\nThe first line of the dataset is given an integer N, which represents the number of problem stocks, and a maximum difficulty value, M, separated by blanks. These numbers satisfy 1 ≤ M ≤ N ≤ 100. On the i-th line of the following N lines, the integers di and vi representing the difficulty level and recommendation level of problem i are given, separated by blanks. These numbers satisfy 1 ≤ di ≤ M and 0 ≤ vi ≤ 100. Also, for each 1 ≤ j ≤ M, it is guaranteed that there is at least one i such that di = j.\n\n> The end of the input is represented by two zeros separated by a blank. Also, the number of datasets does not exceed 50.\n\n> ### Output\n\nFor each data set, output the maximum value of the sum of the recommendation levels of the questions to be asked when one question is asked from each difficulty level on one line.\n\n> ### Sample Input\n\n\n5 3\n1 1\ntwenty three\n3 2\n3 5\ntwenty one\n4 2\n1 7\ntwenty one\n13\n1 5\n6 1\n13\n1 2\n1 8\n1 2\n1 7\n1 6\n20 9\n4 10\ntwenty four\n5 3\n6 6\n6 3\n7 4\n8 10\n4 6\n7 5\n1 8\n5 7\n1 5\n6 6\n9 9\n5 8\n6 7\n14\n6 4\n7 10\n3 5\n19 6\n4 1\n6 5\n5 10\n1 10\n3 10\n4 6\ntwenty three\n5 4\n2 10\n1 8\n3 4\n3 1\n5 4\n1 10\n13\n5 6\n5 2\n1 10\ntwenty three\n0 0\n\n\n\nThere are 5 sample datasets, in order\nLines 1 to 6 are the first (N = 5, M = 3) test cases,\nLines 7 to 11 are the second (N = 4, M = 2) test case,\nLines 12-18 are the third (N = 6, M = 1) test case,\nThe fourth (N = 20, M = 9) test case from line 19 to line 39,\nLines 40 to 59 represent the fifth test case (N = 19, M = 6).\n\nOutput for Sample Input\n\n\n9\n8\n8\n71\n51\n\n\n\n\n\nExample\n\nInput\n\n5 3\n1 1\n2 3\n3 2\n3 5\n2 1\n4 2\n1 7\n2 1\n1 3\n1 5\n6 1\n1 3\n1 2\n1 8\n1 2\n1 7\n1 6\n20 9\n4 10\n2 4\n5 3\n6 6\n6 3\n7 4\n8 10\n4 6\n7 5\n1 8\n5 7\n1 5\n6 6\n9 9\n5 8\n6 7\n1 4\n6 4\n7 10\n3 5\n19 6\n4 1\n6 5\n5 10\n1 10\n3 10\n4 6\n2 3\n5 4\n2 10\n1 8\n3 4\n3 1\n5 4\n1 10\n1 3\n5 6\n5 2\n1 10\n2 3\n0 0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1011_D. Rocket", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 30) — the maximum distance to Mars and the number of elements in the sequence p.\n\nInteraction\n\nYou can ask the rocket no more than 60 questions.\n\nTo ask a question, print a number y (1≤ y≤ m) and an end-of-line character, then do the operation flush and read the answer to the question.\n\nIf the program reads 0, then the distance is correct and you must immediately terminate the program (for example, by calling exit(0)). If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf at some point your program reads -2 as an answer, it must immediately end (for example, by calling exit(0)). You will receive the \"Wrong answer\" verdict, and this will mean that the request is incorrect or the number of requests exceeds 60. If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf your program's request is not a valid integer between -2^{31} and 2^{31}-1 (inclusive) without leading zeros, then you can get any verdict.\n\nYou can get \"Idleness limit exceeded\" if you don't print anything or if you forget to flush the output.\n\nTo flush the output buffer you can use (after printing a query and end-of-line):\n\n  * fflush(stdout) in C++;\n  * System.out.flush() in Java;\n  * stdout.flush() in Python;\n  * flush(output) in Pascal;\n  * See the documentation for other languages.\n\n\n\nHacking\n\nUse the following format for hacking:\n\nIn the first line, print 3 integers m,n,x (1≤ x≤ m≤ 10^9, 1≤ n≤ 30) — the maximum distance to Mars, the number of elements in the sequence p and the current distance to Mars.\n\nIn the second line, enter n numbers, each of which is equal to 0 or 1 — sequence p.\n\nThe hacked solution will not have access to the number x and sequence p.\n\nExample\n\nInput\n\n5 2\n1\n-1\n-1\n1\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1010_B. Rocket", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 30) — the maximum distance to Mars and the number of elements in the sequence p.\n\nInteraction\n\nYou can ask the rocket no more than 60 questions.\n\nTo ask a question, print a number y (1≤ y≤ m) and an end-of-line character, then do the operation flush and read the answer to the question.\n\nIf the program reads 0, then the distance is correct and you must immediately terminate the program (for example, by calling exit(0)). If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf at some point your program reads -2 as an answer, it must immediately end (for example, by calling exit(0)). You will receive the \"Wrong answer\" verdict, and this will mean that the request is incorrect or the number of requests exceeds 60. If you ignore this, you can get any verdict, since your program will continue to read from the closed input stream.\n\nIf your program's request is not a valid integer between -2^{31} and 2^{31}-1 (inclusive) without leading zeros, then you can get any verdict.\n\nYou can get \"Idleness limit exceeded\" if you don't print anything or if you forget to flush the output.\n\nTo flush the output buffer you can use (after printing a query and end-of-line):\n\n  * fflush(stdout) in C++;\n  * System.out.flush() in Java;\n  * stdout.flush() in Python;\n  * flush(output) in Pascal;\n  * See the documentation for other languages.\n\n\n\nHacking\n\nUse the following format for hacking:\n\nIn the first line, print 3 integers m,n,x (1≤ x≤ m≤ 10^9, 1≤ n≤ 30) — the maximum distance to Mars, the number of elements in the sequence p and the current distance to Mars.\n\nIn the second line, enter n numbers, each of which is equal to 0 or 1 — sequence p.\n\nThe hacked solution will not have access to the number x and sequence p.\n\nExample\n\nInput\n\n5 2\n1\n-1\n-1\n1\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00730 Cut the Cake", "description": "Input\n\nThe input is a sequence of datasets, each of which is of the following format.\n\n> n  w  d\n>  p1  s1\n>  ...\n>  pn  sn\n>\n\nThe first line starts with an integer n that is between 0 and 100 inclusive. It is the number of cuts to be performed. The following w and d in the same line are integers between 1 and 100 inclusive. They denote the width and depth of the cake, respectively. Assume in the sequel that the cake is placed so that w and d are the lengths in the east-west and north-south directions, respectively.\n\nEach of the following n lines specifies a single cut, cutting one and only one piece into two. pi is an integer between 1 and i inclusive and is the identification number of the piece that is the target of the i-th cut. Note that, just before the i-th cut, there exist exactly i pieces. Each piece in this stage has a unique identification number that is one of 1, 2, ..., i and is defined as follows:\n\n* The earlier a piece was born, the smaller its identification number is.\n* Of the two pieces born at a time by the same cut, the piece with the smaller area (looking from above) has the smaller identification number. If their areas are the same, you may define as you like the order between them, since your choice in this case has no influence on the final answer.\n\n\nNote that identification numbers are adjusted after each cut.\n\nsi is an integer between 1 and 1000 inclusive and specifies the starting point of the i-th cut. From the northwest corner of the piece whose identification number is pi, you can reach the starting point by traveling si in the clockwise direction around the piece. You may assume that the starting point determined in this way cannot be any one of the four corners of the piece. The i-th cut surface is orthogonal to the side face on which the starting point exists.\n\nThe end of the input is indicated by a line with three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1375_F. Integer Game", "description": "Input\n\nThe first line of input contains three distinct positive integers a, b, and c (1 ≤ a, b, c ≤ 10^9) — the initial number of stones in piles 1, 2, and 3 respectively.\n\nInteraction\n\nThe interaction begins by reading the integers a, b and c.\n\nAfter reading the integers, print a single line containing either \"First\" or \"Second\", denoting who you want to play as (as first or second correspondently).\n\nOn each turn, the first player (either you or the judge) must print a positive integer y (1 ≤ y ≤ 10^{12}).\n\nThen, the second player must print 1, 2, or 3, indicating which pile should have y stones added to it. From the second turn onwards, the pile that the second player chooses must be different from the pile that they chose on the previous turn.\n\nIf you are playing as Second and complete 1000 turns without losing, or if you are playing as First and the judge has determined that it cannot make a move without losing, the interactor will print 0 and will finish interaction. This means that your program is correct for this test case, and you should exit immediately.\n\nIf you are playing as First and complete 1000 turns without winning, or if you are playing as Second and print a move that makes two piles have the same number of stones, or if you output an invalid move as either player, the interactor will print -1 and will finish interaction. You will receive a Wrong Answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nAfter printing something do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIn this problem, hacks are disabled.\n\nExample\n\nInput\n\n\n5 2 6\n\n\n3\n\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "811_D. Vladik and Favorite Game", "description": "Input\n\nFirst line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — number of rows and columns respectively.\n\nEach of next n lines contains m characters describing corresponding row of field. Set of characters in field is described above.\n\nGuaranteed that cell with coordinates (1, 1) is normal and there is at least one way from initial cell to finish cell without dangerous cells. \n\nInteraction\n\nYou can press buttons no more than 2·n·m times.\n\nTo press a button you should print \"U\", \"D\", \"L\", \"R\" in new line. It’s necessary to print newline character and flush output. After flushing buffer you should read answer from input data. Answer is the pair of space-separated integers x, y — new position of player. In case, if there is no cell in direction of moving, position will not change. If after any move player lost, in other words player move to dangerous cell, then x and y will be equal to  - 1.\n\nIf after any move player is in finish or dangerous cell, then you should terminate your program.\n\nTo finish output buffer (i. e. for operation flush) right after printing direction and newline you should do next:\n\n  * fflush(stdout) in C++ \n  * System.out.flush() in Java \n  * stdout.flush() in Python \n  * flush(output) in Pascal \n  * read documentation for other languages. \n\n\n\nHacks\n\nTo perform a hack you should use this format:\n    \n    \n      \n    n m swapLR swapUD    \n    a_1    \n    a_2    \n    ...    \n    a_n  \n    \n\nWhere n, m — number of rows and columns in game field. swapLR is equal to 1 in case, when directions \"L’’ and \"R’’ is swapped, and equal to 0 otherwise. swapUD is equal to 1, when directions \"U’’ and \"D’’ is swapped, and equal to 0 otherwise. a1, a2, ..., an — description of corresponding rows of game field.\n\nExample\n\nInput\n\n4 3\n...\n**.\nF*.\n...\n1 1\n1 2\n1 3\n1 3\n2 3\n3 3\n4 3\n4 2\n4 1\n3 1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1521_C. Nastia and a Hidden Permutation", "description": "Input\n\nThe input consists of several test cases. In the beginning, you receive the integer T (1 ≤ T ≤ 10 000) — the number of test cases.\n\nAt the beginning of each test case, you receive an integer n (3 ≤ n ≤ 10^4) — the length of the permutation p.\n\nIt's guaranteed that the permutation is fixed beforehand and that the sum of n in one test doesn't exceed 2 ⋅ 10^4.\n\nInteraction\n\nTo ask a question, print \"? t i j x\" (t = 1 or t = 2, 1 ≤ i, j ≤ n, i ≠ j, 1 ≤ x ≤ n - 1) Then, you should read the answer.\n\nIf we answer with −1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving −1 and you will see the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nTo print the answer, print \"! p_1 p_2 … p_{n} (without quotes). Note that answering doesn't count as one of the ⌊ \\frac {3 ⋅ n} {2} ⌋ + 30 queries.\n\nAfter printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * See the documentation for other languages. \n\n\n\nHacks\n\nTo hack the solution, use the following test format.\n\nThe first line should contain a single integer T (1 ≤ T ≤ 10 000) — the number of test cases.\n\nFor each test case in the first line print a single integer n (3 ≤ n ≤ 10^4) — the length of the hidden permutation p.\n\nIn the second line print n space-separated integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n), where p is permutation.\n\nNote that the sum of n over all test cases should not exceed 2 ⋅ 10^4.\n\nExample\n\nInput\n\n\n2\n4\n\n3\n\n2\n\n5\n\n3", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00894 Gift from the Goddess of Programming", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is less than 100. Each dataset is formatted as follows.\n\nn\nM1/D1 h1:m1e1 p1\nM2/D2 h2:m2e2 p2\n.\n.\n.\nMn/Dn hn:mnen pn\n\n\nThe first line of a dataset contains a positive even integer, n ≤ 1000, which denotes the number of lines of the logbook. This line is followed by n lines of space-separated data, where Mi/Di identifies the month and the day of the visit, hi:mi represents the time of either the entrance to or exit from the altar, ei is either I for entrance, or O for exit, and pi identifies the visitor.\n\nAll the lines in the logbook are formatted in a fixed-column format. Both the month and the day in the month are represented by two digits. Therefore April 1 is represented by 04/01 and not by 4/1. The time is described in the 24-hour system, taking two digits for the hour, followed by a colon and two digits for minutes, 09:13 for instance and not like 9:13. A programmer is identified by an ID, a unique number using three digits. The same format is used to indicate entrance and exit of the goddess, whose ID is 000.\n\nAll the lines in the logbook are sorted in ascending order with respect to date and time. Because the altar is closed at midnight, the altar is emptied at 00:00. You may assume that each time in the input is between 00:01 and 23:59, inclusive.\n\nA programmer may leave the altar just after entering it. In this case, the entrance and exit time are the same and the length of such a visit is considered 0 minute. You may assume for such entrance and exit records, the line that corresponds to the entrance appears earlier in the input than the line that corresponds to the exit. You may assume that at least one programmer appears in the logbook.\n\nThe end of the input is indicated by a line containing a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01698 Wish upon a shooting star", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 100 or less. The format of each data set is as follows.\n\n> $ n $\n> $ px_1 $ $ py_1 $ $ pz_1 $ $ vx_1 $ $ vy_1 $ $ vz_1 $ $ r_1 $ $ vr_1 $\n> ...\n> $ px_n $ $ py_n $ $ pz_n $ $ vx_n $ $ vy_n $ $ vz_n $ $ r_n $ $ vr_n $\n\n$ n $ is an integer representing the number of shooting stars, and can be assumed to be $ 1 $ or more and $ 200 $ or less.\n\nShooting star information is given in the following $ n $ line. Each line contains eight values ​​represented by four decimal places, $ (px_i, py_i, pz_i) $ is the initial position of the shooting star $ i $, $ (vx_i, vy_i, vz_i) $ is the moving speed, and $ r_i $ represents the initial radius and $ vr_i $ represents the rate of disappearance. For the given values, $ -1 {,} 000 \\ leq px_i \\ leq 1 {,} 000 $, $ -1 {,} 000 \\ leq py_i \\ leq 1 {,} 000 $, $ -1 {,} 000 \\ leq pz_i \\ leq 1 {,} 000 $, $ -100 \\ leq vx_i \\ leq 100 $, $ -100 \\ leq vy_i \\ leq 100 $, $ -100 \\ leq vz_i \\ leq 100 $, $ 1 \\ leq r_i \\ You can assume that it is leq 100 $, $ 1 \\ leq vr_i \\ leq 100 $.\n\nYou may also assume the following for a given dataset:\n\n* Even if the initial radius of one shooting star changes by $ 10 ^ {-8} $, the set of pairs of contacting stars does not change.\n* Even if one shooting star does not disappear due to contact, it will contact two or more shooting stars within $ 10 ^ {-8} $, or $ 10 ^ {-8 from the time of contact with another shooting star. Does not disappear spontaneously within} $\n* In the initial state, none of the two shooting stars overlap, and the distance is more than $ 10 ^ {-8} $.\n* At time $ t <10 ^ {-8} $, no two shooting stars touch\n\n\n\n$ n = 0 $ indicates the end of input. This is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00660 High and Low Cube", "description": "Input\n\nThe input consists of multiple cases.\n\n\nIn each case, a development of the dice is given in a 21x57 grid.\nThe first 21x28 ((0,0) is the upper left, (20,27) is the lower right) grid represents the participants' dice.\nThe last 21x28 ((0,29) is the upper left, (20,56) is the lower right) represents the uncle's dice.\n\n\nEach side of the participant's dice is 7x7 with (0,7), (7,0), (7,7), (7,14), (7,21), (14,7) as the upper left. Given in the subgrid of.\nThe numbers written on the development drawing are the original numbers.\nFlip horizontal\nFlip left and right, then rotate 90 degrees counterclockwise\nFlip horizontal\nFlip left and right, then rotate 270 degrees counterclockwise\nFlip horizontal\nFlip upside down, then flip left and right\nIt was made to do.\n\n\nEach side of the uncle's dice is 7x7 with (0,36), (7,29), (7,36), (7,43), (7,50), (14,36) as the upper left. Given in the subgrid.\nThe numbers on the uncle's dice development are drawn according to the same rules as the participants' dice.\n\n\n\nOne of 1 to 9 is written on each side of the dice.\nThe numbers are given in a 7x7 grid like this:\n\n..... #\n... |. #\n..... #\n... |. #\n..-.. #\n\n\n\n..-.. #\n... |. #\n..-.. #\n. | ... #\n..-.. #\n\n\n\n..-.. #\n... |. #\n..-.. #\n... |. #\n..-.. #\n\n\n\n..... #\n. |. |. #\n..-.. #\n... |. #\n..... #\n\n\n\n..-.. #\n. | ... #\n..-.. #\n... |. #\n..-.. #\n\n\n\n..-.. #\n. | ... #\n..-.. #\n. |. |. #\n..-.. #\n\n\n\n..-.. #\n... |. #\n..... #\n... |. #\n..... #\n\n\n\n..-.. #\n. |. |. #\n..-.. #\n. |. |. #\n..-.. #\n\n\n\n..-.. #\n. |. |. #\n..-.. #\n... |. #\n..-.. #\n\n\n\n\nHowever, when the above numbers are rotated 90 degrees or 270 degrees, the \"|\" and \"-\" are interchanged.\n\n\nThe end of the input is given by a single 0 line\n\nThe dice given as input are always correct. Also, dice that cannot be settled are not given.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "90_D. Widget Library", "description": "Input\n\nThe first line contains an integer n — the number of instructions (1 ≤ n ≤ 100). Next n lines contain instructions in the language VasyaScript — one instruction per line. There is a list of possible instructions below. \n\n  * \"Widget [name]([x],[y])\" — create a new widget [name] of the type Widget possessing the width of [x] units and the height of [y] units. \n  * \"HBox [name]\" — create a new widget [name] of the type HBox. \n  * \"VBox [name]\" — create a new widget [name] of the type VBox. \n  * \"[name1].pack([name2])\" — pack the widget [name2] in the widget [name1]. At that, the widget [name1] must be of type HBox or VBox. \n  * \"[name].set_border([x])\" — set for a widget [name] the border parameter to [x] units. The widget [name] must be of type HBox or VBox. \n  * \"[name].set_spacing([x])\" — set for a widget [name] the spacing parameter to [x] units. The widget [name] must be of type HBox or VBox. \n\n\n\nAll instructions are written without spaces at the beginning and at the end of the string. The words inside the instruction are separated by exactly one space. There are no spaces directly before the numbers and directly after them. \n\nThe case matters, for example, \"wiDget x\" is not a correct instruction. The case of the letters is correct in the input data.\n\nAll names of the widgets consist of lowercase Latin letters and has the length from 1 to 10 characters inclusive. The names of all widgets are pairwise different. All numbers in the script are integers from 0 to 100 inclusive\n\nIt is guaranteed that the above-given script is correct, that is that all the operations with the widgets take place after the widgets are created and no widget is packed in itself. It is guaranteed that the script creates at least one widget.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "89_B. Widget Library", "description": "Input\n\nThe first line contains an integer n — the number of instructions (1 ≤ n ≤ 100). Next n lines contain instructions in the language VasyaScript — one instruction per line. There is a list of possible instructions below. \n\n  * \"Widget [name]([x],[y])\" — create a new widget [name] of the type Widget possessing the width of [x] units and the height of [y] units. \n  * \"HBox [name]\" — create a new widget [name] of the type HBox. \n  * \"VBox [name]\" — create a new widget [name] of the type VBox. \n  * \"[name1].pack([name2])\" — pack the widget [name2] in the widget [name1]. At that, the widget [name1] must be of type HBox or VBox. \n  * \"[name].set_border([x])\" — set for a widget [name] the border parameter to [x] units. The widget [name] must be of type HBox or VBox. \n  * \"[name].set_spacing([x])\" — set for a widget [name] the spacing parameter to [x] units. The widget [name] must be of type HBox or VBox. \n\n\n\nAll instructions are written without spaces at the beginning and at the end of the string. The words inside the instruction are separated by exactly one space. There are no spaces directly before the numbers and directly after them. \n\nThe case matters, for example, \"wiDget x\" is not a correct instruction. The case of the letters is correct in the input data.\n\nAll names of the widgets consist of lowercase Latin letters and has the length from 1 to 10 characters inclusive. The names of all widgets are pairwise different. All numbers in the script are integers from 0 to 100 inclusive\n\nIt is guaranteed that the above-given script is correct, that is that all the operations with the widgets take place after the widgets are created and no widget is packed in itself. It is guaranteed that the script creates at least one widget.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00910 Let There Be Light", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nN M R\nS1x S1y S1z S1r\n...\nSNx SNy SNz SNr\nT1x T1y T1z T1b\n...\nTMx TMy TMz TMb\nEx Ey Ez\n\n\nThe first line of a dataset contains three positive integers, N, M and R, separated by a single space. N means the number of balloons that does not exceed 2000. M means the number of light sources that does not exceed 15. R means the number of balloons that may be removed, which does not exceed N.\n\nEach of the N lines following the first line contains four integers separated by a single space. (Six, Siy, Siz) means the center position of the i-th balloon and Sir means its radius.\n\nEach of the following M lines contains four integers separated by a single space. (Tjx, Tjy, Tjz) means the position of the j-th light source and Tjb means its brightness.\n\nThe last line of a dataset contains three integers separated by a single space. (Ex, Ey, Ez) means the position of the objective point.\n\nSix, Siy, Siz, Tjx, Tjy, Tjz, Ex, Ey and Ez are greater than -500, and less than 500. Sir is greater than 0, and less than 500. Tjb is greater than 0, and less than 80000.\n\nAt the objective point, the intensity of the light from the j-th light source is in inverse proportion to the square of the distance, namely\n\nTjb / { (Tjx − Ex)2 + (Tjy − Ey)2 + (Tjz − Ez)2 },\n\nif there is no balloon interrupting the light. The total illumination intensity is the sum of the above.\n\nYou may assume the following.\n\n1. The distance between the objective point and any light source is not less than 1.\n2. For every i and j, even if Sir changes by ε (|ε| < 0.01), whether the i-th balloon hides the j-th light or not does not change.\n\n\nThe end of the input is indicated by a line of three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00845 How I Wonder What You Are!", "description": "Input\n\nThe input consists of one or more datasets. The number of datasets is less than 50. Each dataset describes stars and the parameters of the telescopes used.\n\nThe first line of a dataset contains a positive integer n not exceeding 500, meaning the number of stars. Each of the n lines following it contains three decimal fractions, sx, sy, and sz. They give the position (sx, sy, sz) of the star described in Euclidean coordinates. You may assume -1000 ≤ sx ≤ 1000, -1000 ≤ sy ≤ 1000, -1000 ≤ sz ≤ 1000 and (sx, sy, sz) ≠ (0, 0, 0).\n\nThen comes a line containing a positive integer m not exceeding 50, meaning the number of telescopes. Each of the following m lines contains four decimal fractions, tx, ty, tz, and φ, describing a telescope.\n\nThe first three numbers represent the direction of the telescope. All the telescopes are at the origin of the coordinate system (0, 0, 0) (we ignore the size of the planet). The three numbers give the point (tx, ty, tz) which can be seen in the center of the sight through the telescope. You may assume -1000 ≤ tx ≤ 1000, -1000 ≤ ty ≤ 1000, -1000 ≤ tz ≤ 1000 and (tx, ty, tz) ≠ (0, 0, 0).\n\nThe fourth number φ (0 ≤ φ ≤ π/2) gives the angular radius, in radians, of the sight field of the telescope.\n\nLet us defie that θi,j is the angle between the direction of the i-th star and the center direction of the j-th telescope and φjis the angular radius of the sight field of the j-th telescope. The i-th star is observable through the j-th telescope if and only if θi,j is less than . You may assume that |θi,j - φj| > 0.00000001 for all pairs of i and j.\n\n<image>\n\n\nFigure 1: Direction and angular radius of a telescope\n\nThe end of the input is indicated with a line containing a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00837 Book Replacement", "description": "Input\n\nThe input consists of multiple datasets. The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.\n\nThe format of each dataset is as follows.\n\n\nm c n\nk1\nb11 . . . b1k1\n.\n.\n.\nkn\nbn1 . . . bnkn\n\n\nHere, all data items are positive integers. m is the number of desks not exceeding 10. c is the number of books allowed to put on a desk, which does not exceed 30. n is the number of students not exceeding 100. ki is the number of books requested by the i-th student, which does not exceed 50. bij is the ID number of the book requested by the i-th student on the j-th turn. No two books have the same ID number. Note that a student may request the same book more than once. bij is less than 100.\n\nHere we show you an example of cost calculation for the following dataset.\n\n\n3 1 2\n3\n60 61 62\n2\n70 60\n\n\nIn this dataset, there are 3 desks (D1, D2, D3 ). At most 1 book can be put on each desk. The number of students is 2. The first student requests 3 books of which IDs are 60, 61, and 62, respectively, and the second student 2 books of which IDs are 70 and 60, respectively.\n\nThe calculation of the cost for this dataset is done as follows. First, for the first request of the first student, the librarian takes the book 60 from the shelf and puts it on D1 and the first student goes to the end of the queue, costing 5. Next, for the first request of the second student, the librarian takes the book 70 from the shelf, puts it on D2, moves the book 60 from D1 to D3 , and finally moves the book 70 from D2 to D1 , costing 13. Similarly, the cost for the books 61, 60, and 62, are calculated as 14, 12, 14, respectively. Therefore, the total cost is 58.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00648 Watchin' TVA", "description": "Constraints\n\nThe number of datasets is less than or equal to 400.\n1≤N≤500\n\nInput\n\nInput consists of multiple datasets.\nA dataset is given in a following format.\n\n\nN\nPROGRAM1\nPROGRAM2\n...\nPROGRAMN\nP\nFAV1\nFAV2\n...\nFAVP\n\n\nN is the number of programs in a season.\nPROGRAMi(1≤i≤N)is a string which has the following format.\n\n\nname weekday start\n\n\n* name is a program name. This is a a string having between 1 and 32 characters and these names do not overlap each other program. A name consists of alphanumeric characters and '_'(underscore).\n* weekday is a broadcasting weekday about the corresponding program. This is an integer. 0 means Sunday and 1 is Monday and so on (2:Tuesday, 3:Wednesday, 4:Thursday, 5:Friday, 6:Saturday).\n* start is a starting time of the program broadcasting. This is an integer between 600 and 2929. First one or two digits represent hour and the last two digits represent minute. If the hour has one digit it will be a representation \"900\" for example. Note: a program may have an integer more than or equal to 2400 as start, if the program begins the next day. For example, a program begins from 2500 on Monday should be interpreted as a program begins from 0100 on Tuesday. There are no input the minute of start exceeds 59. And when the hour of start is equal to 29, there are no input the minute of start exceeds 29.\n\n\n\nP is an integer and represents the number of elements in the set F. And FAVi(1≤i≤P≤N) is a string for a program name which Jack watches absolutely. You can assume names which are not given in program descriptions will not appear in the set F.\nThe last line contains a single 0 which represents the end of input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01806 Dice Stamp", "description": "Input\n\nThe input consists of 40 or less datasets. Each data set is represented in the following format.\n\n> N\n> Information on the first dice\n> ...\n> Information on the Nth dice\n\nThe first line of input consists of one integer N representing the number of dice. You can assume that 1 ≤ N ≤ 15. After that, the information of N dice continues.\n\nThe information on each dice is expressed in the following format.\n\n> x y\n> l r f b d u\n> rot\n\nThe first line consists of two integers x and y and represents the coordinates (x, y) of the center of the square where the dice are dropped when ejected. You can assume that -1,000 ≤ x, y ≤ 1,000.\n\nThe second line consists of six integers l, r, f, b, d, u and represents the number written on each side. When dropped, l, r, f, b, d, and u face the x-axis negative direction, the x-axis positive direction, the y-axis negative direction, the y-axis positive direction, the z-axis negative direction, and the z-axis positive direction, respectively. It is the number written on the surface. We can assume that 1 ≤ l, r, f, b, d, u ≤ 100.\n\nThe third line consists of the string rot, which indicates how to rotate. rot is a character string consisting of only'L',' R',' F', and'B', and is 1 or more characters and 30 or less characters. The jth character of rot indicates the direction of the jth rotation, and when the characters are'L',' R',' F', and'B', the x-axis negative direction, the x-axis positive direction, and y, respectively. It shows that it rotates in the negative direction of the axis and the positive direction of the y-axis.\n\nThe end of the input is indicated by one line containing one zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1205_C. Palindromic Paths", "description": "Input\n\nThe first line contains odd integer (3 ≤ n < 50) — the side of the grid.\n\nInteraction\n\nYou begin the interaction by reading n.\n\nTo ask a question about cells (x_1, y_1), (x_2, y_2), in a separate line output \"? x_1 y_1 x_2 y_2\".\n\nNumbers in the query have to satisfy 1 ≤ x_1 ≤ x_2 ≤ n, 1 ≤ y_1 ≤ y_2 ≤ n, and x_1 + y_1 + 2 ≤ x_2 + y_2. Don't forget to 'flush', to get the answer.\n\nIn response, you will receive 1, if there exists a path going from (x_1, y_1) to (x_2, y_2) only to the right or down, numbers in cells of which form a palindrome, and 0 otherwise.\n\nIn case your query is invalid or you asked more than n^2 queries, program will print -1 and will finish interaction. You will receive Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nWhen you determine numbers in all cells, output \"!\".\n\nThen output n lines, the i-th of which is a string of length n, corresponding to numbers in the i-th row of the grid.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nHack Format\n\nTo hack, use the following format.\n\nThe first line should contain a single odd integer n (side of your grid).\n\nThe i-th of n following lines should contain a string of length n corresponding to the i-th row of the grid. Top left element of the grid has to be equal to 1, bottom right has to be equal to 0.\n\nExample\n\nInput\n\n\n3\n0\n1\n0\n1\n1\n1\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00966 String Puzzle", "description": "Input\n\nThe input consists of a single test case in the following format.\n\n\n$n$ $a$ $b$ $q$\n$x_1$ $c_1$\n...\n$x_a$ $c_a$\n$y_1$ $h_1$\n...\n$y_b$ $h_b$\n$z_1$\n...\n$z_q$\n\n\nThe first line contains four integers $n$, $a$, $b$, and $q$. $n$ ($1 \\leq n \\leq 10^9$) is the length of the secret string, $a$ ($0 \\leq a \\leq 1000$) is the number of the hints on letters in specified positions, $b$ ($0 \\leq b \\leq 1000$) is the number of the hints on duplicated substrings, and $q$ ($1 \\leq q \\leq 1000$) is the number of positions asked.\n\nThe $i$-th line of the following a lines contains an integer $x_i$ and an uppercase letter $c_i$ meaning that the letter at the position $x_i$ of the secret string is $c_i$. These hints are ordered in their positions, i.e., $1 \\leq x_1 < ... < x_a \\leq n$.\n\nThe $i$-th line of the following $b$ lines contains two integers, $y_i$ and $h_i$. It is guaranteed that they satisfy $2 \\leq y_1 < ... < y_b \\leq n$ and $0 \\leq h_i < y_i$. When $h_i$ is not 0, the substring of the secret string starting from the position $y_i$ with the length $y_{i+1} - y_i$ (or $n+1-y_i$ when $i = b$) is identical to the substring with the same length starting from the position $h_i$. Lines with $h_i = 0$ does not tell any hints except that $y_i$ in the line indicates the end of the substring specified in the line immediately above.\n\nEach of the following $q$ lines has an integer $z_i$ ($1 \\leq z_i \\leq n$), specifying the position of the letter in the secret string to output.\n\nIt is ensured that there exists at least one secret string that matches all the given information. In other words, the given hints have no contradiction.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1206_E. Palindromic Paths", "description": "Input\n\nThe first line contains odd integer (3 ≤ n < 50) — the side of the grid.\n\nInteraction\n\nYou begin the interaction by reading n.\n\nTo ask a question about cells (x_1, y_1), (x_2, y_2), in a separate line output \"? x_1 y_1 x_2 y_2\".\n\nNumbers in the query have to satisfy 1 ≤ x_1 ≤ x_2 ≤ n, 1 ≤ y_1 ≤ y_2 ≤ n, and x_1 + y_1 + 2 ≤ x_2 + y_2. Don't forget to 'flush', to get the answer.\n\nIn response, you will receive 1, if there exists a path going from (x_1, y_1) to (x_2, y_2) only to the right or down, numbers in cells of which form a palindrome, and 0 otherwise.\n\nIn case your query is invalid or you asked more than n^2 queries, program will print -1 and will finish interaction. You will receive Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nWhen you determine numbers in all cells, output \"!\".\n\nThen output n lines, the i-th of which is a string of length n, corresponding to numbers in the i-th row of the grid.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nHack Format\n\nTo hack, use the following format.\n\nThe first line should contain a single odd integer n (side of your grid).\n\nThe i-th of n following lines should contain a string of length n corresponding to the i-th row of the grid. Top left element of the grid has to be equal to 1, bottom right has to be equal to 0.\n\nExample\n\nInput\n\n\n3\n0\n1\n0\n1\n1\n1\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00729 Analyzing Login/Logout Records", "description": "Input\n\nThe input is a sequence of a number of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets never exceeds 10.\n\nEach dataset is formatted as follows.\n\n> N M\n>  r\n>  record1\n>  ...\n>  recordr\n>  q\n>  query1\n>  ...\n>  queryq\n>\n\nThe numbers N  and M  in the first line are the numbers of PCs and the students, respectively. r  is the number of records. q  is the number of queries. These four are integers satisfying the following.\n\n> 1 ≤ N  ≤ 1000, 1 ≤ M  ≤ 10000, 2 ≤ r  ≤ 1000, 1 ≤ q  ≤ 50\n\nEach record consists of four integers, delimited by a space, as follows.\n\n> t  n  m  s\n\ns  is 0 or 1. If s  is 1, this line means that the student m  logged in to the PC n  at time t . If s  is 0, it means that the student m  logged out of the PC n  at time t . The time is expressed as elapsed minutes from 0:00 of the day. t , n  and m  satisfy the following.\n\n> 540 ≤ t  ≤ 1260, 1 ≤ n  ≤ N , 1 ≤ m  ≤ M\n\nYou may assume the following about the records.\n* Records are stored in ascending order of time t.\n* No two records for the same PC has the same time t.\n* No PCs are being logged in before the time of the first record nor after that of the last record in the file.\n* Login and logout records for one PC appear alternatingly, and each of the login-logout record pairs is for the same student.\n\nEach query consists of three integers delimited by a space, as follows.\n\n> ts  te  m\n\nIt represents \"Usage of the student m  between ts  and te \". ts , te  and m  satisfy the following.\n\n> 540 ≤ ts  < te  ≤ 1260, 1 ≤ m  ≤ M", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01843 Campaign", "description": "Input\n\nThe input is given in the following format.\n\n$ N $ $ M $\n$ polygon_1 $\n$ polygon_2 $\n$ ... $\n$ polygon_N $\n$ x_1 $ $ y_1 $\n$ x_2 $ $ y_2 $\n$ ... $\n$ x_M $ $ y_M $\n\nThe first line of the dataset consists of two integers $ N $ and $ M $ separated by a single whitespace character. $ N $$ (1 \\ le N \\ le 5) $ is the number of obstacles in front of the station, and $ M $$ (1 \\ le M \\ le 10) $ is the number of voters in front of the station. The following line gives information on $ N $ obstacles. The input representing one obstacle is given in the following format.\n\n$ L $\n$ x_1 $ $ y_1 $\n$ x_2 $ $ y_2 $\n$ ... $\n$ x_L $ $ y_L $\n\nThe first line of each obstacle information is the number of vertices $ L $ contained in the polygon representing the obstacle. In the subsequent $ L $ line, a set of integers representing the coordinates of the vertices of the polygon is written counterclockwise. The total number of vertices that make up an obstacle is $ 15 $ or less.\n\nThe $ M $ line that follows the $ N $ obstacle information is given a set of integers that represent the coordinates of the voters.\n\nIn addition, each test case meets the following conditions:\n\n1. $ 0 \\ le | x_i |, | y_i | \\ le 20 $\n2. The coordinates of the vertices of the polygon or where the voters are are all different from each other.\n3. Three of the coordinates of the vertices of the polygon or the location of the voters do not exist in the same straight line.\n4. Two different polygons do not intersect.\n5. Each polygon does not have a self-intersection.\n6. There are no voters inside the polygon.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00869 Traveling Cube", "description": "Input\n\nThe input is a sequence of datasets. A dataset is formatted as follows:\n\n\nw d\n\nc11 . . . cw1\n.        .\n.        .\n.        .\nc1d . . . cwd\nv1v2v3v4v5v6\n\n\nThe first line is a pair of positive integers w and d separated by a space. The next d lines are w-character-long strings c11 . . . cw1 , . . . , c1d . . . cwd with no spaces. Each character cij is one of the letters r, g, b, c, m, y, w and k, which stands for red, green, blue, cyan, magenta, yellow, white and black respectively, or a sign #. Each of r, g, b, c, m, y and # occurs once and only once in a dataset. The last line is a six-character-long string v1v2v3v4v5v6 which is a permutation of “rgbcmy”.\n\nThe integers w and d denote the width (the length from the east end to the west end) and the depth (the length from the north end to the south end) of a bed. The unit is the length of a side of a square. You can assume that neither w nor d is greater than 30.\n\nEach character cij shows the color of a square in the bed. The characters c11 , cw1 , c1d and cwd correspond to the north-west corner, the north-east corner, the south-west corner and the south- east corner of the bed respectively. If cij is a letter, it indicates the color of the corresponding square. If cij is a #, the corresponding square is colored white and is the initial position of the cube.\n\nThe string v1v2v3v4v5v6 shows the order of colors of squares to visit. The cube should visit the squares colored v1, v2 , v3 , v4 , v5 and v6 in this order.\n\nThe end of the input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1286_C2. Madhouse (Hard version)", "description": "Input\n\nFirst line contains number n (1 ≤ n ≤ 100) — the length of the picked string.\n\nInteraction\n\nYou start the interaction by reading the number n.\n\nTo ask a query about a substring from l to r inclusively (1 ≤ l ≤ r ≤ n), you should output\n\n? l r\n\non a separate line. After this, all substrings of s[l..r] will be returned in random order, each substring exactly once. In every returned substring all characters will be randomly shuffled.\n\nIn the case, if you ask an incorrect query, ask more than 3 queries of the first type or there will be more than \\left⌈ 0.777(n+1)^2 \\right⌉ substrings returned in total, you will receive verdict Wrong answer.\n\nTo guess the string s, you should output\n\n! s\n\non a separate line.\n\nAfter printing each query, do not forget to flush the output. Otherwise, you will get Idleness limit exceeded. To flush the output, you can use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf you received - (dash) as an answer to any query, you need to terminate your program with exit code 0 (for example, by calling exit(0)). This means that there was an error in the interaction protocol. If you don't terminate with exit code 0, you can receive any unsuccessful verdict. \n\nHack format\n\nTo hack a solution, use the following format:\n\nThe first line should contain one integer n (1 ≤ n ≤ 100) — the length of the string, and the following line should contain the string s.\n\nExample\n\nInput\n\n\n4\n\na\naa\na\n\ncb\nb\nc\n\nc", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00769 Hierarchical Democracy", "description": "Input\n\nThe entire input looks like:\n\n> the number of datasets (=n)\n>  1st dataset\n>  2nd dataset\n>  …\n>  n-th dataset\n>\n\nThe number of datasets, n, is no more than 100.\n\nThe number of the eligible voters of each district and the part-whole relations among districts are denoted as follows.\n\n* An electoral district of the first stage is denoted as [c], where c is the number of the eligible voters of the district.\n* A district of the k-th stage (k > 1) is denoted as [d1d2…dm], where d1, d2, …, dm denote its sub-districts of the (k − 1)-th stage in this notation.\n\n\n\nFor instance, an electoral district of the first stage that has 123 eligible voters is denoted as [123]. A district of the second stage consisting of three sub-districts of the first stage that have 123, 4567, and 89 eligible voters, respectively, is denoted as [[123][4567][89]].\n\nEach dataset is a line that contains the character string denoting the district of the final stage in the aforementioned notation. You can assume the following.\n\n* The character string in each dataset does not include any characters except digits ('0', '1', …, '9') and square brackets ('[', ']'), and its length is between 11 and 10000, inclusive.\n* The number of the eligible voters of each electoral district of the first stage is between 3 and 9999, inclusive.\n\n\n\nThe number of stages is a nation-wide constant. So, for instance, [[[9][9][9]][9][9]] never appears in the input. [[[[9]]]] may not appear either since each district of the second or later stage must have multiple sub-districts of the previous stage.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01317 Mr. Rito Post Office", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> N M\n> x1 y1 t1 sl1\n> x2 y2 t2 sl2\n> ...\n> xM yM tM slM\n> R\n> z1 z2 ... zR\n>\n\nThe input items in the dataset are all non-negative integers. The input items in the line are separated by one blank.\n\nThe first line defines the size of the land and sea networks.\n\nN (2 ≤ N ≤ 200) is the number of towns or villages. Each town or village is assigned a unique number from 1 to N. M (1 ≤ M ≤ 10000) is the total number of land and sea routes.\n\nThe 2nd to 1 + M lines are descriptions of land or sea routes. xi and yi (1 ≤ xi, yi ≤ N) represent the town or village numbers at both ends. ti (1 ≤ ti ≤ 1000) represents the travel time of the land or sea route. sli is either'L'or'S', where L stands for land and S stands for sea.\n\nThere may be more than one land or sea route that directly connects two towns or villages. Each land or sea route is bidirectional, that is, it can move in either direction.\n\nR (1 ≤ R ≤ 1000) on the second line of M + represents the number of collection and delivery destinations that Mr. Toshito is in charge of. On the M + 3rd line, R numbers of the town or village number zi (1 ≤ zi ≤ N) of the collection / delivery destination are arranged in the order of collection / delivery.\n\nIn the initial state, both Mr. Toto and the ship exist in the port town z1. You can always move from the initial state to the destination town or village in some way.\n\nThe end of the input is indicated by a single line containing two zeros separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1287_E1. Madhouse (Easy version)", "description": "Input\n\nFirst line contains number n (1 ≤ n ≤ 100) — the length of the picked string.\n\nInteraction\n\nYou start the interaction by reading the number n.\n\nTo ask a query about a substring from l to r inclusively (1 ≤ l ≤ r ≤ n), you should output\n\n? l r\n\non a separate line. After this, all substrings of s[l..r] will be returned in random order, each substring exactly once. In every returned substring all characters will be randomly shuffled.\n\nIn the case, if you ask an incorrect query, ask more than 3 queries of the first type or there will be more than (n+1)^2 substrings returned in total, you will receive verdict Wrong answer.\n\nTo guess the string s, you should output\n\n! s\n\non a separate line.\n\nAfter printing each query, do not forget to flush the output. Otherwise, you will get Idleness limit exceeded. To flush the output, you can use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf you received - (dash) as an answer to any query, you need to terminate your program with exit code 0 (for example, by calling exit(0)). This means that there was an error in the interaction protocol. If you don't terminate with exit code 0, you can receive any unsuccessful verdict.\n\nHack format\n\nTo hack a solution, use the following format:\n\nThe first line should contain one integer n (1 ≤ n ≤ 100) — the length of the string, and the following line should contain the string s.\n\nExample\n\nInput\n\n\n4\n\na\naa\na\n\ncb\nb\nc\n\nc", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1286_C1. Madhouse (Easy version)", "description": "Input\n\nFirst line contains number n (1 ≤ n ≤ 100) — the length of the picked string.\n\nInteraction\n\nYou start the interaction by reading the number n.\n\nTo ask a query about a substring from l to r inclusively (1 ≤ l ≤ r ≤ n), you should output\n\n? l r\n\non a separate line. After this, all substrings of s[l..r] will be returned in random order, each substring exactly once. In every returned substring all characters will be randomly shuffled.\n\nIn the case, if you ask an incorrect query, ask more than 3 queries of the first type or there will be more than (n+1)^2 substrings returned in total, you will receive verdict Wrong answer.\n\nTo guess the string s, you should output\n\n! s\n\non a separate line.\n\nAfter printing each query, do not forget to flush the output. Otherwise, you will get Idleness limit exceeded. To flush the output, you can use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf you received - (dash) as an answer to any query, you need to terminate your program with exit code 0 (for example, by calling exit(0)). This means that there was an error in the interaction protocol. If you don't terminate with exit code 0, you can receive any unsuccessful verdict.\n\nHack format\n\nTo hack a solution, use the following format:\n\nThe first line should contain one integer n (1 ≤ n ≤ 100) — the length of the string, and the following line should contain the string s.\n\nExample\n\nInput\n\n\n4\n\na\naa\na\n\ncb\nb\nc\n\nc", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01319 Canal: Water Going Up and Down", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> NMK\n> X1 L1 F1 D1 UD1\n> X2 L2 F2 D2 UD2\n> ...\n> XN LN FN DN UDN\n> V1\n> V2\n> ...\n> VM\n>\n\nThe first line consists of three integers N, M, K. N (1 ≤ N ≤ 100) is the number of locks, M (1 ≤ M ≤ 100) is the number of ships, and K (2 ≤ K ≤ 1000) is the total length of the river in ACM.\n\nThe following N lines represent lock information. Each line consists of 5 integers Xi, Li, Fi, Di, UDi. Xi (1 ≤ Xi ≤ K -1) is the position of lock i from the western end of the ACM country (km), Li (1 ≤ Li ≤ 1000) is the volume of water required to switch the water level of lock i (L), Fi (1 ≤ Fi ≤ 1000) is the maximum water injection amount per unit time of lock i (L / h), Di (1 ≤ Di ≤ 1000) is the maximum drainage amount per unit time of lock i (L / h), UDi ( UDi ∈ {0, 1}) represents the hierarchical relationship between the water level on the west side and the water level on the east side of the lock i, respectively. When UDi is 0, the lock i means that the water level is higher on the east side than on the west side. On the other hand, when UDi is 1, lock i means that the water level is lower on the east side than on the west side.\n\nThe following M rows are given the integer Vi (1 ≤ Vi ≤ 1000), which represents the maximum speed (km / h) of the i-th vessel in each row.\n\nLocks are given in ascending order of Xi values. In addition, multiple locks will not be installed at the same position.\n\nThe end of the input consists of three zeros separated by spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01445 Mobile Network", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nN M\nu1 v1 p1\n...\nuM vM pM\n\n\nThe first line of each dataset contains two integers N (2 ≤ N ≤ 50) and M (0 ≤ M ≤ 500), which indicates the number of base stations and lines respectively. The following M lines describe the network structure. The i-th of them corresponds to the i-th network line and contains two integers ui and vi and a polynomial pi. ui and vi indicate the indices of base stations (1 ≤ ui, vi ≤ N); pi indicates the network bandwidth.\n\nEach polynomial has the form of:\n\naLxL + aL-1xL-1 + ... + a2x2 + a1x + a0\n\nwhere L (0 ≤ L ≤ 50) is the degree and ai's (0 ≤ i ≤ L, 0 ≤ ai ≤ 100) are the coefficients. In the input,\n\n* each term aixi (for i ≥ 2) is represented as <ai>x^<i>\n* the linear term (a1x) is represented as <a1>x;\n* the constant (a0) is represented just by digits;\n* these terms are given in the strictly decreasing order of the degrees and connected by a plus sign (\"+\");\n* just like the standard notations, the <ai> is omitted if ai = 1 for non-constant terms;\n* similarly, the entire term is omitted if ai = 0 for any terms; and\n* the polynomial representations contain no space or characters other than digits, \"x\", \"^\", and \"+\".\n\n\n\nFor example, 2x2 + 3x + 5 is represented as 2x^2+3x+5; 2x3 + x is represented as 2x^3+x, not 2x^3+0x^2+1x+0 or the like. No polynomial is a constant zero, i.e. the one with all the coefficients being zero.\n\nThe end of input is indicated by a line with two zeros. This line is not part of any dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "690_E1. Photographs (I)", "description": "Input\n\nThe first line of the input contains the number q of questions (1 ≤ q ≤ 220). After that, q questions follow, each of which in the format described below.\n\nThe first line of every question contains two space-separated integers h and w (1 ≤ h, w ≤ 600) – the height (number of rows) and width (number of columns) of the photograph. (Most photographs are roughly 200 × 300.) After this, h lines follow, each describing a single row of the picture. The picture is monochrome (in shades of grey). Its i-th row is described by w space-separated integers aij (j = 1, ..., w), where aij is the brightness of the corresponding pixel (0 ≤ aij < 256, where 0 is black and 255 is white).\n\nEach picture will be either a real-life photograph, or a real-life photograph which has been broken up into two pieces and rearranged. More precisely, in the latter case, the topmost <image> rows have been moved to the bottom of the picture. It is guaranteed that h is even.\n\nThere is only a single input file to be processed, called all.in, and it is downloadable from the online judge. You are also a given another input file, called sample.in, which contains the first 20 pictures from all.in; you are provided the correct answers for sample.in in sample.out. You are also given a directory easy_bmp, which contains the first 50 input photographs in the form of .bmp image files, as well as a directory easy_sample_original_bmp, which contains the first 20 images before rearrangement. Check the notes for the download links.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01804 Falling Block Puzzle", "description": "Input\n\nThe input consists of 100 or less datasets. Each dataset has the following form.\n\n> (Initial block height H) (Number of lumps to drop N)\n> (1st stage in the initial state)\n> ...\n> (H stage in the initial state)\n> (1st drop)\n> ...\n> (Nth drop)\n\nThe first line of each dataset specifies the initial block height H (1 ≤ H ≤ 10) and the number of lumps to drop N (1 ≤ N ≤ 3). Then, the information of each stage in the initial state is given in the following format.\n\n> c11 c12\n> c21 c22\n\ncij represents the information of each cell,'#' indicates that a block exists, and'.' Indicates that there is no block. It can be assumed that there are no blocks in all cells or no blocks in all cells for each of the first to H rows. Then, the information of each drop mass is given in the following format.\n\n> b111 b112\n> b121 b122\n> b211 b212\n> b221 b222\n\nAs in the initial state format,'#' indicates that a block exists, and'.' Indicates that there is no block. Each block contains at least one block. The blocks contained in the block may be touched only by the corners and sides, and are not necessarily connected by the surface.\n\nRefer to the figure below for the correspondence of the input subscripts of the initial state and block block.\n\n<image>\n\nThe end of the input is indicated by a single line of two zeros.\n\nThe figure below shows the first data set in the Sample Input shown later. In this dataset, one step can be erased by translating a block of blocks diagonally and then dropping them.\n\n<image>", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01146 Princess in Danger", "description": "Input\n\nThe input consists of multiple datasets. The first row of each dataset contains six non-negative integers N (2 ≤ N ≤ 100), M (1 ≤ M ≤ 100), L (0 ≤ L ≤ N-2), K, A (0 ≤). A <N) and H (0 ≤ H <N) are given. These are the number of towns, the time limit for refrigeration, the number of towns with freezing facilities, the number of roads connecting towns directly, the number representing the capital of the home country, and the hospital where the princess was transported. Represents the town number. The capital of the home country and the hospital where the princess was transported are different towns. It is assumed that the towns are assigned numbers from 0 to N-1. The following lines are given L non-negative integers separated by a single space. These represent the numbers of the towns where the freezing facilities are located. The capital of the home country and the hospital where the princess was transported are not included in this list, but it can be considered that there is a freezing facility. The following line K gives information on the roads connecting the towns. In the i-th line, three non-negative integers X, Y, and T are given separated by one space, which means that there is a direct connection between town X and town Y, and it takes time T to move. Represents that. This road is bidirectional. Also, there is at most one road that directly connects town X and town Y.\n\nThe input ends when N = M = L = K = A = H = 0, which is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1061_E. Politics", "description": "Input\n\nThe first line contains integers n, x and y (1 ≤ n ≤ 500, 1 ≤ x, y ≤ n) — the number of cities, the capital of the first candidate and the capital of the second candidate respectively.\n\nNext line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100 000) — the revenue gained if the port is constructed in the corresponding city.\n\nEach of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting edges between cities in the tree of the first candidate.\n\nEach of the next n - 1 lines contains integers u'_i and v'_i (1 ≤ u'_i, v'_i ≤ n, u'_i ≠ v'_i), denoting edges between cities in the tree of the second candidate.\n\nNext line contains an integer q_1 (1 ≤ q_1 ≤ n), denoting the number of demands of the first candidate.\n\nEach of the next q_1 lines contains two integers k and x (1 ≤ k ≤ n, 1 ≤ x ≤ n) — the city number and the number of ports in its subtree.\n\nNext line contains an integer q_2 (1 ≤ q_2 ≤ n), denoting the number of demands of the second candidate.\n\nEach of the next q_2 lines contain two integers k and x (1 ≤ k ≤ n, 1 ≤ x ≤ n) — the city number and the number of ports in its subtree.\n\nIt is guaranteed, that given edges correspond to valid trees, each candidate has given demand about each city at most once and that each candidate has specified the port demands for the capital of his choice. That is, the city x is always given in demands of the first candidate and city y is always given in the demands of the second candidate.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01128 Railroad Conflict", "description": "Input\n\nThe first line of input contains a single positive integer, which represents the number of datasets. Each dataset is given in the following format.\n\n> xa ya xb yb\n> n\n> xs1 ys1 xt1 yt1 o1 l1\n> xs2 ys2 xt2 yt2 o2 l2\n> ...\n> xsn ysn xtn ytn on ln\n>\n\nHowever, (xa, ya) and (xb, yb) represent the coordinates of station A and station B, respectively. N is a positive integer less than or equal to 100 that represents the number of existing routes. (xsi, ysi) and (ysi, yti) represent the coordinates of the start and end points of the i-th existing line. oi is an integer representing the owner of the i-th existing line. This is either 1 or 0, where 1 indicates that the route is owned by the company and 0 indicates that the route is owned by another company. li is an integer that indicates whether the i-th existing line is elevated or underground. This is also either 1 or 0, where 1 indicates that the line is elevated and 0 indicates that it is underground.\n\nThe x and y coordinate values ​​that appear during input range from -10000 to 10000 (both ends are included in the range). In addition, in each data set, it may be assumed that the following conditions are satisfied for all routes including new routes. Here, when two points are very close, it means that the distance between the two points is 10-9 or less.\n\n* There can be no other intersection very close to one.\n* No other line runs very close to the end of one line.\n* Part or all of the two lines do not overlap.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00545 Walking in JOI Kingdom", "description": "input\n\nThe input consists of 1 + N + Q lines.\n\nOn the first line, three integers N, T, Q (1 ≤ N ≤ 100000 (= 105), 0 ≤ T ≤ 1018, 1 ≤ Q ≤ 1000, 1 ≤ Q ≤ N) are written separated by blanks. ing. This means that there are N houses in JOI country, and we want to know the position of Q important people T seconds after the king issues the order.\n\nTwo integers Ai and Di (-1018 ≤ Ai ≤ 1018, Ai is a non-zero even number, 1 ≤ Di ≤ 2) are written on the i-th line of the following N lines, separated by blanks. Ai is an even number representing the position of house i. For all i (1 ≤ i ≤ N-1), Ai <Ai + 1 is satisfied. Di indicates the direction in which the national i starts walking after the command is issued. When Di = 1, national i starts walking eastward. When Di = 2, national i starts walking westward.\n\nThe integer Xi (1 ≤ Xi ≤ N) is written on the i-th line of the following Q lines. This means that the i-th important person lives in the house Xi. For all i (1 ≤ i ≤ Q-1), Xi <Xi + 1 is satisfied.\n\nOf the five input data given, input 1 satisfies N ≤ 100 and T ≤ 10000. In addition, input 2 satisfies N ≤ 5000. Also, at input 3, there is a certain integer M (1 ≤ M ≤ N-1), Di = 1 for all i (1 ≤ i ≤ M), and for all j (M + 1 ≤ j ≤ N). Satisfy Dj = 2. Also, for inputs 1, 2, and 3, the absolute value of the integer given to the input does not exceed 1000000000 (= 109). Note that for inputs 4 and 5, the given integer does not fall within the range of 32-bit signed integers.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p03978 Kyoto University Programming Contest 2016 - Long Blackboard", "description": "Input\n\nThe first input is given in the following format:\n\n\nN\n\n\nN (1 \\leq N \\leq 100) is an integer that represents the length of the blackboard.\n\nAfter this input value, your program must print search queries. A search query has the following format.\n\n\ns_1\ns_2\n\n\nHere, s_1 represents the upper part of the blackboard and s_2 represents the lower. `#` in s_1 and s_2 represents the cell is already used and `.` represents the cell is still unused. The lengths of s_1 and s_2 are arbitrary, but they must be the same. Make sure to insert a line break at the end of the lines.\n\nEvery time your program prints a search query, a string that represents the search result of the device is returned in the followin format.\n\n\nr\n\n\nr is either `T` or `F` . The meaning of each character is as follows.\n\n* `T` represents that the sub-blackboard that corresponds to the search query exists in the blackboard.\n* `F` represents that the sub-blackboard that corresponds to the search query does not exist in the blackboard.\n\n\n\nIf the search query equals to the whole blackboard or the number of the search queries exceeds the limit, string `end` is given instead of r . Once you receive this string, exit your program immediately. If your program prints the whole blackboard as a search query before exceedin the limit, it is judged as Accepted. Note that the search query that represents the whole blackboard is also counted as the number of search queries.\n\nExample\n\nInput\n\n\n\n\nOutput", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00833 Color the Map", "description": "Input\n\nThe input consists of multiple map data. Each map data starts with a line containing the total number of territories n, followed by the data for those territories. n is a positive integer not more than 100. The data for a territory with m vertices has the following format:\n\n\nString\nx1 y1\nx2 y2\n...\nxm ym\n-1\n\n\n“String” (a sequence of alphanumerical characters) gives the name of the country it belongs to. A country name has at least one character and never has more than twenty. When a country has multiple territories, its name appears in each of them.\n\nRemaining lines represent the vertices of the territory. A vertex data line has a pair of nonneg- ative integers which represent the x- and y-coordinates of a vertex. x- and y-coordinates are separated by a single space, and y-coordinate is immediately followed by a newline. Edges of the territory are obtained by connecting vertices given in two adjacent vertex data lines, and byconnecting vertices given in the last and the first vertex data lines. None of x- and y-coordinates exceeds 1000. Finally, -1 in a line marks the end of vertex data lines. The number of vertices m does not exceed 100.\n\nYou may assume that the contours of polygons are simple, i.e. they do not cross nor touch themselves. No two polygons share a region of non-zero area. The number of countries in a map does not exceed 10.\n\nThe last map data is followed by a line containing only a zero, marking the end of the input data.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "69_C. Game", "description": "Input\n\nThe first line has 4 natural numbers: k (1 ≤ k ≤ 100) — the number of Kostya's allies, n (1 ≤ n ≤ 50) — the number of basic artifacts, m (0 ≤ m ≤ 50) — the number of composite artifacts, q (1 ≤ q ≤ 500) — the number of his friends' purchases. The following n lines contain the names of basic artifacts. After them m lines contain the descriptions of composite artifacts in the following format:\n\n<Art. Name>: <Art. №1> <Art. №1 Number>, <Art. №2> <Art. №2 Number>, ... <Art. №X> <Art. №Х Number>\n\nAll the numbers are natural numbers not exceeding 100 (1 ≤ X ≤ n).\n\nThe names of all artifacts are different, they are composed of lowercase Latin letters, and the length of each name is from 1 to 100 characters inclusive. All the words in the format of the description of a composite artifact are separated by exactly one space. It is guaranteed that all components of the new artifact are different and have already been met in the input data as the names of basic artifacts. \n\nNext, each of the following q lines is characterized by the number ai, the number of a friend who has bought the artifact (1 ≤ ai ≤ k), and the name of the purchased basic artifact. Let's assume that the backpacks of the heroes are infinitely large and any artifact bought later can fit in there.\n\nIt is guaranteed that after the i-th purchase no more than one opportunity to collect the composite artifact appears. If such an opportunity arose, the hero must take advantage of it.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01679 SIRO Challenge", "description": "Input\n\nThe input is a sequence of datasets. The number of the datasets does not exceed $100$. Each dataset is formatted as follows:\n\n> $n$ $m$ $l$ $s$ $t$\n> $a_1$ $b_1$ $c_1$\n> :\n> :\n> $a_m$ $b_m$ $c_m$\n> $j_1$ $e_1$\n> :\n> :\n> $j_l$ $e_l$\n\nThe first line of each dataset contains five integers:\n\n* $n$ for the number of stations,\n\n* $m$ for the number of directly connected pairs of stations,\n\n* $l$ for the number of SIRO restaurants,\n\n* $s$ for the starting-point station, and\n\n* $t$ for the time limit for Jiro.\n\n\n\n\nEach of the following $m$ lines contains three integers:\n\n* $a_i$ and $b_i$ for the connected stations, and\n\n* $c_i$ for the time it takes to move between the two stations.\n\n\n\n\nEach of the following $l$ lines contains two integers:\n\n* $j_i$ for the station where a SIRO restaurant is located, and\n\n* $e_i$ for the time it takes for Jiro to eat at the restaurant.\n\n\n\n\nThe end of the input is indicated by a line with five zeros, which is not included in the datasets.\n\nThe datasets satisfy the following constraints:\n\n* $2 \\le n \\le 300$\n\n* $1 \\le m \\le 5{,}000$\n\n* $1 \\le l \\le 16$\n\n* $1 \\le s \\le n$\n\n* $1 \\le t \\le 100{,}000$\n\n* $1 \\le a_i, b_i \\le n$\n\n* $1 \\le c_i \\le 1{,}000$\n\n* $1 \\le j_i \\le n$\n\n* $1 \\le e_i \\le 15$\n\n* $s \\ne j_i$\n\n* $j_i$'s are distinct.\n\n* $a_i \\ne b_i$\n\n* $(a_i, b_i) \\ne (a_j, b_j)$ and $(a_i, b_i) \\ne (b_j, a_j)$ for any $i \\ne j$\n\n\n\n\nNote that there may be some stations not reachable from the starting point $s$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01451 Roads on Towns", "description": "Input\n\nNA NB\nxA, 1 yA, 1\nxA, 2 yA, 2\n..\n..\n..\nxA, NA yA, NA\nxB, 1 yB, 1\nxB, 2 yB, 2\n..\n..\n..\nxB, NB yB, NB\n\n\nThe integer NA (2 ≤ NA ≤ 1,000) and the integer NB (2 ≤ NB ≤ 1,000) are written on the first line of the input, separated by blanks. This means that there are NA towns where the Totata tribe lives and NB towns where the Tutete tribe lives in the Kingdom of Neva. In the initial state, no road has been built anywhere.\n\nThe following NA line contains the integers xA, i (-10,000 ≤ xA, i ≤ 10,000) and the integers yA, i (-10,000 ≤ yA, i ≤ 10,000), separated by blanks. The geography of the Kingdom of Neva is represented by a two-dimensional Cartesian coordinate plane, and the integers xA, i and yA, i written on the 1 + i line are the position coordinates of the i-th city where the Totata tribe lives (xA, i, yA). , I). (xA, 1, yA, 1) and (xA, 2, yA, 2) are the coordinates of the two cities to be connected.\n\nOn the following NB line, the integers xB, i (-10,000 ≤ xB, i ≤ 10,000) and the integers yB, i (-10,000 ≤ yB, i ≤ 10,000) are written separated by blanks. The integers xB, i and yB, i written on the 1 + NA + i line indicate that the position coordinates of the i-th city where the Ytterbium live are (xB, i, yB, i). (xB, 1, yB, 1) and (xB, 2, yB, 2) are the coordinates of the two cities to be connected.\n\nIt can be assumed that the coordinates of the two cities are different and that none of the three cities are on the same straight line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00449 Boat Travel", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nTwo integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 5000) are written on the first line of the input. This means that the number of islands is n and the input consists of k + 1 lines. On the first line of i + (1 ≤ i ≤ k), three or four integers are written separated by blanks.\n\n* When the first number is 0, this line represents the customer's order form.\nThree integers 0, a, b (1 ≤ a ≤ n, 1 ≤ b ≤ n, a ≠ b) are written on this line, separated by blanks. This means that the customer has sent an order form with island a as the starting point and island b as the destination.\n* When the first number is 1, this line represents the operation information of the newly started vessel.\nThis line contains four integers 1, c, d, e (1 ≤ c ≤ n, 1 ≤ d ≤ n, c ≠ d, 1 ≤ e ≤ 1000000).\nThis means that a vessel that goes back and forth between island c and island d has newly started operation, and the fare from island c to island d and the fare from island d to island c are both e.\nThe order form after this line must be answered in consideration of this vessel.\n\n\n\nAt the first stage, it is assumed that no vessel is in operation. Of the inputs, the number of lines representing ship operation information is 1000 or less. Also note that multiple vessels may operate between islands.\n\nWhen both n and k are 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "7_E. Defining Macros", "description": "Input\n\nThe first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.\n\nThen there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:\n\n#define name expression\n\nwhere\n\n  * name — the macro name, \n  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. \n\n\n\nAll the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.\n\nThen, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.\n\nThe input lines may contain any number of spaces anywhere, providing these spaces do not break the word \"define\" or the names of constructions and variables. In particular, there can be any number of spaces before and after the \"#\" symbol.\n\nThe length of any line from the input file does not exceed 100 characters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00830 Pathological Paths", "description": "Input\n\nThe input consists of multiple datasets. The first line of each dataset contains two positive integers N and M, both of which are less than or equal to 100 and are separated by a single space character.\n\nThe rest of the dataset consists of N + 2M lines, each of which contains a syntactically correct pathname of at most 100 characters. You may assume that each path segment enclosed by two slashes is of length at least one. In other words, two consecutive slashes cannot occur in any pathname. Each path segment does not include anything other than alphanumerical characters (i.e. ‘a’-‘z’, ‘A’-‘Z’, and ‘0’-‘9’) and periods (‘.’).\n\nThe first N pathnames enumerate all the web pages (ordinary files). Every existing directory name occurs at least once in these pathnames. You can assume that these pathnames do not include any path segments consisting solely of single or double periods and that the last path segments are ordinary file names. Therefore, you do not have to worry about special rules for index.html and single/double periods. You can also assume that no two of the N pathnames point to the same page.\n\nEach of the following M pairs of pathnames is a question: do the two pathnames point to the same web page? These pathnames may include single or double periods and may be terminated by a slash. They may include names that do not correspond to existing directories or ordinary files.\n\nTwo zeros in a line indicate the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01926 Game Balance", "description": "Input\n\n> The input consists of multiple datasets. The maximum number of datasets does not exceed 50. Each dataset is represented in the following format.\n\n> N M\n> s1 s2 ... sN\n>\n\nThe first line consists of two integers N and M separated by blanks. N is the number of types of enemy monsters prepared, M is the minimum number of battles required to clear the game, and 1 ≤ N ≤ 100,000, 2 ≤ M ≤ 1,000,000.\n\n> The second line consists of N integers s1, s2, ..., sN separated by blanks, and represents the strength of each of the N types of enemy monsters. Each si satisfies 1 ≤ si ≤ 1,000,000 and si <si + 1 (1 ≤ i ≤ N-1).\n\n> The end of the input is represented by a line of two zeros separated by a blank.\n\n> ### Output\n\n> For each dataset, output the maximum value Xmax of the parameter X that requires M or more battles to clear the game as an integer. In the case of a test case where the game can be cleared in less than M battles no matter how X is set, or the game cannot be cleared, output a line consisting of only -1.\n\n> ### Sample Input\n\n\n3 4\n1 5 9\n1 2\n1\n2 10\n1 1000000\ntwenty four\n1 10\n0 0\n\n\nOutput for Sample Input\n\n\n3\n-1\n499996\nFour\n\nIn the second test case, setting X = 1 allows you to clear the game in one battle. In this case, the number of battles required is M or more, and X cannot be set so that the game can be cleared. Therefore, it outputs a line consisting of only -1.\n\n\n\n\n\nExample\n\nInput\n\n3 4\n1 5 9\n1 2\n1\n2 10\n1 1000000\n2 4\n1 10\n0 0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "906_A. Shockers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of actions Valentin did.\n\nThe next n lines contain descriptions of his actions, each line contains description of one action. Each action can be of one of three types: \n\n  1. Valentin pronounced some word and didn't get an electric shock. This action is described by the string \". w\" (without quotes), in which \".\" is a dot (ASCII-code 46), and w is the word that Valentin said. \n  2. Valentin pronounced some word and got an electric shock. This action is described by the string \"! w\" (without quotes), in which \"!\" is an exclamation mark (ASCII-code 33), and w is the word that Valentin said. \n  3. Valentin made a guess about the selected letter. This action is described by the string \"? s\" (without quotes), in which \"?\" is a question mark (ASCII-code 63), and s is the guess — a lowercase English letter. \n\n\n\nAll words consist only of lowercase English letters. The total length of all words does not exceed 105.\n\nIt is guaranteed that last action is a guess about the selected letter. Also, it is guaranteed that Valentin didn't make correct guesses about the selected letter before the last action. Moreover, it's guaranteed that if Valentin got an electric shock after pronouncing some word, then it contains the selected letter; and also if Valentin didn't get an electric shock after pronouncing some word, then it does not contain the selected letter.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "907_C. Shockers", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of actions Valentin did.\n\nThe next n lines contain descriptions of his actions, each line contains description of one action. Each action can be of one of three types: \n\n  1. Valentin pronounced some word and didn't get an electric shock. This action is described by the string \". w\" (without quotes), in which \".\" is a dot (ASCII-code 46), and w is the word that Valentin said. \n  2. Valentin pronounced some word and got an electric shock. This action is described by the string \"! w\" (without quotes), in which \"!\" is an exclamation mark (ASCII-code 33), and w is the word that Valentin said. \n  3. Valentin made a guess about the selected letter. This action is described by the string \"? s\" (without quotes), in which \"?\" is a question mark (ASCII-code 63), and s is the guess — a lowercase English letter. \n\n\n\nAll words consist only of lowercase English letters. The total length of all words does not exceed 105.\n\nIt is guaranteed that last action is a guess about the selected letter. Also, it is guaranteed that Valentin didn't make correct guesses about the selected letter before the last action. Moreover, it's guaranteed that if Valentin got an electric shock after pronouncing some word, then it contains the selected letter; and also if Valentin didn't get an electric shock after pronouncing some word, then it does not contain the selected letter.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1466_I. The Riddle of the Sphinx", "description": "Input\n\nThe first line contains two integers n and b (1 ≤ n, b ≤ 200). The remaining parts of the input will be given throughout the interaction process.\n\nInteraction\n\nIn each round your program must output a single line with an integer i (0 ≤ i ≤ n) and a binary string of length exactly b denoting the binary representation of y (most significant bit first).\n\nIf i > 0, this line encodes the question: Is a_i bigger than y?. There should be at most 3 ⋅ (n+b) such lines; after each of them, the interactor will print yes or no in a single line.\n\nIf i = 0, this is the last round of interaction, after which your program should terminate, and y should be the maximal value among the elements of Sphinx's array. Note that this round does not count to the query limit.\n\nNote that the interactor is adaptive.\n\nAfter printing a query, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages.\n\n\n\nIf your solution does not correctly follow the interaction guideline above, it may receive an arbitrary verdict. Otherwise, your program will receive the Wrong Answer judgment if it reports the wrong maximum.\n\nExamples\n\nInput\n\n\n5 3\n\nyes\n\nno\n\nno\n\nno\n\nno\n\nyes", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01568 Repairing", "description": "Input\n\nA data set has the following format:\n\n> N M\n>  xs1 ys1 xd1 yd1\n>  ...\n>  xsN ysN xdN ydN\n>  xv1 yv1\n>  ...\n>  xvM yvM\n>  xb yb\n>  xc yc\n>\n\nThe first line of the input contains two integers, N (1 ≤ N ≤ 300) and M (0 ≤ M ≤ 1,000) that indicate the number of water pipe segments and stop valves. The following N lines describe the end points of water pipe segments. The i-th line contains four integers, xsi, ysi, xdi and ydi that indicate the pair of coordinates of end points of i-th water pipe segment. The following M lines describe the points of stop valves. The i-th line contains two integers, xvi and yvi that indicate the coordinate of end points of i-th stop valve. The following line contains two integers, xb and yb that indicate the coordinate of the source point. The last line contains two integers, xc and yc that indicate the coordinate of the repairing point.\n\nYou may assume that any absolute values of coordinate integers are less than 1,000 (inclusive.) You may also assume each of the stop valves, the source point and the repairing point is always on one of water pipe segments and that that each pair among the stop valves, the source point and the repairing point are different. And, there is not more than one intersection between each pair of water pipe segments. Finally, the water pipe network is connected, that is, all the water pipes are received water supply initially.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00768 ICPC Ranking", "description": "Input\n\nThe input is a sequence of datasets each in the following format. The last dataset is followed by a line with four zeros.\n\n> M T P R\n>  m1 t1 p1 j1\n>  m2 t2 p2 j2\n>  .....\n>  mR tR pR jR\n>\n\nThe first line of a dataset contains four integers M, T, P, and R. M is the duration of the contest. T is the number of teams. P is the number of problems. R is the number of submission records. The relations 120 ≤ M ≤ 300, 1 ≤ T ≤ 50, 1 ≤ P ≤ 10, and 0 ≤ R ≤ 2000 hold for these values. Each team is assigned a team number between 1 and T, inclusive. Each problem is assigned a problem number between 1 and P, inclusive.\n\nEach of the following R lines contains a submission record with four integers mk, tk, pk, and jk (1 ≤ k ≤ R). mk is the elapsed time. tk is the team number. pk is the problem number. jk is the judgment (0 means correct, and other values mean incorrect). The relations 0 ≤ mk ≤ M−1, 1 ≤ tk ≤ T, 1 ≤ pk ≤ P, and 0 ≤ jk ≤ 10 hold for these values.\n\nThe elapsed time fields are rounded off to the nearest minute.\n\nSubmission records are given in the order of submission. Therefore, if i < j, the i-th submission is done before the j-th submission (mi ≤ mj). In some cases, you can determine the ranking of two teams with a difference less than a minute, by using this fact. However, such a fact is never used in the team ranking. Teams are ranked only using time information in minutes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00903 Round Trip", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\nn m\nd2 e2\nd3 e3\n.\n.\n.\ndn-1 en-1\na1 b1 c1\na2 b2 c2\n.\n.\n.\nam bm cm\n\nEvery input item in a dataset is a non-negative integer. Input items in a line are separated by a space.\n\nn is the number of towns in the network. m is the number of (one-way) roads. You can assume the inequalities 2 ≤ n ≤ 50 and 0 ≤ m ≤ n(n−1) hold. Towns are numbered from 1 to n, inclusive. The town 1 is Jim's hometown, and the town n is the destination town.\n\ndi is the visa fee of the town i, and ei is its altitude. You can assume 1 ≤ di ≤ 1000 and 1≤ei ≤ 999 for 2≤i≤n−1. The towns 1 and n do not impose visa fee. The altitude of the town 1 is 0, and that of the town n is 1000. Multiple towns may have the same altitude, but you can assume that there are no more than 10 towns with the same altitude.\n\nThe j-th road is from the town aj to bj with the cost cj (1 ≤ j ≤ m). You can assume 1 ≤ aj ≤ n, 1 ≤ bj ≤ n, and 1 ≤ cj ≤ 1000. You can directly go from aj to bj, but not from bj to aj unless a road from bj to aj is separately given. There are no two roads connecting the same pair of towns towards the same direction, that is, for any i and j such that i ≠ j, ai ≠ aj or bi ≠ bj. There are no roads connecting a town to itself, that is, for any j, aj ≠ bj.\n\nThe last dataset is followed by a line containing two zeros (separated by a space).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00463 Amidakuji", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nOn the first line, four integers n, m, h, k are written separated by blanks. N (2 ≤ n ≤ 1000) is the number of vertical bars, and m (1 ≤ m ≤ 100000) is the horizontal bar. H (2 ≤ h ≤ 1000) represents the length of the vertical bar, and k (1 ≤ k ≤ n) represents the number of vertical bars you choose.\n\nThe following n lines contain the score written at the bottom of the vertical bar. The first line (1 ≤ i ≤ n) contains the positive integer si. Also, s1 + s2 + ... + sn ≤ 2000000000 = 2 × 109.\n\nThe following m lines indicate the position of the horizontal bar. The horizontal bars are numbered from 1 to m. The first line (1 ≤ i ≤ m) is the horizontal bar i. The two integers ai, bi (1 ≤ ai ≤ n --1, 1 ≤ bi ≤ h --1) representing the position are separated by blanks, and the horizontal bar i connects the vertical bar ai and the vertical bar ai + 1. , Indicates that the distance from the top edge of the horizontal bar i is bi. However, no two horizontal bars share an endpoint.\n\nOf the scoring data, 20% of the points will have the lowest score for Mr. J if the horizontal bar is not deleted. Also, 30% of the points will satisfy n ≤ 20, m ≤ 30, h ≤ 10. 60% of the points are m ≤ 1000.\n\nThe end of the input is indicated by a line containing four zeros. The number of datasets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "398_D. Instant Messanger", "description": "Input\n\nThe first line contains three space-separated integers n, m and q (1 ≤ n ≤ 50000; 1 ≤ m ≤ 150000; 1 ≤ q ≤ 250000) — the number of users, the number of pairs of friends, and the number of queries.\n\nThe second line contains an integer o (1 ≤ o ≤ n) — the number of online users at the beginning. The third line contains o space-separated integers x1, x2, ..., xo (1 ≤ xi ≤ n) — the ids of the online users. It is guaranteed that these values are distinct.\n\nEach of the next m lines contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — the ids of two users who are friends at the beginning. It is guaranteed there are no multiple friendship given in the input. Note that the friendship is bidirectional.\n\nNext q lines describe the q queries in the format:\n\n  * \"O u\" (1 ≤ u ≤ n) : Call online(u). It is guaranteed that user u was offline just before the function call. \n  * \"F u\" (1 ≤ u ≤ n) : Call offline(u). It is guaranteed that user u was online just before the function call. \n  * \"A u v\" (1 ≤ u, v ≤ n; u ≠ v) : Call add_friend(u, v). It is guaranteed that these two users weren't friends just before the function call. \n  * \"D u v\" (1 ≤ u, v ≤ n; u ≠ v) : Call del_friend(u, v). It is guaranteed that these two users were friends just before the function call. \n  * \"C u\" (1 ≤ u ≤ n) : Call count_online_friends(u) and print the result in a single line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00719 Traveling by Stagecoach", "description": "Input\n\nThe input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).\n\n> n m p a b\n>  t1 t2 ... tn\n>  x1 y1 z1\n>  x2 y2 z2\n>  ...\n>  xp yp zp\n>\n\nEvery input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.\n\nn is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.\n\na is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.\n\nThe second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1<=i<=n). You can assume that the number of horses is between 1 and 10.\n\nThe following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1<=i<=p). You can assume that the distance is between 1 and 100.\n\nNo two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01110 Origami", "description": "Input\n\nThe input consists of at most 1000 datasets, each in the following format.\n\n> n m t p\n>  d1 c1\n>  ...\n>  dt ct\n>  x1 y1\n>  ...\n>  xp yp\n>\n\nn and m are the width and the height, respectively, of a rectangular piece of paper. They are positive integers at most 32. t and p are the numbers of folding and punching instructions, respectively. They are positive integers at most 20. The pair of di and ci gives the i-th folding instruction as follows:\n\n* di is either 1 or 2.\n* ci is a positive integer.\n* If di is 1, the left-hand side of the vertical folding line that passes at ci right to the left boundary is folded onto the right-hand side.\n* If di is 2, the lower side of the horizontal folding line that passes at ci above the lower boundary is folded onto the upper side.\n\nAfter performing the first i−1 folding instructions, if di is 1, the width of the shape is greater than ci. Otherwise the height is greater than ci. (xi + 1/2, yi + 1/2) gives the coordinates of the point where the i-th punching instruction is performed. The origin (0, 0) is at the bottom left of the finally obtained shape. xi and yi are both non-negative integers and they are less than the width and the height, respectively, of the shape. You can assume that no two punching instructions punch holes at the same location.\n\nThe end of the input is indicated by a line containing four zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01329 Stolen Jewel", "description": "Input\n\nThe inputs include the shape of the underground warehouse and the prohibition pattern.\n\nThe shape of the underground warehouse is represented as follows. First, two integers N and M are given. It means the number of rows and columns of the underground warehouse, respectively. (1 ≤ N, M ≤ 50)\n\nSubsequently, N lines of character strings consisting of M characters are given. The characters included and their meanings are as follows.\n\nCharacter | Meaning\n--- | ---\nS | The entrance to the underground warehouse. Only one is always included per underground warehouse.\nG | Magic circle. Only one is always included per underground warehouse.\n. | Aisle. You can pass (if you don't take the prohibition pattern).\n| Wall. You can't go through the wall.\n\nNext, a prohibition pattern is given. The prohibition pattern is expressed as follows. First, one integer P is given. Means the number of prohibited patterns. (0 ≤ P ≤ 10)\n\nSubsequently, a character string meaning a prohibition pattern is given over P lines. The characters included in the prohibited pattern and their meanings are as follows.\n\nCharacter | Meaning\n--- | ---\nU | ↑ move.\nMove R |->.\nD | ↓ movement.\nL | <-Move.\n\nThe length of the prohibited pattern is 1 or more and 10 or less. One prohibition pattern may be a substring of another prohibition pattern. It may also include the same prohibition pattern.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00714 Water Tank", "description": "Input\n\nThe input consists of multiple data sets. D is the number of the data sets.\n\nD\nDataSet1\nDataSet2\n...\nDataSetD\n\n\nThe format of each data set (DataSetd , 1 <= d <= D) is as follows.\n\nN\nB1 H1\nB2 H2\n...\nBN HN\nM\nF1 A1\nF2 A2\n...\nFM AM\nL\nP1 T1\nP2 T2\n...\nPL TL\n\n\nEach line in the data set contains one or two integers.\n\nN is the number of the boards he sets in the tank . Bi and Hi are the x-position (cm) and the height (cm) of the i-th board, where 1 <= i <= N .\n\nHi s differ from one another. You may assume the following.\n\n> 0 < N < 10 ,\n>  0 < B1 < B2 < ... < BN < 100 ,\n>  0 < H1 < 50 , 0 < H2 < 50 , ..., 0 < HN < 50.\n\nM is the number of the faucets above the tank . Fj and Aj are the x-position (cm) and the amount of water flow (cm3/second) of the j-th faucet , where 1 <= j <= M .\n\nThere is no faucet just above any boards . Namely, none of Fj is equal to Bi .\n\nYou may assume the following .\n\n> 0 < M <10 ,\n>  0 < F1 < F2 < ... < FM < 100 ,\n>  0 < A1 < 100, 0 < A2 < 100, ... 0 < AM < 100.\n\nL is the number of observation time and location. Pk is the x-position (cm) of the k-th observation point. Tk is the k-th observation time in seconds from the beginning.\n\nNone of Pk is equal to Bi .\n\nYou may assume the following .\n\n> 0 < L < 10 ,\n>  0 < P1 < 100, 0 < P2 < 100, ..., 0 < PL < 100 ,\n>  0 < T1 < 1000000, 0 < T2 < 1000000, ... , 0 < TL < 1000000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00471 Reindeer with no sense of direction", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nEach dataset has n + 1 rows. On the first line, the integer m (1 ≤ m ≤ 10) and the integer n (1 ≤ n ≤ 10) are written separated by a space. In each line from the 2nd line to the n + 1th line, m of 0, 1, or 2 are written, separated by a blank, and each represents the state of each section. If we write the i-th section from the north and the j-th section from the west as (i, j) (1 ≤ i ≤ n, 1 ≤ j ≤ m), the j-th value on the i + 1 line is If the lot (i, j) is a vacant lot, it will be 0, if it is a house, it will be 1, and if it is a church, it will be 2. The number of churches is 1, and the number of houses is 1 or more and 23 or less. However, in the input data for scoring, the number of directions to be distributed does not exceed 2000000.\n\nWhen both m and n are 0, it indicates the end of input. The number of data sets does not exceed 5.\n\nInput / output example\n\nInput example\n\n\n3 2\n1 0 1\n1 0 2\n3 3\n1 1 1\n1 0 1\n1 1 2\n0 0\n\n\nOutput example\n\n\n2\n6\n\n\n<image>\n\n\nFigure: All 6 directions to the second input example (numbers indicate the order of distribution)\n\nThe above question sentences and the data used for the automatic referee are the question sentences created and published by the Japan Committee for Information Olympics and the test data for scoring.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00268 Cats Going Straight II", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format.\n\n\nC W\nx1 y1\nx2 y2\n::\nxC yC\ns1 t1\ns2 t2\n::\nsW tW\n\n\nThe numbers given on each line are separated by a single space.\n\nThe number of columns C (3 ≤ C ≤ 100) and the number of walls W (3 ≤ W ≤ 300) are given in the first line. The coordinates of the column are given in the following C line. xi (-1000 ≤ xi ≤ 1000) is the x-coordinate of the i-th column, and yi (-1000 ≤ yi ≤ 1000) is the y-coordinate of the i-th column. Each pillar is assigned a number from 1 to C. The wall information is given in the following W line.\n\nsi (1 ≤ si ≤ C) and ti (1 ≤ ti ≤ C) indicate the number of columns that support both ends of the wall.\n\nThe input may be considered to satisfy the following conditions.\n\n* Different pillars do not occupy the same position.\n* Different walls do not overlap or intersect except on pillars.\n* One pillar supports two or more walls.\n* Wall length is greater than 0.\n* Pillars are only on both ends of the wall. That is, the pillar is never in the middle of the wall.\n* The wall separates two different rooms, or the room and the outside.\n* When you choose any two different pillars, you can reach each other by following the wall.\n\n\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01400 Seishun 18 Kippu", "description": "Input\n\nA sequence of multiple datasets is given as input. The number of datasets is guaranteed to be 50 or less. Each dataset has the following format:\n\n\nn m\ns p g\na1 b1 d1 t1\n...\nai bi di ti\n...\nam bm dm tm\n\n\nThe integers n (3 ≤ n ≤ 500) and m (2 ≤ m ≤ 5000) represent the total number of stations and the number of tracks between each station, respectively. s, p, and g are character strings that indicate the location of the station where sirokurostone rides, the station where a person who likes 2D rides, and the station where Atsu University is located, respectively. s, p, and g are different character strings.\n\nThe following m line represents the information between stations. ai and bi are character strings indicating stations connected by railroad tracks. ai and bi can go back and forth in both directions. ai and bi never match. The integer di (40 ≤ di ≤ 10000) represents the distance between ai and bi. di is guaranteed to be a multiple of 40. The integer ti (0 ≤ ti ≤ 20) indicates the estimated delay time between ai and bi.\n\nThe character string representing the station name is represented by a character string of 20 characters or less consisting of all lowercase and uppercase letters of the alphabet. There is at most one track between stations.\n\nThe end of the input is represented by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01689 Dowsing Machine", "description": "Input\n\nInput can be given in the following format.\n\n\nh w d n\nt_ {0,0} t_ {0,1} ... t_ {0, w-1}\n...\nt_ {h-1,0} t_ {h-1,1} ... t_ {h-1, w-1}\nr_1 r_2 ... r_d\nx_1 y_1 s_1\n...\nx_n y_n s_n\n\nThe first line consists of four integers, each of which has a vertical width h, a horizontal width w, the number of squares d, and the number of times n using the D machine, separated by one blank character. In the following h line, the character of each cell is given. The character t_ {i, j} at the j + 1th (0 \\ leq j <w) on the second line (0 \\ leq i <h) of i + represents the character of the square (j, i). In the h + 2nd line, the radius r_k (1 \\ leq k \\ leq d) of each square is given by one space delimiter. The next n lines give the reaction of the D machine. In line l + h + 3 (1 \\ leq l \\ leq n), x_l, y_l, s_l are given with one space delimiter, and the reaction s_l is shown when using the D machine in the mass (x_l, y_l) Indicates that it was done.\n\nConstraint\n\n* 1 \\ leq h \\ leq 50, 1 \\ leq w \\ leq 50, 1 \\ leq d \\ leq 10, 1 \\ leq n \\ leq 50\n* t_ {i, j} is one of \"#\", \".\", \"D\", and there is always only one letter \"D\"\n* 0 \\ leq r_k \\ leq 50, and for k> 1, r_ {k-1} <r_k\n* 0 \\ leq x_l <w, 0 \\ leq y_l <h, 0 \\ leq s_l \\ leq d\n* You can reach the square (x_l, y_l) by repeating the movement from the square represented by the letter \"D\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00698 Missing Numbers", "description": "Input\n\nThe input consists of multiple data sets, each in the following format:\n\n\np s\nrow1\nrow2\n...\nrowp\ntotals\n\n\nThe first line consists of two integers p and s, representing the numbers of products and stores, respectively. The former is less than 100 and the latter is less than 10.\n\nThey are separated by a blank character. Each of the subsequent lines represents a row of the table and consists of s+1 elements, each of which is either an integer or a question mark. The i-th line (1 <= i <= p) corresponds to the i-th product and the last line the totals row. The first s elements in a line represent the sales of each store and the last one the total sales of the product. Numbers or question marks in a line are separated by a blank character. There are no missing numbers in the totals column or row. There is at least one question mark in each data set.\n\nThe known numbers in the table except the totals row and column is between -1,000 and 1,000, inclusive. However, unknown numbers, represented by question marks, may not be in this range. The total sales number of each product is between -10,000 and 10,000, inclusive. The total sales number of each store is between -100,000 and 100,000, inclusive.\n\nThere is a blank line between each data set in the input, and the input is terminated by a line consisting of a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "46_F. Hercule Poirot Problem", "description": "Input\n\nThe first line contains three preset integers n, m и k (1 ≤ n, m, k ≤ 1000) — the number of rooms, the number of doors and the number of house residents respectively. The next m lines contain pairs of room numbers which join the doors. The rooms are numbered with integers from 1 to n. There cannot be more that one door between the pair of rooms. No door connects a room with itself. The next k lines describe the residents' position on the first night. Every line contains a resident's name (a non-empty line consisting of no more than 10 Latin letters), then after a space follows the room number, then, after a space — the number of keys the resident has. Then follow written space-separated numbers of the doors that can be unlocked by these keys. The doors are numbered with integers from 1 to m in the order in which they are described in the input data. All the residents have different names, uppercase and lowercase letters considered to be different. Every m keys occurs exactly once in the description. Multiple people may be present in one room, some rooms may be empty. The next k lines describe the position of the residents on the second night in the very same format. It is guaranteed that in the second night's description the residents' names remain the same and every m keys occurs exactly once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00839 Organize Your Train", "description": "Input\n\nThe input consists of one or more datasets. A dataset has the following format:\n\n\nx y\np1 P1 q1 Q1\np2 P2 q2 Q2\n.\n.\n.\npy Py qy Qy\ns0\ns1\n.\n.\n.\nsx-1\nt0\nt1\n.\n.\n.\ntx-1\n\n\nx is the number of parking lines, which are numbered from 0 to x-1. y is the number of exchange lines. Then y lines of the exchange line data follow, each describing two ends connected by the exchange line; pi and qi are integers between 0 and x - 1 which indicate parking line numbers, and Pi and Qi are either \"E\" (East) or \"W\" (West) which indicate the ends of the parking lines.\n\nThen x lines of the arrival (initial) configuration data, s0, ... , sx-1, and x lines of the departure (target) configuration data, t0, ... tx-1, follow. Each of these lines contains one or more lowercase letters \"a\", \"b\", ..., \"z\", which indicate types of cars of the train in the corresponding parking line, in west to east order, or alternatively, a single \"-\" when the parking line is empty.\n\nYou may assume that x does not exceed 4, the total number of cars contained in all the trains does not exceed 10, and every parking line has sufficient length to park all the cars.\n\nYou may also assume that each dataset has at least one solution and that the minimum number of moves is between one and six, inclusive.\n\nTwo zeros in a line indicate the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "522_C. Chicken or Fish?", "description": "Input\n\nEach test in this problem consists of one or more input sets. First goes a string that contains a single integer t (1 ≤ t ≤ 100 000) — the number of input data sets in the test. Then the sets follow, each set is preceded by an empty line.\n\nThe first line of each set of the input contains integers m, k (2 ≤ m ≤ 100 000, 1 ≤ k ≤ 100 000) — the number of Polycarp's seat and the number of dishes, respectively.\n\nThe second line contains a sequence of k integers a1, a2, ..., ak (1 ≤ ai ≤ 100 000), where ai is the initial number of portions of the i-th dish.\n\nThen m - 1 lines follow, each line contains the description of Polycarp's observations about giving food to a passenger sitting in front of him: the j-th line contains a pair of integers tj, rj (0 ≤ tj ≤ k, 0 ≤ rj ≤ 1), where tj is the number of the dish that was given to the j-th passenger (or 0, if Polycarp didn't notice what dish was given to the passenger), and rj — a 1 or a 0, depending on whether the j-th passenger was or wasn't disappointed, respectively.\n\nWe know that sum ai equals at least m, that is,Polycarp will definitely get some dish, even if it is the last thing he wanted. It is guaranteed that the data is consistent.\n\nSum m for all input sets doesn't exceed 100 000. Sum k for all input sets doesn't exceed 100 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01297 Safe Area", "description": "Input\n\nThe input is a sequence of datasets. Each dataset corresponds to one situation with warning lines in the following format:\n\nW H N R\nx1,1 y1,1 x1,2 y1,2 t1\nx2,1 y2,1 x2,2 y2,2 t2\n...\nxN,1 yN,1 xN,2 yN,2 tN\n\n\nThe first line of a dataset contains four integers W, H, N and R (2 < W ≤ 640, 2 < H ≤ 480, 0 ≤ N ≤ 100 and 0 < R < min{W, H}/2). The first two integers W and H indicate the width and height of the screen, respectively. The next integer N represents the number of laser beams.\n\nThe last integer R indicates the radius of the machine. It is guaranteed that the output would remain unchanged if the radius of the machine would become larger by 10-5 than R.\n\nThe following N lines describe the N warning lines. The (i+1)-th line of the dataset corresponds to the i-th warning line, which is represented as a straight line which passes through two given different coordinates (xi,1, yi,1 ) and (xi,2 , yi,2 ). The last integer ti indicates the thickness of the laser beam corresponding to the i-th warning line.\n\nAll given coordinates (x, y) on the screen are a pair of integers (0 ≤ x ≤ W, 0 ≤ y ≤ H). Note that, however, the machine is allowed to be located at non-integer coordinates during the play.\n\nThe input is terminated by a line with four zeros. This line should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00743 Discrete Speed", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n  m\n>  s  g\n>  x 1 y 1 d 1 c 1\n>  ...\n>  xm ym dm cm\n>\n\nEvery input item in a dataset is a non-negative integer. Input items in the same line are separated by a space.\n\nThe first line gives the size of the road network. n  is the number of cities in the network. You can assume that the number of cities is between 2 and 30, inclusive. m  is the number of roads between cities, which may be zero.\n\nThe second line gives the trip. s  is the city index of the starting city. g  is the city index of the goal city. s  is not equal to g . You can assume that all city indices in a dataset (including the above two) are between 1 and n , inclusive.\n\nThe following m  lines give the details of roads between cities. The i -th road connects two cities with city indices xi and yi , and has a distance di (1 ≤ i ≤ m ). You can assume that the distance is between 1 and 100, inclusive. The speed limit of the road is specified by ci . You can assume that the speed limit is between 1 and 30, inclusive.\n\nNo two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions.\n\nThe last dataset is followed by a line containing two zeros (separated by a space).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01401 The Legendary Sword", "description": "Input\n\nThe input consists of multiple datasets, and the end of the input is a line of two zeros separated by spaces. The total number of datasets is 50 or less. Each dataset has the following format:\n\n\nw h\ns (1,1) ... s (1, w)\ns (2,1) ... s (2, w)\n...\ns (h, 1) ... s (h, w)\n\n\nw and h are integers indicating the width and height of the matrix data representing the floor of the ruins, respectively, and it can be assumed that 1 ≤ w and h ≤ 100, respectively, and 2 ≤ w + h ≤ 100. Each of the following h lines is composed of w characters separated by a space, and the character s (y, x) indicates the state of the point at the coordinate (y, x).\n\nThe meaning is as follows.\n\n* S: The point where the Demon King is first. There is always only one on the floor.\n* G: The point of the legendary sword. There is always only one.\n* .:Nothing.\n* Number: The point where the jewel is located. The numbers indicate the seal numbers that make up the seal. The numbers are integers of 1 or more, and there may be no omissions in the numbers in between.\n\nIn addition, the Demon King can move to adjacent coordinates on the floor of the ruins, up, down, left, and right, and the time required for that movement is 1. It doesn't take long to destroy a jewel because it can be destroyed just by touching it.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00891 Where's Wally", "description": "Input\n\nThe input is a sequence of datasets each in the following format.\n\nw h p\nimage data\npattern data\n\n\nThe first line of a dataset consists of three positive integers w, h and p. w is the width of the image and h is the height of the image. Both are counted in numbers of bits. p is the width and height of the pattern. The pattern is always square-shaped. You may assume 1 ≤ w ≤ 1000, 1 ≤ h ≤ 1000, and 1 ≤ p ≤ 100.\n\nThe following h lines give the image. Each line consists of ⌈w/6⌉ (which is equal to &⌊(w+5)/6⌋) characters, and corresponds to a horizontal line of the image. Each of these characters represents six bits on the image line, from left to right, in a variant of the BASE64 encoding format. The encoding rule is given in the following table. The most significant bit of the value in the table corresponds to the leftmost bit in the image. The last character may also represent a few bits beyond the width of the image; these bits should be ignored.\n\ncharacter| value (six bits)\n---|---\nA-Z| 0-25\na-z| 26-51\n0-9| 52-61\n+| 62\n/| 63\n\nThe last p lines give the pattern. Each line consists of ⌈p/6⌉ characters, and is encoded in the same way as the image.\n\nA line containing three zeros indicates the end of the input. The total size of the input does not exceed two megabytes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01805 Alternate Escape", "description": "Input\n\nThe input consists of 40 or less datasets. Each dataset is given in the following format.\n\n> H W R C\n> Horz1,1 Horz1,2 ... Horz1,W\n> Vert1,1 Vert1,2 ... Vert1, W + 1\n> ...\n> VertH, 1 VertH, 2 ... VertH, W + 1\n> HorzH + 1,1 HorzH + 1,2 ... HorzH + 1,W\n\nThe first line gives four integers H, W (1 ≤ H, W ≤ 500), R, C (1 ≤ R ≤ H, 1 ≤ C ≤ W). These indicate that the board consists of squares in rows H and columns W, and the initial position of the frame is rows R and columns C.\n\nThe following 2H + 1 line gives the initial state of the board.\n\nLine 2i (1 ≤ i ≤ H + 1) contains W integers Horzi, 1, Horzi, 2, ..., Horzi, W. Horzi, j is 1 when there is a wall on the upper side of the square in row i and column j, and 0 when there is no wall. However, HorzH + 1, j indicates the presence or absence of a wall on the lower side of the square in the H row and j column.\n\nThe 2i + 1st line (1 ≤ i ≤ H) contains W + 1 integer Verti, 1, Verti, 2, ..., Verti, W + 1. Verti, j is 1 when there is a wall on the left side of the cell in the i-th row and j-th column, and 0 when there is no wall. However, Verti and W + 1 indicate the presence or absence of a wall on the right side of the cell in the i-row and W-th column.\n\nThe end of the input is indicated by a single line of four zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1444_E. Finding the Vertex", "description": "Input\n\nYou are given an integer n (2 ≤ n ≤ 100) — the number of vertices in a tree.\n\nThe folloiwing n-1 lines contain two integers each, u and v (1 ≤ u, v ≤ n), that denote an edge in the tree connecting u and v. It is guaranteed that the given edges form a tree.\n\nInteraction\n\nAfter reading the input data, one can start making queries. There are two possible queries:\n\n  1. \"? u v\" — to ask for an edge (u, v) (1 ≤ u, v ≤ n) which of the endpoints is closer to the special vertex. The answer to this query is one of the endpoints. Note that, u and v must be connected by an edge, and hence they can not have the same distance to the special vertex.\n  2. \"! u\" — to indicate that you found the special vertex. After the program does that, it must immediately terminate. \n\n\n\nDo not forget to output the end of line and flush the output. Otherwise you will get Idleness limit exceeded verdict. To flush the output, you can use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * sys.stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIn case you ask more queries than needed in the worst case for a given tree, you will get verdict Wrong answer.\n\nExamples\n\nInput\n\n\n5\n1 2\n2 3\n3 4\n4 5\n3\n2\n1", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00546 Zombie Island", "description": "input\n\nThe input consists of 2 + K + M lines.\n\nOn the first line, four integers N, M, K, S (2 ≤ N ≤ 100000, 1 ≤ M ≤ 200000, 0 ≤ K ≤ N-2, 0 ≤ S ≤ 100000) are written separated by blanks. ing. It consists of N towns and M roads on the island, K of the N towns are zombie-dominated, and S or less roads are used from the zombie-controlled towns. A town that can be reached is called a dangerous town.\n\nOn the second line, two integers P and Q (1 ≤ P <Q ≤ 100000) are written with a blank as a delimiter. This means that in a town where JOI is not dangerous, you will stay in an inn with an accommodation cost of P yen, and in a dangerous town, you will stay in an inn with an accommodation cost of Q yen.\n\nThe integer Ci (2 ≤ Ci ≤ N-1) is written on the i-th line (1 ≤ i ≤ K) of the following K lines. This means that the town Ci is dominated by zombies. C1, ..., CK are all different.\n\nIn the jth line (1 ≤ j ≤ M) of the following M lines, two integers Aj and Bj (1 ≤ Aj <Bj ≤ N) are written with a blank as a delimiter. This means that there is a road between town Aj and town Bj. The same (Aj, Bj) pair has never been written more than once.\n\nGiven the input data, it is guaranteed to be able to travel from town 1 to town N only through non-zombie-controlled towns.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1131_G. Most Dangerous Shark", "description": "Input\n\nIn order to reduce input size, the heights and costs of the dominoes are described with blocks.\n\nThe first line contains two integers n and m (1 ≤ n ≤ 250 000, 1 ≤ m ≤ 10^7) — the number of the blocks and the total number of the dominoes Semyon must drop.\n\nThen descriptions of n blocks follow. Description of every block consists of three lines.\n\nThe first line of block's description contains a single integer k_i (1 ≤ k_i ≤ 250 000, ∑_{i = 1}^{n}{k_i} ≤ 250 000) — the number of dominoes in the block.\n\nThe second line of block's description contains k_i integers a_j (1 ≤ a_j ≤ m) — the heights of the dominoes in the blocks.\n\nThe third line contains k_i integers c_j (1 ≤ c_j ≤ 100 000) — the costs of the dominoes in the block.\n\nThen the domino sequence is described (from left to right).\n\nThe first line of this description contains a single integer q (n ≤ q ≤ 250 000) — the number of blocks in the sequence of domino sequence.\n\nEach of the following q lines contains integers id_i, mul_i (1 ≤ id_i ≤ n, 1 ≤ mul_i ≤ 100 000), denoting that the next k_{id_i} dominoes are dominoes of the block id_i, with their cost multiplied by mul_i.\n\nIt's guaranteed, that ∑_{i = 1}^{q}{k_{id_i}} = m, and that's every block is used in the sequence at least once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1355_F. Guess Divisors Count", "description": "Input\n\nThe first line of input contains one integer T (1 ≤ T ≤ 100) — the number of games.\n\nInteraction\n\nTo make a query print a line \"? Q\" (1 ≤ Q ≤ 10^{18}). After that read one integer gcd(X, Q). You can make no more than 22 such queries during one game.\n\nIf you are confident that you have figured out the number of divisors of X with enough precision, you can print your answer in \"! ans\" format. ans have to be an integer. If this was the last game, you have to terminate the program, otherwise you have to start the next game immediately. Note that the interactor doesn't print anything in response to you printing answer.\n\nAfter printing a query do not forget to output end of line and flush the output. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nHacks\n\nTo hack, use the following format:\n\nThe first line contains one integer T (1 ≤ T ≤ 100) — the number of games.\n\nEach of the next T lines contains one integer X (1 ≤ X ≤ 10^{9}) — the hidden number.\n\nSo the example has the form \n    \n    \n      \n    2  \n    998244353  \n    4194304  \n    \n\nExample\n\nInput\n\n\n2\n\n1\n\n1\n\n1\n\n\n1024\n\n1048576\n\n4194304", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_D1. Supercollider", "description": "Input\n\nThe first line of the input will contain two single-space-separated integers n, the number of north-south tracts and m, the number of west-east tracts.\n\nEach of the n lines following the first describes a north-south tract. Each such tract is described by three single-space-separated integers xi, yi, li representing the vertical line segment from (xi, yi) to (xi, yi + li).\n\nSimilarly, after the n lines describing north-south tracts follow m similar lines describing the west-east tracts. Each such tract is described by three single-space-separated integers xi, yi, li representing the horizontal line segment from (xi, yi) to (xi + li, yi).\n\nAll xi and yi are between -100000000 and 100000000, inclusive. All li are between 1 and 100000000, inclusive. No pair of horizontal segments will touch or intersect, and no pair of vertical segments will touch or intersect.\n\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem D1 (3 points), n and m will be between 1 and 1000, inclusive. \n  * In subproblem D2 (16 points), n and m will be between 1 and 50000, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00278 Study Session", "description": "input\n\nThe input consists of one dataset. The input is given in the following format.\n\n\nN Q\ns1\ns2\n::\nsN\nQUERY1\nQUERY2\n::\nQUERYQ\n\n\nThe first line gives the number of students N (1 ≤ N ≤ 1000000) and the number of processing requests Q (0 ≤ Q ≤ 1000).\n\nThe following N lines are given the integer si (0 ≤ si ≤ 1,000,000,000) indicating the score of the i-th student. Students shall be numbered 1,2, ..., N.\n\nThe processing request QUERYi is given to the following Q line. Processing requests are given in chronological order. There are three types of processing requests: ADD, REMOVE, and CHECK, and each QUERYi is given in one of the following formats.\n\n\nADD a\n\n\nOr\n\n\nREMOVE a\n\n\nOr\n\n\nCHECK x\n\n\nADD a stands for adding a student with the number a (1 ≤ a ≤ N) to the leader.\n\nREMOVE a represents removing the student with the number a (1 ≤ a ≤ N) from the leader.\n\nCHECK x represents an output request. An upper limit on the number of students who cannot join any group x (0 ≤ x ≤ N) is given.\n\nThe input shall satisfy the following conditions.\n\n* At any given time, the number of leaders will not exceed 100.\n* Do not add students who are leaders at that time to leaders.\n* Students who are not leaders at that time will not be removed from the leader.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01753 Magic Bullet", "description": "Constraints\n\n* 0 ≤ N ≤ 50\n* 1 ≤ Q ≤ 50\n* -500 ≤ xi, yi, zi ≤ 500\n* 1 ≤ ri ≤ 1,000\n* 1 ≤ li ≤ 1016\n* -500 ≤ sxj, syj, szj ≤ 500\n* -500 ≤ dxj, dyj, dzj ≤ 500\n* Obstacles are never stuck in other obstacles\n* The coordinates of the object are not inside or on the surface of the obstacle\n* Under each assumption, the coordinates of the red object and the blue object do not match.\n\nInput\n\nAll inputs are integers. Each number is separated by a single space.\n\n\nN Q\nx1 y1 z1 r1 l1\n::\nxN yN zN rN lN\nsx1 sy1 sz1 dx1 dy1 dz1\n::\nsxQ syQ szQ dxQ dyQ dzQ\n\n\n* N is the number of obstacles, and Q is the number of coordinates of the assumed blue and red objects.\n* xi, yi, and zi are the x-coordinate, y-coordinate, and z-coordinate that represent the position of the center of the i-th obstacle, respectively.\n* ri is the radius of the i-th obstacle.\n* li is the amount of magical power consumed by magic to penetrate the i-th obstacle.\n* sxj, syj, and szj are the x-coordinate, y-coordinate, and z-coordinate that represent the position of the red object in the jth assumption, respectively.\n* dxj, dyj, and dzj are the x-coordinate, y-coordinate, and z-coordinate that represent the position of the blue object in the jth assumption, respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01627 Seishun 18 Kippu 2013", "description": "Constraints\n\n* 1 <= N <= 10\n* 1 <= T <= 180\n* st_timei, ar_timei\n* Represented by \"HH: MM\", HH is 00 or more and 23 or less, and MM is 00 or more and 59 or less. HH is hours and MM is minutes.\n* 00:00 <= st_time1 <ar_time1 <st_time2 <ar_time2 <... <st_timeN <ar_timeN <= 23:59\n* st_namei, ar_namei\n* A character string represented by uppercase and lowercase letters.\n* 1 <= string length <= 50\n* The names of the i-th arrival station ar_namei and the i + 1th departure station st_namei + 1 match.\n* The names of st_name1, ar_nameN, and the transfer station are different character strings.\n\nInput\n\nEach data set is input in the following format.\n\n\nN T\nst_time1 st_name1 ar_time1 ar_name1\nst_time2 st_name2 ar_time2 ar_name2\n...\nst_timeN st_nameN ar_timeN ar_nameN\n\n\nN is an integer representing the number of times the train is boarded, and T is an integer representing the permissible time (minutes) to see the transfer station. Subsequently, train departure and arrival pairs are given over N lines. The input of each line means that the train that Mr. Takatsuki rides departs from the station of st_namei at the time of st_timei, and that the train that Mr. Takatsuki rides arrives at the station of ar_namei at the time of ar_timei.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01130 Water Pipe Construction", "description": "Input\n\nThe input consists of multiple datasets.\n\nThe first row of the dataset consists of five integers. These are, in order, the number of bases on Mars n (3 <= n <= 100), the number of roads connecting the bases m (2 <= m <= 1000), the number of the base that serves as the water source, and the number of the water pipes. Represents the numbers g1 and g2 of the two main bases that serve as destinations. The base number is represented by an integer from 1 to n. s, g1 and g2 are different from each other.\n\nThe following m lines are given information on the roads on which water pipes can be laid. Each line represents road information between two bases and consists of three integers b1, b2, c (1 <= c <= 1000). Here, b1 and b2 represent the numbers of the bases at the beginning and end of the road, which are different from each other. c is the cost of laying a water pipe from base b1 to base b2.\n\nFor all datasets, it can be assumed that there is always a route for water from the source to the destination. Also, since there is at most one road between two bases, cost information is given at most once in each direction.\n\nThe end of the input is represented by a line containing five zeros separated by a space character.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00467 Sugoroku", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nEach dataset consists of 1 + N + M rows.\n\nTwo integers N, M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 1000) are written on the first line of the input, separated by blanks. N represents the number of sugoroku squares, and M represents the number of dice given.\n\nIn the following N lines, integers between -999 and 999 are written one by one. The integer on the 1 + i line (1 ≤ i ≤ N) represents the indication of the sugoroku i-th cell. Let X be the written integer. When X = 0, it indicates \"do nothing\", when X> 0, it indicates \"advance X mass\", and when X <0, it indicates \"| X | mass return\". However, | X | represents the absolute value of X.\n\nIn the following M line, integers from 1 to 6 are written one by one, and the number on the 1 + N + j line (1 ≤ j ≤ M) represents the dice roll that appears on the jth time.\n\nHowever, the number of lines 2 and 1 + N is always 0. There is no cell with instructions to move to the cell before the first cell. In addition, the number of times the dice are rolled is M or less in any scoring input data.\n\nWhen both N and M are 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1424_D. Does anyone else hate the wind?", "description": "Input\n\nFirst line contains two integer numbers N and M (1 ≤ N, M ≤ 200) - representing the number of rows and number of columns of the map. \n\nSecond line contains three integers, K (0 ≤ K ≤ 200) which is the number of days with the available food supplies, T (0 ≤ T ≤ 20) which is the number of fields with additional food supplies and W (0 ≤ W ≤ 10^6) which is the number of days with wind information.\n\nNext is the NxM char matrix filled with the values of 'L', 'S', 'P' or 'M'. 'L' is for the land and 'S' is for the sea parts. 'P' is for the port field and 'M' is the starting field for the ship.\n\nNext line contains W chars with the wind direction information for every day. The possible inputs are 'N' - north, 'S' - south, 'E' - east, 'W' - west and 'C' - no wind. If Mark's crew can reach the port, it is guaranteed that they will not need more than W days to reach it.\n\nIn the end there are T lines with the food supplies positions. Each line contains three integers, Y_i and X_i (0 ≤ Y_i < N, 0 ≤ X_i < M) representing the coordinates (Y is row number and X is column number) of the food supply and F_i (0 ≤ F_i ≤ 10^6) representing the number of days from the starting day on which the food supply is available.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01702 Unknown Switches", "description": "Input\n\nThe input consists of multiple datasets. The number of dataset is no more than $50$ and the file size is no more than $10\\mathrm{MB}$. Each dataset is formatted as follows.\n\n> $N$ $M$ $Q$\n> $S_1$ $B_1$\n> :\n> :\n> $S_Q$ $B_Q$\n\nThe first line of each dataset contains three integers $N$ ($1 \\le N \\le 36$), $M$ ($1 \\le M \\le 1{,}000$), $Q$ ($0 \\le Q \\le 1{,}000$), which denote the number of switches, the number of light bulbs and the number of operations respectively. The following $Q$ lines describe the information about the switches you have operated and the states of the light bulbs you have checked. The $i$-th of them contains two strings $S_i$ and $B_i$ of lengths $N$ and $M$ respectively. Each $S_i$ denotes the set of the switches you have operated: $S_{ij}$ is either $0$ or $1$, which denotes the $j$-th switch is not operated or operated respectively. Each $B_i$ denotes the states of the light bulbs: $B_{ij}$ is either $0$ or $1$, which denotes the $j$-th light bulb is off or on respectively.\n\nYou can assume that there exists a correspondence between the switches and the light bulbs which is consistent with the given information.\n\nThe end of input is indicated by a line containing three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00671 Live Schedule", "description": "Constraints\n\n* All inputs are integers\n* 1 ≤ C ≤ 15\n* 1 ≤ D ≤ 30\n* 0 ≤ W ≤ 50\n* 0 ≤ X ≤ 5\n* 0 ≤ Ei, j ≤ 1,000\n* 0 ≤ Fi, j ≤ 10\n* The number of test cases does not exceed 100.\n\nInput\n\nThe input consists of multiple test cases. One test case follows the format below.\n\n\nC D W X\nE1,1 E1,1… E1, D\nE2,1 E2,1… E2, D\n...\nEC, 1 EC, 2… EC, D\nF1,1 F1,1… F1, D\nF2,1 F2,1… F2, D\n...\nFC, 1 FC, 2… FC, D\n\n\nC is the number of region types, D is the length of the tour period, W is the maximum total amount of burden YOKARI can tolerate for this tour, and X is the total number of days that a live can be performed more than once on the same day during the tour It is the upper limit. Ei, j (1 ≤ i ≤ C and 1 ≤ j ≤ D) are the expected benefits of performing live on day j in region i. When Ei, j is 0, it indicates that the live cannot be performed in the region i on the jth day. Fi, j (1 ≤ i ≤ C and 1 ≤ j ≤ D) is the burden on YOKARI to perform live on day j in region i. This value is 0 when Ei, j is 0. Region i is adjacent to regions i + 1 and i -1 respectively. However, region 1 and region C (C> 2) are not adjacent. The end of the input is indicated by a line where each of the four 0s is separated by a single character space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00746 Pablo Squarson's Headache", "description": "Input\n\nThe input consists of a number of datasets. Each dataset represents the way Pablo made a piece of his artwork. The format of a dataset is as follows.\n\n> N\nn1 d1\nn2 d2\n...\nnN-1 dN-1\n\n\nThe first line contains the number of squares (= N) used to make the piece of artwork. The number is a positive integer and is smaller than 200.\n\nThe remaining (N-1) lines in the dataset are square placement instructions. The line \"ni di\" indicates placement of the square numbered i (≤ N-1). The rules of numbering squares are as follows. The first square is numbered \"zero\". Subsequently placed squares are numbered 1, 2, ..., (N-1). Note that the input does not give any placement instruction to the first square, which is numbered zero.\n\nA square placement instruction for the square numbered i, namely \"ni di\", directs it to be placed next to the one that is numbered ni, towards the direction given by di, which denotes leftward (= 0), downward (= 1), rightward (= 2), and upward (= 3).\n\nFor example, pieces of artwork corresponding to the four datasets shown in Sample Input are depicted below. Squares are labeled by their numbers.\n\n<image>\n\nThe end of the input is indicated by a line that contains a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "593_D. Happy Tree Party", "description": "Input\n\nThe first line of the input contains integers, n and m (2 ≤ n ≤ 200 000, 1 ≤ m ≤ 200 000) — the number of vertecies in the tree granted to Bogdan by his mom and the number of guests that came to the party respectively.\n\nNext n - 1 lines contain the description of the edges. The i-th of these lines contains three integers ui, vi and xi (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ xi ≤ 1018), denoting an edge that connects vertecies ui and vi, with the number xi initially written on it.\n\nThe following m lines describe operations, requested by Bogdan's guests. Each description contains three or four integers and has one of the two possible forms: \n\n  * 1 ai bi yi corresponds to a guest, who chooses the operation of the first type. \n  * 2 pi ci corresponds to a guests, who chooses the operation of the second type. \n\nIt is guaranteed that all the queries are correct, namely 1 ≤ ai, bi ≤ n, 1 ≤ pi ≤ n - 1, 1 ≤ yi ≤ 1018 and 1 ≤ ci < xpi, where xpi represents a number written on edge pi at this particular moment of time that is not necessarily equal to the initial value xpi, as some decreases may have already been applied to it. The edges are numbered from 1 to n - 1 in the order they appear in the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01439 Chinese Classics", "description": "Input\n\nThe input contains multiple datasets. Each dataset is given in the following format:\n\nN\nmark1\n...\nmarkN\n\n\nN, a positive integer (1 ≤ N ≤ 10,000), means the number of letters in a Chinese classic text. marki denotes returning marks attached to the i-th letter.\n\nA 'Re' mark is represented by a single letter, namely, 'v' (quotes for clarity). The description of a jump mark is the simple concatenation of its type, specified by one or more lowercase letter, and a positive integer. Note that each letter has at most one jump mark and at most one 'Re' mark. When the same letter has both types of returning marks, the description of the jump mark comes first, followed by 'v' for the 'Re' mark. You can assume this happens only on the jump marks with the number 1.\n\nIf the i-th letter has no returning mark, marki is '-' (quotes for clarity). The length of marki never exceeds 20.\n\nYou may assume that input is well-formed, that is, there is exactly one reading order that follows the rules above. And in the ordering, every letter is read exactly once.\n\nYou may also assume that the N-th letter does not have 'Re' mark.\n\nThe input ends when N = 0. Your program must not output anything for this case.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01710 Website Tour", "description": "Input\n\nThe input consists of multiple datasets. The number of dataset is no more than $60$.\n\nEach dataset is formatted as follows.\n\n> $N$ $M$ $T$\n> $p_1$ $t_1$ $k_1$\n> :\n> :\n> $p_N$ $t_N$ $k_N$\n> $a_1$ $b_1$\n> :\n> :\n> $a_M$ $b_M$\n\nThe first line of each dataset contains three integers $N$ ($1 \\le N \\le 100$), $M$ ($0 \\le M \\le 1{,}000$) and $T$ ($1 \\le T \\le 10{,}000$), which denote the number of websites, the number of links, and the time limit, respectively. All the time given in the input is expressed in seconds.\n\nThe following $N$ lines describe the information of advertisements. The $i$-th of them contains three integers $p_i$ ($1 \\le p_i \\le 10{,}000$), $t_i$ ($1 \\le t_i \\le 10{,}000$) and $k_i$ ($1 \\le k_i \\le 10{,}000$), which denote the points of the advertisement, the time required to watch the advertisement, and the maximum number of times you can watch the advertisement in website $i$, respectively.\n\nThe following $M$ lines describe the information of links. Each line contains two integers $a_i$ and $b_i$ ($1 \\le a_i,b_i \\le N$), which mean that we can move from website $a_i$ to website $b_i$ using a link.\n\nThe end of input is indicated by a line containing three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01270 Restrictive Filesystem", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> N\n> Command1\n> Command2\n> ...\n> CommandN\n\nN is the number of commands executed (1 ≤ N ≤ 10,000), and Commandi is the i-th command to be executed.\n\nEach command consists of a command name and one or two arguments. The command name consists of only one letter and can be either \"W\", \"D\", or \"R\". There is a space between the command and the argument, and between the argument and the argument.\n\n\"W\" represents a write command. Two arguments I (0 ≤ I ≤ 109) and S (1 ≤ S ≤ 109) are given. Each shows the identifier of the file to write and the number of sectors required to store the file.\n\n\"D\" represents the delete command. One argument I (0 ≤ I ≤ 109) is given. Indicates the identifier of the file to be deleted.\n\n\"R\" represents the reference command. One argument P (0 ≤ P ≤ 109) is given. Indicates the number of the sector to be referenced.\n\nIt can be assumed that sectors with numbers higher than 109 do not need to be accessed. Also, it is guaranteed that a file with the same file identifier will not be written multiple times.\n\nThe end of the input is indicated by one line containing one 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01368 Merry Christmas", "description": "Input\n\nThe input consists of several datasets. Each dataset is formatted as follows.\n\nN M L\nu1 v1 d1\nu2 v2 d2\n.\n.\n.\nuM vM dM\np1 t1\np2 t2\n.\n.\n.\npL tL\n\n\nThe first line of a dataset contains three integer, N , M and L (1 ≤ N ≤ 100, 0 ≤ M ≤ 1000, 1 ≤ L ≤ 1000) each indicates the number of houses, roads and requests respectively.\n\nThe following M lines describe the road network. The i-th line contains three integers, ui , vi , and di (0 ≤ ui < vi ≤ N - 1, 1 ≤ di ≤ 100) which means that there is a road connecting houses ui and vi with di length. Each road is bidirectional. There is at most one road between same pair of houses. Whole network might be disconnected.\n\nThe next L lines describe the requests. The i-th line contains two integers, pi and ti (0 ≤ pi ≤ N - 1, 0 ≤ ti ≤ 108 ) which means that there is a delivery request to house pi on time ti . There is at most one request for same place and time. You can assume that time taken other than movement can be neglectable, and every Santa has the same speed, one unit distance per unit time.\n\nThe end of the input is indicated by a line containing three zeros separated by a space, and you should not process this as a test case.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01413 Quest of Merchant", "description": "Input\n\n\nN M W T\nS1 V1 P1\n...\nSM VM PM\nL1 X1 Y1\nR1,1 Q1,1\n...\nR1, L1 Q1, L1\n...\nLN XN YN\nRN, 1 QN, 1\n...\nRN, LN QN, LN\n\n\nN is the number of towns and M is the number of product types. Si, Vi, and Pi (1 ≤ i ≤ M) are the name of the i-th product, the weight per product, and the selling price per product, respectively. A city is represented by an integer greater than or equal to 1 and less than or equal to N. Lj, Xj, and Yj (1 ≤ j ≤ N) are the number of types of goods sold in the city j, the x-coordinate of the city j, and the y-coordinate, respectively. Rj, k, Qj, k (1 ≤ j ≤ N, 1 ≤ k ≤ Lj) are the names and prices of the kth products sold in town j, respectively.\n\n1 ≤ N ≤ 7, 1 ≤ M ≤ 7, 1 ≤ W ≤ 10,000, 1 ≤ T ≤ 10,000, 1 ≤ Vi ≤ W, 1 ≤ Pi ≤ 10,000, 1 ≤ Lj ≤ M, -10,000 ≤ Xj ≤ 10,000,- Satisfy 10,000 ≤ Yj ≤ 10,000, 1 ≤ Qj, k ≤ 10,000. The product name is a character string consisting of lowercase letters and having a length of 1 or more and 7 or less. All other values ​​are integers. Si are all different. The same set as (Xj, Yj) does not appear multiple times, and (Xj, Yj) = (0, 0) does not hold. For each j, Rj and k are all different, and each Rj and k matches any Si.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01812 Dark Room", "description": "Constraints\n\n* 2 ≤ N ≤ 100\n* 1 ≤ M ≤ min (16, N − 1)\n* 1 ≤ K ≤ N\n* 1 ≤ D_i ≤ N\n* D_i are all different\n* 1 ≤ v_ {i, j} ≤ N\n* All dark rooms can reach at least one bright room\n\n\n\nInput Format\n\nInput is given from standard input in the following format.\n\n\nNMK\nD_1 D_2 ... D_M\nv_ {1,1} v_ {1,2} ... v_ {1,K}\nv_ {2,1} v_ {2,2} ... v_ {2, K}\n...\nv_ {N, 1} v_ {N, 2} ... v_ {N, K}\n\n\nOutput Format\n\nPrint the answer in one line.\n\nSample Input 1\n\n\n4 2 2\n1 2\ntwenty four\n3 1\n4 2\n13\n\n\nSample Output 1\n\n\n2\n\n\n<image>\nIf you give the instruction 1, 1\n\n* If A's initial position is room 1, the second move will reach room 3.\n* If A's initial position is room 2, the first move will reach room 3.\n\n\n\nSample Input 2\n\n\n3 2 2\n1 2\ntwenty three\n1 2\ntwenty one\n\n\nSample Output 2\n\n\n3\n\n\n<image>\nIf you give instructions 2, 1, 2\n\n* If A's initial position is room 1, the first move will reach room 3.\n* If A's initial position is room 2, the third move will reach room 3.\n\n\n\nSample Input 3\n\n\n6 3 3\none two Three\n4 1 1\n2 5 2\n3 3 6\n4 4 4\n5 5 5\n6 6 6\n\n\nSample Output 3\n\n\n3\n\n\n<image>\nBeware of unconnected cases and cases with self-edges and multiple edges.\n\n\n\n\n\nExample\n\nInput\n\n4 2 2\n1 2\n2 4\n3 1\n4 2\n1 3", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01969 AA Graph", "description": "Constraints\n\n* 3 \\leq H, W \\leq 50\n* s and t are selected by uppercase alphabets from `A` to `Z`, and s \\neq t.\n* a_i (1 \\leq i \\leq H) consists of uppercase alphabets and symbols `o`, `-`, `|`, and `.`.\n* Each uppercase alphabet occurs at most once in the AA.\n* It is guaranteed that there are two vertices representing s and t.\n* The AA represents a connected graph.\n\n\n\nOutput Format\n\nPrint the length of the shortest paths from s to t in one line.\n\nExample 1\n\n\n14 16 A L\nooo.....ooo.....\noAo-----oHo.....\nooo.....ooo..ooo\n.|.......|...oLo\nooo..ooo.|...ooo\noKo--oYo.|....|.\nooo..ooo.|....|.\n.|....|.ooo...|.\n.|....|.oGo...|.\n.|....|.ooo...|.\n.|....|.......|.\nooo..ooo.....ooo\noFo--oXo-----oEo\nooo..ooo.....ooo\n\n\nOutput 1\n\n\n5\n\nExapmple 2\n\n\n21 17 F L\n.................\n.....ooo.....ooo.\n.....oAo-----oBo.\n.....ooo.....ooo.\n......|.......|..\n.ooo..|..ooo..|..\n.oCo..|..oDo.ooo.\n.ooo.ooo.ooo.oEo.\n..|..oFo..|..ooo.\n..|..ooo..|...|..\n..|...|...|...|..\n..|...|...|...|..\n..|...|...|...|..\n.ooo.ooo.ooo..|..\n.oGo-oHo-oIo..|..\n.ooo.ooo.ooo..|..\n..|...........|..\n.ooo...ooo...ooo.\n.oJo---oKo---oLo.\n.ooo...ooo...ooo.\n.................\n\n\nOutput 2\n\n\n4\n\n\n\n\n\nExample\n\nInput\n\n\n\n\nOutput", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01928 Matryoshka Doll", "description": "Input\n\nThe input consists of multiple datasets. The maximum number of data sets does not exceed 50. Each dataset is represented in the following format.\n\n> N\n> x1 y1 z1\n>::\n>::\n> xN yN zN\n>\n\nEach dataset consists of N + 1 rows, and the first row of the dataset is given the integer N, which represents the number of dolls. In the i-th line of the following N lines, three integers xi, yi, and zi representing the size of the i-th doll are given, separated by a half-width space. These integers satisfy 1 ≤ N, xi, yi, zi ≤ 100.\n\n> The end of the input is represented by a single zero line.\n\n> ### Output\n\nFor each data set, output the minimum value of the sum of the volumes of the dolls that can be seen from the outside in one line.\n\n> ### Sample Input\n\n\n2\none two Three\n4 2 3\n3\n2 5 2\n3 3 4\n5 5 5\nFive\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\nFive\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\nTen\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n3 2 3\n8 4 6\n2 6 4\n3 3 8\n3 2 7\n0\n\n\nOutput for Sample Input\n\n\ntwenty four\n145\n125\n15\n864\n\n\n\n\n\nExample\n\nInput\n\n2\n1 2 3\n4 2 3\n3\n2 5 2\n3 3 4\n5 5 5\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n5\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n10\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n3 2 3\n8 4 6\n2 6 4\n3 3 8\n3 2 7\n0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00713 Circle and Points", "description": "Input\n\nThe input consists of a series of data sets, followed by a single line only containing a single character '0', which indicates the end of the input. Each data set begins with a line containing an integer N, which indicates the number of points in the data set. It is followed by N lines describing the coordinates of the points. Each of the N lines has two decimal fractions X and Y, describing the x- and y-coordinates of a point, respectively. They are given with five digits after the decimal point.\n\nYou may assume 1 <= N <= 300, 0.0 <= X <= 10.0, and 0.0 <= Y <= 10.0. No two points are closer than 0.0001. No two points in a data set are approximately at a distance of 2.0. More precisely, for any two points in a data set, the distance d between the two never satisfies 1.9999 <= d <= 2.0001. Finally, no three points in a data set are simultaneously very close to a single circle of radius one. More precisely, let P1, P2, and P3 be any three points in a data set, and d1, d2, and d3 the distances from an arbitrarily selected point in the xy-plane to each of them respectively. Then it never simultaneously holds that 0.9999 <= di <= 1.0001 (i = 1, 2, 3).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00299 School Cafeteria", "description": "input\n\nThe input is given in the following format.\n\n\nN C\nconstraint1\nconstraint2\n::\nconstraintC\n\n\nThe number of high school students in the queue on the first line N (2 ≤ N ≤ 100) and the number of constraints C (0 ≤ C ≤ 200) are given. Each constraint constrainti is given in the following C line in the following format.\n\n\naioibisidi\n\n\nThe constraint does not include spaces. The meanings of ai, oi, bi, si and di are shown below.\n\n* ai and bi (1 ≤ ai, bi ≤ N and ai ≠ bi) are high school student numbers, and di is an integer representing the distance (0 ≤ d ≤ 10000).\n* oi is a string of <=,> =, * that specifies the order constraint, and if <=, \"ai must precede bi or be in the same position\",> = In the case of, \"ai must be after bi or in the same position\", and in the case of *, it means that \"ai can be before, in the same position, or after bi\". However, no more than 7 constraints with oi as * can be given.\n* si is the + or-character that specifies the distance constraint, for + \"ai and bi must be at least di meters apart\", for-\"ai and bi must be within di meters\" It means that.\n\n\n\nHowever, it is assumed that multiple constraints are not given to a pair.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01516 Milky Way", "description": "Input\n\nThe input consists of one or more datasets. One dataset has the following format:\n\n> N M L\n> x1 y1 a1 r1\n> x2 y2 a2 r2\n> ...\n> xN yN aN rN\n>\n\nThe first line of each test case consists of the integers N, M, L, where N is the number of stars (1 ≤ N ≤ 100), M is the Vega number (1 ≤ M ≤ N), and L is the Altair number (1 ≤ M ≤ N). Represents 1 ≤ L ≤ N). Information on each star is given in the following N lines. Each row consists of four integers, xi, yi, ai, and ri, where xi is the x-coordinate of the center of the i-th star (0 ≤ xi ≤ 1,000) and yi is the y-coordinate of the center of the i-th star (0 ≤ yi). ≤ 1,000), ai is the angle formed by the straight line connecting the center coordinates of the i-th star and the tip of the star with the y-axis (0 ≤ ai <72), and ri is from the center coordinates of the i-th star to the tip of the star. The length (1 ≤ ri ≤ 1,000). The end of the input is represented by a line containing three zeros.\n\nThe star on the left in Figure D-2 represents the star with x = 5, y = 10, a = 0, r = 5, and the star on the right is x = 15, y = 10, a = 30, r = 5. Represents the star of.\n\n<image>\n\nFigure D-2: Star example", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00476 Dungeon", "description": "input\n\nThe input consists of N lines. The first line of the input contains two integers N, H (2 ≤ N ≤ 100000 = 105, 1 ≤ H ≤ 10000000 = 107) separated by blanks. N is underground. It means that there is a treasure on the Nth floor, and H is the initial physical strength (physical strength at the stage of arriving at the basement 1st floor of the dungeon) and the maximum physical strength (recovery does not make the physical strength larger than H). ).\n\nIn the following N − 1 line, two integers are written separated by a space. For the integers di and hi on the 1 + i line (1 ≤ i ≤ N − 1), di is from the basement i floor to the basement i. + The physical strength consumed when descending to the 1st floor, hi represents the physical strength to recover when using the spring once in the basement i floor (0 ≤ di <H, 1 ≤ hi <H).\n\nThere is a way to reach the Nth basement floor in any scoring data. Of the scoring data, 10% of the points satisfy N ≤ 1000 and H ≤ 1000. For 30% of the points, N Satisfy ≤ 1000. For 50% of the points, the minimum number of times the fountain is used does not exceed 106.\n\nExample\n\nInput\n\n10 10\n4 2\n2 5\n6 1\n7 3\n6 4\n9 6\n0 8\n4 1\n9 4", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00870 Search of Concatenated Strings", "description": "Input\n\nThe input consists of a number of datasets, each giving a set of element strings and a text. The format of a dataset is as follows.\n\n\nn m\ne1\ne2\n.\n.\n.\nen\nt1\nt2\n.\n.\n.\ntm\n\n\nThe first line contains two integers separated by a space. n is the number of element strings. m is the number of lines used to represent the text. n is between 1 and 12, inclusive.\n\nEach of the following n lines gives an element string. The length (number of characters) of an element string is between 1 and 20, inclusive. The last m lines as a whole give the text. Since it is not desirable to have a very long line, the text is separated into m lines by newlines, but these newlines should be ignored. They are not parts of the text. The length of each of these lines (not including the newline) is between 1 and 100, inclusive. The length of the text is between 1 and 5000, inclusive.\n\nThe element strings and the text do not contain characters other than lowercase letters.\n\nThe end of the input is indicated by a line containing two zeros separated by a space.\n\nCAUTION! Although the sample input contains only small datasets, note that 12! × 5000 is far larger than 231 .", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "240_A. Cinema", "description": "Input\n\nThe first line of the input contains two integers m and k (1 ≤ m ≤ 100, 1 ≤ k ≤ m) — the number of actors in Berland and the number of Vasya's favourite actors. \n\nThe second line contains k distinct integers ai (1 ≤ ai ≤ m) — the identifiers of Vasya's favourite actors.\n\nThe third line contains a single integer n (1 ≤ n ≤ 100) — the number of movies in Vasya's list.\n\nThen follow n blocks of lines, each block contains a movie's description. The i-th movie's description contains three lines: \n\n  * the first line contains string si (si consists of lowercase English letters and can have the length of from 1 to 10 characters, inclusive) — the movie's title, \n  * the second line contains a non-negative integer di (1 ≤ di ≤ m) — the number of actors who starred in this movie,\n  * the third line has di integers bi, j (0 ≤ bi, j ≤ m) — the identifiers of the actors who star in this movie. If bi, j = 0, than Vasya doesn't remember the identifier of the j-th actor. It is guaranteed that the list of actors for a movie doesn't contain the same actors. \n\n\n\nAll movies have distinct names. The numbers on the lines are separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "74_A. Room Leader", "description": "Input\n\nThe first line contains an integer n, which is the number of contestants in the room (1 ≤ n ≤ 50). The next n lines contain the participants of a given room. The i-th line has the format of \"handlei plusi minusi ai bi ci di ei\" — it is the handle of a contestant, the number of successful hacks, the number of unsuccessful hacks and the number of points he has received from problems A, B, C, D, E correspondingly. The handle of each participant consists of Latin letters, digits and underscores and has the length from 1 to 20 characters. There are the following limitations imposed upon the numbers: \n\n  * 0 ≤ plusi, minusi ≤ 50; \n  * 150 ≤ ai ≤ 500 or ai = 0, if problem A is not solved; \n  * 300 ≤ bi ≤ 1000 or bi = 0, if problem B is not solved; \n  * 450 ≤ ci ≤ 1500 or ci = 0, if problem C is not solved; \n  * 600 ≤ di ≤ 2000 or di = 0, if problem D is not solved; \n  * 750 ≤ ei ≤ 2500 or ei = 0, if problem E is not solved. \n\n\n\nAll the numbers are integer. All the participants have different handles. It is guaranteed that there is exactly one leader in the room (i.e. there are no two participants with the maximal number of points).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "195_C. Try and Catch", "description": "Input\n\nThe first line contains a single integer: n (1 ≤ n ≤ 105) the number of lines in the program. Next n lines contain the program in language VPL. Each line contains no more than one operator. It means that input file can contain empty lines and lines, consisting only of spaces.\n\nThe program contains only operators try, catch and throw. It is guaranteed that the program is correct. It means that each started try-catch-block was closed, the catch operators aren't used unless there is an open try-catch-block. The program has exactly one throw operator. The program may have spaces at the beginning of a line, at the end of a line, before and after a bracket, a comma or a quote mark.\n\nThe exception type is a nonempty string, that consists only of upper and lower case english letters. The length of the string does not exceed 20 symbols. Message is a nonempty string, that consists only of upper and lower case english letters, digits and spaces. Message is surrounded with quote marks. Quote marks shouldn't be printed. The length of the string does not exceed 20 symbols.\n\nLength of any line in the input file does not exceed 50 symbols.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00749 Off Balance", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset, which represents a front view of a building, is formatted as follows.\n\n> w h\n>  p0(h-1)p1(h-1)...p(w-1)(h-1)\n>  ...\n>  p01p11...p(w-1)1\n>  p00p10...p(w-1)0\n>\n\nThe integers w and h separated by a space are the numbers of columns and rows of the layout, respectively. You may assume 1 ≤ w ≤ 10 and 1 ≤ h ≤ 60. The next h lines specify the placement of the pieces. The character pxy indicates the status of a block at (x,y), either ``.`', meaning empty, or one digit character between ``1`' and ``9`', inclusive, meaning a block of a piece. (As mentioned earlier, we denote a location of a block by xy-coordinates of its left-bottom corner.)\n\nWhen two blocks with the same number touch each other by any of their top, bottom, left or right face, those blocks are of the same piece. (Note that there might be two different pieces that are denoted by the same number.) The bottom of a block at (x,0) touches the ground.\n\nYou may assume that the pieces in each dataset are stacked in a tree-like form.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01269 Brave Princess Revisited", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> N M L\n> A1 B1 D1 E1\n> A2 B2 D2 E2\n> ...\n> AM BM DM EM\n\nThe first line is given three non-negative integers N (2 ≤ N ≤ 100), M, L (0 ≤ L ≤ 100). These integers represent the number of post stations, the number of roads, and the budget for hiring escorts. The post stations are assigned numbers from 1 to N, the starting point is assigned a number of 1, and the destination is assigned a number of N.\n\nIn the following M lines, road information is given to each line, one for each line. Road information is given by the four integers Ai, Bi (1 ≤ Ai <Bi ≤ N), Di (1 ≤ Di ≤ 100) Ei (0 ≤ Ei ≤ 10000). These represent the number of post stations at the start and end of the road, the distance of the road, and the number of people attacked by bandits and thugs, respectively.\n\nRoads are bidirectional, and there is at most one road for a group of post stations. In addition, it is guaranteed that you can always move from the starting point to the destination.\n\nThe end of the input is indicated by a single line containing three zeros separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00817 True Liars", "description": "Input\n\nThe input consists of multiple data sets, each in the following format:\n\n\nn p1 p2\nx1 y1 a1\nx2 y2 a2\n...\nxi yi ai\n...\nxn yn an\n\n\nThe first line has three non-negative integers n, p1, and p2. n is the number of questions Akira asked. p1 and p2 are the populations of the divine and devilish tribes, respectively, in the legend. Each of the following n lines has two integers xi, yi and one word ai. xi and yi are the identification numbers of inhabitants, each of which is between 1 and p1 + p2, inclusive. ai is either \"yes\", if the inhabitant xi said that the inhabitant yi was a member of the divine tribe, or \"no\", otherwise. Note that xi and yi can be the same number since \"are you a member of the divine tribe?\" is a valid question. Note also that two lines may have the same x's and y's since Akira was very upset and might have asked the same question to the same one more than once.\n\nYou may assume that n is less than 1000 and that p1 and p2 are less than 300. A line with three zeros, i.e., \"0 0 0\", represents the end of the input. You can assume that each data set is consistent and no contradictory answers are included.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01816 Bit Operation Game", "description": "Constraints\n\n* 1 ≤ N ≤ 100000\n* 1 ≤ M ≤ 100000\n* 0 ≤ X, Y <2 ^ {16}\n\n\n\nInput Format\n\nInput is given from standard input in the following format.\n\n\nN M\no_1_1\no_2\n...\no_ {N−1}\nu_1 v_1\nu_2 v_2\n...\nu_ {N−1} v_ {N−1}\nX_1 Y_1\nX_2 Y_2\n...\nX_M Y_M\n\n\nOn the first line, the number of vertices N of the tree and the integer M representing the number of games played are entered.\nFrom the 2nd line to the Nth line, the operation written at the 1st ... N-1st vertex is input.\nIn addition, the numbers of the two vertices connected by each side are entered in the N-1 line.\nFinally, the values ​​of X and Y in M ​​games are entered over M lines.\n\n\nOutput Format\n\nPrint the final T value for each game on the M line.\n\nSample Input 1\n\n\n6 3\nT = T | X\nT = T | Y\nT = T | Y\nT = T ^ Y\nT = T & X;\n0 1\n0 2\n13\n14\ntwenty five\n5 6\n3 5\n0 0\n\n\nSample Output 1\n\n\nFour\n6\n0\n\n\n<image>\nFor X = 5, Y = 6, proceed to vertices 0-> 2-> 5, and T = 5 & 6 = 4.\nIf X = 3, Y = 5, then go to vertices 0-> 1-> 4, and T = 3 ^ 5 = 6.\nIf X = 0, Y = 0, T does not change from 0 no matter where you go\n\n\n\n\n\nExample\n\nInput\n\n6 3\nT=T|X\nT=T|Y\nT=T|Y\nT=T^Y\nT=T&X\n0 1\n0 2\n1 3\n1 4\n2 5\n5 6\n3 5\n0 0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1510_C. Cactus Not Enough", "description": "Input\n\nThe input consists of one or more independent test cases.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), where n is the number of vertices in the graph. Vertices are numbered from 1 to n. Edges of the graph are represented by a set of edge-distinct paths, where m is the number of such paths. \n\nEach of the following m lines contains a path in the graph. A path starts with an integer number s_i (2 ≤ s_i ≤ 1000) followed by s_i integers from 1 to n. These s_i integers represent vertices of a path. Adjacent vertices in a path are distinct. The path can go through the same vertex multiple times, but every edge is traversed exactly once in the whole test case. There are no multiedges in the graph (there is at most one edge between any two vertices).\n\nThe last line of the input after all test cases always contains two zeros. It does not define a test case. It just marks the end of the input and does not require any output.\n\nAll graphs in the input are cacti. The total sum of all values of n and the total sum of all values of m throughout the input both do not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "734_C. Anton and Making Potions", "description": "Input\n\nThe first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·109, 1 ≤ m, k ≤ 2·105) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.\n\nThe second line of the input contains two integers x and s (2 ≤ x ≤ 2·109, 1 ≤ s ≤ 2·109) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.\n\nThe third line contains m integers ai (1 ≤ ai < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.\n\nThe fourth line contains m integers bi (1 ≤ bi ≤ 2·109) — the number of manapoints to use the i-th spell of the first type.\n\nThere are k integers ci (1 ≤ ci ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that ci are not decreasing, i.e. ci ≤ cj if i < j.\n\nThe sixth line contains k integers di (1 ≤ di ≤ 2·109) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that di are not decreasing, i.e. di ≤ dj if i < j.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00737 Twirling Robot", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\n> w h\n>  s(1,1) ... s(1,w)\n>  s(2,1) ... s(2,w)\n>  ...\n>  s(h,1) ... s(h,w)\n>  c0 c1 c2 c3\n\nThe integers h and w are the numbers of rows and columns of the board, respectively. You may assume 2 ≤ h ≤ 30 and 2 ≤ w ≤ 30. Each of the following h lines consists of w numbers delimited by a space. The number s(i, j) represents the command assigned to the square in the i-th row and the j-th column as follows.\n\n* 0: \"Straight\"\n* 1: \"Right\"\n* 2: \"Back\"\n* 3: \"Left\"\n* 4: \"Halt\"\n\n\n\nYou can assume that a \"Halt\" command is assigned to the goal square. Note that \"Halt\" commands may be assigned to other squares, too.\n\nThe last line of a dataset contains four integers c0, c1, c2, and c3, delimited by a space, indicating the costs that the player has to pay when the player gives \"Straight\", \"Right\", \"Back\", and \"Left\" commands respectively. The player cannot give \"Halt\" commands. You can assume that all the values of c0, c1, c2, and c3 are between 1 and 9, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00600 Computation of Minimum Length of Pipeline", "description": "Input\n\n* The first part consists of two positive integers in one line, which represent the number s of hot springs and the number d of districts in the city, respectively.\n* The second part consists of s lines: each line contains d non-negative integers. The i-th integer in the j-th line represents the distance between the j-th hot spring and the i-th district if it is non-zero. If zero it means they are not connectable due to an obstacle between them.\n* The third part consists of d-1 lines. The i-th line has d - i non-negative integers. The i-th integer in the j-th line represents the distance between the j-th and the (i + j)-th districts if it is non-zero. The meaning of zero is the same as mentioned above.\n\n\n\nFor the sake of simplicity, you can assume the following:\n\n* The number of hot springs and that of districts do not exceed 50.\n* Each distance is no more than 100.\n* Each line in the input file contains at most 256 characters.\n* Each number is delimited by either whitespace or tab.\n\n\n\nThe input has several test cases. The input terminate with a line which has two 0. The number of test cases is less than 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00453 Pyon-Pyon River Crossing", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nOn the first line of the input, two integers n, m are written, separated by a blank. This represents the number of lines and the number of jumps allowed to skip one line. N, m are 2 respectively. ≤ n ≤ 150, 0 ≤ m ≤ (n + 1) / 2.\n\nThe following n lines contain information about the stones in each line. The i + 1 line (1 ≤ i ≤ n) is one integer ki (0 ≤ ki ≤ 10) followed by 2 x ki integers are written separated by spaces. These represent the information of the stone on the i-th line counting from the starting shore.\n\nki represents the number of stones in the row, and for the following 2 × ki integers, the 2 × j -1st (1 ≤ j ≤ ki) integers xi, j are the jth in the row. 2 × jth integer di, j represents the slipperiness of the jth stone in the row. Xi, j, di, j are 1 ≤ xi, j, respectively. Satisfy di, j ≤ 1000.\n\nOf the scoring data, n ≤ 6 is satisfied for 20% of the points, and m = 0 is satisfied for the other 20% of the points.\n\nWhen both n and m are 0, it indicates the end of input. The number of data sets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01705 Square in Circles", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets does not exceed $30$. Each dataset is formatted as follows.\n\n> $N$\n> $X_1$ $R_1$\n> :\n> :\n> $X_N$ $R_N$\n\nThe first line of a dataset contains a single integer $N$ ($1 \\le N \\le 50{,}000$), the number of circles that constitute Circles Island. Each of the following $N$ lines describes a circle. The $(i+1)$-st line contains two integers $X_i$ ($-100{,}000 \\le X_i \\le 100{,}000$) and $R_i$ ($1 \\le R_i \\le 100{,}000$). $X_i$ denotes the $x$-coordinate of the center of the $i$-th circle and $R_i$ denotes the radius of the $i$-th circle. The $y$-coordinate of every circle is $0$, that is, the center of the $i$-th circle is at ($X_i$, $0$).\n\nYou can assume the followings.\n\n* For all $i$ ($1 \\le i \\le N-1$), $X_i$ is strictly less than $X_{i+1}$.\n* For all $i$ ($1 \\le i \\le N-1$), the $i$-th circle and the $(i+1)$-st circle have at least one common point ($X_{i+1} - X_i \\le R_i + R_{i+1}$).\n* Every circle has at least one point that is not inside or on the boundary of any other circles.\n\n\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1486_C2. Guessing the Greatest (hard version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array.\n\nInteraction\n\nYou can ask queries by printing \"? l r\" (1 ≤ l < r ≤ n). The answer is the index of the second maximum of all elements a_l, a_{l + 1}, ..., a_r. Array a is fixed beforehand and can't be changed in time of interaction.\n\nYou can output the answer by printing \"! p\", where p is the index of the maximum element in the array.\n\nYou can ask no more than 20 queries. Printing the answer doesn't count as a query.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages \n\n\n\nHacks\n\nTo make a hack, use the following test format.\n\nIn the first line output a single integer n (2 ≤ n ≤ 10^5). In the second line output a permutation of n integers 1 to n. The position of n in the permutation is the position of the maximum\n\nExample\n\nInput\n\n\n5\n\n3\n\n4", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00279 Happy End Problem", "description": "input\n\nThe input consists of one dataset. Input data is given in the following format.\n\n\nN\nx1 y1\n::\nxN yN\nQ\nk1\n::\nkQ\n\n\nThe number of points N (3 ≤ N ≤ 40) on the plane is given in the first line. The coordinates of each point are given in the following N lines. Each point is numbered from 1 to N in the order in which they are entered. xi and yi (-10000 ≤ xi, yi ≤ 10000) are integers representing the x and y coordinates of the i-th point, respectively. The positive direction of the x-axis shall be to the right, and the positive direction of the y-axis shall be upward.\n\nThe number of questions Q (1 ≤ Q ≤ N) is given in the following line. A question is given to the following Q line. ki (3 ≤ ki ≤ N) represents the number of corners of the convex polygon, which is the i-th question.\n\nThe input shall satisfy the following conditions.\n\n* The coordinates of the input points are all different.\n* None of the three points are on the same straight line.\n* For each question, there is only one convex polygon with the smallest area, and the difference in area from the second smallest convex polygon is 0.0001 or more.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00690 A Long Ride on a Railway", "description": "Input\n\nThe graph of a system is defined by a set of lines of integers of the form:\n\nns| nl\n---|---\ns1,1 | s1,2 | d1\ns2,1 | s2,2 | d2\n...\nsnl,1 | snl,2 | dnl\n\nHere 1 <= ns <= 10 is the number of stations (so, station names are 1, 2, ..., ns), and 1 <= nl <= 20 is the number of direct routes in this graph.\n\nsi,1 and si,2 (i = 1, 2, ..., nl) are station names at the both ends of the i-th direct route. di >= 1 (i = 1, 2, ..., nl) is the direct route distance between two different stations si,1 and si,2.\n\nIt is also known that there is at most one direct route between any pair of stations, and all direct routes can be travelled in either directions. Each station has at most four direct routes leaving from it.\n\nThe integers in an input line are separated by at least one white space (i.e. a space character (ASCII code 32) or a tab character (ASCII code 9)), and possibly preceded and followed by a number of white spaces.\n\nThe whole input of this problem consists of a few number of sets each of which represents one graph (i.e. system) and the input terminates with two integer `0`'s in the line of next ns and nl.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00766 Patisserie ACM", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\n> h w\n>  r(1, 1) ... r(1, w)\n>  r(2, 1) ... r(2, w)\n>  ...\n>  r(h, 1) ... r(h, w)\n>\n\nThe integers h and w are the lengths of the two orthogonal dimensions of the chocolate, in number of segments. You may assume that 2 ≤ h ≤ 100 and 2 ≤ w ≤ 100. Each of the following h lines consists of w characters, each is either a \".\" or a \"#\". The character r(i, j) represents whether the chocolate segment exists at the position (i, j ) as follows.\n\n* \".\": There is no chocolate.\n* \"#\": There is a segment of chocolate.\n\nYou can assume that there is no dataset that represents either multiple disconnected bars as depicted in Figure G-5 or a bar in a shape with hole(s) as depicted in Figure G-6 and G-7. You can also assume that there is at least one \"#\" character in each dataset.\n\n<image>\n\n\nFigure G-5: Disconnected chocolate bars\n\n\n\n<image>\n\n\nFigure G-6: A chocolate bar with a hole\n\n\n\n<image>\n\n\nFigure G-7: Another instance of a chocolate bar with a hole", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00256 Mayan Crucial Prediction", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by # 1 line. Each dataset is given in the following format:\n\n\nb.ka.t.w.ki\n\n\nOr\n\n\ny.m.d\n\n\nThe dataset consists of one line containing one character string. b.ka.t.w.ki is the Mayan long-term date and y.m.d is the Christian era date. The units given are as follows.\n\nMaya long calendar\nb | Baktun | (0 ≤ b <13)\n--- | --- | ---\nka | Katun | (0 ≤ ka <20)\nt | Tun | (0 ≤ t <20)\nw | Winal | (0 ≤ w <18)\nki | kin | (0 ≤ ki <20)\n\nYear\ny | year | (2012 ≤ y ≤ 10,000,000)\n--- | --- | ---\nm | month | (1 ≤ m ≤ 12)\nd | day | (1 ≤ d ≤ 31)\n\n\n\nThe maximum value for a day in the Christian era depends on whether it is a large month, a small month, or a leap year (a leap year is a multiple of 4 that is not divisible by 100 or divisible by 400). The range of dates in the Maya long calendar is from 0.0.0.0.0 to 12.19.19.17.19. However, 0.0.0.0.0.0 of the Maya long-term calendar corresponds to 2012.12.21 of the Christian era. The range of dates in the Christian era is from 2012.12.21 to 10000000.12.31.\n\nThe number of datasets does not exceed 500.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00200 Traveling Alone: One-way Ticket of Youth", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nn m\na1 b1 cost1 time1\na2 b2 cost2 time2\n::\nan bn costn timen\nk\np1 q1 r1\np2 q2 r2\n::\npk qk rk\n\n\nThe first line gives the number of track information n (1 ≤ n ≤ 3000) and the number of stations m (1 ≤ m ≤ 100).\n\nThe following n lines give information on the i-th line. As information on each line, the numbers ai, bi (1 ≤ ai, bi ≤ m) of the two stations connecting the lines, the toll costi (1 ≤ costi ≤ 1000), and the travel time timei (1 ≤ timei ≤ 1000) are given. I will. However, each station shall be numbered in order from 1 to m. If ai and bi are connected by railroad tracks, both ai to bi and bi to ai can be moved at the same rate and time.\n\nThe following line is given the number of queries k (1 ≤ k ≤ 200). The next k line is given the i-th query. For each query, the departure station pi, the arrival station qi, and the type of value to output ri (0 or 1) are given. Inquiries must have a route.\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "925_A. Stairs and Elevators", "description": "Input\n\nThe first line contains five integers n, m, c_l, c_e, v (2 ≤ n, m ≤ 10^8, 0 ≤ c_l, c_e ≤ 10^5, 1 ≤ c_l + c_e ≤ m - 1, 1 ≤ v ≤ n - 1) — the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains c_l integers l_1, …, l_{c_l} in increasing order (1 ≤ l_i ≤ m), denoting the positions of the stairs. If c_l = 0, the second line is empty.\n\nThe third line contains c_e integers e_1, …, e_{c_e} in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers l_i and e_i are distinct.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines describe queries. Each of these lines contains four integers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i. e. y_1 and y_2 are not among l_i and e_i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "883_C. Downloading B++", "description": "Input\n\nThe first line contains three integer numbers f, T and t0 (1 ≤ f, T, t0 ≤ 107) — size of the file to download (in bytes), maximal time to download the file (in milliseconds) and number of milliseconds to download one byte using the regular internet tariff.\n\nThe second line contains a description of the first additional package. The line contains three integer numbers a1, t1 and p1 (1 ≤ a1, t1, p1 ≤ 107), where a1 is maximal sizes of downloaded data (in bytes), t1 is time to download one byte (in milliseconds), p1 is price of the package (in burles).\n\nThe third line contains a description of the second additional package. The line contains three integer numbers a2, t2 and p2 (1 ≤ a2, t2, p2 ≤ 107), where a2 is maximal sizes of downloaded data (in bytes), t2 is time to download one byte (in milliseconds), p2 is price of the package (in burles).\n\nPolycarp can buy any package many times. Once package is bought it replaces the regular tariff until package data limit is completely used. While a package is in use Polycarp can't buy another package or switch back to the regular internet tariff.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00884 Membership Management", "description": "Input\n\nThe input is a sequence of datasets, each being in the following format.\n\nn\ngroup1:member1,1,...,member1,m1.\n.\n.\n.\ngroupi:memberi,1,...,memberi,mi.\n.\n.\n.\ngroupn:membern,1,...,membern,mn.\n\n\nThe first line contains n, which represents the number of groups and is a positive integer no more than 100. Each of the following n lines contains the membership information of a group: groupi (1 ≤ i ≤ n) is the name of the i-th task group and is followed by a colon (:) and then the list of its mi member s that are delimited by a comma (,) and terminated by a period (.).\n\nThose group names are mutually different. Each mi (1 ≤ i ≤ n) is between 1 and 10, inclusive. A member is another group name if it is one of group1, group2,..., or groupn. Otherwise it is an employee name.\n\nThere are no circular (or recursive) definitions of group(s). You may assume that mi member names of a group are mutually different.\n\nEach group or employee name is a non-empty character string of length between 1 and 15, inclusive, and consists of lowercase letters.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "967_C. Stairs and Elevators", "description": "Input\n\nThe first line contains five integers n, m, c_l, c_e, v (2 ≤ n, m ≤ 10^8, 0 ≤ c_l, c_e ≤ 10^5, 1 ≤ c_l + c_e ≤ m - 1, 1 ≤ v ≤ n - 1) — the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains c_l integers l_1, …, l_{c_l} in increasing order (1 ≤ l_i ≤ m), denoting the positions of the stairs. If c_l = 0, the second line is empty.\n\nThe third line contains c_e integers e_1, …, e_{c_e} in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers l_i and e_i are distinct.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines describe queries. Each of these lines contains four integers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i. e. y_1 and y_2 are not among l_i and e_i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00962 Pizza Delivery", "description": "Input\n\nThe input consists of a single test case in the following format.\n\n\n$n$ $m$\n$a_1$ $b_1$ $c_1$\n...\n$a_m$ $b_m$ $c_m$\n\n\nThe first line contains two integers, $n$, the number of intersections, and $m$, the number of street sections in New Tsukuba City ($2 \\leq n \\leq 100 000, 1 \\leq m \\leq 100 000$). The intersections are numbered $1$ through $n$ and the street sections are numbered $1$ through $m$.\n\nThe following $m$ lines contain the information about the street sections, each with three integers $a_i$, $b_i$, and $c_i$ ($1 \\leq a_i n, 1 \\leq b_i \\leq n, a_i \\ne b_i, 1 \\leq c_i \\leq 100 000$). They mean that the street section numbered $i$ connects two intersections with the one-way direction from $a_i$ to $b_i$, which will be reversed on the $i$-th day. The street section has the length of $c_i$. Note that there may be more than one street section connecting the same pair of intersections.\n\nThe pizzeria is on the intersection 1 and Alyssa's house is on the intersection 2. It is guaranteed that at least one route exists from the pizzeria to Alyssa's before the social experiment starts.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "89_D. Space mines", "description": "Input\n\nThe first input data line contains 7 integers Ax, Ay, Az, vx, vy, vz, R. They are the Death Star's initial position, the direction of its movement, and its radius ( - 10 ≤ vx, vy, vz ≤ 10, |v| > 0, 0 < R ≤ 100).\n\nThe second line contains an integer n, which is the number of mines (1 ≤ n ≤ 100). Then follow n data blocks, the i-th of them describes the i-th mine.\n\nThe first line of each block contains 5 integers Oix, Oiy, Oiz, ri, mi, which are the coordinates of the mine centre, the radius of its body and the number of spikes (0 < ri < 100, 0 ≤ mi ≤ 10). Then follow mi lines, describing the spikes of the i-th mine, where the j-th of them describes the i-th spike and contains 3 integers pijx, pijy, pijz — the coordinates of the vector where the given spike is directed (<image>).\n\nThe coordinates of the mines' centers and the center of the Death Star are integers, their absolute value does not exceed 10000. It is guaranteed that R > ri for any 1 ≤ i ≤ n. For any mines i ≠ j the following inequality if fulfilled: <image>. Initially the Death Star and the mines do not have common points.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01293 Whist", "description": "Input\n\nThe input is a sequence of datasets. Each dataset corresponds to a single deal and has the following format:\n\nTrump\nCardN,1 CardN,2 ... CardN,13\nCardE,1 CardE,2 ... CardE,13\nCardS,1 CardS,2 ... CardS,13\nCardW,1 CardW,2 ... CardW,13\n\n\nTrump indicates the trump suit. CardN,i, CardE,i, CardS,i, and CardW,i denote the card played in the i-th trick by the north, east, south, and west players respectively. Each card is represented by two characters; the first and second character indicates the rank and the suit respectively.\n\nThe rank is represented by one of the following characters: ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’, ‘T’ (10), ‘J’ (jack), ‘Q’ (queen), ‘K’ (king), and ‘A’ (ace). The suit is represented by one of the following characters: ‘S’ (spades), ‘H’ (hearts), ‘D’ (diamonds), and ‘C’ (clubs).\n\nYou should assume the cards have been dealt out by the west player. Thus the first trick is led by the north player. Also, the input does not contain any illegal plays.\n\nThe input is terminated by a line with “#”. This is not part of any dataset and thus should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1515_I. Phoenix and Diamonds", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ q ≤ 10^5) — the number of types of diamonds and number of days, respectively.\n\nThe next n lines describe each type of diamond. The i-th line will contain three integers a_i, w_i, and v_i (0 ≤ a_i ≤ 10^5; 1 ≤ w_i, v_i ≤ 10^5) — the initial number of diamonds of the i-th type, the weight of diamonds of the i-th type, and the value of diamonds of the i-th type, respectively.\n\nThe next q lines contain the queries. For each query, the first integer of each line is t (1 ≤ t ≤ 3) — the type of query.\n\nIf t=1, then two integers k_i, d_i follow (1 ≤ k_i ≤ 10^5; 1 ≤ d_i ≤ n). This means that a new shipment of k_i diamonds arrived, each of type d_i.\n\nIf t=2, then two integers k_i, d_i follow (1 ≤ k_i ≤ 10^5; 1 ≤ d_i ≤ n). This means that the store has sold k_i diamonds, each of type d_i. It is guaranteed that the store had the diamonds before they sold them.\n\nIf t=3, an integer c_i will follow (1 ≤ c_i ≤ 10^{18}) — the weight capacity of Phoenix's bag.\n\nIt is guaranteed that there is at least one query where t=3.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00234 Aizu Buried Treasure", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two zero lines. Each dataset is given in the following format.\n\n\nW H\nf m o\nc1,1 c2,1 ... cW,1\nc1,2 c2,2 ... cW,2\n...\nc1, H c2, H ... cW, H\n\n\nThe horizontal size W of the formation and the vertical size H (3 ≤ W, H ≤ 10) are given in the first line. The second line is the integer f (1 ≤ f ≤ 10000) that represents your excavation cost, the integer m (3 ≤ m ≤ 50) that represents the capacity of the oxygen cylinder, and the integer o that represents the amount of oxygen you have in the initial state. o ≤ m) is given.\n\nThe following H line is given the geological information ci, j. ci, j represents the cell information for coordinates (i, j) and is given in the following format:\nIf the value is negative, the cell is full of soil and the value represents the cost.\nIf the value is positive, it is a cell filled with oxygen, and the value represents the amount of oxygen.\nHowever, there are no more than 50 cells in which oxygen has accumulated.\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01090 Bridge Construction Planning", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets is at most 30. Each dataset is in the following format.\n\n> n m k\n>  u1 v1 w1 l1\n>  ...\n>  um vm wm lm\n>\n\nThe first line contains three integers n, m, and k, where n is the number of islands, m is the total number of proposals, and k is the number of proposals that are to be ordered to company A (2 ≤ n ≤ 200, 1 ≤ m ≤ 600, and 0 ≤ k ≤ n−1). Islands are identified by integers, 1 through n. The following m lines denote the proposals each of which is described with three integers ui, vi, wi and one character li, where ui and vi denote two bridged islands, wi is the cost of the bridge (in hundred million yen), and li is the name of the company that submits this proposal (1 ≤ ui ≤ n, 1 ≤ vi ≤ n, 1 ≤ wi ≤ 100, and li = 'A' or 'B'). You can assume that each bridge connects distinct islands, i.e., ui ≠ vi, and each company gives at most one proposal for each pair of islands, i.e., {ui, vi} ≠ {uj, vj} if i ≠ j and li = lj.\n\nThe end of the input is indicated by a line with three zeros separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00890 Test Case Tweaking", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nn m c\nf1 t1 c1\nf2 t2 c2\n.\n.\n.\nfm tm cm\n\n\n<image> | <image>\n---|---\n\nFigure G.1: Example 1 of graph\n\n|\n\nFigure G.2: Example 2 of graph\n\nThe integers n, m and c are the number of the nodes, the number of the edges, and the target cost, respectively, each separated by a single space, where 2 ≤ n ≤ 100, 1 ≤ m ≤ 1000 and 0 ≤ c ≤ 100000.\n\nEach node in the graph is represented by an integer 1 through n.\n\nThe following m lines represent edges: the integers fi, ti and ci (1 ≤ i ≤ m) are the originating node, the destination node and the associated cost of the i-th edge, each separated by a single space. They satisfy 1 ≤ fi, ti ≤ n and 0 ≤ ci ≤ 10000. You can assume that fi ≠ ti and (fi, ti) ≠ (fj, tj) when i ≠ j.\n\nYou can assume that, for each dataset, there is at least one path from node 1 to node n, and that the cost of the minimum cost path from node 1 to node n of the given graph is greater than c.\n\nThe end of the input is indicated by a line containing three zeros separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00462 Pizza", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe first line is a positive integer d (2 ≤ d ≤ 1000000000 = 109) that represents the total length of the loop line, the second line is a positive integer n (2 ≤ n ≤ 100000) that represents the number of stores, and the third line is A positive integer m (1 ≤ m ≤ 10000) is written to represent the number of orders. The n --1 lines after the 4th line are integers d2, d3, ..., dn that represent the location of stores other than the main store. (1 ≤ di ≤ d -1) is written in this order, and the integers k1, k2, ..., km (0 ≤ ki ≤ d) representing the delivery destination location are in the m lines after the n + 3rd line. --1) are written in this order.\n\nOf the scoring data, for 40% of the points, n ≤ 10000 is satisfied. For 40% of the points, the total distance traveled and the value of d are both 1000000 or less. In the scoring data, the total distance traveled is 1000000000 = 109 or less.\n\nWhen d is 0, it indicates the end of input. The number of data sets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1320_B. Navigation System", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ m ≤ 2 ⋅ 10^5) — the number of intersections and one-way roads in Bertown, respectively.\n\nThen m lines follow, each describing a road. Each line contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting a road from intersection u to intersection v. All roads in Bertown are pairwise distinct, which means that each ordered pair (u, v) appears at most once in these m lines (but if there is a road (u, v), the road (v, u) can also appear).\n\nThe following line contains one integer k (2 ≤ k ≤ n) — the number of intersections in Polycarp's path from home to his workplace.\n\nThe last line contains k integers p_1, p_2, ..., p_k (1 ≤ p_i ≤ n, all these integers are pairwise distinct) — the intersections along Polycarp's path in the order he arrived at them. p_1 is the intersection where Polycarp lives (s = p_1), and p_k is the intersection where Polycarp's workplace is situated (t = p_k). It is guaranteed that for every i ∈ [1, k - 1] the road from p_i to p_{i + 1} exists, so the path goes along the roads of Bertown.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1321_D. Navigation System", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ m ≤ 2 ⋅ 10^5) — the number of intersections and one-way roads in Bertown, respectively.\n\nThen m lines follow, each describing a road. Each line contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting a road from intersection u to intersection v. All roads in Bertown are pairwise distinct, which means that each ordered pair (u, v) appears at most once in these m lines (but if there is a road (u, v), the road (v, u) can also appear).\n\nThe following line contains one integer k (2 ≤ k ≤ n) — the number of intersections in Polycarp's path from home to his workplace.\n\nThe last line contains k integers p_1, p_2, ..., p_k (1 ≤ p_i ≤ n, all these integers are pairwise distinct) — the intersections along Polycarp's path in the order he arrived at them. p_1 is the intersection where Polycarp lives (s = p_1), and p_k is the intersection where Polycarp's workplace is situated (t = p_k). It is guaranteed that for every i ∈ [1, k - 1] the road from p_i to p_{i + 1} exists, so the path goes along the roads of Bertown.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1343_E. Weights Distributing", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains five integers n, m, a, b and c (2 ≤ n ≤ 2 ⋅ 10^5, n-1 ≤ m ≤ min((n(n-1))/(2), 2 ⋅ 10^5), 1 ≤ a, b, c ≤ n) — the number of vertices, the number of edges and districts in Mike's trip.\n\nThe second line of the test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i ≤ 10^9), where p_i is the i-th price from the array.\n\nThe following m lines of the test case denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the array of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied. It is guaranteed that the given graph is connected.\n\nIt is guaranteed that the sum of n (as well as the sum of m) does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ m ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "896_B. Ithea Plays With Chtholly", "description": "Input\n\nThe first line contains 3 integers n, m and c (<image>, <image> means <image> rounded up) — the number of sheets, the number of rounds and the largest possible number Ithea can give to Chtholly respectively. The remaining parts of input are given throughout the interaction process.\n\nInteraction\n\nIn each round, your program needs to read one line containing a single integer pi (1 ≤ pi ≤ c), indicating the number given to Chtholly.\n\nYour program should then output a line containing an integer between 1 and n, indicating the number of sheet to write down this number in.\n\nAfter outputting each line, don't forget to flush the output. For example: \n\n  * fflush(stdout) in C/C++; \n  * System.out.flush() in Java; \n  * sys.stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * See the documentation for other languages. \n\n\n\nIf Chtholly wins at the end of a round, no more input will become available and your program should terminate normally. It can be shown that under the constraints, it's always possible for Chtholly to win the game.\n\nExample\n\nInput\n\n2 4 4\n2\n1\n3", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "766_D. Mahmoud and a Dictionary", "description": "Input\n\nThe first line of input contains three integers n, m and q (2 ≤ n ≤ 105, 1 ≤ m, q ≤ 105) where n is the number of words in the dictionary, m is the number of relations Mahmoud figured out and q is the number of questions Mahmoud asked after telling all relations.\n\nThe second line contains n distinct words a1, a2, ..., an consisting of small English letters with length not exceeding 20, which are the words in the dictionary.\n\nThen m lines follow, each of them contains an integer t (1 ≤ t ≤ 2) followed by two different words xi and yi which has appeared in the dictionary words. If t = 1, that means xi has a synonymy relation with yi, otherwise xi has an antonymy relation with yi.\n\nThen q lines follow, each of them contains two different words which has appeared in the dictionary. That are the pairs of words Mahmoud wants to know the relation between basing on the relations he had discovered.\n\nAll words in input contain only lowercase English letters and their lengths don't exceed 20 characters. In all relations and in all questions the two words are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "897_D. Ithea Plays With Chtholly", "description": "Input\n\nThe first line contains 3 integers n, m and c (<image>, <image> means <image> rounded up) — the number of sheets, the number of rounds and the largest possible number Ithea can give to Chtholly respectively. The remaining parts of input are given throughout the interaction process.\n\nInteraction\n\nIn each round, your program needs to read one line containing a single integer pi (1 ≤ pi ≤ c), indicating the number given to Chtholly.\n\nYour program should then output a line containing an integer between 1 and n, indicating the number of sheet to write down this number in.\n\nAfter outputting each line, don't forget to flush the output. For example: \n\n  * fflush(stdout) in C/C++; \n  * System.out.flush() in Java; \n  * sys.stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * See the documentation for other languages. \n\n\n\nIf Chtholly wins at the end of a round, no more input will become available and your program should terminate normally. It can be shown that under the constraints, it's always possible for Chtholly to win the game.\n\nExample\n\nInput\n\n2 4 4\n2\n1\n3", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "755_C. PolandBall and Forest", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 104) — the number of Balls living in the forest.\n\nThe second line contains a sequence p1, p2, ..., pn of length n, where (1 ≤ pi ≤ n) holds and pi denotes the most distant from Ball i relative living on the same tree. If there are several most distant relatives living on the same tree, pi is the id of one with the smallest id.\n\nIt's guaranteed that the sequence p corresponds to some valid forest.\n\nHacking: To hack someone, you should provide a correct forest as a test. The sequence p will be calculated according to the forest and given to the solution you try to hack as input. Use the following format:\n\nIn the first line, output the integer n (1 ≤ n ≤ 104) — the number of Balls and the integer m (0 ≤ m < n) — the total number of edges in the forest. Then m lines should follow. The i-th of them should contain two integers ai and bi and represent an edge between vertices in which relatives ai and bi live. For example, the first sample is written as follows:\n    \n    \n      \n    5 3  \n    1 2  \n    3 4  \n    4 5", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00618 Course Planning for Lazy Students", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format:\n\n> n U\n> c0 k0 r01 r02 ... r0 k0\n> c1 k1 r11 r12 ... r1 k1\n> ..\n> ..\n> cn-1 kn-1 r (n-1) 1 r (n-1) 2 ... r (n-1) kn-1\n>\n\nn (1 ≤ n ≤ 20) is an integer indicating the number of courses included in the course schedule. It is assumed that the subjects are assigned numbers from 0 to n-1, and the i-th subject is referred to as subject i below.\n\nU (1 ≤ U ≤ 100) is an integer representing the total number of units required.\n\nci (1 ≤ ci ≤ 10) indicates the number of credits in subject i. The next ki (0 ≤ ki ≤ 5) indicates the number of pre-study subjects in subject i. Subsequent ri1 ​​ri2 ... riki indicates the subject number of the pre-study subject of subject i.\n\nNo input is given to follow one or more arrows indicating the pre-repair conditions from a subject and return to that subject again. It may also be assumed that there is always a combination of subjects that satisfy U.\n\nWhen both n and U are 0, it indicates the end of input. The number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00826 Monster Trap", "description": "Input\n\nThe input consists of multiple data sets, each in the following format.\n\n\nn\nx1 y1  x'1 y'1\nx2 y2  x'2 y'2\n...\nxn yn  x'n y'n\n\n\nThe first line of a data set contains a positive integer n, which is the number of the line segments drawn by the wizard. Each of the following n input lines contains four integers x, y, x', and y', which represent the x- and y-coordinates of two points (x, y) and (x', y' ) connected by a line segment. You may assume that all line segments have non-zero lengths. You may also assume that n is less than or equal to 100 and that all coordinates are between -50 and 50, inclusive.\n\nFor your convenience, the coordinate system is arranged so that the monster is always on the origin (0, 0). The wizard never draws lines crossing (0, 0).\n\nYou may assume that any two line segments have at most one intersection point and that no three line segments share the same intersection point. You may also assume that the distance between any two intersection points is greater than 10-5.\n\nAn input line containing a zero indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01036 Yu-kun Likes To Play Darts", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* All inputs are given as integers\n* 1 ≤ n ≤ 50\n* 0 ≤ cx, cy, x, y ≤ 1000\n* 1 ≤ r ≤ 100\n* 3 ≤ p ≤ 10\n* 1 ≤ score ≤ 100\n* Polygon vertices are given in such an order that they visit adjacent vertices clockwise or counterclockwise.\n* The sides of a polygon do not have anything in common with the sides of another polygon\n* A polygon does not contain another polygon\n* If the arrow sticks on the side of the polygon, no score will be given.\n\nInput\n\n\nn cx cy r\nInformation on the 0th polygon\nInformation on the first polygon\n...\nInformation on the (n-1) th polygon\n\n\nn is the number of polygons on the darts board. Polygonal information is given in the following format.\n\n\np score\nx0 y0\nx1 y1\n...\nx (p-1) y (p-1)\n\n\np represents the number of vertices of the polygon, and score represents the score written on the polygon. Each line segment of the polygon is a line segment connecting the vertices of (xi, yi) and (xi + 1, yi + 1) (i <p-1), and (xp-1, yp-1) and (x0, It is a line segment connecting the vertices of y0).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01847 Curtain", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> N\n> x1 y1\n>::\n>::\n> xN yN\n> a1 b1\n> a2 b2\n> a3 b3\n> a4 b4\n\nThe first line is given the integer N, which represents the number of vertices the window has (4 ≤ N ≤ 100). The following N lines are given the integer xi representing the x-coordinates of the different vertices of the window and the integer yi representing the y-coordinate (-20,000 ≤ xi, yi ≤ 20,000, 1 ≤ i ≤ N). Here, the positive direction of the y-axis is the direction rotated 90 degrees counterclockwise from the positive direction of the x-axis. In addition, the next four lines are given the integer aj, which represents the x-coordinate of the different vertices of the curtain, and the integer bj, which represents the y-coordinate (-20,000 ≤ aj, bj ≤ 20,000, 1 ≤ j ≤ 4). The vertices of both windows and curtains are given in counterclockwise order. In addition, the figures representing windows and curtains are figures without self-intersection.\n\nThe end of the input is indicated by a single 0 line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1271_F. Divide The Students", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 300) — the number of groups.\n\nThen the descriptions of groups follow. The description of the i-th group consists of three lines:\n\n  * the first line contains three integers a_{i, 1}, b_{i, 1} and c_{i, 1} (1 ≤ a_{i, 1}, b_{i, 1}, c_{i, 1} ≤ 3000) — the capacity of the auditorium, lab and gym assigned to the first subgroup of the i-th group, respectively; \n  * the second line contains three integers a_{i, 2}, b_{i, 2} and c_{i, 2} (1 ≤ a_{i, 2}, b_{i, 2}, c_{i, 2} ≤ 3000) — the capacity of the auditorium, lab and gym assigned to the second subgroup of the i-th group, respectively; \n  * the third line contains integers d_{i, 1}, d_{i, 2}, ..., d_{i, 7} (0 ≤ d_{i, j} ≤ 3000) — the number of students belonging to each of the seven aforementioned types in the i-th group. It is not guaranteed that the sum of these values is positive — a group can consist entirely of students that don't attend classes at all. \n\n\n\nIt is guaranteed that the total number of students in all groups is not greater than 3000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00632 Ghost Buster!", "description": "Input\n\nMultiple datasets are given. The format of each dataset is shown below.\n\n\nH W (number of cells in the north-south direction of the grid, number of cells in the east-west direction of the grid: two integers separated by blanks)\nLetters H x W (mass type:'.','#','A', or'B')\npattern (ghost behavior pattern: character string)\n\n\n'A' indicates the initial position of the girl and'B' indicates the initial position of the ghost. The initial positions of both are above the'.' Square.\n\npattern is a string consisting of '5', '2', '4', '6', and '8', and the meaning of each character is as follows:\n\n'5' | Stay on the spot\n--- | ---\n'8' | Go north one square\n'6' | Go east one square\n'4' | Go west one square\n'2' | Go south one square\n\nFor example, if the pattern is \"8544\", the ghost repeats the action patterns of \"advancing 1 square to the north\", \"staying there\", \"advancing 1 square to the west\", and \"advancing 1 square to the west\".\n\nH and W are 1 or more and 20 or less, and the pattern length is 10 or less.\n\nWhen both H and W are 0, the input ends.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00716 Ohgas' Fortune", "description": "Input\n\nThe input consists of datasets. The entire input looks like:\n\n> the number of datasets (=m)\n>  1st dataset\n>  2nd dataset\n>  ...\n>  m-th dataset\n>\n\nThe number of datasets, m, is no more than 100. Each dataset is formatted as follows.\n\n> the initial amount of the fund for operation\n>  the number of years of operation\n>  the number of available operations (=n)\n>  operation 1\n>  operation 2\n>  ...\n>  operation n\n>\n\nThe initial amount of the fund for operation, the number of years of operation, and the number of available operations are all positive integers. The first is no more than 100000000, the second no more than 10, and the third no more than 100.\n\nEach ``operation'' is formatted as follows.\n\n> simple-or-compound annual-interest-rate annual-operation-charge\n\nwhere simple-or-compound is a single character of either '0' or '1', with '0' indicating simple interest and '1' compound. annual-interest-rate is represented by a decimal fraction and is an integral multiple of 1/8192. annual-operation-charge is an integer not exceeding 100000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01925 Quiz", "description": "Input\n\n> The input dataset consists of multiple cases. Each case has the following format.\n\n> N M\n> S1 k1 c1,1 ... c1, k1\n> ...\n> SM kM cM, 1 ... cM, kM\n\nThe first line gives the number of answerers N and the number of questions M excluding the last question. The following M line gives information on the answerers who may be able to answer questions 1 to M. In the i-line, the score Si of the i-question and the number of answerers ki who may answer the i-question correctly are given, and immediately after that, the number of ki, ci, 1 ... ci, ki is given. ci and j (1 ≤ j ≤ ki) each represent the number of answerers who may answer the i question correctly.\n\nThe end of the input is indicated by a line consisting of two zeros. The maximum number of data sets does not exceed 30.\n\nAll the numerical values ​​given by the input are integers and satisfy the following conditions.\n\n* 2 ≤ N ≤ 10,000\n* 1 ≤ M ≤ 1,000\n* 1 ≤ Si ≤ 100\n* 1 ≤ ki ≤ N\n* 1 ≤ ci, 1 <... <ci, ki ≤ N\n* Σki ≤ 100,000\n\n\n\nHowever, note that the SM + 1 to be output may exceed this range.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1426_B. Symmetric Matrix", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next 2n lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding 100 — the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding 100 — the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "493_A. Vasya and Football", "description": "Input\n\nThe first line contains the name of the team playing at home. The second line contains the name of the team playing away. Both lines are not empty. The lengths of both lines do not exceed 20. Each line contains only of large English letters. The names of the teams are distinct.\n\nNext follows number n (1 ≤ n ≤ 90) — the number of fouls. \n\nEach of the following n lines contains information about a foul in the following form: \n\n  * first goes number t (1 ≤ t ≤ 90) — the minute when the foul occurs; \n  * then goes letter \"h\" or letter \"a\" — if the letter is \"h\", then the card was given to a home team player, otherwise the card was given to an away team player; \n  * then goes the player's number m (1 ≤ m ≤ 99); \n  * then goes letter \"y\" or letter \"r\" — if the letter is \"y\", that means that the yellow card was given, otherwise the red card was given. \n\n\n\nThe players from different teams can have the same number. The players within one team have distinct numbers. The fouls go chronologically, no two fouls happened at the same minute.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00764 Chain-Confined Path", "description": "Input\n\nThe input consists of multiple datasets. Each dataset represents the shape of a chain in the following format.\n\n> n\n>  x1 y1 r1\n>  x2 y2 r2\n>  ...\n>  xn yn rn\n>\n\nThe first line of a dataset contains an integer n (3 ≤ n ≤ 100) representing the number of the circles. Each of the following n lines contains three integers separated by a single space. (xi, yi) and ri represent the center position and the radius of the i-th circle Ci. You can assume that 0 ≤ xi ≤ 1000, 0 ≤ yi ≤ 1000, and 1 ≤ ri ≤ 25.\n\nYou can assume that Ci and Ci+1 (1 ≤ i ≤ n−1) intersect at two separate points. When j ≥ i+2, Ci and Cj are apart and either of them does not contain the other. In addition, you can assume that any circle does not contain the center of any other circle.\n\nThe end of the input is indicated by a line containing a zero.\n\nFigure E-1 corresponds to the first dataset of Sample Input below. Figure E-2 shows the shortest paths for the subsequent datasets of Sample Input.\n\n<image>\n\nFigure E-2: Example chains and the corresponding shortest paths", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01271 Mirror Cave", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> W H\n> RoomL1 RoomR1\n> RoomL2 RoomR2\n> ...\n> RoomLH RoomRH\n\nThe first line gives two positive integers W, H (1 ≤ W, H ≤ 50) separated by a single space. After that, information on two rooms is given over H lines. RoomLi and RoomRi correspond to the i-th row of the left and right rooms, respectively. Both are strings of length W, with the jth character corresponding to the jth column of the room. Each character is one of the following:\n\n* `.`: Freely moveable cell\n* `#`: Cell with wall (cannot enter)\n* `%`: Destination\n* `R`: Initial position of Rin\n* `L`: Initial position of Len\n\n\n\nIn each room, the first row corresponds to the north end of the room and the first row corresponds to the west end of the room. Also, each room always has exactly one destination, with exactly one initial position for Len in the left room and one for Rin in the right room.\n\nThe end of the input is indicated by a line containing two zeros separated by a blank.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02089 AddMulSubDiv", "description": "Input\n\n\nN Q L R\nA_1 A_2 ... A_N\nq_1 x_1 s_1 t_1\n:\nq_Q x_Q s_Q t_Q\n\n\n* The first line contains four integers N, Q, L, and R. N is the number of elements in an integer array A, Q is the number of queries, and L and R specify the range of integers you want to count within after the queries.\n* The second line consists of N integers, the i-th of which is the i-th element of A.\n* The following Q lines represent information of queries. The j-th line of them corresponds to the j-th query and consists of four integers q_j, x_j, s_j, and t_j. Here, q_j = 1 stands for the j-th query is Query 1, and q_j = 2 stands for the j-th query is Query 2. x_j, s_j, and t_j are parameters used for the j-th query.\n\n\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* -2^{63} < L \\leq R < 2^{63}\n* 0 \\leq |A_i| \\leq 10^9\n* q_j \\in \\\\{ 1, 2 \\\\}\n* 0 \\leq x_j < 2^{63}\n* 1 \\leq s_j, t_j \\leq 10^9\n* Inputs consist only of integers.\n* The absolute value of any element in the array dosen't exceed 2^{63} at any point during query processing.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "916_D. Jamie and To-do List", "description": "Input\n\nThe first line consists of a single integer q (1 ≤ q ≤ 105) — the number of operations.\n\nThe following q lines consists of the description of the operations. The i-th line consists of the operation that Jamie has done in the i-th day. The query has the following format:\n\nThe first word in the line indicates the type of operation. It must be one of the following four: set, remove, query, undo.\n\n  * If it is a set operation, a string ai and an integer xi follows (1 ≤ xi ≤ 109). ai is the assignment that need to be set to priority xi. \n  * If it is a remove operation, a string ai follows. ai is the assignment that need to be removed. \n  * If it is a query operation, a string ai follows. ai is the assignment that needs to be queried. \n  * If it is a undo operation, an integer di follows (0 ≤ di < i). di is the number of days that changes needed to be undone. \n\n\n\nAll assignment names ai only consists of lowercase English letters and have a length 1 ≤ |ai| ≤ 15.\n\nIt is guaranteed that the last operation is a query operation.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00485 Shopping in JOI Kingdom", "description": "input\n\nRead the following input from standard input.\n\n* The integers N, M, and K are written on the first line, separated by blanks. N represents the number of towns in JOI country, M represents the number of roads in JOI country, and i> K represents the number of towns with shopping malls. The towns are numbered 1, 2, ..., N.\n* The following M line represents road information. The integers ai, bi, li (1 ≤ ai ≤ N, 1 ≤ bi ≤ N, 1 ≤ li ≤ 1000) are written on the first line (1 ≤ i ≤ M), separated by blanks. This means that the i-th road connects the town ai and the town bi and is li in length. Both ends of the road are never the same town. Also, for any two towns p and q, there are no more than two roads connecting p and q. You can follow several roads from any town to any town.\n* The following K line represents shopping mall information. One integer si (1 ≤ si ≤ N) is written on the i + M + 1 line (1 ≤ i ≤ K). This means that there is a shopping mall in the town si. The same value does not appear more than once in s1, ..., sK.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00838 Colored Cubes", "description": "Input\n\nThe input is a sequence of datasets. A dataset consists of a header and a body appearing in this order. A header is a line containing one positive integer n and the body following it consists of n lines. You can assume that 1 ≤ n ≤ 4. Each line in a body contains six color names separated by a space. A color name consists of a word or words connected with a hyphen (-). A word consists of one or more lowercase letters. You can assume that a color name is at most 24-characters long including hyphens.\n\nA dataset corresponds to a set of colored cubes. The integer n corresponds to the number of cubes. Each line of the body corresponds to a cube and describes the colors of its faces. Color names in a line is ordered in accordance with the numbering of faces shown in Figure 5. A line\n\n\ncolor1 color2 color3 color4 color5 color6\n\n\ncorresponds to a cube colored as shown in Figure 6.\n\nThe end of the input is indicated by a line containing a single zero. It is not a dataset nor a part of a dataset.\n\n<image>\n<image>\n<image>", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01274 Magic Slayer", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nN\nHP1\nHP2\n...\nHPN\nM\nName1 MP1 Target1 Damage1\nName2 MP2 Target2 Damage2\n...\nNameM MPM TargetM DamageM\n\n\nN is the number of monsters in front of you (1 ≤ N ≤ 100); HPi is the hit points of the i-th monster (1 ≤ HPi ≤ 100000); M is the number of available magic spells (1 ≤ M ≤ 100); Namej is the name of the j-th spell, consisting of up to 16 uppercase and lowercase letters; MPj is the amount of magic power consumed by the j-th spell (0 ≤ MPj ≤ 99); Targetj is either \"Single\" or \"All\", where these indicate the j-th magic gives damage just to a single monster or to all monsters respectively; Damagej is the amount of damage (per monster in case of \"All\") made by the j-th magic (0 ≤ Damagej ≤ 999999).\n\nAll the numbers in the input are integers. There is at least one spell that gives non-zero damage to monsters.\n\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_E1. Three Trees", "description": "Input\n\nThe first line contains three space-separated integers n1, n2, n3 — the number of vertices in the first, second, and third trees, respectively. The following n1 - 1 lines describe the first tree. Each of these lines describes an edge in the first tree and contains a pair of integers separated by a single space — the numeric labels of vertices connected by the edge. The following n2 - 1 lines describe the second tree in the same fashion, and the n3 - 1 lines after that similarly describe the third tree. The vertices in each tree are numbered with consecutive integers starting with 1.\n\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem E1 (11 points), the number of vertices in each tree will be between 1 and 1000, inclusive. \n  * In subproblem E2 (13 points), the number of vertices in each tree will be between 1 and 100000, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00659 Popularity Estimation", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nn\nname0 m0 d0,0 ... d0, m0-1\nname1 m1 d1,0 ... d1, m1-1\n..\n..\n..\nnamen-1 mn-1 dn-1,0 ... dn-1, mn-1-1\n\n\n\nn represents the number of characters.\nnamei represents the name of the character.\nmi represents the type of time the character was shown.\nAfter mi, mi integers di and j are given.\ndi and j represent the time when the character was shown.\nThe end of the input is given by a line consisting of n = 0\n\n\nIf only one character appears on the screen at a given time, that character can get n points.\nEvery time one more character appears at the same time, the points obtained for the character reflected at that time decrease by one.\nIf n characters are shown at the same time, 1 point will be added to each of n characters.\n\n\nThe input satisfies the following constraints.\n2 ≤ n ≤ 20\n0 ≤ mi ≤ 30\n0 ≤ di, j <30\nDi and j are all different for the i-th character.\nnamei contains only uppercase or lowercase letters and is no longer than 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01097 3D Printing", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets is at most 100. Each dataset is in the following format.\n\nn k s\nx1 y1 z1\n...\nxn yn zn\n\n\nIn the first line of a dataset, n is the number of the candidate positions, k is the number of the cubes to form the connected polyhedron, and s is the edge length of cubes. n, k and s are integers separated by a space. The following n lines specify the n candidate positions. In the i-th line, there are three integers xi, yi and zi that specify the coordinates of a position, where the corner of the cube with the smallest coordinate values may be placed. Edges of the cubes are to be aligned with either of three axes. All the values of coordinates are integers separated by a space. The three conditions on the candidate positions mentioned above are satisfied.\n\nThe parameters satisfy the following conditions: 1 ≤ k ≤ n ≤ 2000, 3 ≤ s ≤ 100, and -4×107 ≤ xi, yi, zi ≤ 4×107.\n\nThe end of the input is indicated by a line containing three zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "222_E. Decoding Genome", "description": "Input\n\nThe first line contains three space-separated integers n, m, k (1 ≤ n ≤ 1015, 1 ≤ m ≤ 52, 0 ≤ k ≤ m2).\n\nNext k lines contain two characters each, without a space between them, representing a forbidden nucleotide pair. The first character represents the first nucleotide in the forbidden pair, the second character represents the second nucleotide.\n\nThe nucleotides with assigned numbers from 1 to 26 are represented by English alphabet letters from \"a\" to \"z\" (1 is an \"a\", 2 is a \"b\", ..., 26 is a \"z\"). Nucleotides with assigned numbers from 27 to 52 are represented by English alphabet letters from \"A\" to \"Z\" (27 is an \"A\", 28 is a \"B\", ..., 52 is a \"Z\").\n\nIt is guaranteed that each forbidden pair occurs at most once in the input. It is guaranteed that nucleotide's numbers in all forbidden pairs cannot be more than m. Note that order is important in nucleotide pairs.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00492 Illumination", "description": "input\n\nTwo integers W and H (1 ≤ W ≤ 100, 1 ≤ H ≤ 100) are written on the first line of the input file, separated by blanks. The following line H describes the layout of the JOI building. On the first line of i + (1 ≤ i ≤ H), W integers are written separated by blanks, and the jth (1 ≤ j ≤ W) integer is a regular hexagon with coordinates (j, i). It is 1 when there is a building in, and 0 when there is no building. Also, the input data given always has one or more buildings.\n\nThe map is described by the following rules.\n\n* The westernmost regular hexagon in the northernmost row of the map is the coordinates (1, 1).\n* The eastern adjacent regular hexagon adjacent to the regular hexagon with coordinates (x, y) is the coordinates (x + 1, y).\n* When y is odd, the coordinates of the southwestern regular hexagon adjacent to the regular hexagon of coordinates (x, y) are (x, y + 1).\n* When y is even, the coordinates of the southeastern regular hexagon adjacent to the regular hexagon of coordinates (x, y) are (x, y + 1).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02005 Colorful Drink", "description": "Input\n\nThe input consists of a single test case in the format below.\n\n\n$N$\n$C_1$ $D_1$\n$\\vdots$\n$C_N$ $D_N$\n$M$\n$O_1$\n$\\vdots$\n$O_M$\n\n\nThe first line consists of an integer $N$ ($1 \\leq N \\leq 10^5$), which represents the number of the prepared colored liquids. The following $N$ lines consists of $C_i$ and $D_i$ ($1 \\leq i \\leq N$). $C_i$ is a string consisting of lowercase alphabets and denotes the color of the $i$-th prepared colored liquid. The length of $C_i$ is between $1$ and $20$ inclusive. $D_i$ is an integer and represents the density of the $i$-th prepared colored liquid. The value of $D_i$ is between $1$ and $10^5$ inclusive. The ($N+2$)-nd line consists of an integer $M$ ($1 \\leq M \\leq 10^5$), which represents the number of color layers of a drink request. The following $M$ lines consists of $O_i$ ($1 \\leq i \\leq M$). $O_i$ is a string consisting of lowercase alphabets and denotes the color of the $i$-th layer from the top of the drink request. The length of $O_i$ is between $1$ and $20$ inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01967 Many Kinds of Apples", "description": "Input\n\nInput is given in the following format.\n\n\nN\nc_1 c_2 $ \\ cdots $ c_N\nQ\nt_1 x_1 d_1\nt_2 x_2 d_2\n$ \\ vdots $\nt_Q x_Q d_Q\n\n\nIn line 1, you are given the integer N, which indicates the number of species of apples.\n\nIn line 2, given c_i (1 \\ leq i \\ leq N) separated by whitespaces. C_i indicates the capacity of the i-th box.\n\nIn line 3, given Q, which indicates the number of instructions.\n\nInstructions are given successive Q lines. T_i x_i d_i means what kind of instruction, which apple Mon handles in this instruction, how many apples Mon handles, respectively. If t_i is equal to 1, it means Mon does the task of \"harvest apples\" , else if t_i is equal to 2, it means Mon does the task of \"ship apples\".\n\nConstraints\n\nAll input values ​​are integers, and satisfy following constraints.\n\n* 1 \\ leq N \\ leq 1,000\n* 1 \\ leq c_i \\ leq 100,000 (1 \\ leq i \\ leq N)\n* 1 \\ leq Q \\ leq 100,000\n* t_i \\ in \\\\ {1, 2 \\\\} (1 \\ leq i \\ leq Q)\n* 1 \\ leq x_i \\ leq N (1 \\ leq i \\ leq Q)\n* 1 \\ leq d_i \\ leq 100,000 (1 \\ leq i \\ leq Q)", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "316_E1. Summer Homework", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2·105) — the number of integers in the sequence and the number of operations, correspondingly. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 105). Then follow m lines, each describes an operation. Each line starts with an integer ti (1 ≤ ti ≤ 3) — the operation type: \n\n  * if ti = 1, then next follow two integers xi vi (1 ≤ xi ≤ n, 0 ≤ vi ≤ 105); \n  * if ti = 2, then next follow two integers li ri (1 ≤ li ≤ ri ≤ n); \n  * if ti = 3, then next follow three integers li ri di (1 ≤ li ≤ ri ≤ n, 0 ≤ di ≤ 105). \n\n\n\nThe input limits for scoring 30 points are (subproblem E1): \n\n  * It is guaranteed that n does not exceed 100, m does not exceed 10000 and there will be no queries of the 3-rd type. \n\n\n\nThe input limits for scoring 70 points are (subproblems E1+E2): \n\n  * It is guaranteed that there will be queries of the 1-st and 2-nd type only. \n\n\n\nThe input limits for scoring 100 points are (subproblems E1+E2+E3): \n\n  * No extra limitations.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00864 Grey Area", "description": "Input\n\nThe input consists of multiple datasets, each of which contains integers and specifies a value table and intervals for the histogram generator, in the following format.\n\nn w\nv1\nv2\n.\n.\nvn\n\n\nn is the total number of value occurrences for the histogram, and each of the n lines following the first line contains a single value. Note that the same value may possibly occur multiple times.\n\nw is the interval width. A value v is in the first (i.e. leftmost) interval if 0 ≤ v < w, the second one if w ≤ v < 2w, and so on. Note that the interval from 0 (inclusive) to w (exclusive) should be regarded as the leftmost even if no values occur in this interval. The last (i.e. rightmost) interval is the one that includes the largest value in the dataset.\n\nYou may assume the following.\n\n1 ≤ n ≤ 100\n10 ≤ w ≤ 50\n0 ≤ vi ≤ 100 for 1 ≤ i ≤ n\n\n\nYou can also assume that the maximum value is no less than w. This means that the histogram has more than one interval. The end of the input is indicated by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1136_D. Nastya Is Buying Lunch", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 3 ⋅ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}) — the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second.\n\nThe second line contains n integers p_1, p_2, ..., p_n — the initial arrangement of pupils in the queue, from the queue start to its end (1 ≤ p_i ≤ n, p is a permutation of integers from 1 to n). In other words, p_i is the number of the pupil who stands on the i-th position in the queue.\n\nThe i-th of the following m lines contains two integers u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting that the pupil with number u_i agrees to change places with the pupil with number v_i if u_i is directly in front of v_i. It is guaranteed that if i ≠ j, than v_i ≠ v_j or u_i ≠ u_j. Note that it is possible that in some pairs both pupils agree to change places with each other.\n\nNastya is the last person in the queue, i.e. the pupil with number p_n.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01289 Strange Couple", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nn s t\nq1 q2 ... qn\na11 a12 ... a1n\na21 a22 ... a2n\n.\n.\n.\nan1 an2 ... ann\n\n\nn is the number of intersections (n ≤ 100). s and t are the intersections the home and the theater are located respectively (1 ≤ s, t ≤ n, s ≠ t); qi (for 1 ≤ i ≤ n) is either 1 or 0, where 1 denotes there is a sign at the i-th intersection and 0 denotes there is not; aij (for 1 ≤ i, j ≤ n) is a positive integer denoting the distance of the road connecting the i-th and j-th intersections, or 0 indicating there is no road directly connecting the intersections. The distance of each road does not exceed 10.\n\nSince the graph is undirectional, it holds aij = aji for any 1 ≤ i, j ≤ n. There can be roads connecting the same intersection, that is, it does not always hold aii = 0. Also, note that the graph is not always planar.\n\nThe last dataset is followed by a line containing three zeros. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1166_F. Vicky's Delivery Service", "description": "Input\n\nThe first line contains four integers n, m, c, and q (2 ≤ n ≤ 10^5, 1 ≤ m, c, q ≤ 10^5), denoting respectively the number of cities, the number of roads initially present, the number of different colors the roads can take, and the number of events.\n\nEach of the following m lines contains three integers x, y, and z (1 ≤ x, y ≤ n, 1 ≤ z ≤ c), describing that there initially exists a bidirectional road with color z between cities x and y.\n\nThen q lines follow, describing the events. Each event is one of the following two types: \n\n  1. + x y z (1 ≤ x, y ≤ n, 1 ≤ z ≤ c), meaning a road with color z appears between cities x and y; \n  2. ? x y (1 ≤ x, y ≤ n), meaning you should determine whether Vicky can make a delivery starting at city x and ending at city y. It is guaranteed that x ≠ y. \n\n\n\nIt is guaranteed that at any moment, there is at most one road connecting any pair of cities, and that no road connects a city to itself. It is guaranteed that the input contains at least one event of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00037 Path on a Grid", "description": "Input\n\nThe input consists of 9 lines and is given in the following format, with 1 being the presence of a wall and 0 being the absence of a wall, as shown in Figure 2 below.\n\nThe first line is a character string that indicates the presence or absence of the top horizontal line wall as 0 and 1 from the left.\nThe second line is a character string that indicates the presence or absence of the vertical line wall below it with 0 and 1 from the left.\nThe third line is a character string that indicates the presence or absence of the wall of the second horizontal line from the top by 0 and 1 from the left.\n...\nThe 9th line is a character string representing the presence or absence of the bottom horizontal line wall with 0 and 1 from the left.\n\n\n<image>\n---\nFigure 2 (Thick line shows where the wall is) (corresponding numbers)\n\n\n\nHowever, as shown by the thick line in Fig. 1, it is assumed that there is always a wall for one section to the right of point A. That is, the first character on the first line is always 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00483 Planetary Exploration", "description": "input\n\nRead the following input from standard input.\n\n* The integers M and N are written on the first line, separated by blanks, indicating that the planned residence is M km north-south and N km east-west.\n* The integer K is written on the second line, which indicates the number of regions to be investigated.\n* The following M line contains information on the planned residence. The second line of i + (1 ≤ i ≤ M) contains an N-character string consisting of J, O, and I that represents the information of the N section located on the i-th line from the north of the planned residence. ..\n* The following K line describes the area to be investigated. On the second line of j + M + (1 ≤ j ≤ K), the positive integers aj, bj, cj, and dj representing the jth region are written with blanks as delimiters. (aj, bj) represents the northwest corner section of the survey area, and (cj, dj) represents the southeast corner section of the survey area. However, aj, bj, cj, and dj satisfy 1 ≤ aj ≤ cj ≤ M, 1 ≤ bj ≤ dj ≤ N.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1385_E. Directing Edges", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2))) — the number of vertices and the number of edges in the graph, respectively.\n\nThe next m lines describe edges of the graph. The i-th edge is described with three integers t_i, x_i and y_i (t_i ∈ [0; 1], 1 ≤ x_i, y_i ≤ n) — the type of the edge (t_i = 0 if the edge is undirected and t_i = 1 if the edge is directed) and vertices this edge connects (the undirected edge connects vertices x_i and y_i and directed edge is going from the vertex x_i to the vertex y_i). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair (x_i, y_i) there are no other pairs (x_i, y_i) or (y_i, x_i)).\n\nIt is guaranteed that both sum n and sum m do not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5; ∑ m ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "222_B. Cosmic Tables", "description": "Input\n\nThe first line contains three space-separated integers n, m and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 500000) — the number of table columns and rows and the number of queries, correspondingly.\n\nNext n lines contain m space-separated numbers each — the initial state of the table. Each number p in the table is an integer and satisfies the inequality 0 ≤ p ≤ 106.\n\nNext k lines contain queries in the format \"si xi yi\", where si is one of the characters \"с\", \"r\" or \"g\", and xi, yi are two integers.\n\n  * If si = \"c\", then the current query is the query to swap columns with indexes xi and yi (1 ≤ x, y ≤ m, x ≠ y); \n  * If si = \"r\", then the current query is the query to swap rows with indexes xi and yi (1 ≤ x, y ≤ n, x ≠ y); \n  * If si = \"g\", then the current query is the query to obtain the number that located in the xi-th row and in the yi-th column (1 ≤ x ≤ n, 1 ≤ y ≤ m). \n\n\n\nThe table rows are considered to be indexed from top to bottom from 1 to n, and the table columns — from left to right from 1 to m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00867 Digits on the Floor", "description": "Input\n\nThe input consists of a number of datasets. Each dataset is formatted as follows.\n\nn\nx1a y1a x1b y1b\nx2a y2a x2b y2b\n.\n.\n.\nxna yna xnb ynb\n\n\nIn the first line, n represents the number of bars in the dataset. For the rest of the lines, one line represents one bar. Four integers xa, ya , xb , yb , delimited by single spaces, are given in each line. xa and ya are the x- and y-coordinates of one end of the bar, respectively. xb and yb are those of the other end. The coordinate system is as shown in Figure 4. You can assume 1 ≤ n ≤ 1000 and 0 ≤ xa , ya , xb , yb ≤ 1000.\n\nThe end of the input is indicated by a line containing one zero.\n\n<image>\n---\nFigure 4: The coordinate system\n\nYou can also assume the following conditions.\n\n* More than two bars do not overlap at one point.\n* Every bar is used as a part of a digit. Non-digit forms do not exist on the floor.\n* A bar that makes up one digit does not touch nor cross any bar that makes up another digit.\n* There is no bar whose length is zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00258 Beat Panel", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format.\n\n\nn c\na1,1 a1,2 ... a1,16\na2,1 a2,2 ... a2,16\n...\nan, 1 an, 2 ... an, 16\nb1,1 b1,2 ... b1,16\nb2,1 b2,2 ... b2,16\n...\nbc,1 bc,2 ... bc,16\n\n\nThe first line consists of two integers separated by one space. n (1 ≤ n ≤ 30) indicates the number of beat sounds, and c (1 ≤ c ≤ 30) indicates the number of button presses that you have learned. The following n + c lines give how to illuminate the button and how to press the button. The input item in the line is separated by one blank. ak and i indicate how the button i shines when the kth beat sound is heard, and bj and i indicate whether the button i is pressed by pressing the jth button in the middle of c. As for the values ​​of ak and i, 0 means \"does not shine\" and 1 means \"shines\". For the values ​​of bj and i, 0 means \"do not press\" and 1 means \"press\".\n\nThe number of datasets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01359 Era Name", "description": "Input\n\nThe input contains multiple test cases. Each test case has the following format:\n\nN Q\nEraName1 EraBasedYear1 WesternYear1\n.\n.\n.\nEraNameN EraBasedYearN WesternYearN\nQuery1 .\n.\n.\nQueryQ\n\nThe first line of the input contains two positive integers N and Q (1 ≤ N ≤ 1000, 1 ≤ Q ≤ 1000). N is the number of database entries, and Q is the number of queries.\n\nEach of the following N lines has three components: era name, era-based year number and the corresponding western year (1 ≤ EraBasedYeari ≤ WesternYeari ≤ 109 ). Each of era names consist of at most 16 Roman alphabet characters. Then the last Q lines of the input specifies queries (1 ≤ Queryi ≤ 109 ), each of which is a western year to compute era-based representation.\n\nThe end of input is indicated by a line containing two zeros. This line is not part of any dataset and hence should not be processed.\n\nYou can assume that all the western year in the input is positive integers, and that there is no two entries that share the same era name.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01755 AI", "description": "Constraints\n\n* 1 ≤ H, W ≤ 50\n* 1 ≤ s number of characters ≤ 1,000\n* ai, j is one of \".\", \"#\", \"S\", \"g\"\n* \"s\" and \"g\" appear only once each\n* If i = 1 or i = H or j = 1 or j = W, then ai, j = \"#\" (the outer circumference of the board is guaranteed to be surrounded by a wall)\n* The program given as s is syntactically correct\n\nInput\n\nThe input is given in the following format.\n\n\nH W\na1,1a1,2 ... a1, W\na2,1a2,2 ... a2, W\n:::\naH, 1aH, 2 ... aH, W\ns\n\n\nH is the height of the board and W is the width of the board.\n\nNext, the state of the board viewed from directly above is given. The top, bottom, left, and right of this board correspond to north, south, west, and east, respectively. Ai and j, which represent the state of each cell, are one of the following characters.\n\n* \"s\": Robot (robot initial position. This square is guaranteed to have no walls)\n* \"g\": Goal\n* \"#\": Wall (Robots cannot move on the wall)\n* \".\": An empty square\n\n\n\nThe program given to the robot is input as a character string in s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "217_E. Alien DNA", "description": "Input\n\nThe first line of input contains the original DNA sequence, consisting only of letters \"A\", \"C\", \"T\" and \"G\" and not exceeding 3·106 in length. \n\nThe second line contains a single integer k (1 ≤ k ≤ 3·106).\n\nThe third line contains a single integer n (0 ≤ n ≤ 5000) — the number of mutations. The next n lines describe the mutations in chronological order — each mutation is described by two numbers li and ri (1 ≤ li ≤ ri ≤ 109), meaning that the continuous subsequence [li, ri] has become active and cloned itself, joining itself with the mangled copy. \n\nIt is guaranteed that the input data is correct, that is, no mutation acts on non-existing elements of the DNA sequence, and the resulting DNA sequence has at least k elements.\n\nAssume that the DNA elements are indexed starting from 1 and that the notation [l, r] meaning the continuous subsequence of DNA sequence that consists of r - l + 1 elements starting at the l-th DNA sequence element and ending at the r-th DNA sequence element.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00640 Distorted Love", "description": "Constraints\n\n* 1 ≤ n ≤ 100\n* b[i] ≤ 100\n* 1 ≤ the number of characters in the name ≤ 20\n* Buttons are not touch, overlapped nor run over from the browser.\n\nInput\n\nInput consists of several datasets.\n\nEach dataset starts with an integer n which represents the number of pages in the dataset.\n\nNext line contains two integers W and H.\n\nNext, information of each page are given. Each page starts with a string of characters and b[i], the number of buttons the page has. Following b[i] lines give information of buttons. Each button consists of four integers representing the coordinate (x1, y1) of upper left corner and the coordinate (x2, y2) of lower right corner of the button and a string of characters, which represents the name of page that the link of the button represents.\n\nNext, the number of operation m is given. Following m lines represent the record of operations. Please see the above description for the operation.\n\nThe first page is stored in the buffer at first.\n\nInput ends when n = 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01072 Plants", "description": "Constraints\n\n* 1 ≤ W, H, T ≤ 50\n* 0 ≤ p ≤ min (W × H × T, 50)\n* 0 ≤ xi <W\n* 0 ≤ yi <H\n* 0 ≤ ti <T\n* sj, k = 0 or 1\n\nInput\n\nThe input is given in the following format.\n\n\nW H T\np\nx0 y0 t0\nx1 y1 t1\n...\nxp−1 yp−1 tp−1\ns0,0 s1,0… sW−1,0\ns0,1 s1,1… sW−1,1\n...\ns0, H−1 s1, H−1… sW−1, H−1\n\n\nThe width W of the field, the height H of the field, and the time T are given on the first line. Gaccho can sprinkle fertilizer by time T.\nOn the second line, p is given the number of times Gaccho sprinkled fertilizer.\nThe three integers given from the 3rd line to the 2 + p line indicate that Gaccho sprinkled fertilizer on the mass (xi, yi) at time ti.\nFrom the 3 + p line to the 2 + p + H line, W × H integers indicating whether or not a plant is planted in each square of the first field are given. When sj, k is 1, it means that only one plant with a height of 0 cm is planted in the trout (j, k), and when sj, k is 0, it means that there is no plant in the trout (j, k). Indicates that it has not been planted.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "975_E. Hag's Khashba", "description": "Input\n\nThe first line contains two integers n and q (3≤ n ≤ 10 000, 1 ≤ q ≤ 200000) — the number of vertices in the polygon and the number of queries.\n\nThe next n lines describe the wooden polygon, the i-th line contains two integers x_i and y_i (|x_i|, |y_i|≤ 10^8) — the coordinates of the i-th vertex of the polygon. It is guaranteed that polygon is strictly convex and the vertices are given in the counter-clockwise order and all vertices are distinct.\n\nThe next q lines describe the queries, one per line. Each query starts with its type 1 or 2. Each query of the first type continues with two integers f and t (1 ≤ f, t ≤ n) — the vertex the pin is taken from, and the vertex the pin is put to and the polygon finishes rotating. It is guaranteed that the vertex f contains a pin. Each query of the second type continues with a single integer v (1 ≤ v ≤ n) — the vertex the coordinates of which Hag should tell his father.\n\nIt is guaranteed that there is at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01449 Space-Time Sugoroku Road", "description": "Input\n\nN\np1\np2\n..\n..\n..\npN\n\n\nThe integer N (3 ≤ N ≤ 100,000) is written on the first line of the input. This represents the number of Sugoroku squares. The squares are numbered from 1 to N. The starting square is number 1, then the number 2, 3, ..., N -1 in the order closer to the start, and the goal square is number N. If you roll the dice on the i-th square and get a j, move to the i + j-th square. However, if i + j exceeds N, it will not return by the extra number and will be considered as a goal.\n\nThe following N lines contain the integer pi (-100,000 ≤ pi ≤ 100,000). The integer pi written on the 1 + i line represents the instruction written on the i-th cell. If pi> 0, it means \"forward pi square\", if pi <0, it means \"go back -pi square\", and if pi = 0, it has no effect on that square. p1 and pN are always 0. Due to the effect of the square, you will not be instructed to move before the start or after the goal.\n\nIt should be assumed that the given sugoroku can reach the goal.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01704 Flowers", "description": "Input\n\nThe input consists of multiple datasets. The number of datasets does not exceed $100$, and the data size of the input does not exceed $20\\mathrm{MB}$. Each dataset is formatted as follows.\n\n> $N$\n> $\\mathit{pw}$\n> $\\mathit{vw}_1$ $\\mathit{pf}_1$ $\\mathit{vf}_1$ $\\mathit{th}_1$\n> :\n> :\n> $\\mathit{vw}_N$ $\\mathit{pf}_N$ $\\mathit{vf}_N$ $\\mathit{th}_N$\n\nThe first line of a dataset contains a single integer $N$, number of flower seeds. The second line of a dataset contains a single integer $\\mathit{pw}$, cost of watering one liter. Each of the following $N$ lines describes a flower. The $i$-th line contains four integers, $\\mathit{vw}_i$, $\\mathit{pf}_i$, $\\mathit{vf}_i$, and $\\mathit{th}_i$, separated by a space.\n\nYou can assume that $1 \\le N \\le 10^5$, $1 \\le \\mathit{pw} \\le 100$, $-100 \\le \\mathit{vw}_i \\le 100$, $1 \\le \\mathit{pf}_i \\le 100$, $1 \\le \\mathit{vf}_i \\le 100$, and $-100 \\le \\mathit{th}_i \\le 100$.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "143_B. Help Kingdom of Far Far Away 2", "description": "Input\n\nThe input contains a number that needs to be converted into financial format. The number's notation length does not exceed 100 characters, including (possible) signs \"-\" (minus) and \".\" (decimal point). The number's notation is correct, that is: \n\n  * The number's notation only contains characters from the set {\"0\" – \"9\", \"-\", \".\"}. \n  * The decimal point (if it is present) is unique and is preceded and followed by a non-zero quantity on decimal digits \n  * A number cannot start with digit 0, except for a case when its whole integer part equals zero (in this case the integer parts is guaranteed to be a single zero: \"0\"). \n  * The minus sign (if it is present) is unique and stands in the very beginning of the number's notation \n  * If a number is identically equal to 0 (that is, if it is written as, for example, \"0\" or \"0.000\"), than it is not preceded by the minus sign. \n  * The input data contains no spaces. \n  * The number's notation contains at least one decimal digit.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00337 Road Planning", "description": "Input\n\nThe input is given in the following format.\n\n\nVR\nx1 y1\nx2 y2\n::\nxV yV\ns1 t1\ns2 t2\n::\nsR tR\n\n\nThe number of settlements V (3 ≤ V ≤ 100) and the number of roads R (2 ≤ R ≤ 1000) are given in the first line.\n\nThe following V line gives information on the points that represent the settlement. The two integers xi, yi (-1000 ≤ xi, yi ≤ 1000) given in each row represent the x-coordinate and y-coordinate of the i-th settlement, respectively.\n\nThe following R line is given information on the original road. The two integers si, ti (1 ≤ si <ti ≤ V) given in each row indicate that the i-th road connects the si-th and ti-th settlements.\n\nThe input satisfies the following conditions.\n\n* If i ≠ j, the coordinates of the i-th and j-th settlements are different.\n* In each of the two settlements, there is at most one way to connect them directly.\n* Two different roads do not share any points other than the endpoints.\n* Three or more settlements are never lined up on the same straight line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00650 The House of Huge Family", "description": "Constraints\n\n* 2 ≤ n  ≤ 100\n* -10,000 ≤ Ci ≤ 10,000\n* Y1 ... Ym can't be duplicated integer by each other.\n\nInput\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n\nn m\nX1 Y1 C1\n...\nXm Ym Cm\n\n\nAll numbers in each datasets are integers. The integers in each line are separated by a space.\n\nThe first line of each datasets contains two integers. n is the number of rooms in the house, m is the number of passageways in the house. Each room is indexed from 0 to n-1.\n\nEach of following  m  lines gives the details of the passageways in the house. Each line contains three integers. The first integer Xi is an index of the room, the starting point of the passageway. The second integer Yi is an index of the room, the end point of the passageway. The third integer Ci is the cost to cancel construction of the passageway. The passageways, they are escalators, are one-way. The last dataset is followed by a line containing two zeros (separated by a space).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01334 Let's JUMPSTYLE", "description": "Input\n\nThe input consists of multiple test cases.\n\nEach test case begins with one line containing the length N of one side of the floor. (1 ≤ N ≤ 100)\n\nThe following N lines represent the coordinates of the jump destination written on each tile on the floor as follows.\n\n\n\\\\ begin {array} {ccccccc}\nx_ {0,0} & y_ {0,0} & x_ {1,0} & y_ {1,0} & \\\\ cdots & x_ {N-1,0} & y_ {N-1,0} \\ \\\\\\\nx_ {0,1} & y_ {0,1} & x_ {1,1} & y_ {1,1} & \\\\ cdots & x_ {N-1,1} & y_ {N-1,1} \\ \\\\\\\n\\\\ vdots & \\\\ vdots & \\\\ vdots & \\\\ vdots & \\\\ ddots & \\\\ vdots & \\\\ vdots \\\\\\\\\nx_ {0, N-1} & y_ {0, N-1} & x_ {1, N-1} & y_ {1, N-1} & \\\\ cdots & x_ {N-1, N-1} & y_ {N-1, N-1}\n\\\\ end {array}\n\n\nx_ {i, j} and \\\\ y_ {i, j} represent the x-coordinate and y-coordinate of the jump destination written on the tile at the coordinate (i, j), respectively. The coordinates are 0-origin, and the values ​​of all coordinates are integers greater than or equal to 0 and less than N.\n\nThe input ends with a line consisting of only 0s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "292_E. Copying Data", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the number of elements in the arrays and the number of queries, correspondingly. The second line contains an array of integers a1, a2, ..., an (|ai| ≤ 109). The third line contains an array of integers b1, b2, ..., bn (|bi| ≤ 109).\n\nNext m lines contain the descriptions of the queries. The i-th line first contains integer ti — the type of the i-th query (1 ≤ ti ≤ 2). If ti = 1, then the i-th query means the copying operation. If ti = 2, then the i-th query means taking the value in array b. If ti = 1, then the query type is followed by three integers xi, yi, ki (1 ≤ xi, yi, ki ≤ n) — the parameters of the copying query. If ti = 2, then the query type is followed by integer xi (1 ≤ xi ≤ n) — the position in array b.\n\nAll numbers in the lines are separated with single spaces. It is guaranteed that all the queries are correct, that is, the copying borders fit into the borders of arrays a and b.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00129 Hide-and-Seek Supporting System", "description": "Input\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nn\nwx1 wy1 r1\nwx2 wy2 r2\n::\nwxn wyn rn\nm\ntx1 ty1 sx1 sy1\ntx2 ty2 sx2 sy2\n::\ntxm tym sxm sym\n\n\nThe first line is the number of cylindrical walls n (0 ≤ n ≤ 100), the next n lines are the integers wxi, wyi (0 ≤ wxi, wyi ≤ 255) representing the coordinates of the center of the wall i and the integer ri representing the radius. (1 ≤ ri ≤ 255) is given.\n\nThe number of position information of Taro-kun and the demon in the following line m (m ≤ 100), and the integers txi, tyi (0 ≤ txi, tyi ≤ 255) and the demon that represent the coordinates of the position of Taro-kun in the position information i in the following line. Given the integers sxi, syi (0 ≤ sxi, syi ≤ 255) that represent the coordinates of the position of.\n\nAlso, not all of the cylindrical walls are in the park, they are all cylindrical and enter the park.\n\nWhen n is 0, it indicates the end of input. The number of datasets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "230_D. Planets", "description": "Input\n\nThe first line contains two space-separated integers: n (2 ≤ n ≤ 105), the number of planets in the galaxy, and m (0 ≤ m ≤ 105) — the number of pairs of planets between which Jack can travel using stargates. Then m lines follow, containing three integers each: the i-th line contains numbers of planets ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), which are connected through stargates, and the integer transfer time (in seconds) ci (1 ≤ ci ≤ 104) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection.\n\nThen n lines follow: the i-th line contains an integer ki (0 ≤ ki ≤ 105) that denotes the number of moments of time when other travellers arrive to the planet with index i. Then ki distinct space-separated integers tij (0 ≤ tij < 109) follow, sorted in ascending order. An integer tij means that at time tij (in seconds) another traveller arrives to the planet i. It is guaranteed that the sum of all ki does not exceed 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "229_B. Planets", "description": "Input\n\nThe first line contains two space-separated integers: n (2 ≤ n ≤ 105), the number of planets in the galaxy, and m (0 ≤ m ≤ 105) — the number of pairs of planets between which Jack can travel using stargates. Then m lines follow, containing three integers each: the i-th line contains numbers of planets ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), which are connected through stargates, and the integer transfer time (in seconds) ci (1 ≤ ci ≤ 104) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection.\n\nThen n lines follow: the i-th line contains an integer ki (0 ≤ ki ≤ 105) that denotes the number of moments of time when other travellers arrive to the planet with index i. Then ki distinct space-separated integers tij (0 ≤ tij < 109) follow, sorted in ascending order. An integer tij means that at time tij (in seconds) another traveller arrives to the planet i. It is guaranteed that the sum of all ki does not exceed 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00621 Sleeping Cats", "description": "Input\n\nThe input file contains multiple datasets. The first line of each dataset contains two integers, each representing the width W of the fence and the number of lines Q that follow.\n\nThe following Q line is given the observation record of the cat. Each line follows one of the following formats.\n\ns [id] [w]\n\nw [id]\n\nThe former is a cat's sleep record, which indicates that the cat came to take a nap. Id is an integer that represents the cat's name, and w is the width [scale] that the cat needs to take a nap.\n\nThe latter is a wakeup record of the cat, indicating that a cat with the name id has occurred.\n\nThis record is given in chronological order.\n\nNo cat will take a nap more than once. Also, Jack's record shall be consistent. That is, if a cat can take a nap against a cat's sleep record, then Only if the cat's wakeup record is given (on a later line).\n\nYou can assume that W, Q ≤ 100.\n\nWhen both W and Q are 0, it indicates the end of input. Do not output to this dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1413_B. A New Technique", "description": "Input\n\nThe first line of the input contains the only integer t (1≤ t≤ 100 000) denoting the number of test cases. Their descriptions follow.\n\nThe first line of each test case description consists of two space-separated integers n and m (1 ≤ n, m ≤ 500) standing for the number of rows and columns in the table, respectively. All hand seals are encoded by the positive integers from 1 to n⋅ m.\n\nThe following n lines contain m space separated integers each, denoting elements of an arbitrary row in the table left to right.\n\nThe following m lines contain n space separated integers each, denoting elements of an arbitrary column in the table top to bottom.\n\nSum of nm over all test cases does not exceed 250 000. It is guaranteed that each row occurs in the input exactly once, as well as each column. It is also guaranteed that each number from 1 to nm occurs exactly once in all rows, as well as in all columns. Finally, it is guaranteed that a table consistent with the input exists.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1248_A. Integer Points", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000), the number of test cases in the input. Then follow the test case descriptions.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 10^5), the number of lines drawn by DLS.\n\nThe second line of a test case contains n distinct integers p_i (0 ≤ p_i ≤ 10^9) describing the lines drawn by DLS. The integer p_i describes a line given by the equation y = x + p_i.\n\nThe third line of a test case contains an integer m (1 ≤ m ≤ 10^5), the number of lines drawn by JLS.\n\nThe fourth line of a test case contains m distinct integers q_i (0 ≤ q_i ≤ 10^9) describing the lines drawn by JLS. The integer q_i describes a line given by the equation y = -x + q_i.\n\nThe sum of the values of n over all test cases in the input does not exceed 10^5. Similarly, the sum of the values of m over all test cases in the input does not exceed 10^5.\n\nIn hacks it is allowed to use only one test case in the input, so t=1 should be satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00771 Anchored Balloon", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n\n>  x1 y1 l1\n>  ...\n>  xn yn ln\n>\n\nThe first line of a dataset contains an integer n (1 ≤ n ≤ 10) representing the number of the ropes. Each of the following n lines contains three integers, xi, yi, and li, separated by a single space. Pi = (xi, yi) represents the position of the anchor connecting the i-th rope, and li represents the length of the rope. You can assume that −100 ≤ xi ≤ 100, −100 ≤ yi ≤ 100, and 1 ≤ li ≤ 300. The balloon is initially placed at (0, 0) on the ground. You can ignore the size of the balloon and the anchors.\n\nYou can assume that Pi and Pj represent different positions if i ≠ j. You can also assume that the distance between Pi and (0, 0) is less than or equal to li−1. This means that the balloon can go up at least 1 unit high.\n\nFigures E-1 and E-2 correspond to the first dataset of Sample Input below.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00694 Strange Key", "description": "Input\n\nAn input data is a list of pairs of key descriptions followed by a zero that indicates the end of the input. For p pairs of key descriptions, the input is given in the following format.\n\nkey-description1-a\nkey-description1-b\nkey-description2-a\nkey-description2-b\n...\nkey-descriptionp-a\nkey-descriptionp-b\n0\n\n\nEach key description (key-description) has the following format.\n\nn` ` e1 ` ` e2 ` ` ... ` ` ek ` ` ... ` ` en\n\n\nThe positive integer n indicates the number of the following elements e1, ..., en . They are separated by one or more space characters and/or newlines. Each element ek is one of the six symbols (`+x`, `-x`, `+y`, `-y`, `+z` and `-z`) or a positive integer.\n\nYou can assume that each label is a positive integer that is less than 51, the number of elements in a single key description is less than 301, and the number of characters in a line is less than 80. You can also assume that the given key descriptions are valid and contain at least one gold bar.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1517_H. Fly Around the World", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 66 666). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 100 000).\n\nThe i-th of the next n lines contains two integers x_i^-, x_i^+ (-10^8≤ x_i^-≤ x_i^+≤ 10^8) denoting the lower and upper bound of b_i. \n\nThe i-th of the next n-1 lines contains two integers y_{i+1}^-, y_{i+1}^+ (-10^8≤ y_{i+1}^-≤ y_{i+1}^+≤ 10^8) denoting the lower and upper bound of b_{i+1}-b_i. \n\nThe i-th of the next n-2 lines contains two integers z_{i+2}^-, z_{i+2}^+ (-10^8≤ z_{i+2}^-≤ z_{i+2}^+≤ 10^8) denoting the lower and upper bound of (b_{i+2}-b_{i+1}) - (b_{i+1}-b_i). \n\nIt is guaranteed that the sum of n over all test cases does not exceed 200 000.\n\nIt is guaranteed that relaxing every constraint by 10^{-6} (i.e., decrease x_i^-, y_i^-, z_i^- by 10^{-6} and increase x_i^+, y_i^+, z_i^+ by 10^{-6}) will not change the answer.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00856 Minimal Backgammon", "description": "Input\n\nThe input consists of multiple datasets, each containing integers in the following format.\n\n\nN T L B\nLose1\n...\nLoseL\nBack1\n...\nBackB\n\n\nN is the index of the goal, which satisfies 5 ≤ N ≤ 100. T is the number of turns. You are requested to compute the probability of success within T turns. T satisfies 1 ≤ T ≤ 100. L is the number of squares marked “Lose one turn”, which satisfies 0 ≤ L ≤ N - 1. B is the number of squares marked “Go back to the start”, which satisfies 0 ≤ B ≤ N - 1. They are separated by a space.\n\nLosei's are the indexes of the squares marked “Lose one turn”, which satisfy 1 ≤ Losei ≤ N - 1. All Losei's are distinct, and sorted in ascending order. Backi's are the indexes of the squares marked “Go back to the start”, which satisfy 1 ≤ Backi ≤ N - 1. All Backi's are distinct, and sorted in ascending order. No numbers occur both in Losei's and Backi's.\n\nThe end of the input is indicated by a line containing four zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00706 Get Many Persimmon Trees", "description": "Input\n\nThe input consists of multiple data sets. Each data set is given in the following format.\n\n> N\n>  W` `H\n>  x1` `y1\n>  x2` `y2\n>  ...\n>  xN` `yN\n>  S` `T\n>\n\nN is the number of persimmon trees, which is a positive integer less than 500. W and H are the width and the height of the entire field respectively. You can assume that both W and H are positive integers whose values are less than 100. For each i (1 <= i <= N), xi and yi are coordinates of the i-th persimmon tree in the grid. Note that the origin of each coordinate is 1. You can assume that 1 <= xi <= W and 1 <= yi <= H, and no two trees have the same positions. But you should not assume that the persimmon trees are sorted in some order according to their positions. Lastly, S and T are positive integers of the width and height respectively of the estate given by the lord. You can also assume that 1 <= S <= W and 1 <= T <= H.\n\nThe end of the input is indicated by a line that solely contains a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "659_D. Bicycle Race", "description": "Input\n\nThe first line of the input contains an integer n (4 ≤ n ≤ 1000) — the number of straight sections of the track.\n\nThe following (n + 1)-th line contains pairs of integers (xi, yi) ( - 10 000 ≤ xi, yi ≤ 10 000). The first of these points is the starting position. The i-th straight section of the track begins at the point (xi, yi) and ends at the point (xi + 1, yi + 1).\n\nIt is guaranteed that:\n\n  * the first straight section is directed to the north; \n  * the southernmost (and if there are several, then the most western of among them) point of the track is the first point; \n  * the last point coincides with the first one (i.e., the start position); \n  * any pair of straight sections of the track has no shared points (except for the neighboring ones, they share exactly one point); \n  * no pair of points (except for the first and last one) is the same; \n  * no two adjacent straight sections are directed in the same direction or in opposite directions.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01950 Endless BFS", "description": "Input\n\nThe input consists of a single test case formatted as follows.\n\n\n$N$ $M$\n$U_1$ $V_1$\n...\n$U_M$ $V_M$\n\n\nThe first line consists of two integers $N$ ($2 \\leq N \\leq 100,000$) and $M$ ($1 \\leq M \\leq 100,000$), where $N$ is the number of vertices and $M$ is the number of edges in a given undirected graph, respectively. The $i$-th line of the following $M$ lines consists of two integers $U_i$ and $V_i$ ($1 \\leq U_i, V_i \\leq N$), which means the vertices $U_i$ and $V_i$ are adjacent in the given graph. The vertex 1 is the start vertex, i.e. $start\\\\_vertex$ in the pseudo codes. You can assume that the given graph also meets the following conditions.\n\n* The graph has no self-loop, i.e., $U_i \\ne V_i$ for all $1 \\leq i \\leq M$.\n* The graph has no multi-edge, i.e., $\\\\{Ui,Vi\\\\} \\ne \\\\{U_j,V_j\\\\}$ for all $1 \\leq i < j \\leq M$.\n* The graph is connected, i.e., there is at least one path from $U$ to $V$ (and vice versa) for all vertices $1 \\leq U, V \\leq N$", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00909 Never Wait for Weights", "description": "Input\n\nThe input consists of multiple datasets. The first line of a dataset contains two integers N and M. N denotes the number of sample pieces (2 ≤ N ≤ 100,000). Each sample is assigned a unique number from 1 to N as an identifier. The rest of the dataset consists of M lines (1 ≤ M ≤ 100,000), each of which corresponds to either a measurement result or an inquiry. They are given in chronological order.\n\nA measurement result has the format,\n\n! a b w\n\nwhich represents the sample piece numbered b is heavier than one numbered a by w micrograms (a ≠ b). That is, w = wb − wa, where wa and wb are the weights of a and b, respectively. Here, w is a non-negative integer not exceeding 1,000,000.\n\nYou may assume that all measurements are exact and consistent.\n\nAn inquiry has the format,\n\n? a b\n\nwhich asks the weight difference between the sample pieces numbered a and b (a ≠ b).\n\nThe last dataset is followed by a line consisting of two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "455_D. Serega and Fun", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of elements of the array. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ n).\n\nThe third line contains a single integer q (1 ≤ q ≤ 105) — the number of queries. The next q lines contain the queries.\n\nAs you need to respond to the queries online, the queries will be encoded. A query of the first type will be given in format: 1 l'i r'i. A query of the second type will be given in format: 2 l'i r'i k'i. All the number in input are integer. They satisfy the constraints: 1 ≤ l'i, r'i, k'i ≤ n.\n\nTo decode the queries from the data given in input, you need to perform the following transformations:\n\nli = ((l'i + lastans - 1) mod n) + 1; ri = ((r'i + lastans - 1) mod n) + 1; ki = ((k'i + lastans - 1) mod n) + 1.\n\nWhere lastans is the last reply to the query of the 2-nd type (initially, lastans = 0). If after transformation li is greater than ri, you must swap these values.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "466_E. Information Graph", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of employees and the number of events. \n\nEach of the next m lines contains the description of one event (the events are given in the chronological order). The first number of the line determines the type of event t (1 ≤ t ≤ 3). \n\n  * If t = 1, then next follow two integers x and y (1 ≤ x, y ≤ n) — numbers of the company employees. It is guaranteed that employee x doesn't have the boss currently. \n  * If t = 2, then next follow integer x (1 ≤ x ≤ n) — the number of the employee who got a document packet. \n  * If t = 3, then next follow two integers x and i (1 ≤ x ≤ n; 1 ≤ i ≤ [number of packets that have already been given]) — the employee and the number of the document packet for which you need to find out information. The document packets are numbered started from 1 in the chronological order. \n\n\n\nIt is guaranteed that the input has at least one query of the third type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "105_A. Transmigration", "description": "Input\n\nThe first line contains three numbers n, m and k — the number of skills the current character has, the number of skills specific for the class into which the character is going to transmigrate and the reducing coefficient respectively; n and m are integers, and k is a real number with exactly two digits after decimal point (1 ≤ n, m ≤ 20, 0.01 ≤ k ≤ 0.99).\n\nThen follow n lines, each of which describes a character's skill in the form \"name exp\" — the skill's name and the character's skill level: name is a string and exp is an integer in range from 0 to 9999, inclusive. \n\nThen follow m lines each of which contains names of skills specific for the class, into which the character transmigrates. \n\nAll names consist of lowercase Latin letters and their lengths can range from 1 to 20 characters, inclusive. All character's skills have distinct names. Besides the skills specific for the class into which the player transmigrates also have distinct names.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01294 For the Peace", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is given in the following format:\n\nn d\nm1 c1,1 ... c1,m1\n...\nmn cn,1 ... cn,mn\n\n\nThe first line contains two positive integers n and d, the number of countries and the tolerated difference of potential (n ≤ 100, d ≤ 1000). Then n lines follow. The i-th line begins with a non-negative integer mi, the number of the missiles possessed by the i-th country. It is followed by a sequence of mi positive integers. The j-th integer ci,j represents the capability of the j-th newest missile of the i-th country (ci,j ≤ 1000). These integers are separated by a single space. Note that the country disposes their missiles in the reverse order of the given sequence.\n\nThe number of missiles is not greater than 10000. Also, you may assume the difference between the maximum and minimum potential does not exceed d in any dataset.\n\nThe input is terminated by a line with two zeros. This line should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01138 Osaki", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> n\n> hh: mm: ss hh: mm: ss\n> hh: mm: ss hh: mm: ss\n> ...\n> hh: mm: ss hh: mm: ss\n\nThe integer n in the first line is the number of trains included in the timetable. This value is guaranteed not to exceed 10,000. The departure time and arrival time of each train at Osaki Station are given in this order on the n lines from the 2nd line to the n + 1st line, and the departure time and arrival time are separated by a single space. Each time is expressed in the format hh: mm: ss, where hh is the hour, mm is the minute, and ss is the second. The range of each value is 0 ≤ hh <24, 0 ≤ mm <60, 0 ≤ ss <60. All of these numbers are prefixed with 0s as needed to be two digits.\n\nTrains that run across 24:00 at night are not included. Therefore, the departure time is always before the arrival time.\n\nThe end of input is indicated by n = 0. It is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1277_E. Two Fairs", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 4⋅10^4) — the number of test cases in the input. Next, t test cases are specified.\n\nThe first line of each test case contains four integers n, m, a and b (4 ≤ n ≤ 2⋅10^5, n - 1 ≤ m ≤ 5⋅10^5, 1 ≤ a,b ≤ n, a ≠ b) — numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively.\n\nThe following m lines contain descriptions of roads between cities. Each of road description contains a pair of integers u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — numbers of cities connected by the road.\n\nEach road is bi-directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities.\n\nThe sum of the values of n for all sets of input data in the test does not exceed 2⋅10^5. The sum of the values of m for all sets of input data in the test does not exceed 5⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1276_B. Two Fairs", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 4⋅10^4) — the number of test cases in the input. Next, t test cases are specified.\n\nThe first line of each test case contains four integers n, m, a and b (4 ≤ n ≤ 2⋅10^5, n - 1 ≤ m ≤ 5⋅10^5, 1 ≤ a,b ≤ n, a ≠ b) — numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively.\n\nThe following m lines contain descriptions of roads between cities. Each of road description contains a pair of integers u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — numbers of cities connected by the road.\n\nEach road is bi-directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities.\n\nThe sum of the values of n for all sets of input data in the test does not exceed 2⋅10^5. The sum of the values of m for all sets of input data in the test does not exceed 5⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00665 Everything Starts With Your Vote", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nN M K L\nname0 x0\n..\n..\n..\nnameN-1 xN-1\nfav0\n..\n..\n..\nfavM-1\n\n\nThe meanings of N, M, K, and L are as described in the problem statement.\nnamei is the name of the character and xi is the total number of votes for the i-th character.\nfavi represents the name of the character you like. These names are always different and are always included in the character's name input.\n\n\nThe end of the input is given by a line consisting of N = 0, M = 0, K = 0, and L = 0.\n\n\nIn addition, each value satisfies the following conditions\n1 ≤ N ≤ 100,000\n1 ≤ M ≤ N\n1 ≤ K ≤ N\n1 ≤ L ≤ 100,000,000\n0 ≤ xi ≤ 100,000,000\nnamei contains only the alphabet and is 10 characters or less in length.\n\nThe number of test cases does not exceed 150.\nIt is also guaranteed that the number of cases where 20,000 ≤ N does not exceed 20.\n\n\nJudge data is large, so it is recommended to use fast input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01924 Coastline", "description": "Input\n\n> The input dataset consists of multiple cases. The maximum number of datasets does not exceed 40. Each case has the following format.\n\n> T D L\n> x1\n> ...\n> xT\n>\n\nT, D, L (1 ≤ T, D, L ≤ 100,000) are given on the first line, separated by half-width spaces. Of the following T lines, the i (1 ≤ i ≤ T) line is given xi (0 ≤ xi ≤ 100,000). These are all integers.\n\n> The end of the dataset is represented by three 0 lines.\n\n> ### Output\n\n> For each case, output in one line the time (seconds) that the point separated by the distance L in the land direction from the reference point P was surely wet between 1 second and T seconds.\n\n> ### Sample Input\n\n\n5 2 3\n3\nFive\n1\n2\n3\n3 100 100\n3\n3\nFour\n20 3 8\n3\n2\n6\n1\n9\n1\n8\nFour\n2\n2\n8\n1\n8\n8\n2\nFive\n3\nFour\n3\n8\n7 2 2\n0\n2\nFive\n2\nFive\n2\n1\n0 0 0\n\n\nOutput for Sample Input\n\n\n3\n0\n11\nFive\n\n\n\n\n\nExample\n\nInput\n\n5 2 3\n3\n5\n1\n2\n3\n3 100 100\n3\n3\n4\n20 3 8\n3\n2\n6\n1\n9\n1\n8\n4\n2\n2\n8\n1\n8\n8\n2\n5\n3\n4\n3\n8\n7 2 2\n0\n2\n5\n2\n5\n2\n1\n0 0 0", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "413_B. Spyke Chatting", "description": "Input\n\nThe first line contains three space-separated integers n, m and k (2 ≤ n ≤ 2·104; 1 ≤ m ≤ 10; 1 ≤ k ≤ 2·105) — the number of the employees, the number of chats and the number of events in the log, correspondingly. \n\nNext n lines contain matrix a of size n × m, consisting of numbers zero and one. The element of this matrix, recorded in the j-th column of the i-th line, (let's denote it as aij) equals 1, if the i-th employee is the participant of the j-th chat, otherwise the element equals 0. Assume that the employees are numbered from 1 to n and the chats are numbered from 1 to m.\n\nNext k lines contain the description of the log events. The i-th line contains two space-separated integers xi and yi (1 ≤ xi ≤ n; 1 ≤ yi ≤ m) which mean that the employee number xi sent one message to chat number yi. It is guaranteed that employee number xi is a participant of chat yi. It is guaranteed that each chat contains at least two employees.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00821 Area of Polygons", "description": "Input\n\nThe input file describes polygons one after another, followed by a terminating line that only contains a single zero.\n\nA description of a polygon begins with a line containing a single integer, m (≥ 3), that gives the number of its vertices. It is followed by m lines, each containing two integers x and y, the coordinates of a vertex. The x and y are separated by a single space. The i-th of these m lines gives the coordinates of the i-th vertex (i = 1, ... , m). For each i = 1, ... , m - 1, the i-th vertex and the (i + 1)-th vertex are connected by an edge. The m-th vertex and the first vertex are also connected by an edge (i.e., the curve is closed). Edges intersect only at vertices. No three edges share a single vertex (i.e., the curve is simple). The number of polygons is no more than 100. For each polygon, the number of vertices (m) is no more than 100. All coordinates x and y satisfy -2000 ≤ x ≤ 2000 and -2000 ≤ y ≤ 2000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01127 X-Ray Screening System", "description": "Input\n\nThe first line of input contains a single positive integer, which represents the number of datasets. Each dataset is given in the following format.\n\n> H W\n> Analysis result 1\n> Analysis result 2\n> ...\n> Analysis result H\n>\n\nH is the vertical size of the image, and W is an integer representing the horizontal size (1 <= h, w <= 50). Each line of the analysis result is composed of W characters, and the i-th character represents the analysis result in the grid region i-th from the left of the line. For the lattice region where the substance is detected, the material is represented by uppercase letters (A to Z). At this time, the same characters are used if they are made of the same material, and different characters are used if they are made of different materials. The lattice region where no substance was detected is represented by a dot (.).\n\nFor all datasets, it is guaranteed that there are no more than seven material types.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "586_D. Phillip and Trains", "description": "Input\n\nEach test contains from one to ten sets of the input data. The first line of the test contains a single integer t (1 ≤ t ≤ 10 for pretests and tests or t = 1 for hacks; see the Notes section for details) — the number of sets.\n\nThen follows the description of t sets of the input data. \n\nThe first line of the description of each set contains two integers n, k (2 ≤ n ≤ 100, 1 ≤ k ≤ 26) — the number of columns on the field and the number of trains. Each of the following three lines contains the sequence of n character, representing the row of the field where the game is on. Philip's initial position is marked as 's', he is in the leftmost column. Each of the k trains is marked by some sequence of identical uppercase letters of the English alphabet, located in one line. Distinct trains are represented by distinct letters. Character '.' represents an empty cell, that is, the cell that doesn't contain either Philip or the trains.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "585_B. Phillip and Trains", "description": "Input\n\nEach test contains from one to ten sets of the input data. The first line of the test contains a single integer t (1 ≤ t ≤ 10 for pretests and tests or t = 1 for hacks; see the Notes section for details) — the number of sets.\n\nThen follows the description of t sets of the input data. \n\nThe first line of the description of each set contains two integers n, k (2 ≤ n ≤ 100, 1 ≤ k ≤ 26) — the number of columns on the field and the number of trains. Each of the following three lines contains the sequence of n character, representing the row of the field where the game is on. Philip's initial position is marked as 's', he is in the leftmost column. Each of the k trains is marked by some sequence of identical uppercase letters of the English alphabet, located in one line. Distinct trains are represented by distinct letters. Character '.' represents an empty cell, that is, the cell that doesn't contain either Philip or the trains.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00454 Paint Color", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nOn the first line, the width w (integer with 1 ≤ w ≤ 1000000) and height h (integer with 1 ≤ h ≤ 1000000) are written in this order, separated by blanks.\n\nThe number of masking tapes n (an integer such that 1 ≤ n ≤ 1000) is written on the second line. The second and subsequent lines 2 + i (1 ≤ i ≤ n) are the i-th. The lower left coordinates (x1, y1) and the upper right coordinates (x2, y2) of the masking tape to be applied are x1, y1, x2, y2 (0 ≤ x1 <x2 ≤ w, 0 ≤ y1 <y2 ≤ h) It is written in the order of, separated by blanks.\n\nHowever, the coordinates of the lower left corner of the plywood are (0, 0) and the coordinates of the upper right corner are (w, h). Of the scoring data, 30% of the points are w ≤ 100, h ≤ 100, n ≤ 100.\n\n\n<image>\n\n\nWhen both h and w are 0, it indicates the end of input. The number of data sets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00892 Intersection of Two Prisms", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is less than 200.\n\nEach dataset is formatted as follows.\n\nm n\nx11 y11\nx12 y12\n.\n.\n.\nx1m y1m\nx21 z21\nx22 z22\n.\n.\n.\nx2n z2n\n\n\nm and n are integers (3 ≤ m ≤ 100, 3 ≤ n ≤ 100) which represent the numbers of the vertices of the polygons, C1 and C2, respectively.\n\nx1i, y1i, x2j and z2j are integers between -100 and 100, inclusive. (x1i, y1i) and (x2j , z2j) mean the i-th and j-th vertices' positions of C1 and C2 respectively.\n\nThe sequences of these vertex positions are given in the counterclockwise order either on the xy-plane or the xz-plane as in Figure I.1.\n\nYou may assume that all the polygons are convex, that is, all the interior angles of the polygons are less than 180 degrees. You may also assume that all the polygons are simple, that is, each polygon's boundary does not cross nor touch itself.\n\nThe end of the input is indicated by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "207_A1. Beaver's Calculator 1.0", "description": "Input\n\nThe first line contains integer n — the number of scientists. To lessen the size of the input, each of the next n lines contains five integers ki, ai, 1, xi, yi, mi (0 ≤ ai, 1 < mi ≤ 109, 1 ≤ xi, yi ≤ 109) — the number of problems of the i-th scientist, the resources the first problem requires and three parameters that generate the subsequent values of ai, j. For all j from 2 to ki, inclusive, you should calculate value ai, j by formula ai, j = (ai, j - 1 * xi + yi) mod mi, where a mod b is the operation of taking the remainder of division of number a by number b.\n\nTo get the full points for the first group of tests it is sufficient to solve the problem with n = 2, 1 ≤ ki ≤ 2000.\n\nTo get the full points for the second group of tests it is sufficient to solve the problem with n = 2, 1 ≤ ki ≤ 200000.\n\nTo get the full points for the third group of tests it is sufficient to solve the problem with 1 ≤ n ≤ 5000, 1 ≤ ki ≤ 5000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00834 Inherit the Spheres", "description": "Input\n\nThe input consists of a series of datasets. Each dataset begins with a line containing a positive integer, which indicates the number of spheres N in the dataset. It is followed by N lines describing the centers and radiuses of the spheres. Each of the N lines has four positive integers Xi, Yi, Zi, and Ri (i = 1, . . . , N) describing the center and the radius of the i-th sphere, respectively.\n\nYou may assume 1 ≤ N ≤ 100, 1 ≤ Ri ≤ 2000, 0 < Xi - Ri < Xi + Ri < 4000, 0 < Yi - Ri < Yi + Ri < 16000, and 0 < Zi - Ri < Zi + Ri < 36000. Each solid sphere is defined as the set of all points (x, y, z) satisfying (x - Xi)2 + (y - Yi)2 + (z - Zi)2 ≤ Ri2.\n\nA sphere may contain other spheres. No two spheres are mutually tangent. Every Zi ± Ri and minimum/maximum z coordinates of a circle formed by the intersection of any two spheres differ from each other by at least 0.01.\n\nThe end of the input is indicated by a line with one zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "733_F. Drivers Dissatisfaction", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2·105, n - 1 ≤ m ≤ 2·105) — the number of cities and the number of roads in the kingdom, respectively.\n\nThe second line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 109), where wi is the drivers dissatisfaction with the i-th road.\n\nThe third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 109), where ci is the cost (in lamziks) of reducing the dissatisfaction with the i-th road by one.\n\nThe next m lines contain the description of the roads. The i-th of this lines contain a pair of integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) which mean that the i-th road connects cities ai and bi. All roads are two-way oriented so it is possible to move by the i-th road from ai to bi, and vice versa. It is allowed that a pair of cities is connected by more than one road. \n\nThe last line contains one integer S (0 ≤ S ≤ 109) — the number of lamziks which we can spend for reforms.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01531 Flick Input", "description": "Input\n\nA character string representing a flick input operation is given on one line (2 to 1000 characters). This character string consists of the numbers '0'-'9', which represent the buttons to be operated, and the five types of characters,'T',' L',' U',' R', and'D', which represent the flick direction. It consists of a combination.\n\nThe characters that represent the flick direction have the following meanings.\n\n*'T': Just touch\n*'L': Flick left\n*'U': Flick up\n*'R': Flick right\n*'D': Flick down\n\n\n\nFor example, \"2D\" represents the operation of \"flicking the button of 2 downward\", so \"ko\" can be output.\n\nIn the given character string, one number and one character indicating the flick direction appear alternately. Also, it always starts with one number and ends with one letter indicating the flick direction. Furthermore, in Fig. A (c), flicking is not performed toward a place without characters (there is no input such as \"8L\").", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1323_E. Instant Noodles", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500 000) — the number of test cases in the given test set. Test case descriptions follow.\n\nThe first line of each case description contains two integers n and m (1~≤~n,~m~≤~500 000) — the number of vertices in either half of the graph, and the number of edges respectively.\n\nThe second line contains n integers c_i (1 ≤ c_i ≤ 10^{12}). The i-th number describes the integer in the vertex i of the right half of the graph.\n\nEach of the following m lines contains a pair of integers u_i and v_i (1 ≤ u_i, v_i ≤ n), describing an edge between the vertex u_i of the left half and the vertex v_i of the right half. It is guaranteed that the graph does not contain multiple edges.\n\nTest case descriptions are separated with empty lines. The total value of n across all test cases does not exceed 500 000, and the total value of m across all test cases does not exceed 500 000 as well.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1322_C. Instant Noodles", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500 000) — the number of test cases in the given test set. Test case descriptions follow.\n\nThe first line of each case description contains two integers n and m (1~≤~n,~m~≤~500 000) — the number of vertices in either half of the graph, and the number of edges respectively.\n\nThe second line contains n integers c_i (1 ≤ c_i ≤ 10^{12}). The i-th number describes the integer in the vertex i of the right half of the graph.\n\nEach of the following m lines contains a pair of integers u_i and v_i (1 ≤ u_i, v_i ≤ n), describing an edge between the vertex u_i of the left half and the vertex v_i of the right half. It is guaranteed that the graph does not contain multiple edges.\n\nTest case descriptions are separated with empty lines. The total value of n across all test cases does not exceed 500 000, and the total value of m across all test cases does not exceed 500 000 as well.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01757 Tournament", "description": "Input\n\nThe \"ranking table received from the manager\" is given to the input in the following format.\n\n\nn m\na0 a1 .. .am\nb0 b1 ... bm−1\n\n\n* The first line consists of two integers, n and m, where 2n is the \"number of participating teams in the district tournament\" and m is the \"number of sections in which consecutive rankings are lined up in the\" standings received from the manager \"\". Represents.\n* The second line consists of m + 1 integers of ai (0 ≤ i ≤ m), and each ai represents \"the division position of the section where consecutive rankings are lined up in the'ranking table received from the manager'\". ..\n* The third line consists of m integers of bi (0 ≤ i <m), and each 2bi represents \"the ranking of teams whose team numbers are greater than or equal to ai and less than ai + 1 in the standings received from the manager\". ..\n\n\n\nConstraints\n\n* 1 ≤ n ≤ 30\n* 1 ≤ m ≤ 10,000\n* 0 = a0 <a1 ≤ ... ≤ am−1 <am = 2n\n* 0 ≤ bi ≤ n", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "25_C. Roads in Berland", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 300) — amount of cities in Berland. Then there follow n lines with n integer numbers each — the matrix of shortest distances. j-th integer in the i-th row — di, j, the shortest distance between cities i and j. It is guaranteed that di, i = 0, di, j = dj, i, and a given matrix is a matrix of shortest distances for some set of two-way roads with integer lengths from 1 to 1000, such that from each city it is possible to get to any other city using these roads.\n\nNext line contains integer k (1 ≤ k ≤ 300) — amount of planned roads. Following k lines contain the description of the planned roads. Each road is described by three space-separated integers ai, bi, ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 1000) — ai and bi — pair of cities, which the road connects, ci — the length of the road. It can be several roads between a pair of cities, but no road connects the city with itself.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "995_A. Tesla", "description": "Input\n\nThe first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 2n), representing the number of columns and the number of cars, respectively.\n\nThe next four lines will contain n integers each between 0 and k inclusive, representing the initial state of the parking lot. The rows are numbered 1 to 4 from top to bottom and the columns are numbered 1 to n from left to right.\n\nIn the first and last line, an integer 1 ≤ x ≤ k represents a parking spot assigned to car x (you can only move this car to this place), while the integer 0 represents a empty space (you can't move any car to this place).\n\nIn the second and third line, an integer 1 ≤ x ≤ k represents initial position of car x, while the integer 0 represents an empty space (you can move any car to this place).\n\nEach x between 1 and k appears exactly once in the second and third line, and exactly once in the first and fourth line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "996_C. Tesla", "description": "Input\n\nThe first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 2n), representing the number of columns and the number of cars, respectively.\n\nThe next four lines will contain n integers each between 0 and k inclusive, representing the initial state of the parking lot. The rows are numbered 1 to 4 from top to bottom and the columns are numbered 1 to n from left to right.\n\nIn the first and last line, an integer 1 ≤ x ≤ k represents a parking spot assigned to car x (you can only move this car to this place), while the integer 0 represents a empty space (you can't move any car to this place).\n\nIn the second and third line, an integer 1 ≤ x ≤ k represents initial position of car x, while the integer 0 represents an empty space (you can move any car to this place).\n\nEach x between 1 and k appears exactly once in the second and third line, and exactly once in the first and fourth line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01419 On or Off", "description": "Input\n\nThe first line of the input contains three positive integers R (0 \\lt R \\leq 50), C (0 \\lt C \\leq 50) and M (2 \\leq M \\leq 1000). The following R lines, which contain C characters each, describe the layout of the office. '.' describes a room and '#' describes a wall.\n\nThis is followed by three matrices with R rows, C columns each. Every elements of the matrices are positive integers. The (r, c) element in the first matrix describes the power consumption per unit of time for the room at the coordinate (r, c). The (r, c) element in the second matrix and the third matrix describe the cost to turn on the light and the cost to turn off the light, respectively, in the room at the coordinate (r, c).\n\nEach of the last M lines contains two positive integers, which describe the coodinates of the room for you to do the task.\n\nNote that you cannot do the i-th task if any of the j-th task (0 \\leq j \\leq i) is left undone.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00412 Gas Station", "description": "input\n\nThe input is given in the following format.\n\n\n$ N $ $ M $\n$ info_1 $\n$ info_2 $\n::\n$ info_M $\n\n\nThe first line gives the number of lanes $ N $ ($ 1 \\ leq N \\ leq 10 $) and the number of information $ M $ ($ 2 \\ leq M \\ leq 10,000 $). Each information $ info_i $ is given in the following $ M $ line. Each $ info_i $ is given in one of the following formats:\n\n\n0 $ lane $\n\n\nOr\n\n\n1 $ car $\n\n\nIf the first number is 0, it indicates that the first car in the lane with the number $ lane $ ($ 1 \\ leq lane \\ leq N $) has been refueled. A first number of 1 indicates that a car with the number $ car $ ($ 1 \\ leq car \\ leq 9,999 $) has entered the stand.\n\nThe input meets the following constraints.\n\n* The numbers of cars entering the gas station are all different.\n* There must always be at least one piece of information whose first number is 0,1.\n* No information is given that the first number is 0 for lanes without cars.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1136_E. Nastya Hasn't Written a Legend", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^{5}) — the number of elements in the array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^{9} ≤ a_i ≤ 10^{9}) — the elements of the array a.\n\nThe third line contains n-1 integers k_1, k_2, …, k_{n-1} (-10^{6} ≤ k_i ≤ 10^{6}) — the elements of the array k.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 10^{5}) — the number of queries.\n\nEach of the following q lines contains a query of one of two types: \n\n  * if the query has the first type, the corresponding line contains the character '+' (without quotes), and then there are two integers i and x (1 ≤ i ≤ n, 0 ≤ x ≤ 10^{6}), it means that integer x is added to the i-th element of the array a as described in the statement. \n  * if the query has the second type, the corresponding line contains the character 's' (without quotes) and then there are two integers l and r (1 ≤ l ≤ r ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1109_C. Sasha and a Patient Friend", "description": "Input\n\nThe first line contans one integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nEach of the next q lines have one of the following formats:\n\n  * 1 t s (1 ≤ t ≤ 10^9, -10^9 ≤ s ≤ 10^9), means that a new event is added, which means that starting from the t-th second the tap's speed will be equal to s. \n  * 2 t (1 ≤ t ≤ 10^9), means that the event which happens at the t-th second must be deleted. Guaranteed that such exists. \n  * 3 l r v (1 ≤ l ≤ r ≤ 10^9, 0 ≤ v ≤ 10^9), means that you should simulate the process from the very beginning of the l-th second till the very beginning of the r-th second inclusive, and to say when will the bowl burst. \n\n\n\nIt is guaranteed that t, s, l, r, v in all the queries are integers.\n\nAlso, it is guaranteed that there is at least one query of the 3-rd type, and there won't be a query of the 1-st type with such t, that there already exists an event which happens at that second t.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01694 Step Aerobics", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 150 or less. The format of each data set is as follows.\n\n> $ n $\n> $ f_1 $ $ f_2 $ ... $ f_n $\n\nIn the first line, the integer $ n $ ($ 1 \\ le n \\ le 100 $) representing the number of times the foot is moved is given. In the second line, $ f_i $, which is a character string representing the movement of the foot, is given in chronological order by $ n $, separated by spaces. $ f_i $ is one of the following four types of character strings.\n\n* \"lu\": Raise your left foot to the platform.\n* \"ru\": Raise your right foot to the platform.\n* \"ld\": Lower your left foot to the floor.\n* \"rd\": Lower your right foot to the floor.\n\n\n\nIt can be assumed that no action is input that lowers the foot on the floor or raises the foot on the platform.\n\nThe line where $ n $ is 0 indicates the end of input. Do not process this data.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00215 Pachimon Creature", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nW H\nc11c12 ... c1W\nc21c22 ... c2W\n::\ncH1cH2 ... cHW\n\n\nThe first row gives the number of horizontal columns W and the number of vertical rows H (2 ≤ W, H ≤ 1000) of the map. The following line H is given the information on line i of the map. The state of each cell is given to the input map. \"S\" is the starting point of the main character, \"G\" is the goal point, \"1\" \"2\" \"3\" \"4\" \"5\" is the attribute of the pachikuri there (1: fire attribute, 2: ice) Attribute, 3: Tree attribute, 4: Earth attribute, 5: Water attribute), \". (Period)\" represents an empty cell, respectively. The number of pachikuri for each attribute should be 0 or more and 1000 or less.\n\nThe number of datasets does not exceed 140. Also, for 80% of the dataset, W and H do not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1495_A. Diamond Miner", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 10) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of miners and mines.\n\nEach of the next 2n lines contains two space-separated integers x (-10^8 ≤ x ≤ 10^8) and y (-10^8 ≤ y ≤ 10^8), which represent the point (x,y) to describe a miner's or a diamond mine's position. Either x = 0, meaning there is a miner at the point (0, y), or y = 0, meaning there is a diamond mine at the point (x, 0). There can be multiple miners or diamond mines at the same point.\n\nIt is guaranteed that no point is at the origin. It is guaranteed that the number of points on the x-axis is equal to n and the number of points on the y-axis is equal to n.\n\nIt's guaranteed that the sum of n for all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "74_B. Train", "description": "Input\n\nThe first line contains three integers n, m and k. They represent the number of wagons in the train, the stowaway's and the controller's initial positions correspondingly (2 ≤ n ≤ 50, 1 ≤ m, k ≤ n, m ≠ k).\n\nThe second line contains the direction in which a controller moves. \"to head\" means that the controller moves to the train's head and \"to tail\" means that the controller moves to its tail. It is guaranteed that in the direction in which the controller is moving, there is at least one wagon. Wagon 1 is the head, and wagon n is the tail.\n\nThe third line has the length from 1 to 200 and consists of symbols \"0\" and \"1\". The i-th symbol contains information about the train's state at the i-th minute of time. \"0\" means that in this very minute the train moves and \"1\" means that the train in this very minute stands idle. The last symbol of the third line is always \"1\" — that's the terminal train station.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00705 When Can We Meet?", "description": "Input\n\nThe input has multiple data sets, each starting with a line containing the number of committee members and the quorum of the meeting.\n\n> N Q\n\nHere, N, meaning the size of the committee, and Q meaning the quorum, are positive integers. N is less than 50, and, of course, Q is less than or equal to N.\n\nN lines follow, each describing convenient dates for a committee member in the following format.\n\n> M Date1 Date2 ... DateM\n\nHere, M means the number of convenient dates for the member, which is an integer greater than or equal to zero. The remaining items in the line are his/her dates of convenience, which are positive integers less than 100, that is, 1 means tomorrow, 2 means the day after tomorrow, and so on. They are in ascending order without any repetition and separated by a space character. Lines have neither leading nor trailing spaces.\n\nA line containing two zeros indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02100 Factorization", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* 2 ≤ n ≤ 5\n* For any set of i, j such that 1 ≤ i <j ≤ m, where m is the number of terms in the given expression,\nThe degree of the i-th term is guaranteed to be greater than the degree of the j-th term\n* It is guaranteed that the nth degree polynomial of x given can be factored into the product form of the linear expression of x.\n* Absolute values ​​of coefficients and constants are 2 × 103 or less, respectively.\n* The coefficient with the highest degree is 1, which is guaranteed to be omitted.\n* The original constant term of each linear expression before expansion is guaranteed to be a non-zero integer\n* It is guaranteed that the original constant terms of each linear expression before expansion are different.\n\nInput\n\nThe input is given in the following format.\n\n\nS\n\n\nThe string S representing the nth degree polynomial of x is given on one line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00750 The Most Powerful Spell", "description": "Input\n\nThe input consists of at most 150 datasets. Each dataset is formatted as follows.\n\n> n a s g\n>  x1 y1 lab1\n>  x2 y2 lab2\n>  ...\n>  xa ya laba\n>\n\nThe first line of a dataset contains four integers. n is the number of the nodes, and a is the number of the arrows. The numbers s and g indicate the star node and the gold node, respectively. Then a lines describing the arrows follow. Each line consists of two integers and one string. The line \"xi yi labi\" represents an arrow from the node xi to the node yi with the associated label labi . Values in the dataset satisfy: 2 ≤ n ≤ 40, 0 ≤ a ≤ 400, 0 ≤ s, g, xi , yi < n , s ≠g, and labi is a string of 1 to 6 lowercase letters. Be careful that there may be self-connecting arrows (i.e., xi = yi ), and multiple arrows connecting the same pair of nodes (i.e., xi = xj and yi = yj for some i ≠ j ).\n\nThe end of the input is indicated by a line containing four zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00915 The Last Ant", "description": "Input\n\nThe input consists of one or more datasets. Each dataset is formatted as follows.\n\n\nn l\nd1 p1\nd2 p2\n...\ndn pn\n\n\nThe first line of a dataset contains two integers separated by a space. n (1 ≤ n ≤ 20) represents the number of ants, and l (n + 1 ≤ l ≤ 100) represents the length of the tunnel in centimeters. The following n lines describe the initial states of ants. Each of the lines has two items, di and pi, separated by a space. Ants are given numbers 1 through n. The ant numbered i has the initial direction di and the initial position pi. The initial direction di (1 ≤ i ≤ n) is L (to the left) or R (to the right). The initial position pi (1 ≤ i ≤ n) is an integer specifying the distance from the left end of the tunnel in centimeters. Ants are listed in the left to right order, that is, 1 ≤ p1 < p2 < ... < pn ≤ l - 1.\n\nThe last dataset is followed by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01366 Road Construction", "description": "Input\n\nThe input consists of several datasets. Each dataset is formatted as follows.\n\nN M\nu1 v1 d1 c1\n.\n.\n.\nuM vM dM cM\n\n\nThe first line of each dataset begins with two integers, N and M (1 ≤ N ≤ 10000, 0 ≤ M ≤ 20000). N and M indicate the number of cities and the number of roads in the original plan, respectively.\n\nThe following M lines describe the road information in the original plan. The i-th line contains four integers, ui, vi, di and ci (1 ≤ ui, vi ≤ N , ui ≠ vi , 1 ≤ di ≤ 1000, 1 ≤ ci ≤ 1000). ui , vi, di and ci indicate that there is a road which connects ui-th city and vi-th city, whose length is di and whose cost needed for construction is ci.\n\nEach road is bidirectional. No two roads connect the same pair of cities. The 1-st city is the capital in the kingdom.\n\nThe end of the input is indicated by a line containing two zeros separated by a space. You should not process the line as a dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00447 Searching Constellation", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe first line of the input contains the number of stars m that make up the constellation you want to find. In the following m line, the integers indicating the x and y coordinates of the m stars that make up the constellation you want to search for are written separated by blanks. The number n of stars in the photo is written on the m + 2 line. In the following n lines, the integers indicating the x and y coordinates of the n stars in the photo are written separated by blanks.\n\nThe positions of the m stars that make up the constellation are all different. Also, the positions of the n stars in the picture are all different. 1 ≤ m ≤ 200, 1 ≤ n ≤ 1000. The x and y coordinates of a star are all 0 or more and 1000000 or less.\n\nWhen m is 0, it indicates the end of input. The number of datasets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01543 marukaite", "description": "Constraints\n\n> 1 ≤ n ≤ 100\n> 1 ≤ Wij ≤ 1000\n> 1 ≤ Eij ≤ 1000\n>\n\n* Fi is a string and its length is n\n* Fi consists only of'o'and'.'\n\nInput\n\n> n\n> W11 W12 .. W1n\n> W21 W22 .. W2n\n> ..\n> Wn1 Wn2 .. Wnn\n> E11 E12 .. E1n\n> E21 E22 .. E2n\n> ..\n> En1 En2 .. Enn\n> F1 (n characters)\n> F2 (n characters)\n> ..\n> Fn (n characters)\n>\n\n* n indicates how many squares Taro made on one side\n* Wij represents the cost of writing a circle in the i-th cell from the top and the j-th cell from the left.\n* Eij represents the cost of erasing the circles in the i-th and j-th squares from the top.\n* Fi represents the initial state of the cell in the i-th row from the top\n* About the jth character from the left of Fi\n* When it is'o', it means that a circle is written in the i-th cell from the top and the j-th cell from the left.\n* When it is'.', It means that the i-th cell from the top and the j-th cell from the left are blank.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "793_E. Problem of offices", "description": "Input\n\nThe first line contains single integer n (5 ≤ n ≤ 5000) — the total number of offices and departments. The departments and offices are numbered from 1 to n, the central office has index 1.\n\nThe second line contains four integers a, b, c and d (2 ≤ a, b, c, d ≤ n) — the indexes of the departments mentioned in collector's dialogue. It is guaranteed that these indexes are offices (i.e. leaves of the tree), not departments. It is guaranteed that the shortest path between any pair of these offices passes through the central department.\n\nOn the third line n - 1 integers follow: p2, p3, ..., pn (1 ≤ pi < i), where pi denotes that there is a special road between the i-th office or department and the pi-th department.\n\nPlease note the joint enumeration of departments and offices.\n\nIt is guaranteed that the given graph is a tree. The offices are the leaves, the departments are the internal vertices.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00858 Geometric Map", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n\nn\nxs ys\nxg yg\nx11 y11 x21 y21\n.\n.\n.\nx1k y1k x2k y2k\n.\n.\n.\nx1n y1n x2n y2n\n\n\nn, representing the number of line segments, is a positive integer less than or equal to 200.\n\n(xs, ys) and (xg, yg) are the start and goal points, respectively. You can assume that (xs, ys) ≠ (xg, yg) and that each of them is located on an end point of some line segment representing a street. You can also assume that the shortest path from (xs, ys) to (xg, yg) is unique.\n\n(x1k, y1k) and (x2k, y2k ) are the two end points of the kth line segment. You can assume that (x1k, y1k) ≠(x2k, y2k ). Two line segments never cross nor overlap. That is, if they share a point, it is always one of their end points.\n\nAll the coordinates are non-negative integers less than or equal to 1000. The end of the input is indicated by a line containing a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00921 Don't Burst the Balloon", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\n\nn w\nx1 y1 h1\n:\nxn yn hn\n\n\nThe first line of a dataset contains two positive integers, n and w, separated by a space. n represents the number of needles, and w represents the height of the side walls.\n\nThe bottom of the box is a 100 × 100 square. The corners of the bottom face are placed at positions (0, 0, 0), (0, 100, 0), (100, 100, 0), and (100, 0, 0).\n\nEach of the n lines following the first line contains three integers, xi, yi, and hi. (xi, yi, 0) and hi represent the base position and the height of the i-th needle. No two needles stand at the same position.\n\nYou can assume that 1 ≤ n ≤ 10, 10 ≤ w ≤ 200, 0 < xi < 100, 0 < yi < 100 and 1 ≤ hi ≤ 200. You can ignore the thicknesses of the needles and the walls.\n\nThe end of the input is indicated by a line of two zeros. The number of datasets does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1454_E. Number of Simple Paths", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices (and the number of edges) in the graph.\n\nThe next n lines of the test case describe edges: edge i is given as a pair of vertices u_i, v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), where u_i and v_i are vertices the i-th edge connects. For each pair of vertices (u, v), there is at most one edge between u and v. There are no edges from the vertex to itself. So, there are no self-loops and multiple edges in the graph. The graph is undirected, i. e. all its edges are bidirectional. The graph is connected, i. e. it is possible to reach any vertex from any other vertex by moving along the edges of the graph.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "641_B. Little Artem and Matrix", "description": "Input\n\nThe first line of the input contains three integers n, m and q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 10 000) — dimensions of the matrix and the number of turns in the experiment, respectively.\n\nNext q lines contain turns descriptions, one per line. Each description starts with an integer ti (1 ≤ ti ≤ 3) that defines the type of the operation. For the operation of first and second type integer ri (1 ≤ ri ≤ n) or ci (1 ≤ ci ≤ m) follows, while for the operations of the third type three integers ri, ci and xi (1 ≤ ri ≤ n, 1 ≤ ci ≤ m,  - 109 ≤ xi ≤ 109) are given.\n\nOperation of the first type (ti = 1) means that signal comes to the input corresponding to row ri, that is it will shift cyclically. Operation of the second type (ti = 2) means that column ci will shift cyclically. Finally, operation of the third type means that at this moment of time cell located in the row ri and column ci stores value xi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "669_C. Little Artem and Matrix", "description": "Input\n\nThe first line of the input contains three integers n, m and q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 10 000) — dimensions of the matrix and the number of turns in the experiment, respectively.\n\nNext q lines contain turns descriptions, one per line. Each description starts with an integer ti (1 ≤ ti ≤ 3) that defines the type of the operation. For the operation of first and second type integer ri (1 ≤ ri ≤ n) or ci (1 ≤ ci ≤ m) follows, while for the operations of the third type three integers ri, ci and xi (1 ≤ ri ≤ n, 1 ≤ ci ≤ m,  - 109 ≤ xi ≤ 109) are given.\n\nOperation of the first type (ti = 1) means that signal comes to the input corresponding to row ri, that is it will shift cyclically. Operation of the second type (ti = 2) means that column ci will shift cyclically. Finally, operation of the third type means that at this moment of time cell located in the row ri and column ci stores value xi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "907_B. Tic-Tac-Toe", "description": "Input\n\nFirst 11 lines contains descriptions of table with 9 rows and 9 columns which are divided into 9 small fields by spaces and empty lines. Each small field is described by 9 characters without spaces and empty lines. character \"x\" (ASCII-code 120) means that the cell is occupied with chip of the first player, character \"o\" (ASCII-code 111) denotes a field occupied with chip of the second player, character \".\" (ASCII-code 46) describes empty cell.\n\nThe line after the table contains two integers x and y (1 ≤ x, y ≤ 9). They describe coordinates of the cell in table where the last move was done. Rows in the table are numbered from up to down and columns are numbered from left to right.\n\nIt's guaranteed that cell where the last move was done is filled with \"x\" or \"o\". Also, it's guaranteed that there is at least one empty cell. It's not guaranteed that current state of game is reachable.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01631 English", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= wordi string length <= 8\n* 1 <= scorei <= 100\n* 1 <= T <= 10000\n\nInput\n\nEach data set is input in the following format.\n\n\nN\nword1 score1\nword2 score2\n...\nwordN scoreN\nline1\nline2\nline3\nline4\nT\n\n\nN is an integer representing the number of words contained in the dictionary. The dictionary is then entered over N lines. wordi is a character string composed of uppercase letters representing one word, and scorei is an integer representing the score obtained when the word of wordi is traced with a finger. The same word never appears more than once in the dictionary.\n\nThen, the characters of each square are input over 4 lines. linei is a string consisting of only four uppercase letters. The jth character from the left of linei corresponds to the jth character from the left on the i-th line.\n\nAt the very end, the integer T representing the time limit is entered.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00907 Find the Outlier", "description": "Input\n\nThe input is a sequence of datasets, each representing a calculation result in the following format.\n\nd\nv0\nv1\n...\nvd+2\n\n\nHere, d in the first line is a positive integer that represents the degree of the polynomial, namely, the highest exponent of the variable. For instance, the degree of 4x5 + 3x + 0.5 is five and that of 2.4x + 3.8 is one. d is at most five.\n\nThe following d + 3 lines contain the calculation result of f(0), f(1), ... , and f(d + 2) in this order, where f is the polynomial function. Each of the lines contains a decimal fraction between -100.0 and 100.0, exclusive.\n\nYou can assume that the wrong value, which is exactly one of f(0), f(1), ... , and f(d+2), has an error greater than 1.0. Since rounding errors are inevitable, the other values may also have errors but they are small and never exceed 10-6.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01341 Save your cats", "description": "Input\n\nThe input has the following format:\n\nN M\nx1 y1 .\n.\n.\nxN yN p1 q1\n.\n.\n.\npM qM\n\n\nThe first line of the input contains two integers N (2 ≤ N ≤ 10000) and M (1 ≤ M). N indicates the number of magical piles and M indicates the number of magical fences. The following N lines describe the coordinates of the piles. Each line contains two integers xi and yi (-10000 ≤ xi, yi ≤ 10000). The following M lines describe the both ends of the fences. Each line contains two integers pj and qj (1 ≤ pj, qj ≤ N). It indicates a fence runs between the pj-th pile and the qj-th pile.\n\nYou can assume the following:\n\n* No Piles have the same coordinates.\n* A pile doesn’t lie on the middle of fence.\n* No Fences cross each other.\n* There is at least one cat in each enclosed area.\n* It is impossible to destroy a fence partially.\n* A unit of holy water is required to destroy a unit length of magical fence.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00071 Bombs Chain", "description": "Input\n\nThe input is given in the following format:\n\n\nn\n(Blank line)\nData set 1\n(Blank line)\nData set 2\n..\n..\nData set n\n\n\nThe first line gives the number of datasets n (n ≤ 20). Then n datasets are given. One blank line is given immediately before each dataset. Each dataset is given in the following format:\n\n\ng1,1g2,1 ... g8,1\ng1,2g2,2 ... g8,2\n::\ng1,8g2,8 ... g8,8\nX\nY\n\n\nThe first eight lines are given eight strings representing the plane. Each string is a sequence of 8 characters, with 1 representing the square with the bomb and 0 representing the square without the bomb. The next two lines give the X and Y coordinates of the first bomb to explode. The coordinates of the upper left, lower left, upper right, and lower right are (1, 1), (1, 8), (8, 1), and (8, 8), respectively. For example, when the bomb shown in Figure 4 explodes for the first time, the coordinates given are (4, 6).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01676 Tree Reconstruction", "description": "Input\n\nThe input consists of multiple test cases. The format of each test case is as follows.\n\n\nN M\ns_1 t_1\n...\ns_M t_M\n\n\nThe first line contains two integers N (1 \\leq N \\leq 500) and M (0 \\leq M \\leq 3,000) that indicate the number of nodes and edges, respectively. Each of the following M lines consists of two integers s_i and t_i (1 \\leq s_i, t_i \\leq N). This means that there is an edge from s_i to t_i in the graph.\n\nYou may assume that the given graph is simple:\n\n* There are no self-loops: s_i \\neq t_i.\n* There are no multi-edges: for all i < j, \\\\{s_i, t_i\\\\} \\neq \\\\{s_j, t_j\\\\}.\n\n\n\nAlso, it is guaranteed that each component of the given graph is strongly connected. That is, for every pair of nodes v and u, if there exist a path from v to u, then there exists a path from u to v.\n\nNote that you are NOT given information of values on edges because it does not effect the answer.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01107 Go around the Labyrinth", "description": "Input\n\nThe input consists of at most 100 datasets, each in the following format.\n\n\nN M\nc1,1...c1,M\n...\ncN,1...cN,M\n\n\nThe first line contains N, which is the number of rooms in the north-south direction, and M, which is the number of rooms in the east-west direction. N and M are integers satisfying 2 ≤ N ≤ 50 and 2 ≤ M ≤ 50. Each of the following N lines contains a string of length M. The j-th character ci,j of the i-th string represents the state of the room (i,j), i-th from the northernmost and j-th from the westernmost; the character is the period ('`.`') if the room is enterable and the number sign ('`#`') if the room is not enterable. The entrance is located at (1,1), and the treasure chests are placed at (N,1), (N,M) and (1,M). All of these four rooms are enterable. Taro cannot go outside the given N × M rooms.\n\nThe end of the input is indicated by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1070_J. Streets and Avenues in Berhattan", "description": "Input\n\nInput contains one or several test cases to process. The first line contains t (1 ≤ t ≤ 30000) — the number of test cases. Solve test cases separately, test cases are completely independent and do not affect each other.\n\nThe description of t test cases follows. Each test case starts with line with space-separated numbers n, m, k (1 ≤ n,m ≤ 30000; n+m ≤ k ≤ 2⋅10^5) — the number of streets, number of avenues and the number of names in the committee's list, respectively.\n\nThe the second line of each test case contains a string of k uppercase English letters. i-th letter of the string is the first letter of i-th name from the committee's list. \n\nIt's guaranteed that the sum of numbers n from all test cases is not greater than 30000. Similarly, the sum of numbers m from all test cases is not greater than 30000. The sum of numbers k from all test cases is not greater than 2⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1010_E. Store", "description": "Input\n\nThe first line contains 6 integers x_{max}, y_{max}, z_{max}, n, m, k (1≤ x_{max},y_{max},z_{max}≤ 10^5, 1≤ n≤ 10^5, 0≤ m≤ 10^5, 1≤ k≤ 10^5) — number of months in a year, days in a month, seconds in a day, times when the store (according to a Martian) was opened, when it was closed and Natasha's queries.\n\nThe i-th of the next n lines contains 3 integers x_i, y_i, z_i (1≤ x_i≤ x_{max}, 1≤ y_i≤ y_{max}, 1≤ z_i≤ z_{max}) — month, day and second of i-th time, when the store, according to the Martian, was opened.\n\nThe i-th of the next m lines contains 3 integers x_i, y_i, z_i (1≤ x_i≤ x_{max}, 1≤ y_i≤ y_{max}, 1≤ z_i≤ z_{max}) — month, day and second of i-th time, when the store, according to the Martian, was closed.\n\nThe i-th of the next k lines contains 3 integers x_i, y_i, z_i (1≤ x_i≤ x_{max}, 1≤ y_i≤ y_{max}, 1≤ z_i≤ z_{max}) — month, day and second of i-th Natasha's query.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1468_J. Road Reform", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains three integers n, m and k (2 ≤ n ≤ 2 ⋅ 10^5; n - 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2)); 1 ≤ k ≤ 10^9) — the number of cities, the number of roads and the required maximum speed limit, respectively.\n\nThen m lines follow. The i-th line contains three integers x_i, y_i and s_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i; 1 ≤ s_i ≤ 10^9) — the cities connected by the i-th road and the speed limit on it, respectively. All roads are bidirectional.\n\nThe road network in each test case is connected (that is, it is possible to reach any city from any other city by traveling along the road), and each pair of cities is connected by at most one road.\n\nThe sum of n over all test cases does not exceed 2 ⋅ 10^5. Similarly, the sum of m over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1413_F. Roads and Ramen", "description": "Input\n\nThe first line contains the only positive integer n (2 ≤ n ≤ 500 000) standing for the number of villages in the Land of Fire.\n\nEach of the following (n-1) lines contains a description of another road, represented as three positive integers u, v and t (1 ≤ u, v ≤ n, t ∈ \\{0,1\\}). The first two numbers denote the villages connected by the road, and the third denotes the initial type of the road: 0 for the sand one and 1 for the stone one. Roads are numbered from 1 to (n-1) in the order from the input.\n\nThe following line contains a positive integer m (1 ≤ m ≤ 500 000) standing for the number of days Naruto and Jiraiya travel for.\n\nEach of the following m lines contains the single integer id (1 ≤ id ≤ n-1) standing for the index of the road whose type is flipped on the morning of corresponding day.\n\nIt is guaranteed that there is a road path between any pair of villages.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "119_B. Before Exam", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of theorems and the number of cards correspondingly. The second line contains n integers ai (0 ≤ ai ≤ 100), the i-th number (1 ≤ i ≤ n) corresponds to Vasya's proficiency in the i-th theorem.\n\nThe third line contains number q (0 ≤ q ≤ 100) — the number of people that have taken the exam before Vasya. Each of the following q lines contains the description of a student's card: <image> integers from 1 to n inclusive. They are the numbers of theorems included in the card in the order in which they are enumerated in the input data. The numbers are given in an arbitrary order. It is guaranteed that the given cards are valid (that is, that all theorems in one card are different and that different people get cards that either don't contain the same theorems or coincide up to the theorems' permutation).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1433_G. Reducing Delivery Cost", "description": "Input\n\nThe first line of the input contains three integers n, m and k (2 ≤ n ≤ 1000; n - 1 ≤ m ≤ min(1000, (n(n-1))/(2)); 1 ≤ k ≤ 1000) — the number of districts, the number of roads and the number of courier routes.\n\nThe next m lines describe roads. The i-th road is given as three integers x_i, y_i and w_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i; 1 ≤ w_i ≤ 1000), where x_i and y_i are districts the i-th road connects and w_i is its cost. It is guaranteed that there is some path between each pair of districts, so the city is connected. It is also guaranteed that there is at most one road between each pair of districts.\n\nThe next k lines describe courier routes. The i-th route is given as two integers a_i and b_i (1 ≤ a_i, b_i ≤ n) — the districts of the i-th route. The route can go from the district to itself, some couriers routes can coincide (and you have to count them independently).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00315 Quality Management", "description": "Input\n\nThe input is given in the following format.\n\n\nC N\np11p12 ... p1N\np21p22 ... p2N\n::\npN1pN2 ... pNN\ndiff1\ndiff2\n::\ndiffC-1\n\n\nThe first line gives the number of coasters C (1 ≤ C ≤ 10000) and the number of pixels N (2 ≤ N ≤ 1000 and N is even) in the vertical and horizontal directions of the image. Lines 2 to N + 1 are given the number pij (pij is 0 or 1) in rows N x columns N representing the pixels of the image of the first coaster.\n\nAfter the N + 2nd line, the difference diffi representing the information of the 2nd and subsequent coasters is given in the following format.\n\n\nD\nr1 c1\nr2 c2\n::\nrD cD\n\n\nThe number of changed pixels D (0 ≤ D ≤ 100) is given in the first line. The following D rows are given ri and ci (1 ≤ ri, ci ≤ N), which represent the row and column numbers of the changed pixels, respectively. The same position cannot be given more than once in diffi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "142_E. Help Greg the Dwarf 2", "description": "Input\n\nThe first input line contains space-separated integers r and h (1 ≤ r, h ≤ 1000) — the base radius and the cone height correspondingly. The second and third lines contain coordinates of two points on the cone surface, groups of three space-separated real numbers. The coordinates of the points are given in the systems of coordinates where the origin of coordinates is located in the centre of the cone's base and its rotation axis matches the OZ axis. In this coordinate system the vertex of the cone is located at the point (0, 0, h), the base of the cone is a circle whose center is at the point (0, 0, 0), lying on the XOY plane, and all points on the cone surface have a non-negative coordinate z. It is guaranteed that the distances from the points to the cone surface do not exceed 10 - 12. All real numbers in the input have no more than 16 digits after decimal point.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1215_F. Radio Stations", "description": "Input\n\nThe first line contains 4 integers n, p, M and m (2 ≤ n, p, M, m ≤ 4 ⋅ 10^5) — the number of complaints, the number of radio stations, maximum signal power and the number of interfering pairs, respectively.\n\nThen n lines follow, which describe the complains. Each line contains two integers x_i and y_i (1 ≤ x_i < y_i ≤ p) — the indices of the radio stations mentioned in the i-th complaint). All complaints are distinct.\n\nThen p lines follow, which describe the radio stations. Each line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ M) — the constrains on signal power that should be satisfied if the city establishes a contract with the i-th station.\n\nThen m lines follow, which describe the pairs of interfering radio stations. Each line contains two integers u_i and v_i (1 ≤ u_i < v_i ≤ p) — the indices of interfering radio stations. All these pairs are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00866 Stopped Watches", "description": "Input\n\nThe input consists of multiple datasets, each of which is formatted as follows.\n\nn\ns1 t1 u1\ns2 t2 u2\n.\n.\n.\nsn tn un\n\n\nThe first line contains a single integer n (2 ≤ n ≤ 10), representing the number of the watches. The three numbers si , ti , ui in each line are integers such that 0 ≤ si ,ti , ui ≤ 59 and they specify the positions of the three hands by the number of ticks relative to an arbitrarily chosen position.\n\nNote that the positions of the hands of a watch can be expressed in many different ways. For example, if a watch was stopped at the time 11:55:03, the positions of hands can be expressed differently by rotating the watch arbitrarily (e.g. 59 55 3, 0 56 4, 1 57 5, etc.) and as well by permuting the hour, minute, and second hands arbitrarily (e.g. 55 59 3, 55 3 59, 3 55 59, etc.).\n\nThe end of the input is indicated by a line containing a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00214 Autumnal Illumination", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nN\nM1\nxa1 ya1 xb1 yb1 xc1 yc1 xd1 yd1\nxa2 ya2 xb2 yb2 xc2 yc2 xd2 yd2\n::\nxaM1 yaM1 xbM1 ybM1 xcM1 ycM1 xdM1 ydM1\nM2\n::\n::\nMN\n::\n::\n\n\nThe number of illuminations N (1 ≤ N ≤ 100) is given on the first line. Then, information on N illuminations is given. As the i-th illumination information, the number of rectangles Mi (1 ≤ Mi ≤ 100) that make up the illumination is given in one line. The following Mi line is given the jth quadrangle vertex xaj, yaj, xbj, ybj, xcj, ycj, xdj, ydj (integer between -1000 and 1000).\n\nThe coordinates of the vertices of the rectangle entered are entered in a clockwise order. However, all the input data rectangles are convex rectangles.\n\nThe number of datasets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "883_E. Field of Wonders", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 50) — the length of the hidden word.\n\nThe following line describes already revealed letters. It contains the string of length n, which consists of lowercase Latin letters and symbols \"*\". If there is a letter at some position, then this letter was already revealed. If the position contains symbol \"*\", then the letter at this position has not been revealed yet. It is guaranteed, that at least one letter is still closed.\n\nThe third line contains an integer m (1 ≤ m ≤ 1000) — the number of words of length n, which Polycarpus knows. The following m lines contain the words themselves — n-letter strings of lowercase Latin letters. All words are distinct.\n\nIt is guaranteed that the hidden word appears as one of the given m words. Before the current move Polycarp has told exactly the letters which are currently revealed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00731 Cliff Climbing", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows:\n\n> w h\n>  s(1,1) ... s(1,w)\n>  s(2,1) ... s(2,w)\n>  ...\n>  s(h,1) ... s(h,w)\n>\n\nThe integers w and h are the width and the height of the matrix data of the cliff. You may assume 2 ≤ w ≤ 30 and 5 ≤ h ≤ 60. Each of the following h lines consists of w characters delimited by a space. The character s(y, x) represents the state of the block at position (x, y) as follows:\n\n* 'S': Jack can start cliff climbing from this block.\n* 'T': Jack finishes climbing when he reaches this block.\n* 'X': Jack cannot put his feet on this block.\n* '1' - '9' (= t): Jack has to spend t time units to put either of his feet on this block.\n\n\n\nYou can assume that it takes no time to put a foot on a block marked with 'S' or 'T'.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "620_E. New Year Tree", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 4·105) — the number of vertices in the tree and the number of the queries.\n\nThe second line contains n integers ci (1 ≤ ci ≤ 60) — the colour of the i-th vertex.\n\nEach of the next n - 1 lines contains two integers xj, yj (1 ≤ xj, yj ≤ n) — the vertices of the j-th edge. It is guaranteed that you are given correct undirected tree.\n\nThe last m lines contains the description of the queries. Each description starts with the integer tk (1 ≤ tk ≤ 2) — the type of the k-th query. For the queries of the first type then follows two integers vk, ck (1 ≤ vk ≤ n, 1 ≤ ck ≤ 60) — the number of the vertex whose subtree will be recoloured with the colour ck. For the queries of the second type then follows integer vk (1 ≤ vk ≤ n) — the number of the vertex for which subtree you should find the number of different colours.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "75_D. Big Maximum Sum", "description": "Input\n\nThe first line contains two integers n and m, n is the number of the small arrays (1 ≤ n ≤ 50), and m is the number of indexes in the big array (1 ≤ m ≤ 250000). Then follow n lines, the i-th line starts with one integer l which is the size of the i-th array (1 ≤ l ≤ 5000), followed by l integers each one will be greater than or equal -1000 and less than or equal 1000. The last line contains m integers which are the indexes in the big array, and you should concatenate the small arrays in the same order, and each index will be greater than or equal to 1 and less than or equal to n.\n\nThe small arrays are numbered from 1 to n in the same order as given in the input. Some of the given small arrays may not be used in big array.\n\nNote, that the array is very big. So if you try to build it straightforwardly, you will probably get time or/and memory limit exceeded.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "916_E. Jamie and Tree", "description": "Input\n\nThe first line of input contains two space-separated integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of vertices in the tree and the number of queries to process respectively.\n\nThe second line contains n space-separated integers a1, a2, ..., an ( - 108 ≤ ai ≤ 108) — initial values of the vertices.\n\nNext n - 1 lines contains two space-separated integers ui, vi (1 ≤ ui, vi ≤ n) describing edge between vertices ui and vi in the tree.\n\nThe following q lines describe the queries.\n\nEach query has one of following formats depending on its type:\n\n1 v (1 ≤ v ≤ n) for queries of the first type.\n\n2 u v x (1 ≤ u, v ≤ n, - 108 ≤ x ≤ 108) for queries of the second type.\n\n3 v (1 ≤ v ≤ n) for queries of the third type.\n\nAll numbers in queries' descriptions are integers.\n\nThe queries must be carried out in the given order. It is guaranteed that the tree is valid.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1342_F. Make It Ascending", "description": "Input\n\nThe first line contains one integer T (1 ≤ T ≤ 10000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 15) — the number of elements in the initial array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nIt is guaranteed that: \n\n  * the number of test cases having n ≥ 5 is not greater than 5000; \n  * the number of test cases having n ≥ 8 is not greater than 500; \n  * the number of test cases having n ≥ 10 is not greater than 100; \n  * the number of test cases having n ≥ 11 is not greater than 50; \n  * the number of test cases having n ≥ 12 is not greater than 25; \n  * the number of test cases having n ≥ 13 is not greater than 10; \n  * the number of test cases having n ≥ 14 is not greater than 3; \n  * the number of test cases having n ≥ 15 is not greater than 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01140 Square Route", "description": "Input\n\nThe input is composed of multiple data sets, and each data set has the following structure.\n\n> N M\n> h1\n> h2\n> ...\n> hN\n> w1\n> w2\n> ...\n> wM\n\nTwo positive integers N, M (1 ≤ N, M ≤ 1500) are given on the first line. The following N lines h1, h2, ..., hN (1 ≤ hi ≤ 1000) represent the distance between roads in the north-south direction. Where hi is the distance between the i-th road from the north and the i + 1st road from the north. Similarly, the following M lines w1, ..., wM (1 ≤ wi ≤ 1000) represent the distance between roads in the east-west direction. Where wi is the distance between the i-th road from the west and the i + 1st road from the west. The width of the road itself is narrow enough that it does not need to be considered.\n\nFirst dataset\nFigure D-1: First dataset\n\nN = M = 0 indicates the end of the input and is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00519 Taxis", "description": "input\n\nThe input consists of 1 + N + K lines.\n\nOn the first line, two integers N, K (2 ≤ N ≤ 5000, N -1 ≤ K ≤ 10000) are written separated by a blank. This means that the IOI country consists of N towns and the number of roads in the IOI country is K.\n\nOn the i-th line (1 ≤ i ≤ N) of the following N lines, two integers Ci and Ri (1 ≤ Ci ≤ 10000, 1 ≤ Ri ≤ N) are written separated by a blank. This means that the taxi fare of taxi company i is Ci, and you can only pass up to Ri roads in a row after boarding.\n\nOn the jth line (1 ≤ j ≤ K) of the following K lines, two different integers Aj and Bj (1 ≤ Aj <Bj ≤ N) are written separated by a blank. This means that there is a road between town Aj and town Bj. The same (Aj, Bj) pair has never been written more than once.\n\nGiven the input data, it is guaranteed that you can take a taxi from any town to any other town.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00161 Sport Meet", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\nrecord1\nrecord2\n::\nrecordn\n\n\nThe first line gives the number of teams of interest n (4 ≤ n ≤ 100000), and the following n lines give information about the i-th team. Information for each team is given in the following format:\n\n\nid m1 s1 m2 s2 m3 s3 m4 s4\n\n\nid (1 ≤ id ≤ n) is the team number, m1 and s1 are the minutes and seconds of the foot race time, m2 and s2 are the minutes and seconds of the ball-carrying time, and m3 and s3 are the time of the obstacle race. Minutes and seconds, m4 and s4 represent minutes and seconds of relay time, respectively. Both minutes and seconds are integers between 0 and 59. Also, assume that no input is such that the total time is the same for multiple teams.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "245_F. Log Stream Analysis", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 10000).\n\nThe second and the remaining lines of the input represent the log stream. The second line of the input contains the first record of the log stream, the third line contains the second record and so on. Each record of the log stream has the above described format. All records are given in the chronological order, that is, the warning records are given in the order, in which the warnings appeared in the program. \n\nIt is guaranteed that the log has at least one record. It is guaranteed that the total length of all lines of the log stream doesn't exceed 5·106 (in particular, this means that the length of some line does not exceed 5·106 characters). It is guaranteed that all given dates and times are correct, and the string 'MESSAGE\" in all records is non-empty.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1266_E. Spaceship Solitaire", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of types of resources.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the i-th of which is the goal for the i-th resource.\n\nThe third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of updates to the game milestones.\n\nThen q lines follow, the j-th of which contains three space separated integers s_j, t_j, u_j (1 ≤ s_j ≤ n, 1 ≤ t_j < a_{s_j}, 0 ≤ u_j ≤ n). For each triple, perform the following actions: \n\n  * First, if there is already a milestone for obtaining t_j units of resource s_j, it is removed. \n  * If u_j = 0, no new milestone is added. \n  * If u_j ≠ 0, add the following milestone: \"For reaching t_j units of resource s_j, gain one free piece of u_j.\" \n  * Output the minimum number of turns needed to win the game.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "59_D. Team Arrangement", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105) which is the number of resulting teams. The second line contains 3n space-separated integers from 1 to 3n which are the results of personal training sessions. It is guaranteed that every student appears in the results exactly once.\n\nThen follow n lines each containing three integers from 1 to 3n — each line describes the members of a given team. The members of one team can be listed in any order, but the teams themselves are listed in the order in which they were created. It is guaranteed that the arrangement is correct, that is that every student is a member of exactly one team and those teams could really be created from the given results using the method described above.\n\nThe last line contains number k (1 ≤ k ≤ 3n) which is the number of a student for who the list of priorities should be found.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01453 Spring Tiles", "description": "Input\n\nW H\nc11 c12 ... c1w\nc21 c22 ... c2w\n:::\nch1 ch2 ... ccw\n\n\nOn the first line of input, the integer W (3 ≤ W ≤ 500) and the integer H (3 ≤ H ≤ 500) are written in this order, separated by blanks. The integer W represents the width of the labyrinth, and the integer H represents the height of the labyrinth.\n\nThe following H line contains W letters (not blank delimiters) that represent the map of the labyrinth. The format of this part is as in the example given above. Note that \"s\" and \"g\" appear exactly once in the data. In addition, one square around the labyrinth is always surrounded by a wall.\n\nIn addition, in the given labyrinth, no matter how you move and how it is blown by the spring, you will fall into a state where you cannot escape even if you can arbitrarily set the floor to be blown by the spring. You can assume that there is no such thing.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01735 Optimal alpha beta pruning", "description": "Input\n\nInput follows following format:\n\n\nn\np_1 p_2 ... p_n\nk_1 t_{11} t_{12} ... t_{1k}\n:\n:\nk_n t_{n1} t_{n2} ... t_{nk}\n\n\nThe first line contains an integer n, which means the number of vertices in game tree T.\nThe second line contains n integers p_i, which means the evaluation value of vertex i.\nThen, next n lines which contain the information of game tree T.\nk_i is the number of child nodes of vertex i, and t_{ij} is the indices of the child node of vertex i.\nInput follows following constraints:\n\n* 2 \\leq n \\leq 100\n* -10,000 \\leq p_i \\leq 10,000\n* 0 \\leq k_i \\leq 5\n* 2 \\leq t_{ij} \\leq n\n* Index of root node is 1.\n* Evaluation value except leaf node is always 0. This does not mean the evaluation values of non-leaf nodes are 0. You have to calculate them if necessary.\n* Leaf node sometimes have evaluation value of 0.\n* Game tree T is tree structure.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00560 Semiexpress", "description": "Input\n\nRead the following data from the standard input.\n\n* The first line of input contains three space separated integers $N$, $M$, $K$. This means there are $N$ stations of the JOI Railways, an express train stops at $M$ stations, and a semiexpress train stops at $K$ stations,\n* The second line of input contains three space separated integers $A$, $B$, $C$. This means it takes $A$, $B$, $C$ minutes by a local, express, semiexpress train to travel from a station to the next station, respectively.\n>li> The third line of input contains an integer $T$. This means the JOI Railways wants to maximize the number of stations (except for the station 1) to which we can travel from the station 1 within $T$ minutes.\n* The $i$-th line ($1 \\leq i \\leq M$) of the following $M$ lines contains an integer $S_i$. This means an express train stops at the station $S_i$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00464 Walk", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nOn the first line, three positive integers are separated by blanks. These are the values ​​of the three numbers H, W, N in the problem statement. H, W, N are 1 ≤ H ≤, respectively. 1000, 1 ≤ W ≤ 1000, 1 ≤ N ≤ 10000000 = 107. From the 2nd line to H + 1st line, W integers are written separated by blanks. Represents the information of the character written at the intersection first. If the jth integer of i + 1st line is 0, the character written at the intersection (i, j) is \"south\", and if it is 1, the intersection Indicates that the character written in (i, j) is \"east\".\n\nOf the scoring data, 30% of the points are satisfied with H ≤ 100, W ≤ 100, and N ≤ 1000.\n\nWhen H, W, N are all 0, it indicates the end of input. The number of data sets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02007 Prefix Suffix Search", "description": "Input\n\nThe input consists of a single test case in the following format.\n\n\n$N$ $Q$\n$w_1$\n$...$\n$w_N$\n$p_1$ $s_1$\n$...$\n$p_Q$ $s_Q$\n\n\nThe first line contains two integers $N$ and $Q$, where $N$ ($1 \\leq N \\leq 10^5$) is the number of words in the list, and $Q$ ($1 \\leq Q \\leq 10^5$) is the number of queries. The $i$-th line of the following $N$ lines contains a string $w_i$. The $i$-th of the following $Q$ lines contains two strings $p_i$ and $s_i$, which are a prefix and suffix of words to be searched, respectively.\n\nYou can assume the followings:\n\n* All the strings in an input are non-empty and consist only of lowercase English letters.\n* The total length of input strings does not exceed $2,500,000$.\n* Words in the given list are unique: $w_i \\ne w_j$ if $i \\ne j$.\n* Pairs of a prefix and suffix are unique: $(p_i, s_i) \\ne (p_j, s_j)$ if $i \\ne j$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "46_D. Parking Lot", "description": "Input\n\nThe first line contains three integers L, b и f (10 ≤ L ≤ 100000, 1 ≤ b, f ≤ 100). The second line contains an integer n (1 ≤ n ≤ 100) that indicates the number of requests the program has got. Every request is described on a single line and is given by two numbers. The first number represents the request type. If the request type is equal to 1, then in that case the second number indicates the length of a car (in meters) that enters the street looking for a place to park. And if the request type is equal to 2, then the second number identifies the number of such a request (starting with 1) that the car whose arrival to the parking lot was described by a request with this number, leaves the parking lot. It is guaranteed that that car was parked at the moment the request of the 2 type was made. The lengths of cars are integers from 1 to 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00559 Foehn Phenomena", "description": "Input\n\nRead the following data from the standard input.\n\n* The first line of input contains four space separated integers $N$, $Q$, $S$, $T$. This means there is a house of Mr. JOI at Spot $N$, there are $Q$ tectonic movements, the temperature of the wind decreases by $S$ degrees per altitude if the altitude increases, and the temperature of the wind increases by $T$ degrees per altitude if the altitude decreases.\n* The $i$-th line ($1 \\leq i \\leq N +1$) of the following $N +1$ lines contains an integer $A_{i-1}$, which is the initial altitude at Spot ($i - 1$) before tectonic movements.\n* The $j$-th line ($1 \\leq j \\leq Q$) of the following $Q$ lines contains three space separated integers $L_j$, $R_j$, $X_j$. This means, for the tectonic movement on the $j$-th day, the change of the altitude at the spots from $L_j$ to $R_j$ is described by $X_j$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00443 Lightest Mobile", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format. The input ends on a line containing one zero.\n\nThe first line contains the number of bars n used in the mobile. The following n lines (1 ≤ n ≤ 100) contain the data for each bar. I + 1st line In (1 ≤ i ≤ n), four integers p, q, r, b are written with a blank as a delimiter, and on the bar i, the length from the fulcrum to the red end and the length from the fulcrum to the blue end. The ratio is p: q, the number of the bar hanging at the red end is r, and the number of the bar hanging at the blue end is b, where bar number 0 is the weight. In any input, if the minimum value of the weight of the mobile is w and the maximum value of the positive integer used to express the ratio in the input is L, then wL <231 Meet.\n\nThe number of datasets does not exceed 15.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01324 Consistent Unit System", "description": "Input\n\nThe first line of input is given the integer N (1 ≤ N ≤ 100), which indicates the number of relationships between units.\n\nThe next N lines contain the relationships between the units. The relationship between units is given in the following format.\n\n\"1 A = 10 ^ x B\"\n\nA and B indicate the unit. A and B are different, each consisting of 1 to 16 lowercase letters without spaces. x is an integer from -100 to 100. When \"1 A = 10 ^ x B\" is defined, it is assumed that \"1 B = 10 ^ -x A\" is also implicitly defined.\n\nAn arbitrary unit system pair cannot be defined more than once. That is, relationships such as \"1 kilobyte = 10 ^ 3 byte\" and \"1 kilobyte = 10 ^ 1 byte\" are not included in the input at the same time. Similarly, relationships such as \"1 kilobyte = 10 ^ 3 byte\" and \"1 byte = 10 ^ -3 kilobyte\" are not included in the input at the same time.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1244_D. Paint the Tree", "description": "Input\n\nThe first line contains one integer n (3 ≤ n ≤ 100 000) — the number of vertices.\n\nThe second line contains a sequence of integers c_{1, 1}, c_{1, 2}, ..., c_{1, n} (1 ≤ c_{1, i} ≤ 10^{9}), where c_{1, i} is the cost of painting the i-th vertex into the first color.\n\nThe third line contains a sequence of integers c_{2, 1}, c_{2, 2}, ..., c_{2, n} (1 ≤ c_{2, i} ≤ 10^{9}), where c_{2, i} is the cost of painting the i-th vertex into the second color.\n\nThe fourth line contains a sequence of integers c_{3, 1}, c_{3, 2}, ..., c_{3, n} (1 ≤ c_{3, i} ≤ 10^{9}), where c_{3, i} is the cost of painting the i-th vertex into the third color.\n\nThen (n - 1) lines follow, each containing two integers u_j and v_j (1 ≤ u_j, v_j ≤ n, u_j ≠ v_j) — the numbers of vertices connected by the j-th undirected edge. It is guaranteed that these edges denote a tree.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "727_E. Games on a CD", "description": "Input\n\nThe first line of the input contains two positive integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105) — the amount of games Tolya burned to the CD, and the length of each of the names.\n\nThe second line of the input contains one string consisting of lowercase English letters — the string Tolya wrote on the CD, split in arbitrary place. The length of the string is n·k. It is guaranteed that the length is not greater than 106.\n\nThe third line of the input contains one positive integer g (n ≤ g ≤ 105) — the amount of popular games that could be written on the CD. It is guaranteed that the total length of names of all popular games is not greater than 2·106.\n\nEach of the next g lines contains a single string — the name of some popular game. Each name consists of lowercase English letters and has length k. It is guaranteed that the names are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01316 Differential Pulse Code Modulation", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> N M\n> C1\n> C2\n> ...\n> CM\n> x1\n> x2\n> ...\n> xN\n>\n\nThe first line specifies the size of the input dataset. N is the length (number of samples) of the input signal to be compressed. M is the number of values ​​contained in the codebook. N and M satisfy 1 ≤ N ≤ 20000 and 1 ≤ M ≤ 16.\n\nThe M line that follows is the description of the codebook. Ci represents the i-th value contained in the codebook. Ci satisfies -255 ≤ Ci ≤ 255.\n\nThe N lines that follow are the description of the input signal. xi is the i-th value of a sequence of integers representing the input signal. xi satisfies 0 ≤ xi ≤ 255.\n\nThe input items in the dataset are all integers. The end of the input is represented by a line consisting of only two zeros separated by a single space character.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00877 Separate Points", "description": "Input\n\nThe input is a sequence of datasets, each of which is formatted as follows.\n\nn m\nx1 y1\n.\n.\n.\nxn yn\nxn+1 yn+1\n.\n.\n.\nxn+m yn+m\n\n\nThe first line contains two positive integers separated by a single space; n is the number of black points, and m is the number of white points. They are less than or equal to 100. Then n + m lines representing the coordinates of points follow. Each line contains two integers xi and yi separated by a space, where (xi , yi ) represents the x-coordinate and the y-coordinate of the i-th point. The color of the i-th point is black for 1 ≤ i ≤ n, and is white for n + 1 ≤ i ≤ n + m.\n\nAll the points have integral x- and y-coordinate values between 0 and 10000 inclusive. You can also assume that no two points have the same position.\n\nThe end of the input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1338_E. JYPnation", "description": "Input\n\nThe first line contains a single integer n (4 ≤ n ≤ 8000, n ≡ 0 \\pmod{4}) — the number of cities.\n\nA binary matrix is encrypted in the following format. Each of n next lines contains n/4 one-digit hexadecimal numbers (that is, these numbers can be represented either as digits from 0 to 9 or as uppercase Latin letters from A to F). Binary representation of each of these numbers denotes next 4 elements of the matrix in the corresponding row. For example, if the number B is given, then the corresponding elements are 1011, and if the number is 5, then the corresponding elements are 0101.\n\nAfter you obtain the decrypted binary matrix, the j-th character of the i-th row is 1 if the one-directional road between cities i and j is directed from i to j, and 0 otherwise. It is guaranteed that the graph satisfies the restrictions mentioned above.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1089_J. JS Minification", "description": "Input\n\nThe first line of the input contains a single integer n (0 ≤ n ≤ 40) — the number of reserved tokens.\n\nThe second line of the input contains the list of reserved tokens separated by spaces without repetitions in the list. Each reserved token is at least one and at most 20 characters long and contains only characters with ASCII codes from 33 (exclamation mark) to 126 (tilde) inclusive, with exception of a hash character ('#' code 35).\n\nThe third line of the input contains a single integer m (1 ≤ m ≤ 40) — the number of lines in the input source code.\n\nNext m lines contain the input source, each source line is at most 80 characters long (counting leading and trailing spaces). Each line contains only characters with ASCII codes from 32 (space) to 126 (tilde) inclusive. The source code is valid and fully parses into a sequence of tokens.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "329_B. Biridian Forest", "description": "Input\n\nThe first line consists of two integers: r and c (1 ≤ r, c ≤ 1000), denoting the number of rows and the number of columns in Biridian Forest. The next r rows will each depict a row of the map, where each character represents the content of a single cell: \n\n  * 'T': A cell occupied by a tree. \n  * 'S': An empty cell, and your starting position. There will be exactly one occurence of this in the map. \n  * 'E': An empty cell, and where the exit is located. There will be exactly one occurence of this in the map. \n  * A digit (0-9): A cell represented by a digit X means that the cell is empty and is occupied by X breeders (in particular, if X is zero, it means that the cell is not occupied by any breeder). \n\n\n\nIt is guaranteed that it will be possible for you to go from your starting position to the exit cell through a sequence of moves.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1056_F. Write The Contest", "description": "Input\n\nThe first line contains one integer tc (1 ≤ tc ≤ 20) — the number of test cases. Then tc test cases follow.\n\nThe first line of each test contains one integer n (1 ≤ n ≤ 100) — the number of problems in the contest.\n\nThe second line of the test contains two real values C, T (0 < C < 10, 0 ≤ T ≤ 2 ⋅ 10^5), where C defines the efficiency of the training and T is the duration of the contest in minutes. Value C, T are given exactly with three digits after the decimal point.\n\nEach of the next n lines of the test contain characteristics of the corresponding problem: two integers a_i, p_i (1 ≤ a_i ≤ 10^4, 1 ≤ p_i ≤ 10) — the difficulty and the score of the problem.\n\nIt is guaranteed that the value of T is such that changing it by the 0.001 in any direction will not change the test answer.\n\nPlease note that in hacks you can only use tc = 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01298 Water Tank", "description": "Input\n\nThe input is a sequence of datasets. Each dataset corresponds to a schedule table in the following format:\n\nN L\ns1 t1 u1\n...\nsN tN uN\n\n\nThe first line of a dataset contains two integers N and L (1 ≤ N ≤ 86400, 1 ≤ L ≤ 106), which represents the number of schedule in the table and the capacity of the tank, respectively.\n\nThe following N lines describe the N schedules. The (i + 1)-th line of the dataset corresponds to the i-th schedule, which consists of three integers si, ti and ui . The first two integers si and ti indicate the starting time and the ending time of the schedule. The last integer ui (1 ≤ ui ≤ 106 ) indicates the consumed volume per unit of time during the schedule. It is guaranteed that 0 ≤ s1 < t1 ≤ s2 < t2 ≤ ... ≤ sn < tn ≤ 86400.\n\nThe input is terminated by a line with two zeros. This line should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00502 Hot days", "description": "input\n\nThe input consists of 1 + D + N lines.\n\nOn the first line, two integers D and N (2 ≤ D ≤ 200, 1 ≤ N ≤ 200) are written with a blank as a delimiter. D is the number of days to plan clothes and N is the number of clothes types IOI has.\n\nOne integer Ti (0 ≤ Ti ≤ 60) is written in the i-th line (1 ≤ i ≤ D) of the following D lines. This means that the maximum temperature on day i is forecast to be Ti degrees.\n\nIn the jth line (1 ≤ j ≤ N) of the following N lines, three integers Aj, Bj, Cj (0 ≤ Aj ≤ Bj ≤ 60, 0 ≤ Cj ≤ 100) are written. These indicate that clothing j is suitable for wearing on days when the maximum temperature is above Aj and below Bj, and the flashiness is Cj.\n\nIt is guaranteed that there will be at least one piece of clothing suitable for wearing when the maximum temperature follows the weather forecast for every D day.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "242_C. King's Path", "description": "Input\n\nThe first line contains four space-separated integers x0, y0, x1, y1 (1 ≤ x0, y0, x1, y1 ≤ 109), denoting the initial and the final positions of the king.\n\nThe second line contains a single integer n (1 ≤ n ≤ 105), denoting the number of segments of allowed cells. Next n lines contain the descriptions of these segments. The i-th line contains three space-separated integers ri, ai, bi (1 ≤ ri, ai, bi ≤ 109, ai ≤ bi), denoting that cells in columns from number ai to number bi inclusive in the ri-th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily.\n\nIt is guaranteed that the king's initial and final position are allowed cells. It is guaranteed that the king's initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn't exceed 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01367 Operator", "description": "Input\n\nThe input contains multiple datasets. Each dataset has the following format:\n\nN T\nM1 L1 K1\n.\n.\n.\nMN LN KN\n\n\nThe first line of a dataset contains two positive integers, N and T (1 ≤ N ≤ 1000, 1 ≤ T ≤ 1000). N indicates the number of customers in the dataset, and T indicates the time limit of the simulation.\n\nThe following N lines describe the information of customers. The i-th line contains three integers, Mi, Li and Ki (1 ≤ Mi ≤ T , 1 ≤ Li ≤ 1000, 1 ≤ Ki ≤ 1000), describing i-th customer's information. Mi indicates the time required for phone support, Li indicates the maximum stand by time until an operator answers the call, and Ki indicates the is the interval time from hanging up to calling back.\n\nThe end of input is indicated by a line containing two zeros. This line is not part of any dataset and hence should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "316_B2. EKG", "description": "Input\n\nThe first line contains two integers n (1 ≤ n ≤ 103) and x (1 ≤ x ≤ n) — the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n) — the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "316_B1. EKG", "description": "Input\n\nThe first line contains two integers n (1 ≤ n ≤ 103) and x (1 ≤ x ≤ n) — the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ n) — the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00155 Spider Jin", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\nb1 x1 y1\nb2 x2 y2\n::\nbn xn yn\nm\ns1 g1\ns2 g2\n::\nsm gm\n\n\nThe number of buildings n (1 ≤ n ≤ 100) on the first line, the building number bi (1 ≤ bi ≤ n) of the i-th building on the following n lines, and the integers xi, yi representing the x and y coordinates of that building. (-1000 ≤ xi, yi ≤ 1000) is given, separated by spaces.\n\nThe number of movement information m (1 ≤ m ≤ 100) is given to the following line, and the i-th movement information is given to the following m line. As each move information, the number si of the building to start the move and the number gi of the destination building are given, separated by blanks.\n\nThe number of datasets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "903_G. Yet Another Maxflow Problem", "description": "Input\n\nThe first line contains three integer numbers n, m and q (2 ≤ n, m ≤ 2·105, 0 ≤ q ≤ 2·105) — the number of vertices in each part, the number of edges going from A to B and the number of changes, respectively.\n\nThen n - 1 lines follow, i-th line contains two integers xi and yi denoting that the edge from Ai to Ai + 1 has capacity xi and the edge from Bi to Bi + 1 has capacity yi (1 ≤ xi, yi ≤ 109).\n\nThen m lines follow, describing the edges from A to B. Each line contains three integers x, y and z denoting an edge from Ax to By with capacity z (1 ≤ x, y ≤ n, 1 ≤ z ≤ 109). There might be multiple edges from Ax to By.\n\nAnd then q lines follow, describing a sequence of changes to the network. i-th line contains two integers vi and wi, denoting that the capacity of the edge from Avi to Avi + 1 is set to wi (1 ≤ vi < n, 1 ≤ wi ≤ 109).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00859 Slim Span", "description": "Input\n\nThe input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format.\n\n\nn     m\na1  b1  w1\n.\n.\n.\nam  bm  wm\n\n\nEvery input item in a dataset is a non-negative integer. Items in a line are separated by a space.\n\nn is the number of the vertices and m the number of the edges. You can assume 2 ≤ n ≤ 100 and 0 ≤ m ≤ n(n - 1)/2. ak and bk (k = 1, ... , m) are positive integers less than or equal to n, which represent the two vertices vak and vbk connected by the kth edge ek. wk is a positive integer less than or equal to 10000, which indicates the weight of ek . You can assume that the graph G = (V, E) is simple, that is, there are no self-loops (that connect the same vertex) nor parallel edges (that are two or more edges whose both ends are the same two vertices).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02620 Introduction to Heuristics Contest - Incremental Scoring", "description": "Input\n\nInput is given from Standard Input in the form of the input of Problem A followed by the output of Problem A and the queries.\n\n\nD\nc_1 c_2 \\cdots c_{26}\ns_{1,1} s_{1,2} \\cdots s_{1,26}\n\\vdots\ns_{D,1} s_{D,2} \\cdots s_{D,26}\nt_1\nt_2\n\\vdots\nt_D\nM\nd_1 q_1\nd_2 q_2\n\\vdots\nd_M q_M\n\n\n* The constraints and generation methods for the input part are the same as those for Problem A.\n* For each d=1,\\ldots,D, t_d is an integer generated independently and uniformly at random from {1,2,\\ldots,26}.\n* The number of queries M is an integer satisfying 1\\leq M\\leq 10^5.\n* For each i=1,\\ldots,M, d_i is an integer generated independently and uniformly at random from {1,2,\\ldots,D}.\n* For each i=1,\\ldots,26, q_i is an integer satisfying 1\\leq q_i\\leq 26 generated uniformly at random from the 25 values that differ from the type of contest on day d_i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00503 Fish", "description": "input\n\nThe input consists of 1 + N lines.\n\nOn the first line, two integers N and K (1 ≤ K ≤ N ≤ 50) are written with a blank as a delimiter. This means that there are N types of fish, and we want to find the volume of the place where the habitat ranges of K or more types of fish overlap.\n\nIn the i-th line (1 ≤ i ≤ N) of the following N lines, there are 6 integers Xi, 1, Yi, 1, Di, 1, Xi, 2, Yi, 2, Di, 2 (0 ≤ Xi, 1 <Xi, 2 ≤ 1000000 (= 106), 0 ≤ Yi, 1 <Yi, 2 ≤ 1000000 (= 106), 0 ≤ Di, 1 <Di, 2 ≤ 1000000 (= 106)) are written. This is because the habitat range of the i-type fish is 8 points (Xi, 1, Yi, 1, Di, 1), (Xi, 2, Yi, 1, Di, 1), (Xi, 2, Yi, 2, Di, 1), (Xi, 1, Yi, 2, Di, 1), (Xi, 1, Yi, 1, Di, 2), (Xi, 2, Yi, 1, Di, 2), (Xi, 2, Yi, 2, Di, 2), (Xi, 1, Yi, 2, Di, 2) represents a rectangular parallelepiped with vertices as vertices.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "581_E. Kojiro and Furrari", "description": "Input\n\nThe first line of the input contains four positive integers e, s, n, m (1 ≤ e, s ≤ 109, 1 ≤ n, m ≤ 2·105) — the coordinate of the point where Johanna is, the capacity of a Furrari tank, the number of gas stations and the number of starting points. \n\nNext n lines contain two integers each ti, xi (1 ≤ ti ≤ 3, - 109 ≤ xi ≤ 109), representing the type of the i-th gas station (1 represents Regular-92, 2 — Premium-95 and 3 — Super-98) and the position on a coordinate line of the i-th gas station. Gas stations don't necessarily follow in order from left to right.\n\nThe last line contains m integers fi ( - 109 ≤ fi < e). Start positions don't necessarily follow in order from left to right.\n\nNo point of the coordinate line contains more than one gas station. It is possible that some of points fi or point e coincide with a gas station.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1328_E. Tree Queries", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices in the tree and the number of queries.\n\nEach of the next n-1 lines describes an edge of the tree. Edge i is denoted by two integers u_i and v_i, the labels of vertices it connects (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i).\n\nIt is guaranteed that the given edges form a tree.\n\nThe next m lines describe queries. The i-th line describes the i-th query and starts with the integer k_i (1 ≤ k_i ≤ n) — the number of vertices in the current query. Then k_i integers follow: v_i[1], v_i[2], ..., v_i[k_i] (1 ≤ v_i[j] ≤ n), where v_i[j] is the j-th vertex of the i-th query.\n\nIt is guaranteed that all vertices in a single query are distinct.\n\nIt is guaranteed that the sum of k_i does not exceed 2 ⋅ 10^5 (∑_{i=1}^{m} k_i ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "690_B2. Recover Polygon (medium)", "description": "Input\n\nThe input contains multiple test cases.\n\nThe first line of each test case contains one integer N, the size of the lattice grid (5 ≤ N ≤ 500). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4. \n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N), ..., (N, N) and the last row corresponds to cells with coordinates (1, 1), ..., (N, 1).\n\nThe last line of the file contains a zero. This line should not be treated as a test case. The sum of the N values for all tests in one file will not exceed 5000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01142 Karakuri Doll", "description": "Input\n\nThe input consists of multiple datasets, with the last line written 0 0 indicating the end of the input. The number of data sets is 128 or less.\n\nThe first line of each dataset contains two space-separated integers W and H that represent the size of the house. These integers satisfy 3 ≤ W ≤ 64, 3 ≤ H ≤ 16. The following H line means the structure of the room. Each line consists of a W character, where \"#` \"indicates the wall,\" `.`\" (Period) indicates the floor, \"` K` \"indicates the kitchen, and\" `M`\" indicates the location of the master. .. Characters other than these are not included.\n\nThe outermost part of this house is always guaranteed to be a wall (\"` # `\"). Also, there is always one \"` K` \"and\" `M`\" for each dataset, with three directions being walls (\"` # `\") and the remaining one direction being floors (\"`. `\"). ).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00893 Matrix Calculator", "description": "Input\n\nThe input consists of multiple datasets, followed by a line containing a zero. Each dataset has the following format.\n\nn\nprogram\n\n\nn is a positive integer, which is followed by a program that is a sequence of single or multiple lines each of which is an assignment statement whose syntax is defined in Table J.1. n indicates the number of the assignment statements in the program. All the values of vars are undefined at the beginning of a program.\n\nYou can assume the following:\n\n* 1 ≤ n ≤ 10,\n* the number of characters in a line does not exceed 80 (excluding a newline),\n* there are no syntax errors and semantic errors (e.g., reference of undefined var),\n* the number of rows of matrices appearing in the computations does not exceed 100, and\n* the number of columns of matrices appearing in the computations does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00777 Bridge Removal", "description": "Input\n\nThe input consists of at most 100 datasets. Each dataset is formatted as follows.\n\n> n\n>  p2 p3 ... pn\n>  d2 d3 ... dn\n\nThe first integer n (3 ≤ n ≤ 800) is the number of the islands. The islands are numbered from 1 to n. The second line contains n-1 island numbers pi (1 ≤ pi < i), and tells that for each i from 2 to n the island i and the island pi are connected by a bridge. The third line contains n-1 integers di (1 ≤ di ≤ 100,000) each denoting the length of the corresponding bridge. That is, the length of the bridge connecting the island i and pi is di. It takes di units of time to cross the bridge, and also the same units of time to remove it. Note that, with this input format, it is assured that all the islands are reachable each other by crossing one or more bridges.\n\nThe input ends with a line with a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00677 Make KND So Fat", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* All inputs are integers.\n* 1 ≤ s ≤ d ≤ 100\n* 1 ≤ m ≤ 300\n* 1 ≤ ki ≤ 50\n* 0 ≤ wi, j ≤ 50\n* 0 ≤ pi, j ≤ 300\n* 0 ≤ fi <s\n\nInput\n\nThe input consists of multiple test cases. Given on a blank line delimiter. One test case is given in the following format. The end of input is indicated by EOF.\n\n\ns d m\nk1\nw1,1 p1,1 w1,2 p1,2 ... w1,k p1, k\nk2\nw2,1 p2,1 w2,2 p2,2 ... w2,k p2, k\n...\nks\nws, 1 ps, 1 ws, 2 ps, 2 ... ws, k ps, k\nf1 f2 ... fd\n\n\nhere,\n\n* s: Sweetness set type\n* d: Target period\n* m: Budget\n* ki: Number of types of sweets included in the i-th sweetness set\n* Wi, j: Effect of jth sweetness in ith sweetness set on body weight\n* pi, j: The price of the j-th sweetness included in the i-th sweetness set\n* fi: Number of sweetness set sold on day i (starting from 0)\n\n\n\nIs.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1416_D. Graph and Queries", "description": "Input\n\nThe first line contains three integers n, m and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ m ≤ 3 ⋅ 10^5; 1 ≤ q ≤ 5 ⋅ 10^5).\n\nThe second line contains n distinct integers p_1, p_2, ..., p_n, where p_i is the number initially written on vertex i (1 ≤ p_i ≤ n).\n\nThen m lines follow, the i-th of them contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) and means that the i-th edge connects vertices a_i and b_i. It is guaranteed that the graph does not contain multi-edges.\n\nThen q lines follow, which describe the queries. Each line is given by one of the following formats:\n\n  * 1 v — denotes a query of the first type with a vertex v (1 ≤ v ≤ n). \n  * 2 i — denotes a query of the second type with an edge i (1 ≤ i ≤ m). For each query of the second type, it is guaranteed that the corresponding edge is not deleted from the graph yet.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00350 String Game", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nU\nQ\nquery1\nquery2\n::\nqueryQ\n\n\nThe string length N (1 ≤ N ≤ 200000) is given on the first line, and the string U (string containing only lowercase letters) is given on the second line. The number of instructions Q (1 ≤ Q ≤ 100000) is given on the third line. The following Q line is given the i-th instruction queryi. Each queryi is given in one of the following formats:\n\n\nset x y z\n\n\nOr\n\n\ncomp a b c d\n\n\nset x y z means to replace the xth to yth characters of the string U with the specified character z. Where 1 ≤ x ≤ y ≤ N and z is lowercase.\n\ncomp abcd is a string S and a string, where S is the substring from the a to b of the string U and T is the substring of the string U from the c to the d. Represents comparing T in lexical order. Where 1 ≤ a ≤ b ≤ N and 1 ≤ c ≤ d ≤ N.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "643_D. Bearish Fanpages", "description": "Input\n\nThe first line of the input contains two integers n and q (3 ≤ n ≤ 100 000, 1 ≤ q ≤ 100 000) — the number of fanpages and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1012) where ti denotes the number of people subscribing the i-th fanpage.\n\nThe third line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ n). Initially, fanpage i follows fanpage fi.\n\nThen, q lines follow. The i-th of them describes the i-th query. The first number in the line is an integer typei (1 ≤ typei ≤ 3) — the type of the query.\n\nThere will be at most 50 000 queries of the first type. There will be at least one query of the second or the third type (so, the output won't be empty).\n\nIt's guaranteed that at each moment a fanpage doesn't follow itself, and that no two fanpages follow each other.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1271_D. Portals", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 5000, 0 ≤ m ≤ min((n(n - 1))/(2), 3 ⋅ 10^5), 0 ≤ k ≤ 5000) — the number of castles, the number of portals and initial size of your army, respectively.\n\nThen n lines follow. The i-th line describes the i-th castle with three integers a_i, b_i and c_i (0 ≤ a_i, b_i, c_i ≤ 5000) — the number of warriors required to capture the i-th castle, the number of warriors available for hire in this castle and its importance value.\n\nThen m lines follow. The i-th line describes the i-th portal with two integers u_i and v_i (1 ≤ v_i < u_i ≤ n), meaning that the portal leads from the castle u_i to the castle v_i. There are no two same portals listed.\n\nIt is guaranteed that the size of your army won't exceed 5000 under any circumstances (i. e. k + ∑_{i = 1}^{n} b_i ≤ 5000).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00874 Cubist Artwork", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\nw d\nh1 h2 ... hw\nh'1 h'2 ... h'd\n\n\nThe integers w and d separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 ≤ w ≤ 10 and 1 ≤ d ≤ 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers hi (1 ≤ hi ≤ 20, 1 ≤ i ≤ w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front). The integers hi (1 ≤ hi ≤ 20, 1 ≤ i ≤ d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "847_A. Union of Doubly Linked Lists", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of memory cells where the doubly linked lists are located.\n\nEach of the following n lines contains two integers li, ri (0 ≤ li, ri ≤ n) — the cells of the previous and the next element of list for cell i. Value li = 0 if element in cell i has no previous element in its list. Value ri = 0 if element in cell i has no next element in its list.\n\nIt is guaranteed that the input contains the correct description of a single or more doubly linked lists. All lists have linear structure: each element of list except the first has exactly one previous element; each element of list except the last has exactly one next element. Each memory cell contains information about one element from some list, each element of each list written in one of n given cells.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1239_D. Catowice City", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 100 000), the number of test cases. Then description of t test cases follow, where each description is as follows:\n\nThe first line contains integers n and m (1 ≤ n ≤ m ≤ 10^6), the number of Catowice residents and the number of friendship pairs between residents and cats.\n\nEach of the next m lines contains integers a_i and b_i (1 ≤ a_i, b_i ≤ n), denoting that a_i-th resident is acquaintances with b_i-th cat. It's guaranteed that each pair of some resident and some cat is listed at most once.\n\nIt's guaranteed, that for every i there exists a pair between i-th resident and i-th cat.\n\nDifferent test cases are separated with an empty line.\n\nIt's guaranteed, that the sum of n over all test cases is at most 10^6 and that the sum of m over all test cases is at most 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00896 Weaker than Planned", "description": "Input\n\nThe input consists of multiple datasets, each of which contains a ciphertext message and a list of candidate words in the following format.\n\nn\nword1\n.\n.\n.\nwordn\nsequence\n\nn in the first line is a positive integer, representing the number of candidate words. Each of the next n lines represents one of the candidate words. The last line, sequence, is a sequence of one or more ciphertext words separated by a single space and terminated with a period.\n\nYou may assume the number of characters in each sequence is more than 1 and less than or equal to 80 including spaces and the period. The number of candidate words in the list, n, does not exceed 20. Only 26 uppercase letters, A to Z, are used in the words and the length of each word is from 1 to 20, inclusive.\n\nA line of a single zero indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "371_C. Hamburgers", "description": "Input\n\nThe first line of the input contains a non-empty string that describes the recipe of \"Le Hamburger de Polycarpus\". The length of the string doesn't exceed 100, the string contains only letters 'B' (uppercase English B), 'S' (uppercase English S) and 'C' (uppercase English C).\n\nThe second line contains three integers nb, ns, nc (1 ≤ nb, ns, nc ≤ 100) — the number of the pieces of bread, sausage and cheese on Polycarpus' kitchen. The third line contains three integers pb, ps, pc (1 ≤ pb, ps, pc ≤ 100) — the price of one piece of bread, sausage and cheese in the shop. Finally, the fourth line contains integer r (1 ≤ r ≤ 1012) — the number of rubles Polycarpus has.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "852_I. Dating", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 105), the number of houses in the town.\n\nThe second line contains n integers, where the i-th number is 1 if a boy lives in the i-th house or 0 if a girl lives in i-th house.\n\nThe third line contains n integers, where the i-th number represents the favorite number fi (1 ≤ fi ≤ 109) of the girl or boy that lives in the i-th house.\n\nThe next n - 1 lines contain information about the roads and the i-th line contains two integers ai and bi (1 ≤ ai, bi ≤ n) which means that there exists road between those two houses. It is guaranteed that it's possible to reach any house from any other.\n\nThe following line contains an integer q (1 ≤ q ≤ 105), the number of queries.\n\nEach of the following q lines represents a question and consists of two integers a and b (1 ≤ a, b ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1453_A. Cancel the Trains", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nEach test case contains three lines. The first line of each test case consists of two integers n and m (1 ≤ n, m ≤ 100) — the number of trains scheduled to depart from the bottom end, and the number of trains scheduled to depart from the left end, respectively.\n\nThe second line of each test case contains n integers. Each integer is a train number that is scheduled to start from the bottom end. The numbers are given in strictly increasing order, and are between 1 and 100, inclusive.\n\nThe third line of each test case contains m integers. Each integer is a train number that is scheduled to start from the left end. The numbers are given in strictly increasing order, and are between 1 and 100, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "168_B. Wizards and Minimal Spell", "description": "Input\n\nThe input contains multiple lines. All characters in the lines have codes from 32 to 127 (inclusive). Please note that the lines may begin with or end with one or more spaces. The size of the input does not exceed 1048576 ( = 220) bytes. Newlines are included in this size.\n\nIn the Windows operating system used on the testing computer, a newline is a sequence of characters with codes #13#10. It is guaranteed that after each line of input there is a newline. In particular, the input ends with a newline. Note that the newline is the end of the line, and not the beginning of the next one.\n\nIt is guaranteed that the input contains at least one character other than a newline.\n\nIt is recommended to organize the input-output line by line, in this case the newlines will be processed correctly by the language means.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01711 Idempotent Filter", "description": "Input\n\nThe input consists of multiple datasets. The number of dataset is less than $100$. Each dataset is a string representing a filter and has the following format (without spaces between digits).\n\n> $c_0c_1\\cdots{}c_{127}$\n\n$c_i$ is either '0' (represents black) or '1' (represents white), which indicates the output of the filter for a pixel when the binary representation of the pixel and its neighboring six pixels is $i$. The mapping from the pixels to the bits is as following:\n\n<image>\n\nand the binary representation $i$ is defined as $i = \\sum_{j=0}^6{\\mathit{bit}_j \\times 2^j}$, where $\\mathit{bit}_j$ is $0$ or $1$ if the corresponding pixel is in black or white, respectively. Note that the filter is applied on the center pixel, denoted as bit 3.\n\nThe input ends with a line that contains only a single \"#\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00885 Balloon Collecting", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nn\np1 t1\n.\n.\n.\npn tn\n\n\nThe first line contains an integer n, which represents the number of balloons (0 < n ≤ 40). Each of the following n lines contains two integers pi and ti (1 ≤ i ≤ n) separated by a space. pi and ti represent the position and the time when the i-th balloon reaches the ground (0 < pi ≤ 100, 0 < ti ≤ 50000). You can assume ti < tj for i < j. The position of the house is 0, and the game starts from the time 0.\n\nThe sizes of the vehicle, the house, and the balloons are small enough, and should be ignored. The vehicle needs 0 time for catching the balloons or storing them into the house. The vehicle can start moving immediately after these operations.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02426 Bit Mask", "description": "Constraints\n\n* $1 \\leq n \\leq 10$\n* $1 \\leq k \\leq 64$\n* $1 \\leq q \\leq 200,000$\n* $0 \\leq i < 64$\n* $0 \\leq m < n$\n\nInput\n\nThe input is given in the following format.\n\n\n$n$\n$mask_0$\n$mask_1$\n:\n$mask_{n-1}$\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n\n\n$n$ represents the number of masks. $mask_i$ represents state of $i$-th mask and is given in the following format:\n\n\n$k$ $b_0$ $b_1$ ... $b_k$\n\n\n$k$ is the number of ON in the bits. The following $k$ integers $b_j$ show that $b_j$-th bit is ON.\n\n$query_i$ represents $i$-th query and is given in the following format:\n\n\n0 $i$\n\n\nor\n\n\n1 $m$\n\n\nor\n\n\n2 $m$\n\n\nor\n\n\n3 $m$\n\n\nor\n\n\n4 $m$\n\n\nor\n\n\n5 $m$\n\n\nor\n\n\n6 $m$\n\n\nor\n\n\n7 $m$\n\n\nor\n\n\n8 $m$\n\n\nThe first digit 0, 1,...,8 represents the operation test(i), set(m), clear(m), flip(m), all(m), any(m), none(m), count(m) or val(m) respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "658_B. Bear and Displayed Friends", "description": "Input\n\nThe first line contains three integers n, k and q (1 ≤ n, q ≤ 150 000, 1 ≤ k ≤ min(6, n)) — the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 ≤ typei ≤ 2, 1 ≤ idi ≤ n) — the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "639_A. Bear and Displayed Friends", "description": "Input\n\nThe first line contains three integers n, k and q (1 ≤ n, q ≤ 150 000, 1 ≤ k ≤ min(6, n)) — the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 ≤ typei ≤ 2, 1 ≤ idi ≤ n) — the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01842 Invisible", "description": "Input\n\nThe input consists of a single test case of the form:\n\n$ n $ $ m $\n$ a_1 $ $ a_2 $ $ \\ dots $ $ a_n $\n$ b_1 $ $ b_2 $ $ \\ dots $ $ b_m $\n\nThe first line consists of positive integers $ n $, $ m $ ($ 1 \\ le n, m \\ le 50 $) representing the number of decks. The second line consists of $ n $ integers, where $ a_i $ represents the $ i $ th card from the top of player 1's deck ($ 1 \\ le i \\ le n $). $ a_i $ is more than $ 1 $, less than $ 1 {,} 000 {,} 000 $, or $ -1 $. The third line consists of $ m $ integers, where $ b_j $ represents the $ j $ th card from the top of player 2's deck ($ 1 \\ le j \\ le m $). $ b_j $ is more than $ 1 $, less than $ 1 {,} 000 {,} 000 $, or $ -1 $. When $ a_i $ and $ b_j $ are positive integers, it represents a scoring card, and when it is $ -1 $, it represents a jamming card.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "129_C. Statues", "description": "Input\n\nYou are given the 8 strings whose length equals 8, describing the initial position on the board. The first line represents the top row of the board, the next one — for the second from the top, and so on, the last line represents the bottom row. Each character string matches a single cell board in the appropriate row, and the characters are in the same manner as that of the corresponding cell. If the cell is empty, the corresponding character is \".\". If a cell has Maria, then it is represented by character \"M\". If a cell has Anna, it is represented by the character \"A\". If a cell has a statue, then the cell is represented by character \"S\".\n\nIt is guaranteed that the last character of the first row is always \"A\", the first character of the last line is always \"M\". The remaining characters are \".\" or \"S\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "316_G1. Good Substrings", "description": "Input\n\nThe first line contains string s. The second line contains integer n. Next n lines contain the rules, one per line. Each of these lines contains a string and two integers pi, li, ri, separated by single spaces (0 ≤ li ≤ ri ≤ |pi|). It is guaranteed that all the given strings are non-empty and only contain lowercase English letters.\n\nThe input limits for scoring 30 points are (subproblem G1): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 200. \n\n\n\nThe input limits for scoring 70 points are (subproblems G1+G2): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 2000. \n\n\n\nThe input limits for scoring 100 points are (subproblems G1+G2+G3): \n\n  * 0 ≤ n ≤ 10. \n  * The length of string s and the maximum length of string p is  ≤ 50000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "128_A. Statues", "description": "Input\n\nYou are given the 8 strings whose length equals 8, describing the initial position on the board. The first line represents the top row of the board, the next one — for the second from the top, and so on, the last line represents the bottom row. Each character string matches a single cell board in the appropriate row, and the characters are in the same manner as that of the corresponding cell. If the cell is empty, the corresponding character is \".\". If a cell has Maria, then it is represented by character \"M\". If a cell has Anna, it is represented by the character \"A\". If a cell has a statue, then the cell is represented by character \"S\".\n\nIt is guaranteed that the last character of the first row is always \"A\", the first character of the last line is always \"M\". The remaining characters are \".\" or \"S\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1176_E. Cover it!", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of queries.\n\nThen t queries follow.\n\nThe first line of each query contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, n - 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2))) — the number of vertices and the number of edges, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge.\n\nThere are no self-loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied. It is guaranteed that the given graph is connected.\n\nIt is guaranteed that ∑ m ≤ 2 ⋅ 10^5 over all queries.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01677 Broken Audio Signal", "description": "Input\n\nThe input consists of multiple datasets. The form of each dataset is described below.\n\n> $N$\n> $a_{1}$ $a_{2}$ ... $a_{N}$\n\nThe first line of each dataset consists of an integer, $N (2 \\le N \\le 1{,}000)$. $N$ denotes the number of samples in the given audio signal. The second line of each dataset consists of $N$ values separated by spaces. The $i$-th value, $a_{i}$, is either a character `x` or an integer between $-10^9$ and $10^9$, inclusive. It represents the $i$-th sample of the broken audio signal. If $a_{i}$ is a character `x` , it denotes that $i$-th sample in the audio signal is broken. Otherwise it denotes the value of the $i$-th sample.\n\nThe end of input is indicated by a single $0$. This is not included in the datasets.\n\nYou may assume that the number of the datasets does not exceed $100$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1086_C. Vasya and Templates", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^6) — the number of testcases.\n\nIn hacks you can only use t = 1.\n\nEach of the next t lines contains the description of the testcase in the following form:\n\nThe first line of the testcase contains a single integer k (1 ≤ k ≤ 26) — the length of the template.\n\nThe second line of the testcase contains the string s (1 ≤ |s| ≤ 10^6).\n\nThe third line of the testcase contains the string a.\n\nThe fourth line of the testcase contains the string b.\n\nStrings s, a and b have the same length (|s| = |a| = |b|) and consist only of the first k Latin letters, all letters are lowercase.\n\nIt is guaranteed that string a is lexicographically less than or equal to string b.\n\nIt is also guaranteed that the total length of strings over all testcase won't exceed 3 ⋅ 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00970 Emergency Evacuation", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$r$ $s$ $p$\n$i_1$ $j_1$\n...\n$i_p$ $j_p$\n\n\nHere, $r$ is the number of passenger seat rows, $s$ is the number of seats on each side of the aisle, and $p$ is the number of passengers. They are integers satisfying $1 \\leq r \\leq 500$, $1 \\leq s \\leq 500$, and $1 \\leq p \\leq 2rs$.\n\nThe following $p$ lines give initial seat positions of the passengers. The $k$-th line with $i_k$ and $j_k$ means that the $k$-th passenger's seat is in the $i_k$-th seat row and it is the $j_k$-th seat on that row. Here, rows and seats are counted from front to rear and left to right, both starting from one. They satisfy $1 \\leq i_k \\leq r$ and $1 \\leq j_k \\leq 2s$. Passengers are on distinct seats, that is, $i_k \\ne= i_l$ or $j_k \\ne j_l$ holds if $k \\ne l$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01060 Product Sale Lines", "description": "Constraints\n\n* 4 ≤ W ≤ 100\n* 4 ≤ H ≤ 100\n* 0 ≤ N ≤ 100\n\nInput\n\nThe input is given in the following format.\n\n\nW H\nN\np1 p2 ... pN\n\n\nThe integers W and H that represent the size of the column are given in the first row, separated by blanks. W represents the number of people on the outside arranged horizontally in a U-shape, and H represents the number of people on the outside arranged vertically. The second row is given the number of times N a person can pull out of either column. In the third row, information about how to remove columns p1 ... pN is given separated by blanks. pi is '0' or '1', and when it is '0', it means that one person on the outside can get rid of it, and when it is '1', it means that one person on the inside can get rid of it. However, Uniqlo Uzuki or Rin Meguro will not leave the line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00061 Rank Checker", "description": "Input\n\nThe input data consists of two parts. The first half is the qualifying result data, and the second half is the inquiry of the team number for which you want to know the ranking. The format of the qualifying result data is as follows.\n\n\np1, s1\np2, s2\n...\n...\n0,0\n\n\npi (1 ≤ pi ≤ 100) and si (0 ≤ si ≤ 30) are integers representing the reference number and the number of correct answers for the i-th team, respectively. It is assumed that the input of this data is completed when both the reference number and the number of correct answers are 0.\n\nThen multiple inquiries in the second half are given. The inquiry format is as follows.\n\n\nq1\nq2\n::\n\n\nEach query is given the reference number qi (1 ≤ qi ≤ 30) on one line. Please process this until the end of the input. The number of inquiries does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1388_C. Uncle Bogdan and Country Happiness", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10000) — the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^5; 0 ≤ m ≤ 10^9) — the number of cities and citizens.\n\nThe second line of each test case contains n integers p_1, p_2, …, p_{n} (0 ≤ p_i ≤ m; p_1 + p_2 + … + p_{n} = m), where p_i is the number of people living in the i-th city.\n\nThe third line contains n integers h_1, h_2, …, h_{n} (-10^9 ≤ h_i ≤ 10^9), where h_i is the calculated happiness index of the i-th city.\n\nNext n − 1 lines contain description of the roads, one per line. Each line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i), where x_i and y_i are cities connected by the i-th road.\n\nIt's guaranteed that the sum of n from all test cases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1195_F. Geometers Anonymous Club", "description": "Input\n\nThe first line of the input contains one integer n — the number of convex polygons Denis prepared (1 ≤ n ≤ 100 000).\n\nThen n convex polygons follow. The description of the i-th polygon starts with one integer k_i — the number of vertices in the i-th polygon (3 ≤ k_i). The next k_i lines contain two integers x_{ij}, y_{ij} each — coordinates of vertices of the i-th polygon in counterclockwise order (|x_{ij}|, |y_{ij}| ≤ 10 ^ 9).\n\nIt is guaranteed, that there are no three consecutive vertices lying on the same line. The total number of vertices over all polygons does not exceed 300 000.\n\nThe following line contains one integer q — the number of tasks (1 ≤ q ≤ 100 000). The next q lines contain descriptions of tasks. Description of the i-th task contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "456_E. Civilization", "description": "Input\n\nThe first line contains three integers n, m, q (1 ≤ n ≤ 3·105; 0 ≤ m < n; 1 ≤ q ≤ 3·105) — the number of cities, the number of the roads we already have and the number of queries, correspondingly.\n\nEach of the following m lines contains two integers, ai and bi (ai ≠ bi; 1 ≤ ai, bi ≤ n). These numbers represent the road between cities ai and bi. There can be at most one road between two cities.\n\nEach of the following q lines contains one of the two events in the following format:\n\n  * 1 xi. It is the request Andrew gives to Dima to find the length of the maximum path in the region that contains city xi (1 ≤ xi ≤ n). \n  * 2 xi yi. It is the request Andrew gives to Dima to merge the region that contains city xi and the region that contains city yi (1 ≤ xi, yi ≤ n). Note, that xi can be equal to yi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "723_E. One-Way Reform", "description": "Input\n\nThe first line contains a positive integer t (1 ≤ t ≤ 200) — the number of testsets in the input.\n\nEach of the testsets is given in the following way. The first line contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ n·(n - 1) / 2) — the number of cities and the number of roads in Berland. \n\nThe next m lines contain the description of roads in Berland. Each line contains two integers u and v (1 ≤ u, v ≤ n) — the cities the corresponding road connects. It's guaranteed that there are no self-loops and multiple roads. It is possible that there is no way along roads between a pair of cities.\n\nIt is guaranteed that the total number of cities in all testset of input data doesn't exceed 200.\n\nPay attention that for hacks, you can only use tests consisting of one testset, so t should be equal to one.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1547_G. How Many Paths?", "description": "Input\n\nThe first contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow. Before each test case, there is an empty line.\n\nThe first line of the test case contains two integers n and m (1 ≤ n ≤ 4 ⋅ 10^5, 0 ≤ m ≤ 4 ⋅ 10^5) — numbers of vertices and edges in graph respectively. The next m lines contain edges descriptions. Each line contains two integers a_i, b_i (1 ≤ a_i, b_i ≤ n) — the start and the end of the i-th edge. The vertices of the graph are numbered from 1 to n. The given graph can contain loops (it is possible that a_i = b_i), but cannot contain multi-edges (it is not possible that a_i = a_j and b_i = b_j for i ≠ j).\n\nThe sum of n over all test cases does not exceed 4 ⋅ 10^5. Similarly, the sum of m over all test cases does not exceed 4 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01030 Changing Grids", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* 2 ≤ H, W ≤ 20\n* 1 ≤ N ≤ 15\n* 1 ≤ Ti ≤ 200 (T1 <T2 <... <TN)\n* There is only one start position'S'and one goal position'G' in the initial 2D grid.\n\nInput\n\nThe input is given in the following format.\n\n\nH W\nArea0\nN\nT1\nArea1\nT2\nArea2\n..\n..\nTN\nAreaN\n\n\nTwo integers H and W are given on the first line, separated by blanks. This represents the vertical and horizontal dimensions of the two-dimensional grid, respectively. The initial state of the two-dimensional grid is given to each line from the second line to the H + 1 line. The integer N is given on the second line of H +. This represents the number of changes in the 2D grid. The time Ti and the state of switching of N 2D grids are given after the 3rd line of H +. However, Ti is all integers.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01653 Magical Bridges", "description": "Input\n\nThe input consists of several datasets. The end of the input is denoted by five zeros separated by a single-space. Each dataset obeys the following format. Every number in the inputs is integer.\n\n\nN M S_1 S_2 T\na_1 b_1 w_1\na_2 b_2 w_2\n...\na_M b_M w_M\n\n\n(a_i, b_i) indicates the bridge i connects the two islands a_i and b_i.\n\nw_i is either a non-negative integer or a letter `x` (quotes for clarity). If w_i is an integer, it indicates the bridge i is normal and its length is w_i. Otherwise, it indicates the bridge i is magical.\n\nYou can assume the following:\n\n* 1\\leq N \\leq 1,000\n* 1\\leq M \\leq 2,000\n* 1\\leq S_1, S_2, T \\leq N\n* S_1, S_2, T are all different.\n* 1\\leq a_i, b_i \\leq N\n* a_i \\neq b_i\n* For all normal bridge i, 0 \\leq w_i \\leq 1,000,000,000\n* The number of magical bridges \\leq 100", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01273 Infected Computer", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nN M\nt1 s1 d1\nt2 s2 d2\n...\ntM sM dM\n\n\nN is the number of computers; M is the number of data packets; ti (1 ≤ i ≤ M) is the time when the i-th data packet is sent; si and di (1 ≤ i ≤ M) are the source and destination computers of the i-th data packet respectively. The first infected computer is indicated by the number 1; the other computers are indicated by unique numbers between 2 and N.\n\nThe input meets the following constraints: 0 < N ≤ 20000, 0 ≤ M ≤ 20000, and 0 ≤ ti ≤ 109 for 1 ≤ i ≤ N; all ti 's are different; and the source and destination of each packet are always different.\n\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "982_B. Bus of Characters", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of rows in the bus.\n\nThe second line contains the sequence of integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^{9}), where w_i is the width of each of the seats in the i-th row. It is guaranteed that all w_i are distinct.\n\nThe third line contains a string of length 2n, consisting of digits '0' and '1' — the description of the order the passengers enter the bus. If the j-th character is '0', then the passenger that enters the bus on the j-th stop is an introvert. If the j-th character is '1', the the passenger that enters the bus on the j-th stop is an extrovert. It is guaranteed that the number of extroverts equals the number of introverts (i. e. both numbers equal n), and for each extrovert there always is a suitable row.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "177_E1. Space Voyage", "description": "Input\n\nThe first input line contains space-separated integers n and c — the number of planets that the Beaver is going to visit and the number of days he is going to spend traveling, correspondingly.\n\nThe next n lines contain pairs of space-separated integers ai, bi (1 ≤ i ≤ n) — the number of suitcases he can bring to the i-th planet and the number of citizens of the i-th planet, correspondingly.\n\nThe input limitations for getting 30 points are: \n\n  * 1 ≤ n ≤ 100\n  * 1 ≤ ai ≤ 100\n  * 1 ≤ bi ≤ 100\n  * 1 ≤ c ≤ 100\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 ≤ n ≤ 104\n  * 0 ≤ ai ≤ 109\n  * 1 ≤ bi ≤ 109\n  * 1 ≤ c ≤ 109\n\n\n\nDue to possible overflow, it is recommended to use the 64-bit arithmetic. In some solutions even the 64-bit arithmetic can overflow. So be careful in calculations!", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "177_E2. Space Voyage", "description": "Input\n\nThe first input line contains space-separated integers n and c — the number of planets that the Beaver is going to visit and the number of days he is going to spend traveling, correspondingly.\n\nThe next n lines contain pairs of space-separated integers ai, bi (1 ≤ i ≤ n) — the number of suitcases he can bring to the i-th planet and the number of citizens of the i-th planet, correspondingly.\n\nThe input limitations for getting 30 points are: \n\n  * 1 ≤ n ≤ 100\n  * 1 ≤ ai ≤ 100\n  * 1 ≤ bi ≤ 100\n  * 1 ≤ c ≤ 100\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 ≤ n ≤ 104\n  * 0 ≤ ai ≤ 109\n  * 1 ≤ bi ≤ 109\n  * 1 ≤ c ≤ 109\n\n\n\nDue to possible overflow, it is recommended to use the 64-bit arithmetic. In some solutions even the 64-bit arithmetic can overflow. So be careful in calculations!", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00437 Quality Checking", "description": "input\n\nThe input consists of multiple datasets. The format of each data set is as follows. The input ends on a line containing three zeros.\n\nThree integers are written on the first line, separated by blanks, and represent the number of power supplies a, the number of motors b, and the number of cables c in order.\n\nOne integer is written on the second line, and the number of tests N included in the list of test results is written.\n\nThe next N lines represent a list of test results. On each line, four integers i, j, k, r are written with one blank as a delimiter, and the result of inspection by connecting the power supply i, the motor j, and the cable k is \"pass\" (r = 1). (When) or \"Fail\" (when r = 0).\n\na, b, c, N satisfy 1 ≤ a, b, c ≤ 100, 1 ≤ N ≤ 1000.\n\nThe number of datasets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1472_G. Moving to the Capital", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case is preceded by an empty line.\n\nThe first line of each test case contains two integers n (2 ≤ n ≤ 2 ⋅ 10^5) and m (1 ≤ m ≤ 2 ⋅ 10^5) — number of cities and roads, respectively.\n\nThis is followed by m lines describing the roads. Each road is characterized by two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the numbers of cities connected by a one-way road.\n\nIt is guaranteed that the sums of n and m over all test cases do not exceed 2 ⋅ 10^5.\n\nIt is guaranteed that for each pair of different cities (u, v) there is at most one road from u to v (but a pair of roads from u to v and from v to u — is valid).\n\nIt is guaranteed that there is a path from the capital to all cities.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1304_C. Air Conditioner", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases q (1 ≤ q ≤ 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 100, -10^9 ≤ m ≤ 10^9), where n is the number of reserved customers and m is the initial temperature of the restaurant.\n\nNext, n lines follow. The i-th line of them contains three integers t_i, l_i, and h_i (1 ≤ t_i ≤ 10^9, -10^9 ≤ l_i ≤ h_i ≤ 10^9), where t_i is the time when the i-th customer visits, l_i is the lower bound of their preferred temperature range, and h_i is the upper bound of their preferred temperature range. The preferred temperature ranges are inclusive.\n\nThe customers are given in non-decreasing order of their visit time, and the current time is 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00313 Secret Investigation", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nX a1 a2 ... aX\nY b1 b2 ... bY\nZ c1 c2 ... cZ\n\n\nThe input is 4 lines, and the number of people to be surveyed N (1 ≤ N ≤ 100) is given in the first line. On the second line, the number X (0 ≤ X ≤ N) of those who belong to the organization $ A $, followed by the identification number ai (1 ≤ ai ≤ N) of those who belong to the organization $ A $. Given. On the third line, the number Y (0 ≤ Y ≤ N) of those who belong to the organization $ B $, followed by the identification number bi (1 ≤ bi ≤ N) of those who belong to the organization $ B $. Given. On the fourth line, the number Z (0 ≤ Z ≤ N) of the person who owns the product $ C $, followed by the identification number ci (1 ≤ ci ≤ N) of the person who owns the product $ C $. ) Is given.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00652 Cutting a Chocolate", "description": "Input\n\nInput consists of multiple test cases.\nEach dataset is given in the following format.\n\n\nn m w h S\nl0 r0\n...\nlm-1 rm-1\nx0 y0\n...\nxn-1 yn-1\n\n\nThe last line contains five 0s. n is the number of almonds. m is the number of lines. w is the width of the chocolate. h is the height of the chocolate. S is the area that Be-ko wants to eat. Input is integer except xi yi.\n\nInput satisfies following constraints.\n1 ≤ n ≤ 30000\n1 ≤ m ≤ 30000\n1 ≤ w ≤ 200\n1 ≤ h ≤ 1000000\n0 ≤ S ≤ w*h\n\n\nIf i < j  then  li ≤ lj and  ri ≤ rj and then  i -th lines and  j -th lines share at most 1 point. It is assured that lm-1 and rm-1 are h. xi yi is floating point number with ten digits. It is assured that they are inside of the chocolate. It is assured that the distance between points and any lines is at least 0.00001.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01630 B2D", "description": "Constraints\n\n* 1 <= N <= 10\n\nInput\n\nEach data set is input in the following format.\n\n\nN\nbit_line\n\n\nN represents the number of variables in the logical function. bit_line is a 2 ^ N length string consisting of '1' and '0' representing a truth table. Each character is\n\n* 1st character bit: Result when variable 1 = 0, variable 2 = 0, ..., variable N-1 = 0, variable N = 0\n* Second character bit: Result when variable 1 = 0, variable 2 = 0, ..., variable N-1 = 0, variable N = 1\n* Third character bit: Result when variable 1 = 0, variable 2 = 0, ..., variable N-1 = 1, variable N = 0\n* 4th character bit: Result when variable 1 = 0, variable 2 = 0, ..., variable N-1 = 1, variable N = 1\n* ...\n* 2 ^ Nth bit: Result when variable 1 = 1, variable 2 = 1, ..., variable N-1 = 1, variable N = 1\n\nRepresents.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1033_A. King Escape", "description": "Input\n\nThe first line contains a single integer n (3 ≤ n ≤ 1000) — the dimensions of the chessboard.\n\nThe second line contains two integers a_x and a_y (1 ≤ a_x, a_y ≤ n) — the coordinates of Alice's queen.\n\nThe third line contains two integers b_x and b_y (1 ≤ b_x, b_y ≤ n) — the coordinates of Bob's king.\n\nThe fourth line contains two integers c_x and c_y (1 ≤ c_x, c_y ≤ n) — the coordinates of the location that Bob wants to get to.\n\nIt is guaranteed that Bob's king is currently not in check and the target location is not in check either.\n\nFurthermore, the king is not located on the same square as the queen (i.e. a_x ≠ b_x or a_y ≠ b_y), and the target does coincide neither with the queen's position (i.e. c_x ≠ a_x or c_y ≠ a_y) nor with the king's position (i.e. c_x ≠ b_x or c_y ≠ b_y).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01112 Playoff by all the teams", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n\n>  m\n>  x1 y1\n>  ...\n>  xm ym\n>\n\nn is an odd integer, 3, 5, 7, or 9, indicating the number of teams participating in the tournament. m is a positive integer less than n(n−1)/2, which is the number of matches already finished. xi and yi give the result of the i-th match that has already taken place, indicating that team xi defeated team yi. Each of xi and yi is an integer 1 through n which indicates the team number. No team plays against itself, that is, for any i, xi ≠ yi. The match result of the same team pair appears at most once. That is, if i ≠ j, then (xi,yi) ≠ (xj,yj) and (xi,yi) ≠ (yj,xj) hold.\n\nThe end of the input is indicated by a line containing a zero. The number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00325 Halting Problem", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nstmt1\nstmt2\n::\nstmtN\n\n\nThe number of lines N (1 ≤ N ≤ 50) of the program is given on the first line. The following N lines are given the statement stmti of the TinyPower program. stmti is given in one of the following formats:\n\n\nline ADD var1 var2 var3\n\n\nOr\n\n\nline ADD var1 var2 con\n\n\nOr\n\n\nline SUB var1 var2 var3\n\n\nOr\n\n\nline SUB var1 var2 con\n\n\nOr\n\n\nline SET var1 var2\n\n\nOr\n\n\nline SET var1 con\n\n\nOr\n\n\nline IF var1 dest\n\n\nOr\n\n\nline HALT\n\n\nline, dest (1 ≤ line, dest ≤ 1000) is the line number, varj (one lowercase letter) is the variable, and con (0 ≤ con ≤ 15) is the constant. The delimiter in stmti is one blank character. It is assumed that one or more variables always appear in the program, and only five different variable names appear.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01267 Luck Manipulator", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n> N A B C X\n> Y1 Y2 ... YN\n\nThe first row contains five integers N (1 ≤ N ≤ 100), A, B (0 ≤ A, B ≤ 10,000), C (1 ≤ C ≤ 10,000), and X (0 ≤ X <C), respectively. It is given separated by two whitespace characters. Here, X represents the value of the first random number. On the following line, N integers Y1, Y2, ..., YN (0 ≤ Yi ≤ 10,000) are given, separated by a single space character. These represent the conditions for stopping the reel with a specific pattern, and the i-th number Yi is the random number value Yi to stop the i-th reel from the left with a special pattern. It means that there must be.\n\nThe end of the input is indicated by a single line containing five zeros separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1257_E. The Contest", "description": "Input\n\nThe first line contains three integers k_1, k_2 and k_3 (1 ≤ k_1, k_2, k_3 ≤ 2 ⋅ 10^5, k_1 + k_2 + k_3 ≤ 2 ⋅ 10^5) — the number of problems initially taken by the first, the second and the third participant, respectively.\n\nThe second line contains k_1 integers a_{1, 1}, a_{1, 2}, ..., a_{1, k_1} — the problems initially taken by the first participant.\n\nThe third line contains k_2 integers a_{2, 1}, a_{2, 2}, ..., a_{2, k_2} — the problems initially taken by the second participant.\n\nThe fourth line contains k_3 integers a_{3, 1}, a_{3, 2}, ..., a_{3, k_3} — the problems initially taken by the third participant.\n\nIt is guaranteed that no problem has been taken by two (or three) participants, and each integer a_{i, j} meets the condition 1 ≤ a_{i, j} ≤ n, where n = k_1 + k_2 + k_3.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "525_A. Vitaliy and Pie", "description": "Input\n\nThe first line of the input contains a positive integer n (2 ≤ n ≤ 105) — the number of rooms in the house.\n\nThe second line of the input contains string s of length 2·n - 2. Let's number the elements of the string from left to right, starting from one. \n\nThe odd positions in the given string s contain lowercase Latin letters — the types of the keys that lie in the corresponding rooms. Thus, each odd position i of the given string s contains a lowercase Latin letter — the type of the key that lies in room number (i + 1) / 2.\n\nThe even positions in the given string contain uppercase Latin letters — the types of doors between the rooms. Thus, each even position i of the given string s contains an uppercase letter — the type of the door that leads from room i / 2 to room i / 2 + 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01398 Swap Cipher", "description": "Input\n\nThe input consists of multiple datasets. The total number of datasets is 20 or less. Each dataset has the following format:\n\n\nN\nmessage\na1 b1\n...\nai bi\n...\naN bN\n\n\nN (0 <N ≤ 100) is an integer that indicates the number of swap operations when encrypting. message indicates encrypted data. Cryptographic data is a character string consisting of only lowercase letters of the alphabet. If the length of the message is len, we can assume that 2 ≤ len ≤ 100.\n\nai and bi represent two indexes that have been swapped in encryption. You can assume that 1 ≤ ai <bi ≤ len. For encryption, it is assumed that the swap operations are performed in the order in which they are entered.\n\nThe end of the input is indicated by a single line consisting of only 0s. This data does not need to be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1075_C. The Tower is Going Home", "description": "Input\n\nThe first line contains two integers n and m (0 ≤ n,m ≤ 10^5) — the number of vertical and horizontal spells.\n\nEach of the following n lines contains one integer x (1 ≤ x < 10^9) — the description of the vertical spell. It will create a blocking line between the columns of x and x+1.\n\nEach of the following m lines contains three integers x_1, x_2 and y (1 ≤ x_{1} ≤ x_{2} ≤ 10^9, 1 ≤ y < 10^9) — the numbers that describe the horizontal spell. It will create a blocking segment that passes through the top sides of the cells that are in the row with the number y, in columns from x_1 to x_2 inclusive.\n\nIt is guaranteed that all spells are different, as well as the fact that for each pair of horizontal spells it is true that the segments that describe them do not have common points.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1044_A. The Tower is Going Home", "description": "Input\n\nThe first line contains two integers n and m (0 ≤ n,m ≤ 10^5) — the number of vertical and horizontal spells.\n\nEach of the following n lines contains one integer x (1 ≤ x < 10^9) — the description of the vertical spell. It will create a blocking line between the columns of x and x+1.\n\nEach of the following m lines contains three integers x_1, x_2 and y (1 ≤ x_{1} ≤ x_{2} ≤ 10^9, 1 ≤ y < 10^9) — the numbers that describe the horizontal spell. It will create a blocking segment that passes through the top sides of the cells that are in the row with the number y, in columns from x_1 to x_2 inclusive.\n\nIt is guaranteed that all spells are different, as well as the fact that for each pair of horizontal spells it is true that the segments that describe them do not have common points.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1070_H. BerOS File Suggestion", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 10000) — the total number of files.\n\nThe following n lines contain file names, one per line. The i-th line contains f_i — the name of the i-th file. Each file name contains between 1 and 8 characters, inclusive. File names contain only lowercase Latin letters, digits and dot characters ('.'). Any sequence of valid characters can be a file name (for example, in BerOS \".\", \"..\" and \"...\" are valid file names). All file names are unique.\n\nThe following line contains integer q (1 ≤ q ≤ 50000) — the total number of queries.\n\nThe following q lines contain queries s_1, s_2, ..., s_q, one per line. Each s_j has length between 1 and 8 characters, inclusive. It contains only lowercase Latin letters, digits and dot characters ('.').", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "993_B. Open Communication", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.\n\nThe third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1196_C. Robot Breakout", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries.\n\nThen q queries follow. Each query begins with one line containing one integer n (1 ≤ n ≤ 10^5) — the number of robots in the query. Then n lines follow, the i-th of these lines describes the i-th robot in the current query: it contains six integer numbers x_i, y_i, f_{i, 1}, f_{i, 2}, f_{i, 3} and f_{i, 4} (-10^5 ≤ x_i, y_i ≤ 10^5, 0 ≤ f_{i, j} ≤ 1). The first two numbers describe the initial location of the i-th robot, and the following four numbers describe which actions the i-th robot can use to move (f_{i, j} = 1 if the i-th robot can use the j-th action, and f_{i, j} = 0 if it cannot use the j-th action).\n\nIt is guaranteed that the total number of robots over all queries does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1223_C. Save the Nature", "description": "Input\n\nThe first line contains a single integer q (1 ≤ q ≤ 100) — the number of independent queries. Each query consists of 5 lines.\n\nThe first line of each query contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tickets.\n\nThe second line contains n integers p_1, p_2, ..., p_n (100 ≤ p_i ≤ 10^9, p_i mod 100 = 0) — the corresponding prices of tickets.\n\nThe third line contains two integers x and a (1 ≤ x ≤ 100, x + y ≤ 100, 1 ≤ a ≤ n) — the parameters of the first program.\n\nThe fourth line contains two integers y and b (1 ≤ y ≤ 100, x + y ≤ 100, 1 ≤ b ≤ n) — the parameters of the second program.\n\nThe fifth line contains single integer k (1 ≤ k ≤ 10^{14}) — the required total contribution.\n\nIt's guaranteed that the total number of tickets per test doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "994_D. Open Communication", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.\n\nThe third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1240_A. Save the Nature", "description": "Input\n\nThe first line contains a single integer q (1 ≤ q ≤ 100) — the number of independent queries. Each query consists of 5 lines.\n\nThe first line of each query contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tickets.\n\nThe second line contains n integers p_1, p_2, ..., p_n (100 ≤ p_i ≤ 10^9, p_i mod 100 = 0) — the corresponding prices of tickets.\n\nThe third line contains two integers x and a (1 ≤ x ≤ 100, x + y ≤ 100, 1 ≤ a ≤ n) — the parameters of the first program.\n\nThe fourth line contains two integers y and b (1 ≤ y ≤ 100, x + y ≤ 100, 1 ≤ b ≤ n) — the parameters of the second program.\n\nThe fifth line contains single integer k (1 ≤ k ≤ 10^{14}) — the required total contribution.\n\nIt's guaranteed that the total number of tickets per test doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01299 Neko's Treasure", "description": "Input\n\nThe input is a sequence of datasets. Each dataset corresponds to a single situation and has the following format:\n\nn\nxs ys xt yt\nx1 y1 r1\n...\nxn yn rn\n\n\nn is the number of candidate locations where to build walls (1 ≤ n ≤ 1000). (xs, ys ) and (xt , yt ) denote the coordinates of the rat's lair and Maki's bed, respectively. The i-th candidate location is a circle which has radius ri (1 ≤ ri ≤ 10000) and is centered at (xi, yi) (i = 1, 2, ... , n). All coordinate values are integers between 0 and 10000 (inclusive).\n\nAll candidate locations are distinct and contain neither the rat's lair nor Maki's bed. The positions of the rat's lair and Maki's bed are also distinct.\n\nThe input is terminated by a line with \"0\". This is not part of any dataset and thus should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00742 Verbal Arithmetic", "description": "Input\n\nThe input consists of a number of datasets. The end of the input is indicated by a line containing a zero.\n\nThe number of datasets is no more than 100. Each dataset is formatted as follows.\n\n> N\nSTRING 1\nSTRING 2\n...\nSTRING N\n\n\nThe first line of a dataset contains an integer N  which is the number of integers appearing in the equation. Each of the following N  lines contains a string composed of uppercase alphabetic characters 'A'-'Z' which mean masked digits.\n\nEach dataset expresses the following equation.\n\n> STRING 1 + STRING 2 + ... + STRING N -1 = STRING N\n\nThe integer N  is greater than 2 and less than 13. The length of STRING i is greater than 0 and less than 9. The number of different alphabetic characters appearing in each dataset is greater than 0 and less than 11.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1525_F. Goblins And Gnomes", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 50; 0 ≤ m ≤ (n(n - 1))/(2); 1 ≤ k ≤ n - 1) — the number of halls in the city, the number of tunnels and the number of goblin waves, correspondely.\n\nNext m lines describe tunnels. The i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i). It means that the tunnel goes from hall u_i to hall v_i. The structure of tunnels has the following property: if a goblin leaves any hall, he cannot return to that hall. There is at most one tunnel between each pair of halls.\n\nNext k lines describe the scoring system. The i-th line contains two integers x_i and y_i (1 ≤ x_i ≤ 10^9; 1 ≤ y_i ≤ 10^9). If Monocarp prepares for the i-th wave for t_i minutes, then he gets max(0, x_i - t_i ⋅ y_i) points for passing it.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01515 Equation", "description": "Input\n\nThe input consists of multiple lines, each line being a dataset. The dataset is a string consisting of T, F, a, b, c, d, e, f, g, h, i, j, k, (,), =,-, +, *,> and is blank. Does not include other characters such as. It can be assumed that the number of characters in one line is 1000 characters or less.\n\nOne dataset contains one equation. The grammar of the equation is given by the following BNF. All equations follow this syntax rule.\n\n\n<equation> :: = <formula> \"=\" <formula>\n<formula> :: = \"T\" | \"F\" |\n\"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" |\n\"g\" | \"h\" | \"i\" | \"j\" | \"k\" |\n\"-\" <formula> |\n\"(\" <formula> \"*\" <formula> \")\" |\n\"(\" <formula> \"+\" <formula> \")\" |\n\"(\" <formula> \"->\" <formula> \")\"\n\n\nThe end of the input is indicated by a line consisting only of \"#\", which is not a dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "436_B. Om Nom and Spiders", "description": "Input\n\nThe first line contains three integers n, m, k (2 ≤ n, m ≤ 2000; 0 ≤ k ≤ m(n - 1)). \n\nEach of the next n lines contains m characters — the description of the park. The characters in the i-th line describe the i-th row of the park field. If the character in the line equals \".\", that means that the corresponding cell of the field is empty; otherwise, the character in the line will equal one of the four characters: \"L\" (meaning that this cell has a spider at time 0, moving left), \"R\" (a spider moving right), \"U\" (a spider moving up), \"D\" (a spider moving down). \n\nIt is guaranteed that the first row doesn't contain any spiders. It is guaranteed that the description of the field contains no extra characters. It is guaranteed that at time 0 the field contains exactly k spiders.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01985 Divide and Conquer", "description": "Input\n\nThe input consists of multiple datasets. The maximum number of datasets is 50. Each data set is represented in the following format.\n\n> N M u1 v1 ... uM vM\n\nThe first line consists of two integers N (2 ≤ N ≤ 103) and M (1 ≤ M ≤ 103), which represent the number of cities and the number of roads, respectively. The i-th line of the following M lines consists of two integers ui and vi (1 ≤ ui <vi ≤ N), indicating that the i-th road connects the city ui and the city vi in ​​both directions. Here, it is guaranteed that one city can always reach all other cities via one or more roads. Also, no multiple roads connecting pairs of the same city will be given. That is, (ui, vi) ≠ (uj, vj) is satisfied for all 1 ≤ i <j ≤ M.\n\nThe end of the input is represented by a line of two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1420_C2. Pokémon Army (hard version)", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and q (1 ≤ n ≤ 3 ⋅ 10^5, 0 ≤ q ≤ 3 ⋅ 10^5) denoting the number of pokémon and number of operations respectively.\n\nThe second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) denoting the strengths of the pokémon.\n\ni-th of the last q lines contains two positive integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) denoting the indices of pokémon that were swapped in the i-th operation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5, and the sum of q over all test cases does not exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01364 Two-Wheel Buggy", "description": "Input\n\nThe input consists of several datasets. Each dataset is formatted as follows.\n\nN D\nLspeed1 Rspeed1 time1\n.\n.\n.\nLspeedi Rspeedi timei\n.\n.\n.\nLspeedN RspeedN timeN\n\n\nThe first line of a dataset contains two positive integers, N and D (1 ≤ N ≤ 100, 1 ≤ D ≤ 10). N indicates the number of instructions in the dataset, and D indicates the distance between the center of axle and the wheels. The following N lines describe the instruction sequence. The i-th line contains three integers, Lspeedi, i, and timei (-360 ≤ Lspeedi, Rspeedi ≤ 360, 1 ≤ timei ), describing the i-th instruction to the buggy. You can assume that the sum of timei is at most 500.\n\nThe end of input is indicated by a line containing two zeros. This line is not part of any dataset and hence should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1064_D. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1063_B. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "799_G. Cut the pie", "description": "Input\n\nThe first line contains two integers n and q (3 ≤ n ≤ 104, 1 ≤ q ≤ 105) — the number of vertices in the pie and the number of queries.\n\nn line follow describing the polygon vertices in clockwise order. The i-th of these line contains two integers xi and yi ( - 106 ≤ xi, yi ≤ 106) — the coordinates of the i-th vertex. It is guaranteed that the polygon is strictly convex, in particular, no three vertices line on the same line.\n\nAn empty line follows.\n\nq lines follow describing the query points. The i-th of these lines contain two integers xi and yi ( - 106 ≤ xi, yi ≤ 106) — the coordinates of the point in which Arkady puts the knife in the i-th query. In is guaranteed that in each query the given point is strictly inside the polygon, in particular, is not on its edges.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1391_E. Pairs of Pairs", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains 2 integers n, m (2 ≤ n ≤ 5⋅ 10^5, 1 ≤ m ≤ 10^6), denoting the number of nodes and edges, respectively. \n\nThe next m lines each contain 2 integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting that there is an undirected edge between nodes u and v in the given graph.\n\nIt is guaranteed that the given graph is connected, and simple — it does not contain multiple edges between the same pair of nodes, nor does it have any self-loops. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 5⋅ 10^5.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01085 Entrance Examination", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is formatted as follows.\n\n> m nmin nmax\n>  P1\n>  P2\n>  ...\n>  Pm\n>\n\nThe first line of a dataset contains three integers separated by single spaces. m represents the number of applicants, nmin represents the minimum number of successful applicants, and nmax represents the maximum number of successful applicants. Each of the following m lines contains an integer Pi, which represents the score of each applicant. The scores are listed in descending order. These numbers satisfy 0 < nmin < nmax < m ≤ 200, 0 ≤ Pi ≤ 10000 (1 ≤ i ≤ m) and Pnmin > Pnmax+1. These ensure that there always exists an n satisfying the conditions.\n\nThe end of the input is represented by a line containing three zeros separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00144 Packet Transportation", "description": "Input\n\nThe input is given in the following format:\n\n\nn\nr1 k1 t11 t12 ... t1 k1\nr2 k2 t21 t22 ... t2 k2\n::\nrn kn tn1 tn2 ... tnkn\np\ns1 d1 v1\ns2 d2 v2\n::\nsp dp vp\n\n\nThe first line gives the total number of routers n (n ≤ 100), and the following n lines give the connection information for the i-th router. The connection information is given the i-th router number ri, the number of routers directly connected to the i-th router ki, and the router numbers ti1, ti2, ... tiki that can be sent from the i-th router.\n\nThe following line gives the number of packets p (p ≤ 1000), and the following p line gives the information of the i-th packet. The information in the packet is given the source router number si, the destination router number di, and the TTL value vi (0 ≤ vi ≤ 10000).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1070_E. Getting Deals Done", "description": "Input\n\nThe first line of the input contains single integer c (1 ≤ c ≤ 5 ⋅ 10^4) — number of test cases. Then description of c test cases follows. Solve test cases separately, test cases are completely independent and do not affect each other.\n\nEach test case is described by two lines. The first of these lines contains three space-separated integers n, m and t (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5, 1 ≤ t ≤ 4 ⋅ 10^{10}) — the number of tasks in Polycarp's list, the number of tasks he can do without a break and the total amount of time Polycarp can work on tasks. The second line of the test case contains n space separated integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 2 ⋅ 10^5) — difficulties of the tasks.\n\nThe sum of values n for all test cases in the input does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01291 Wind Passages", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nThe first line of the input contains two integers W and N. W is the width of the corridor, and N is the number of pillars. W and N satisfy the following condition: 1 ≤ W ≤ 104 and 0 ≤ N ≤ 200.\n\nThen, N specifications of each pillar follow. Each specification starts with a line that contains a single integer M, which is the number of the vertices of a polygon (3 ≤ M ≤ 40). The following M lines describe the shape of the polygon. The i-th line (1 ≤ i ≤ M) contains two integers xi and yi that denote the coordinate of the i-th vertex (0 < xi < W, 0 < yi < 104).\n\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01437 Infinity Maze", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nH W L\nc1,1c1,2...c1,W\n.\n.\n.\ncH,1cH,2...cH,W\n\n\nThe first line of a dataset contains three integers H, W and L (1 ≤ H, W ≤ 100, 1 ≤ L ≤ 1018).\n\nEach of the following H lines contains exactly W characters. In the i-th line, the j-th character ci,j represents a cell at (i, j) of the maze. \".\" denotes an empty cell. \"#\" denotes a wall cell. \"N\", \"E\", \"S\", \"W\" denote a robot on an empty cell facing north, east, south and west respectively; it indicates the initial position and direction of the robot.\n\nYou can assume that there is at least one empty cell adjacent to the initial position of the robot.\n\nThe end of input is indicated by a line with three zeros. This line is not part of any dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "116_A. Tram", "description": "Input\n\nThe first line contains a single number n (2 ≤ n ≤ 1000) — the number of the tram's stops. \n\nThen n lines follow, each contains two integers ai and bi (0 ≤ ai, bi ≤ 1000) — the number of passengers that exits the tram at the i-th stop, and the number of passengers that enter the tram at the i-th stop. The stops are given from the first to the last stop in the order of tram's movement.\n\n  * The number of people who exit at a given stop does not exceed the total number of people in the tram immediately before it arrives at the stop. More formally, <image>. This particularly means that a1 = 0. \n  * At the last stop, all the passengers exit the tram and it becomes empty. More formally, <image>. \n  * No passenger will enter the train at the last stop. That is, bn = 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01496 Bicube", "description": "Input\n\nThe input contains the specification of a sheet. The first line contains two integers H and W, which denote the height and width of the sheet (3 ≤ H, W ≤ 50). Then H lines follow, each consisting of W characters. These lines show the squares on the front side of the sheet. A character represents the color of a grid: alphabets and digits ('A' to 'Z', 'a' to 'z', '0' to '9') for colorful squares, a hash ('#') for a black square, and a dot ('.') for an unpainted square. Each alphabet or digit denotes a unique color: squares have the same color if and only if they are represented by the same character.\n\nEach component of connected squares forms one opened-up cube. Squares are regarded as connected when they have a common edge; those just with a common vertex are not.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "331_B1. Shave Beaver!", "description": "Input\n\nThe first line contains integer n — the total number of beavers, 2 ≤ n. The second line contains n space-separated integers — the initial beaver permutation.\n\nThe third line contains integer q — the number of queries, 1 ≤ q ≤ 105. The next q lines contain the queries. Each query i looks as pi xi yi, where pi is the query type (1 is to shave beavers from xi to yi, inclusive, 2 is to swap beavers on positions xi and yi). All queries meet the condition: 1 ≤ xi < yi ≤ n.\n\n  * to get 30 points, you need to solve the problem with constraints: n ≤ 100 (subproblem B1); \n  * to get 100 points, you need to solve the problem with constraints: n ≤ 3·105 (subproblems B1+B2). \n\n\n\nNote that the number of queries q is limited 1 ≤ q ≤ 105 in both subproblem B1 and subproblem B2.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01017 Yu-kun Likes Rectangles", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* All inputs are integers\n* 1 ≤ H, W ≤ 50\n* 1 ≤ h ≤ H\n* 1 ≤ w ≤ W\n* -100 ≤ a (i, j) ≤ 100\n* b (i, j), c (i, j) is 0 or 1\n\nInput\n\nThe input format is as follows.\n\n\nH W\na (1,1) a (1,2) ... a (1, W)\na (2,1) a (2,2) ... a (2, W)\n::\na (H, 1) a (H, 2) ... a (H, W)\nb (1,1) b (1,2) ... b (1, W)\nb (2,1) b (2,2) ... b (2, W)\n::\nb (H, 1) b (H, 2) ... b (H, W)\nh w\nc (1,1) c (1,2) ... c (1, w)\nc (2,1) c (2,2) ... c (2, w)\n::\nc (h, 1) c (h, 2) ... c (h, w)\n\n\na (i, j) is the integer written in the square (i, j) of the rectangle A, b (i, j) is the color of the square (i, j) of the rectangle B, and c (i, j) Represents the color of the square (i, j) of the rectangle C. As for the color of the square, 0 is white and 1 is black.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1200_F. Graph Traveler", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of vertices in the graph.\n\nThe second line contains n integers. The i-th integer is k_i (-10^9 ≤ k_i ≤ 10^9), the integer written on the i-th vertex.\n\nNext 2 ⋅ n lines describe the edges of each vertex. The (2 ⋅ i + 1)-st line contains an integer m_i (1 ≤ m_i ≤ 10), the number of outgoing edges of the i-th vertex. The (2 ⋅ i + 2)-nd line contains m_i integers e_i[0], e_i[1], …, e_i[m_i-1], each having an integer value between 1 and n, inclusive.\n\nNext line contains an integer q (1 ≤ q ≤ 10^5), the number of queries Gildong wants to ask.\n\nNext q lines contains two integers x and y (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9) each, which mean that the start vertex is x and the starting value of c is y.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1535_E. Gold Transfer", "description": "Input\n\nThe first line contains three integers q, a_0 and c_0 (1 ≤ q ≤ 3 ⋅ 10^5; 1 ≤ a_0, c_0 < 10^6) — the number of queries, the amount of gold in the root and its price.\n\nNext q lines contain descriptions of queries; The i-th query has one of two types: \n\n  * \"1 p_i a_i c_i\" (0 ≤ p_i < i; 1 ≤ a_i, c_i < 10^6): add vertex i as a son to vertex p_i. The vertex i will have a_i tons of gold with price c_i per one ton. It's guaranteed that p_i exists and c_i > c_{p_i}.\n  * \"2 v_i w_i\" (0 ≤ v_i < i; 1 ≤ w_i < 10^6): buy w_i tons of gold from vertices on path from v_i to 0 spending the minimum amount of money. If there isn't enough gold, we buy as much as we can. It's guaranteed that vertex v_i exist. \n\n\n\nIt's guaranteed that there is at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1420_C1. Pokémon Army (easy version)", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and q (1 ≤ n ≤ 3 ⋅ 10^5, q = 0) denoting the number of pokémon and number of operations respectively.\n\nThe second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) denoting the strengths of the pokémon.\n\ni-th of the last q lines contains two positive integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) denoting the indices of pokémon that were swapped in the i-th operation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5, and the sum of q over all test cases does not exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1475_C. Ball in Berland", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers a, b and k (1 ≤ a, b, k ≤ 2 ⋅ 10^5) — the number of boys and girls in the class and the number of couples ready to dance together.\n\nThe second line of each test case contains k integers a_1, a_2, … a_k. (1 ≤ a_i ≤ a), where a_i is the number of the boy in the pair with the number i.\n\nThe third line of each test case contains k integers b_1, b_2, … b_k. (1 ≤ b_i ≤ b), where b_i is the number of the girl in the pair with the number i.\n\nIt is guaranteed that the sums of a, b, and k over all test cases do not exceed 2 ⋅ 10^5.\n\nIt is guaranteed that each pair is specified at most once in one test case.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1494_C. 1D Sokoban", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of boxes and the number of special positions, respectively.\n\nThe second line of each testcase contains n distinct integers in the increasing order a_1, a_2, ..., a_n (-10^9 ≤ a_1 < a_2 < ... < a_n ≤ 10^9; a_i ≠ 0) — the initial positions of the boxes.\n\nThe third line of each testcase contains m distinct integers in the increasing order b_1, b_2, ..., b_m (-10^9 ≤ b_1 < b_2 < ... < b_m ≤ 10^9; b_i ≠ 0) — the special positions.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5. The sum of m over all testcases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00257 Making Sugoroku", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by a single zero line. Each dataset is given in the following format.\n\n\nmax\nn\nd1\nd2\n..\n..\n..\ndn\n\n\nThe first line gives the maximum number of roulette wheels max (2 ≤ max ≤ 250), and the second line gives the number of cells other than \"starting\" and \"rising\" n (2 ≤ n ≤ 250). .. The next n lines are given the number di (-n ≤ di ≤ n) that represents the indication for each cell. When di is zero, it means that no instruction is written, when it is a positive number, it means | di | forward instruction, and when it is negative, it means | di | back instruction (where | x | is x). Represents an absolute value). All values ​​entered are integers.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01695 JAG-channel", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> $ n $\n> $ s_1 $\n> $ s_2 $\n> ...\n> $ s_n $\n\n$ n $ is an integer representing the number of lines in the simple format display, and can be assumed to be $ 1 $ or more and $ 1 {,} 000 $ or less. The following $ n $ line contains a simple format display of the thread tree. $ s_i $ represents the $ i $ line in the simplified format display and consists of a string consisting of several'.' Followed by lowercase letters of $ 1 $ or more and $ 50 $ or less. $ s_1 $ is the first post in the thread and does not contain a'.'. $ s_2 $, ..., $ s_n $ are replies in that thread and always contain one or more'.'.\n\n$ n = 0 $ indicates the end of input. This is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01126 Amida", "description": "Input\n\nThe input consists of multiple datasets. One dataset is given as follows.\n\n> n m a\n> Horizontal line 1\n> Horizontal line 2\n> Horizontal line 3\n> ...\n> Horizontal line m\n>\n\nn, m, and a are integers that satisfy 2 <= n <= 100, 0 <= m <= 1000, 1 <= a <= n, respectively. Represents a number.\n\nThe horizontal line data is given as follows.\n\n> h p q\n\nh, p, and q are integers that satisfy 1 <= h <= 1000, 1 <= p <q <= n, respectively, h is the height of the horizontal line, and p and q are connected to the horizontal line 2 Represents the number of the vertical line of the book.\n\nNo two or more different horizontal lines are attached to the same height of one vertical line.\n\nAt the end of the input, there is a line consisting of only three zeros separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1091_B. New Year and the Treasure Geolocation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 1000) — the number of obelisks, that is also equal to the number of clues.\n\nEach of the next n lines contains two integers x_i, y_i (-10^6 ≤ x_i, y_i ≤ 10^6) — the coordinates of the i-th obelisk. All coordinates are distinct, that is x_i ≠ x_j or y_i ≠ y_j will be satisfied for every (i, j) such that i ≠ j. \n\nEach of the next n lines contains two integers a_i, b_i (-2 ⋅ 10^6 ≤ a_i, b_i ≤ 2 ⋅ 10^6) — the direction of the i-th clue. All coordinates are distinct, that is a_i ≠ a_j or b_i ≠ b_j will be satisfied for every (i, j) such that i ≠ j. \n\nIt is guaranteed that there exists a permutation p, such that for all i,j it holds \\left(x_{p_i} + a_i, y_{p_i} + b_i\\right) = \\left(x_{p_j} + a_j, y_{p_j} + b_j\\right).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01752 Prowler", "description": "Constraints\n\n* 1 ≤ N ≤ 50\n* 1 ≤ M ≤ 50\n* Only one of the characters \"^\", \"v\", \"<\", \">\" always appears in the input.\n* Similarly, only one letter \"G\" always appears in the input.\n* In the initial state, Mr. B's right hand touches the wall on the right from the direction in which Mr. B is facing.\n\nInput\n\nThe input is given in the following format.\n\n\nN M\nS1\nS2\n::\nSN\n\n\nSi (1 ≤ i ≤ N) is a string of M characters, each character representing the following.\n\n* \"^\", \"V\", \"<\", \">\" indicate the first position of Mr. B and the direction (up, down, left, right).\n* \".\" Is an empty cell. Mr. B can move on this square.\n* \"#\" Represents a wall. You cannot move on the wall.\n* \"G\" represents the location of Mr. A's house. Mr. B repeats the movement until he reaches Mr. A's house.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "785_A. Anton and Polyhedrons", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of polyhedrons in Anton's collection.\n\nEach of the following n lines of the input contains a string si — the name of the i-th polyhedron in Anton's collection. The string can look like this:\n\n  * \"Tetrahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a tetrahedron. \n  * \"Cube\" (without quotes), if the i-th polyhedron in Anton's collection is a cube. \n  * \"Octahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an octahedron. \n  * \"Dodecahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a dodecahedron. \n  * \"Icosahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an icosahedron.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "529_C. Rooks and Rectangles", "description": "Input\n\nThe first line contains four integers n, m, k and q (1 ≤ n, m ≤ 100 000, 1 ≤ k, q ≤ 200 000) — the sizes of the board, the number of rooks and the number of strategically important sites. We will consider that the cells of the board are numbered by integers from 1 to n horizontally and from 1 to m vertically. Next k lines contain pairs of integers \"x y\", describing the positions of the rooks (1 ≤ x ≤ n, 1 ≤ y ≤ m). It is guaranteed that all the rooks are in distinct squares. Next q lines describe the strategically important areas as groups of four integers \"x1 y1 x2 y2\" (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). The corresponding rectangle area consists of cells (x, y), for which x1 ≤ x ≤ x2, y1 ≤ y ≤ y2. Strategically important areas can intersect of coincide.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00213 Subdivide The Land", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by three lines of zeros. Each dataset is given in the following format:\n\n\nX Y n\nb1 k1\nb2 k2\n::\nbn kn\ns11 s21 ... sX1\ns12 s22 ... sX2\n::\ns1Y s2Y ... sXY\n\n\nThe first line gives X, Y, n (1 ≤ X, Y ≤ 10, 1 ≤ n ≤ 15). The following n lines give the information bi (1 ≤ bi ≤ n), ki (1 ≤ ki ≤ 100) written on the i line of the memo.\n\nThe following Y line is given the information sij on the i-th line of the partition information. sij represents the sign information of the jth section from the left on the i-th line. Sign information sij is given 0 if there is no sign in the parcel, and the purchaser number of the parcel if there is a sign.\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "475_B. Strongly Connected City", "description": "Input\n\nThe first line of input contains two integers n and m, (2 ≤ n, m ≤ 20), denoting the number of horizontal streets and the number of vertical streets.\n\nThe second line contains a string of length n, made of characters '<' and '>', denoting direction of each horizontal street. If the i-th character is equal to '<', the street is directed from east to west otherwise, the street is directed from west to east. Streets are listed in order from north to south.\n\nThe third line contains a string of length m, made of characters '^' and 'v', denoting direction of each vertical street. If the i-th character is equal to '^', the street is directed from south to north, otherwise the street is directed from north to south. Streets are listed in order from west to east.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "714_C. Sonya and Queries", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 100 000) — the number of operation Sonya has to perform.\n\nNext t lines provide the descriptions of the queries in order they appear in the input file. The i-th row starts with a character ci — the type of the corresponding operation. If ci is equal to '+' or '-' then it's followed by a space and an integer ai (0 ≤ ai < 1018) given without leading zeroes (unless it's 0). If ci equals '?' then it's followed by a space and a sequence of zeroes and onse, giving the pattern of length no more than 18.\n\nIt's guaranteed that there will be at least one query of type '?'.\n\nIt's guaranteed that any time some integer is removed from the multiset, there will be at least one occurrence of this integer in it.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1539_E. Game with Cards", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 2 ≤ m ≤ 10^9) — the number of questions and the maximum possible value on the card.\n\nThen n queries are described. Every description contains 3 lines.\n\nThe first line of the description of the i-th query contains a single integer k_i (0 ≤ k_i ≤ m) — the number on a new card.\n\nThe second line of the description of the i-th query contains two integers a_{l, i} and b_{l, i} (0 ≤ a_{l, i} ≤ b_{l, i} ≤ m) — the minimum and maximum values of the card at the left hand after the replacement.\n\nThe third line of the description of the i-th query contains two integers a_{r, i} and b_{r,i} (0 ≤ a_{r, i} ≤ b_{r,i} ≤ m) — the minimum and maximum values of the card at the right hand after the replacement.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "713_A. Sonya and Queries", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 100 000) — the number of operation Sonya has to perform.\n\nNext t lines provide the descriptions of the queries in order they appear in the input file. The i-th row starts with a character ci — the type of the corresponding operation. If ci is equal to '+' or '-' then it's followed by a space and an integer ai (0 ≤ ai < 1018) given without leading zeroes (unless it's 0). If ci equals '?' then it's followed by a space and a sequence of zeroes and onse, giving the pattern of length no more than 18.\n\nIt's guaranteed that there will be at least one query of type '?'.\n\nIt's guaranteed that any time some integer is removed from the multiset, there will be at least one occurrence of this integer in it.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "670_E. Correct Bracket Sequence Editor", "description": "Input\n\nThe first line contains three positive integers n, m and p (2 ≤ n ≤ 500 000, 1 ≤ m ≤ 500 000, 1 ≤ p ≤ n) — the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even.\n\nIt is followed by the string of n characters \"(\" and \")\" forming the correct bracket sequence.\n\nThen follow a string of m characters \"L\", \"R\" and \"D\" — a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non-empty.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "144_D. Missile Silos", "description": "Input\n\nThe first line contains three integers n, m and s (2 ≤ n ≤ 105, <image>, 1 ≤ s ≤ n) — the number of cities, the number of roads in the country and the number of the capital, correspondingly. Capital is the city no. s. \n\nThen m lines contain the descriptions of roads. Each of them is described by three integers vi, ui, wi (1 ≤ vi, ui ≤ n, vi ≠ ui, 1 ≤ wi ≤ 1000), where vi, ui are numbers of the cities connected by this road and wi is its length. The last input line contains integer l (0 ≤ l ≤ 109) — the distance from the capital to the missile silos. It is guaranteed that: \n\n  * between any two cities no more than one road exists; \n  * each road connects two different cities; \n  * from each city there is at least one way to any other city by the roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "149_B. Martian Clock", "description": "Input\n\nThe first line contains a single string as \"a:b\" (without the quotes). There a is a non-empty string, consisting of numbers and uppercase Latin letters. String a shows the number of hours. String b is a non-empty string that consists of numbers and uppercase Latin letters. String b shows the number of minutes. The lengths of strings a and b are from 1 to 5 characters, inclusive. Please note that strings a and b can have leading zeroes that do not influence the result in any way (for example, string \"008:1\" in decimal notation denotes correctly written time).\n\nWe consider characters 0, 1, ..., 9 as denoting the corresponding digits of the number's representation in some numeral system, and characters A, B, ..., Z correspond to numbers 10, 11, ..., 35.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "143_A. Help Vasilisa the Wise 2", "description": "Input\n\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 ≤ r1, r2, c1, c2, d1, d2 ≤ 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\n<image>", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1336_B. Xenia and Colorful Gems", "description": "Input\n\nThe first line contains a single integer t (1≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers n_r,n_g,n_b (1≤ n_r,n_g,n_b≤ 10^5) — the number of red gems, green gems and blue gems respectively.\n\nThe second line of each test case contains n_r integers r_1,r_2,…,r_{n_r} (1≤ r_i ≤ 10^9) — r_i is the weight of the i-th red gem.\n\nThe third line of each test case contains n_g integers g_1,g_2,…,g_{n_g} (1≤ g_i ≤ 10^9) — g_i is the weight of the i-th green gem.\n\nThe fourth line of each test case contains n_b integers b_1,b_2,…,b_{n_b} (1≤ b_i ≤ 10^9) — b_i is the weight of the i-th blue gem.\n\nIt is guaranteed that ∑ n_r ≤ 10^5, ∑ n_g ≤ 10^5, ∑ n_b ≤ 10^5 (the sum for all test cases).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1280_B. Beingawesomeism", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 2⋅ 10^4) denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers r and c denoting the dimensions of the grid (1 ≤ r, c ≤ 60). The next r lines each contains c characters describing the dominant religions in the countries. In particular, the j-th character in the i-th line describes the dominant religion in the country at the cell with row i and column j, where:\n\n  * \"A\" means that the dominant religion is Beingawesomeism; \n  * \"P\" means that the dominant religion is Pushingittoofarism. \n\n\n\nIt is guaranteed that the grid will only contain \"A\" or \"P\" characters. It is guaranteed that the sum of the r ⋅ c in a single file is at most 3 ⋅ 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1337_D. Xenia and Colorful Gems", "description": "Input\n\nThe first line contains a single integer t (1≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers n_r,n_g,n_b (1≤ n_r,n_g,n_b≤ 10^5) — the number of red gems, green gems and blue gems respectively.\n\nThe second line of each test case contains n_r integers r_1,r_2,…,r_{n_r} (1≤ r_i ≤ 10^9) — r_i is the weight of the i-th red gem.\n\nThe third line of each test case contains n_g integers g_1,g_2,…,g_{n_g} (1≤ g_i ≤ 10^9) — g_i is the weight of the i-th green gem.\n\nThe fourth line of each test case contains n_b integers b_1,b_2,…,b_{n_b} (1≤ b_i ≤ 10^9) — b_i is the weight of the i-th blue gem.\n\nIt is guaranteed that ∑ n_r ≤ 10^5, ∑ n_g ≤ 10^5, ∑ n_b ≤ 10^5 (the sum for all test cases).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1281_D. Beingawesomeism", "description": "Input\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 2⋅ 10^4) denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers r and c denoting the dimensions of the grid (1 ≤ r, c ≤ 60). The next r lines each contains c characters describing the dominant religions in the countries. In particular, the j-th character in the i-th line describes the dominant religion in the country at the cell with row i and column j, where:\n\n  * \"A\" means that the dominant religion is Beingawesomeism; \n  * \"P\" means that the dominant religion is Pushingittoofarism. \n\n\n\nIt is guaranteed that the grid will only contain \"A\" or \"P\" characters. It is guaranteed that the sum of the r ⋅ c in a single file is at most 3 ⋅ 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01029 Yu-kun Likes Letters in the English Alphabet", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* 1 ≤ V ≤ 100,000\n* 0 ≤ E ≤ 200,000\n* ai is either lowercase or'?' (0 ≤ i ≤ V-1)\n* 0 ≤ si, ti ≤ V-1 (si <ti, 0 ≤ i ≤ E-1)\n* One circle cannot be connected by more than 26 lines\n\nInput\n\n\nV E\na0 a1 ... a (V-1)\ns0 t0\ns1 t1\n...\ns (E-1) t (E-1)\n\n\nThe number of circles V and the number of lines E are given on the first line, separated by blanks.\n\nThe initial state of the circle is given on the second line, separated by blanks.\n\nIf ai is a lowercase letter, the lowercase letter is written in the i-th circle, and if it is'?', It means that nothing is written in the i-th circle.\n\nThe line information is given as si ti on the following E line, which means that the si and ti circles are connected by a line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "176_A. Trading Business", "description": "Input\n\nThe first line contains three space-separated integers n, m and k (2 ≤ n ≤ 10, 1 ≤ m, k ≤ 100) — the number of planets, the number of question types and the capacity of Qwerty's ship hold, correspondingly.\n\nThen follow n blocks describing each planet.\n\nThe first line of the i-th block has the planet's name as a string with length from 1 to 10 Latin letters. The first letter of the name is uppercase, the rest are lowercase. Then in the i-th block follow m lines, the j-th of them contains three integers aij, bij and cij (1 ≤ bij < aij ≤ 1000, 0 ≤ cij ≤ 100) — the numbers that describe money operations with the j-th item on the i-th planet. The numbers in the lines are separated by spaces.\n\nIt is guaranteed that the names of all planets are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "413_E. Maze 2D", "description": "Input\n\nThe first line contains two integers, n and m (1 ≤ n ≤ 2·105; 1 ≤ m ≤ 2·105) — the width of the maze and the number of queries, correspondingly. Next two lines contain the maze. Each line contains n characters, each character equals either '.' (empty cell), or 'X' (obstacle).\n\nEach of the next m lines contains two integers vi and ui (1 ≤ vi, ui ≤ 2n) — the description of the i-th request. Numbers vi, ui mean that you need to print the value of the shortest path from the cell of the maze number vi to the cell number ui. We assume that the cells of the first line of the maze are numbered from 1 to n, from left to right, and the cells of the second line are numbered from n + 1 to 2n from left to right. It is guaranteed that both given cells are empty.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "181_C. Trading Business", "description": "Input\n\nThe first line contains three space-separated integers n, m and k (2 ≤ n ≤ 10, 1 ≤ m, k ≤ 100) — the number of planets, the number of question types and the capacity of Qwerty's ship hold, correspondingly.\n\nThen follow n blocks describing each planet.\n\nThe first line of the i-th block has the planet's name as a string with length from 1 to 10 Latin letters. The first letter of the name is uppercase, the rest are lowercase. Then in the i-th block follow m lines, the j-th of them contains three integers aij, bij and cij (1 ≤ bij < aij ≤ 1000, 0 ≤ cij ≤ 100) — the numbers that describe money operations with the j-th item on the i-th planet. The numbers in the lines are separated by spaces.\n\nIt is guaranteed that the names of all planets are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1401_D. Maximum Distributed Tree", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree.\n\nEach of the next n-1 lines describes an edge: the i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) — indices of vertices connected by the i-th edge.\n\nNext line contains a single integer m (1 ≤ m ≤ 6 ⋅ 10^4) — the number of prime factors of k.\n\nNext line contains m prime numbers p_1, p_2, …, p_m (2 ≤ p_i < 6 ⋅ 10^4) such that k = p_1 ⋅ p_2 ⋅ … ⋅ p_m.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5, the sum of m over all test cases doesn't exceed 6 ⋅ 10^4, and the given edges for each test cases form a tree.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1046_B. Hyperspace Highways", "description": "Input\n\nThe first line contains three positive integers N (1≤ N≤ 100 000), M (1≤ M≤ 500 000) and Q (1≤ Q≤ 200 000), denoting the number of planets, the number of Hyperspace™ highways, and the number of queries, respectively.\n\nEach of the following M lines contains a highway: highway i is given by two integers u_i and v_i (1 ≤ u_i < v_i ≤ N), meaning the planets u_i and v_i are connected by a Hyperspace™ highway. It is guaranteed that the network of planets and Hyperspace™ highways forms a simple connected graph.\n\nEach of the following Q lines contains a query: query j is given by two integers a_j and b_j (1 ≤ a_j < b_j ≤ N ), meaning we are interested in the minimal number of Hyperspace™ highways one needs to take to travel from planet a_j to planet b_j.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1437_G. Death DBMS", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3 ⋅ 10^5) — the number of victims and the number of queries, respectively.\n\nEach of the next n lines contains a single string s_i — the name of the i-th victim. Each name consists only of lowercase Latin letters.\n\nEach of the next m lines contains a query of one of two types: \n\n  * 1~i~x (1 ≤ i ≤ n, 0 ≤ x ≤ 10^9) — change the suspicion value of the i-th victim to x; \n  * 2~q — given a string q consisting only of lowercase Latin letters find the maximum suspicion value of a victim whose name is a contiguous substring of q. \n\n\n\nThere is at least one query of the second type. The total length of the strings s_i doesn't exceed 3 ⋅ 10^5. The total length of the strings q doesn't exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1070_G. Monsters and Potions", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 100; 1 ≤ m ≤ n) — length of the game board and the number of heroes on it.\n\nThe following m lines describe heroes. Each line contains two integers s_i and h_i (1 ≤ s_i ≤ n; 1 ≤ h_i ≤ 10^6), where s_i is the initial position and h_i is the initial HP of the i-th hero. It is guaranteed that each cell s_i is blank. It is also guaranteed that all s_i are different. \n\nThe following line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_j ≤ 10^6), where a_j describes the i-th cell of the game board:\n\n  * a_j=0 means that the i-th cell is blank, \n  * a_j<0 means that the i-th cell contains monster with positive HP of -a_j, \n  * a_j>0 means that the i-th cell contains potion with a_j HP.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "847_K. Travel Cards", "description": "Input\n\nThe first line contains five integers n, a, b, k, f (1 ≤ n ≤ 300, 1 ≤ b < a ≤ 100, 0 ≤ k ≤ 300, 1 ≤ f ≤ 1000) where:\n\n  * n — the number of Polycarp trips, \n  * a — the cost of a regualar single trip, \n  * b — the cost of a trip after a transshipment, \n  * k — the maximum number of travel cards Polycarp can buy, \n  * f — the cost of a single travel card. \n\n\n\nThe following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space — the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01541 hosonagaitokoro", "description": "Constraints\n\n> 1 ≤ dist ≤ 100000000 (108)\n> 1 ≤ n ≤ 5\n> 0 ≤ m ≤ 5\n> 1 ≤ Si ≤ 100\n> 0 <Di <dist\n> If i ≠ j then Di ≠ Dj\n> All numbers appearing in the input are integers.\n>\n\n* If i <j, the i-th carriage must depart at least 1 minute earlier than the j-th carriage\n\nInput\n\nThe input format is as follows.\n\n> dist\n> n\n> S1\n> S2\n> ..\n> Sn\n> m\n> D1\n> D2\n> ..\n> Dm\n>\n\n* dist represents the distance (km) from the start point to the goal point\n* n represents the number of carriages departing from the starting point\n* Si represents the speed of the carriage, and the i-th departing carriage represents 1 km in (Si) minutes.\n* m represents the total number of \"slightly wide areas\"\n* Di represents the distance (km) from the starting point to each \"slightly wide area\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00707 The Secret Number", "description": "Input\n\nThe input consists of multiple data sets, each data set representing a matrix. The format of each data set is as follows.\n\n> W H\n>  C11C12 ... C1W\n>  C21C22 ... C2W\n>  ...\n>  CH1CH2 ... CHW\n>\n\nIn the first line of a data set, two positive integers W and H are given. W indicates the width (the number of columns) of the matrix, and H indicates the height (the number of rows) of the matrix. W+H is less than or equal to 70.\n\nH lines follow the first line, each of which corresponds to a row of the matrix in top to bottom order. The i-th row consists of W characters Ci1Ci2 ... CiW in left to right order. You may assume that the matrix includes at least one non-zero digit.\n\nFollowing the last data set, two zeros in a line indicate the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00537 Railroad Trip", "description": "input\n\nRead the following data from standard input.\n\n* On the first line, integers N and M are written with blanks as delimiters. Each of these represents that there are N cities in the JOI country and the trip consists of an M-1 day journey.\n* On the second line, M integers P1, P2, ..., PM are written with a space as a delimiter. These represent the rail movement from city Pj to city Pj + 1 on day j (1 ≤ j ≤ M − 1).\n* On the i-th line (1 ≤ i ≤ N − 1) of the following N − 1 lines, three integers Ai, Bi, and Ci are written separated by blanks. These indicate that the fare when boarding the railway i with a paper ticket is Ai yen, the fare when boarding with an IC card is Bi yen, and the amount of the IC card that can be used on the railway i is Ci yen.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00647 It's our delight!!", "description": "Input\n\nThe input consists of multiple datasets. The last dataset is followed by a line containing a single zero. You don't have to process this data. The first line of each dataset contains a single integer n.\n\nn (0 < n  ≤ 100) is the number of checks. Each of following  n  lines gives the details of a check in the following format.\n\n\nhh:mm MM\n\n\nhh:mm is the clock time to print the check. MM is minute of the clock time to provide products. The clock time is expressed according to the 24 hour clock.\nFor example, \"eleven one PM\" is expressed by \"23:01\".\nYou can assume that the all of products are provided within fifteen minutes. The restaurant is open from AM 11:00 to AM 02:00. After AM 02:00, no check is printed. Also at AM 02:00, no check is printed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "250_D. Building Bridge", "description": "Input\n\nThe first line contains integers n, m, a, b (1 ≤ n, m ≤ 105, 0 < a < b < 106). \n\nThe second line contains n integers in the ascending order: the i-th integer determines the coordinate of point Ai and equals yi (|yi| ≤ 106). \n\nThe third line contains m integers in the ascending order: the i-th integer determines the coordinate of point Bi and equals y'i (|y'i| ≤ 106). \n\nThe fourth line contains m more integers: the i-th of them determines the length of the path that connects the eastern village and point Bi, and equals li (1 ≤ li ≤ 106).\n\nIt is guaranteed, that there is such a point C with abscissa at least b, that |BiC| ≤ li for all i (1 ≤ i ≤ m). It is guaranteed that no two points Ai coincide. It is guaranteed that no two points Bi coincide.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00721 Cleaning Robot", "description": "Input\n\nThe input consists of multiple maps, each representing the size and arrangement of the room. A map is given in the following format.\n\n> w h\n>  c11 c12 c13 ... c1w\n>  c21 c22 c23 ... c2w\n>  ...\n>  ch1 ch2 ch3 ... chw\n>\n\nThe integers w and h are the lengths of the two sides of the floor of the room in terms of widths of floor tiles. w and h are less than or equal to 20. The character cyx represents what is initially on the tile with coordinates (x, y) as follows.\n\n> '`.`' : a clean tile\n>  '`*`' : a dirty tile\n>  '`x`' : a piece of furniture (obstacle)\n>  '`o`' : the robot (initial position)\n>\n\nIn the map the number of 'dirty tiles' does not exceed 10. There is only one 'robot'.\n\nThe end of the input is indicated by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1480_B. The Great Hero", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10^5) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers A (1 ≤ A ≤ 10^6), B (1 ≤ B ≤ 10^6) and n (1 ≤ n ≤ 10^5) — the attack power of the great hero, the initial health value of the great hero, and the number of monsters.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i denotes the attack power of the i-th monster.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^6), where b_i denotes the initial health value of the i-th monster.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00212 Highway Express Bus", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by five lines of zeros. Each dataset is given in the following format:\n\n\nc n m s d\na1 b1 f1\na2 b2 f2\n::\nam bm fm\n\n\nNumber of discount tickets on the first line c (1 ≤ c ≤ 10), number of towns connected by buses n (2 ≤ n ≤ 100), number of bus routes m (1 ≤ m ≤ 500), town number of departure Given s and the destination town number d (s ≠ d).\n\nThe following m lines are given the route information ai, bi, fi (1 ≤ ai, bi ≤ n, 1000 ≤ fi ≤ 10000) for the i-th bus. ai and bi are the town numbers of the start and end points of the bus route, and fi is an integer in increments of 100 that represents the fare for this route.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00734 Equal Total Scores", "description": "Input\n\nThe input consists of a number of datasets. Each dataset is formatted as follows.\n\n> n m\n>  s1\n>  s2\n>  ...\n>  sn\n>  sn+1\n>  sn+2\n>  ...\n>  sn+m\n>\n\nThe first line of a dataset contains two numbers n and m delimited by a space, where n is the number of cards that Taro has and m is the number of cards that Hanako has. The subsequent n+m lines list the score for each of the cards, one score per line. The first n scores (from s1 up to sn) are the scores of Taro's cards and the remaining m scores (from sn+1 up to sn+m) are Hanako's.\n\nThe numbers n and m are positive integers no greater than 100. Each score is a non-negative integer no greater than 100.\n\nThe end of the input is indicated by a line containing two zeros delimited by a single space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00245 Time Sale", "description": "input\n\nGiven multiple datasets. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nX Y\nm1,1 m2,1 ... mX,1\nm1,2 m2,2 ... mX,2\n::\nm1, Y m2, Y ... mX, Y\nn\ng1 d1 s1 e1\ng2 d2 s2 e2\n::\ngn dn sn en\n\n\nThe first line gives the store sizes X, Y (3 ≤ X, Y ≤ 20). In the following Y row, the store information mi, j in the i-th column and j-th row is given with the following contents.\n. (Period): Aisle square\nNumber: Product number\nP: The initial position of the shopper\n\n\nThe following line is given the number of timesale information n (1 ≤ n ≤ 8). The next n lines are given the i-th time sale information gi di si ei (0 ≤ gi ≤ 9, 1 ≤ di ≤ 10000, 0 ≤ si, ei ≤ 100).\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "434_B. Nanami's Digital Board", "description": "Input\n\nThe first line contains three space-separated integers n, m and q (1 ≤ n, m, q ≤ 1000) — the height and width of the digital board, and the number of operations.\n\nThen follow n lines, each line containing m space-separated integers. The j-th integer of the i-th line is ai, j — the initial state of pixel (i, j).\n\n  * If ai, j = 0, pixel (i, j) is initially dark. \n  * If ai, j = 1, pixel (i, j) is initially light. \n\n\n\nThen follow q lines, each line containing three space-separated integers op, x, and y (1 ≤ op ≤ 2; 1 ≤ x ≤ n; 1 ≤ y ≤ m), describing an operation.\n\n  * If op = 1, the pixel at (x, y) changes its state (from light to dark or from dark to light). \n  * If op = 2, Nanami queries the biggest light block with pixel (x, y) on its side.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1500_B. Two chandeliers", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n, m ≤ 500 000; 1 ≤ k ≤ 10^{12}) — the number of colors in the first and the second chandeliers and how many times colors should differ to anger Vasya.\n\nThe second line contains n different integers a_i (1 ≤ a_i ≤ 2 ⋅ max(n, m)) that describe the first chandelier's sequence of colors.\n\nThe third line contains m different integers b_j (1 ≤ b_i ≤ 2 ⋅ max(n, m)) that describe the second chandelier's sequence of colors.\n\nAt the i-th day, the first chandelier has a color a_x, where x = ((i - 1) mod n) + 1) and the second one has a color b_y, where y = ((i - 1) mod m) + 1).\n\nIt's guaranteed that sequence a differs from sequence b, so there are will be days when colors of chandeliers differs.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1321_E. World of Darkraft: Battle for Azathoth", "description": "Input\n\nThe first line contains three integers n, m, and p (1 ≤ n, m, p ≤ 2 ⋅ 10^5) — the number of available weapons, armor sets and monsters respectively.\n\nThe following n lines describe available weapons. The i-th of these lines contains two integers a_i and ca_i (1 ≤ a_i ≤ 10^6, 1 ≤ ca_i ≤ 10^9) — the attack modifier and the cost of the weapon i.\n\nThe following m lines describe available armor sets. The j-th of these lines contains two integers b_j and cb_j (1 ≤ b_j ≤ 10^6, 1 ≤ cb_j ≤ 10^9) — the defense modifier and the cost of the armor set j.\n\nThe following p lines describe monsters. The k-th of these lines contains three integers x_k, y_k, z_k (1 ≤ x_k, y_k ≤ 10^6, 1 ≤ z_k ≤ 10^3) — defense, attack and the number of coins of the monster k.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00701 Pile Up!", "description": "Input\n\nThe input consists of a series of data sets. One data set contains the number of cubes as its first line, and a series of instructions, each described in a separate line. The number of cubes does not exceed 100. Each instruction consists of two numbers; the former number indicates which cube to pick up, and the latter number indicates on which cube to put it. The end of the instructions is marked by two zeros.\n\nThe end of the input is marked by the line containing a single zero.\n\nOne data set has the following form:\n\n\nm\nI1 J1\nI2 J2\n...\nIn Jn\n0 0\n\n\nEach cube is identified by its number (1 through m). Ik indicates which cube to pick up and Jk indicates on which cube to put it. The latter may be zero, instructing to put the cube on the floor.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1108_F. MST Unification", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, n - 1 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices and the number of edges in the initial graph.\n\nThe next m lines contain three integers each. The i-th line contains the description of the i-th edge e_i. It is denoted by three integers u_i, v_i and w_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i, 1 ≤ w ≤ 10^9), where u_i and v_i are vertices connected by the i-th edge and w_i is the weight of this edge.\n\nIt is guaranteed that the given graph doesn't contain loops and multiple edges (i.e. for each i from 1 to m u_i ≠ v_i and for each unordered pair of vertices (u, v) there is at most one edge connecting this pair of vertices). It is also guaranteed that the given graph is connected.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1320_C. World of Darkraft: Battle for Azathoth", "description": "Input\n\nThe first line contains three integers n, m, and p (1 ≤ n, m, p ≤ 2 ⋅ 10^5) — the number of available weapons, armor sets and monsters respectively.\n\nThe following n lines describe available weapons. The i-th of these lines contains two integers a_i and ca_i (1 ≤ a_i ≤ 10^6, 1 ≤ ca_i ≤ 10^9) — the attack modifier and the cost of the weapon i.\n\nThe following m lines describe available armor sets. The j-th of these lines contains two integers b_j and cb_j (1 ≤ b_j ≤ 10^6, 1 ≤ cb_j ≤ 10^9) — the defense modifier and the cost of the armor set j.\n\nThe following p lines describe monsters. The k-th of these lines contains three integers x_k, y_k, z_k (1 ≤ x_k, y_k ≤ 10^6, 1 ≤ z_k ≤ 10^3) — defense, attack and the number of coins of the monster k.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00386 Gathering", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$ $Q$\n$u_1$ $v_1$ $w_1$\n$u_2$ $v_2$ $w_2$\n$...$\n$u_{N-1}$ $v_{N-1}$ $w_{N-1}$\n$a_1$ $b_1$ $c_1$\n$a_2$ $b_2$ $c_2$\n$...$\n$a_Q$ $b_Q$ $c_Q$\n\n\nThe first line provides the number of cities in the Zuia Kingdom $N$ ($3 \\leq N \\leq 100,000$) and the number of themes $Q$ ($1 \\leq Q \\leq 100,000$). Each of the subsequent $N-1$ lines provides the information regarding the $i$-th road $u_i,v_i,w_i$ ($ 1 \\leq u_i < v_i \\leq N, 1 \\leq w_i \\leq 10,000$), indicating that the road connects cities $u_i$ and $v_i$, and the road distance between the two is $w_i$. Each of the $Q$ lines that follows the above provides the three cities assigned to the $i$-th theme: $a_i,b_i,c_i$ ($1 \\leq a_i < b_i < c_i \\leq N$).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1055_A. Metro", "description": "Input\n\nThe first line contains two integers n and s (2 ≤ s ≤ n ≤ 1000) — the number of stations in the metro and the number of the station where Alice's home is located. Bob lives at station 1.\n\nNext lines describe information about closed and open stations.\n\nThe second line contains n integers a_1, a_2, …, a_n (a_i = 0 or a_i = 1). If a_i = 1, then the i-th station is open on the first track (that is, in the direction of increasing station numbers). Otherwise the station is closed on the first track.\n\nThe third line contains n integers b_1, b_2, …, b_n (b_i = 0 or b_i = 1). If b_i = 1, then the i-th station is open on the second track (that is, in the direction of decreasing station numbers). Otherwise the station is closed on the second track.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00775 Vampire", "description": "Input\n\nThe input consists of multiple datasets. The first line of a dataset contains two integers r and n separated by a space. r is the radius of the sun and n is the number of silhouettes of the buildings. (1 ≤ r ≤ 20, 0 ≤ n ≤ 20)\n\nEach of following n lines contains three integers xli, xri, hi (1 ≤ i ≤ n) separated by a space.\n\nThese three integers represent a silhouette rectangle of a building. The silhouette rectangle is parallel to the horizon, and its left and right edges are at x = xli and x = xri, its top edge is at y = hi, and its bottom edge is on the horizon. (-20 ≤ xli < xri ≤ 20, 0 < hi ≤ 20)\n\nThe end of the input is indicated by a line containing two zeros separated by a space.\n\nNote that these silhouettes may overlap one another.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1110_F. Nearest Leaf", "description": "Input\n\nThe first line contains two integers n and q (3 ≤ n ≤ 500 000, 1 ≤ q ≤ 500 000) — the number of vertices in the tree and the number of queries, respectively.\n\nThe (i - 1)-th of the following n - 1 lines contains two integers p_i and w_i (1 ≤ p_i < i, 1 ≤ w_i ≤ 10^9), denoting an edge between vertices p_i and i with the weight w_i.\n\nIt's guaranteed that the given edges form a tree and the vertices are enumerated in the Eulerian traversal order and that the vertex with index 1 is not a leaf.\n\nThe next q lines describe the queries. Each of them contains three integers v_i, l_i, r_i (1 ≤ v_i ≤ n, 1 ≤ l_i ≤ r_i ≤ n), describing the parameters of the query. It is guaranteed that there is at least one leaf with index x such that l_i ≤ x ≤ r_i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "203_B. Game on Paper", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ min(n·n, 105)) — the size of the squared piece of paper and the number of moves, correspondingly. \n\nThen, m lines contain the description of the moves. The i-th line contains two integers xi, yi (1 ≤ xi, yi ≤ n) — the number of row and column of the square that gets painted on the i-th move. \n\nAll numbers on the lines are separated by single spaces. It is guaranteed that all moves are different. The moves are numbered starting from 1 in the order, in which they are given in the input. The columns of the squared piece of paper are numbered starting from 1, from the left to the right. The rows of the squared piece of paper are numbered starting from 1, from top to bottom.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1073_G. Yet Another LCP Problem", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the length of string s and the number of queries, respectively.\n\nThe second line contains a string s consisting of lowercase Latin letters (|s| = n).\n\nNext 3q lines contains descriptions of queries — three lines per query. The first line of each query contains two integers k_i and l_i (1 ≤ k_i, l_i ≤ n) — sizes of sets a and b respectively.\n\nThe second line of each query contains k_i integers a_1, a_2, ... a_{k_i} (1 ≤ a_1 < a_2 < ... < a_{k_i} ≤ n) — set a.\n\nThe third line of each query contains l_i integers b_1, b_2, ... b_{l_i} (1 ≤ b_1 < b_2 < ... < b_{l_i} ≤ n) — set b.\n\nIt is guaranteed that ∑_{i = 1}^{i = q}{k_i} ≤ 2 ⋅ 10^5 and ∑_{i = 1}^{i = q}{l_i} ≤ 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1139_E. Maximize Mex", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 5000), the number of students and the number of clubs in college.\n\nThe second line contains n integers p_1, p_2, …, p_n (0 ≤ p_i < 5000), where p_i is the potential of the i-th student.\n\nThe third line contains n integers c_1, c_2, …, c_n (1 ≤ c_i ≤ m), which means that i-th student is initially a member of the club with index c_i.\n\nThe fourth line contains an integer d (1 ≤ d ≤ n), number of days for which the director wants to know the maximum possible strength of the team. \n\nEach of the next d lines contains an integer k_i (1 ≤ k_i ≤ n), which means that k_i-th student lefts their club on the i-th day. It is guaranteed, that the k_i-th student has not left their club earlier.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00888 The Two Men of the Japanese Alps", "description": "Input\n\nThe input is a sequence of datasets.\n\nThe first line of each dataset has an integer indicating the number of points N (2 ≤ N ≤ 100) on the route. Each of the following N lines has the coordinates (xi, yi) (i = 1, 2, ... , N) of the points: the two start points are (x1, y1) and (xN, yN); the line segments of the route connect (xi, yi) and (xi+1, yi+1) for i = 1, 2, ... , N - 1. Here, xi is the horizontal distance along the route from the start point x1, and yi is the altitude relative to the start point y1. All the coordinates are non-negative integers smaller than 1000, and inequality xi < xi+1 holds for i = 1, 2, .. , N - 1, and 0 = y1 = yN ≤ yi for i = 2, 3, ... , N - 1.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "5_A. Chat Server's Outgoing Traffic", "description": "Input\n\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n  * +<name> for 'Add' command. \n  * -<name> for 'Remove' command. \n  * <sender_name>:<message_text> for 'Send' command. \n\n\n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "659_B. Qualifying Contest", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 10 000, n ≥ 2m) — the number of participants of the qualifying contest and the number of regions in Berland.\n\nNext n lines contain the description of the participants of the qualifying contest in the following format: Surname (a string of length from 1 to 10 characters and consisting of large and small English letters), region number (integer from 1 to m) and the number of points scored by the participant (integer from 0 to 800, inclusive).\n\nIt is guaranteed that all surnames of all the participants are distinct and at least two people participated from each of the m regions. The surnames that only differ in letter cases, should be considered distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01706 Reverse a Road II", "description": "Input\n\nThe input consists of multiple datasets. The number of dataset is no more than $100$.\n\nEach dataset is formatted as follows.\n\n> $N$ $M$ $S$ $T$\n> $a_1$ $b_1$\n> $a_2$ $b_2$\n> :\n> :\n> $a_M$ $b_M$\n\nThe first line of each dataset contains four integers: the number of cities $N$ ($2 \\le N \\le 1{,}000$), the number of roads $M$ ($1 \\le M \\le 10{,}000$), the city with the factory $S$ and the city with the storehouse $T$ ($1 \\le S, T \\le N$, $S \\neq T$).\n\nThe following $M$ lines describe the information of the roads. The $i$-th line of them contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le N$, $a_i \\neq b_i$), meaning that the $i$-th road is directed from $a_i$ to $b_i$.\n\nThe end of input is indicated by a line containing four zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1372_E. Omkar and Last Floor", "description": "Input\n\nThe first line contains two integers, n and m (1 ≤ n,m ≤ 100), which are the number of rows and number of columns, respectively.\n\nYou will then receive a description of the intervals in each row. For every row i from 1 to n: The first row contains a single integer k_i (1 ≤ k_i ≤ m), which is the number of intervals on row i. The j-th of the next k_i lines contains two integers l_{i,j} and r_{i,j}, which are the left and right bound (both inclusive), respectively, of the j-th interval of the i-th row. It is guaranteed that all intervals other than the first interval will be directly after the interval before it. Formally, l_{i,1} = 1, l_{i,j} ≤ r_{i,j} for all 1 ≤ j ≤ k_i, r_{i,j-1} + 1 = l_{i,j} for all 2 ≤ j ≤ k_i, and r_{i,k_i} = m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1215_A. Yellow Cards", "description": "Input\n\nThe first line contains one integer a_1 (1 ≤ a_1 ≤ 1 000) — the number of players in the first team.\n\nThe second line contains one integer a_2 (1 ≤ a_2 ≤ 1 000) — the number of players in the second team.\n\nThe third line contains one integer k_1 (1 ≤ k_1 ≤ 1 000) — the maximum number of yellow cards a player from the first team can receive (after receiving that many yellow cards, he leaves the game).\n\nThe fourth line contains one integer k_2 (1 ≤ k_2 ≤ 1 000) — the maximum number of yellow cards a player from the second team can receive (after receiving that many yellow cards, he leaves the game).\n\nThe fifth line contains one integer n (1 ≤ n ≤ a_1 ⋅ k_1 + a_2 ⋅ k_2) — the number of yellow cards that have been shown during the match.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "670_C. Cinema", "description": "Input\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 200 000) — the number of scientists.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the index of a language, which the i-th scientist knows.\n\nThe third line contains a positive integer m (1 ≤ m ≤ 200 000) — the number of movies in the cinema. \n\nThe fourth line contains m positive integers b1, b2, ..., bm (1 ≤ bj ≤ 109), where bj is the index of the audio language of the j-th movie.\n\nThe fifth line contains m positive integers c1, c2, ..., cm (1 ≤ cj ≤ 109), where cj is the index of subtitles language of the j-th movie.\n\nIt is guaranteed that audio languages and subtitles language are different for each movie, that is bj ≠ cj.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01684 Venn Diagram", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is not more than $300$.\n\nEach dataset is formatted as follows.\n\n> $U_W$ $U_H$ $|A|$ $|B|$ $|A \\cap B|$\n\nThe first two integers $U_W$ and $U_H$ ($1 \\le U_W, U_H \\le 100$) denote the width and height of the rectangle which corresponds to the universal set $U$, respectively. The next three integers $|A|$, $|B|$ and $|A \\cap B|$ ($1 \\le |A|, |B| \\le 10{,}000$ and $0 \\le |A \\cap B| \\le \\min\\\\{|A|,|B|\\\\}$) denote the numbers of elements of the set $A$, $B$ and $A \\cap B$, respectively. The input is terminated by five zeroes.\n\nYou may assume that, even if $U_W$ and $U_H$ would vary within $\\pm 0.01$, it would not change whether you can draw two circles under the Alice's condition.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "242_E. XOR on Segment", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 106) — the original array.\n\nThe third line contains integer m (1 ≤ m ≤ 5·104) — the number of operations with the array. The i-th of the following m lines first contains an integer ti (1 ≤ ti ≤ 2) — the type of the i-th query. If ti = 1, then this is the query of the sum, if ti = 2, then this is the query to change array elements. If the i-th operation is of type 1, then next follow two integers li, ri (1 ≤ li ≤ ri ≤ n). If the i-th operation is of type 2, then next follow three integers li, ri, xi (1 ≤ li ≤ ri ≤ n, 1 ≤ xi ≤ 106). The numbers on the lines are separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01284 Erratic Sleep Habits", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format:\n\nT\nt1 t2 ... tT\nN\nD1 M1\nD2 M2\n...\nDN MN\n\n\nT is the length of the cycle (1 ≤ T ≤ 30); ti (for 1 ≤ i ≤ T ) is the amount of sleep on the i-th day of the cycle, given in hours (1 ≤ ti ≤ 23); N is the number of interviews (1 ≤ N ≤ 100); Dj (for 1 ≤ j ≤ N) is the day of the j-th interview (1 ≤ Dj ≤ 100); Mj (for 1 ≤ j ≤ N) is the hour when the j-th interview starts (1 ≤ Mj ≤ 23).\n\nThe numbers in the input are all integers. t1 is always 1 as stated above. The day indicated by 1 is the first day in the cycle of Peter's sleep.\n\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1341_D. Nastya and Scoreboard", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.\n\nThe next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.\n\nEach digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.\n\n<image>\n\nThus, the sequences \"1110111\", \"0010010\", \"1011101\", \"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\" encode in sequence all digits from 0 to 9 inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1340_B. Nastya and Scoreboard", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.\n\nThe next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.\n\nEach digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.\n\n<image>\n\nThus, the sequences \"1110111\", \"0010010\", \"1011101\", \"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\" encode in sequence all digits from 0 to 9 inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00608 Indian Puzzle", "description": "Constraints\n\n* Judge data includes at most 100 data sets.\n* H, W ≤ 10\n* n ≤ 10\n\nInput\n\nInput consists of several datasets. Each dataset consists of:\n\n\nH W\nH × W characters\nn\nn characters\n\n\nThe integers H and W are the numbers of rows and columns of the grid, respectively. H × W characters denote the grid which contains '.' representing a blank cell, '#' representing a black cell, numbers (from 0 to 9 inclusive), operators('+','-', '*', '/', '=')(× is represented by '*' and ÷ is represented by '/').\n\nThe integer n is the number of characters in the list. The last line of a dataset contains n characters indicating numbers and operators for the blank cells.\n\nThe end of input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00465 Authentication Level", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe positive integer R (1 ≤ R ≤ 100000) is written on the first line. The data of the two offices are given in order on the second and subsequent lines.\n\nThe office data is the positive integers Wk, Hk, Xk, Yk (1 ≤ Xk ≤ Wk ≤ 500, 1 ≤ Yk ≤ Hk ≤ 500) in the first line, followed by the i-th in line j of the Hk line, the room. (i, j) Given as an integer Lk, i, j (1 ≤ Lk, i, j <100000000 = 108) representing the confidentiality level of k.\n\nAlso, R ≤ W1 × H1 + W2 × H2 is satisfied.\n\nOf the scoring data, 30% of the points are given by satisfying R, Wk, Hk ≤ 100.\n\nWhen R is 0, it indicates the end of input. The number of data sets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00841 Atomic Car Race", "description": "Input\n\nThe input consists of multiple datasets each corresponding to a race situation. The format of a dataset is as follows.\n\n\nn\na1 a2 . . . an\nb\nr v e f\n\n\nThe meaning of each of the input items is given in the problem statement. If an input line contains two or more input items, they are separated by a space.\n\nn is a positive integer not exceeding 100. Each of a1, a2, ... , and an is a positive integer satisfying 0 < a1 < a2 < . . . < an ≤ 10000. b is a positive decimal fraction not exceeding 100.0. r is a nonnegative integer satisfying 0 ≤ r ≤ an - 1. Each of v, e and f is a positive decimal fraction. You can assume that v - e × (an - 1 - r) ≥ 0.01 and v - f × r ≥ 0.01.\n\nThe end of the input is indicated by a line with a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "19_A. World Football Cup", "description": "Input\n\nThe first input line contains the only integer n (1 ≤ n ≤ 50) — amount of the teams, taking part in the final tournament of World Cup. The following n lines contain the names of these teams, a name is a string of lower-case and upper-case Latin letters, its length doesn't exceed 30 characters. The following n·(n - 1) / 2 lines describe the held matches in the format name1-name2 num1:num2, where name1, name2 — names of the teams; num1, num2 (0 ≤ num1, num2 ≤ 100) — amount of the goals, scored by the corresponding teams. Accuracy of the descriptions is guaranteed: there are no two team names coinciding accurate to the letters' case; there is no match, where a team plays with itself; each match is met in the descriptions only once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1476_C. Longest Simple Cycle", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (2 ≤ n ≤ 10^5) — the number of chains you have.\n\nThe second line of each test case contains n integers c_1, c_2, ..., c_n (2 ≤ c_i ≤ 10^9) — the number of vertices in the corresponding chains.\n\nThe third line of each test case contains n integers a_1, a_2, ..., a_n (a_1 = -1; 1 ≤ a_i ≤ c_{i - 1}).\n\nThe fourth line of each test case contains n integers b_1, b_2, ..., b_n (b_1 = -1; 1 ≤ b_i ≤ c_{i - 1}).\n\nBoth a_1 and b_1 are equal to -1, they aren't used in graph building and given just for index consistency. It's guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "746_C. Tram", "description": "Input\n\nThe first line contains three integers s, x1 and x2 (2 ≤ s ≤ 1000, 0 ≤ x1, x2 ≤ s, x1 ≠ x2) — the maximum coordinate of the point to which the tram goes, the point Igor is at, and the point he should come to.\n\nThe second line contains two integers t1 and t2 (1 ≤ t1, t2 ≤ 1000) — the time in seconds in which the tram passes 1 meter and the time in seconds in which Igor passes 1 meter.\n\nThe third line contains two integers p and d (1 ≤ p ≤ s - 1, d is either 1 or <image>) — the position of the tram in the moment Igor came to the point x1 and the direction of the tram at this moment. If <image>, the tram goes in the direction from the point s to the point 0. If d = 1, the tram goes in the direction from the point 0 to the point s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00725 Curling 2", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets never exceeds 100.\n\nEach dataset is formatted as follows.\n\n> the width(=w) and the height(=h) of the board\n>  First row of the board\n>  ...\n>  h-th row of the board\n>\n\nThe width and the height of the board satisfy: 2 <= w <= 20, 1 <= h <= 20.\nEach line consists of w decimal numbers delimited by a space. The number describes the status of the corresponding square.\n\n> 0 | vacant square\n> ---|---\n> 1 | block\n> 2 | start position\n> 3 | goal position\n\nThe dataset for Fig. D-1 is as follows:\n\n> 6 6\n>  1 0 0 2 1 0\n>  1 1 0 0 0 0\n>  0 0 0 0 0 3\n>  0 0 0 0 0 0\n>  1 0 0 0 0 1\n>  0 1 1 1 1 1\n>", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "519_B. A and B and Compilation Errors", "description": "Input\n\nThe first line of the input contains integer n (3 ≤ n ≤ 105) — the initial number of compilation errors.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the errors the compiler displayed for the first time. \n\nThe third line contains n - 1 space-separated integers b1, b2, ..., bn - 1 — the errors displayed at the second compilation. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. \n\nThe fourth line contains n - 2 space-separated integers с1, с2, ..., сn - 2 — the errors displayed at the third compilation. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "76_A. Gift", "description": "Input\n\nThe first line of the input contains two integers N and M (2 ≤ N ≤ 200, 1 ≤ M ≤ 50 000) — the number of cities and the number of roads, respectively. The second line contains two integers G and S (1 ≤ G, S ≤ 109) — the prices of gold and silver coins in tugriks. The following M lines contain information about the offer. Each of the records in list is given as four integers xi, yi, gi, si, where xi and yi are the numbers of cities that the road connects and gi, si are minimal gold and silver coins requirements for the i-th road (1 ≤ xi, yi ≤ N, 1 ≤ gi, si ≤ 109). Cities are numbered from 1 to N. It is possible that there are more than one road between a pair of cities. It is possible that a road connects the city with itself.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01340 Kaeru Jump", "description": "Input\n\nH W\nc1,1 ... c1,W\n.\n.\n.\ncH,1 ... cH,W\n\n\nThe first line of the input contains two positive integers H and W (1 ≤ H,W ≤ 10). The following H lines, which contain W characters each, describe the initial configuration of the leaves and the frog using following characters:\n\n* '.’ : water\n* ‘o’ : a leaf\n* ‘U’ : a frog facing upward (i.e. to the upper side) on a leaf\n* ‘D’ : a frog facing downward (i.e. to the lower side) on a leaf\n* ‘L’ : a frog facing leftward (i.e. to the left side) on a leaf\n* ‘R’ : a frog facing rightward (i.e. to the right side) on a leaf\n\n\n\nYou can assume that there is only one frog in each input. You can also assume that the total number of leaves (including the leaf the frog is initially on) is at most 30.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00842 Network Mess", "description": "Input\n\nThe input is a series of distance matrices, followed by a line consisting of a single '0'. Each distance matrix is formatted as follows.\n\n\nN\na11 a12  ...   a1N\na21 a22  ...   a2N\n.   .  .      .\n.   .    .    .\n.   .      .  .\naN1 aN2  ...   aNN\n\n\n\n\n<image>\n\n\nN is the size, i.e. the number of rows and the number of columns, of the matrix. aij gives the distance between the i-th leaf node (computer) and the j-th. You may assume 2 ≤ N ≤ 50 and the matrix is symmetric whose diagonal elements are all zeros. That is, aii = 0 and aij = aji for each i and j. Each non-diagonal element aij (i ≠ j) satisfies 2 ≤ aij ≤ 30. You may assume there is always a solution. That is, there is a tree having the given distances between leaf nodes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00828 Make a Sequence", "description": "Input\n\nThe input consists of multiple datasets each corresponding to the record of a game. A dataset starts with a line containing three positive integers n, m, and p separated by a space. The relations 3 ≤ m ≤ n ≤ 7 and 1 ≤ p ≤ n3 hold between them. n and m are the parameter values of the game as described above. p is the number of moves in the game.\n\nThe rest of the dataset is p lines each containing two positive integers x and y. Each of these lines describes a move, i.e. the player on turn puts his ball on the peg specified. You can assume that 1 ≤ x ≤ n and 1 ≤ y ≤ n. You can also assume that at most n balls are put on a peg throughout a game.\n\nThe end of the input is indicated by a line with three zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1199_E. Matching vs Independent Set", "description": "Input\n\nThe first line contains a single integer T ≥ 1 — the number of graphs you need to process. The description of T graphs follows.\n\nThe first line of description of a single graph contains two integers n and m, where 3 ⋅ n is the number of vertices, and m is the number of edges in the graph (1 ≤ n ≤ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}).\n\nEach of the next m lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ 3 ⋅ n), meaning that there is an edge between vertices v_i and u_i.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^{5}, and the sum of all m over all graphs in a single test does not exceed 5 ⋅ 10^{5}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1198_C. Matching vs Independent Set", "description": "Input\n\nThe first line contains a single integer T ≥ 1 — the number of graphs you need to process. The description of T graphs follows.\n\nThe first line of description of a single graph contains two integers n and m, where 3 ⋅ n is the number of vertices, and m is the number of edges in the graph (1 ≤ n ≤ 10^{5}, 0 ≤ m ≤ 5 ⋅ 10^{5}).\n\nEach of the next m lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ 3 ⋅ n), meaning that there is an edge between vertices v_i and u_i.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^{5}, and the sum of all m over all graphs in a single test does not exceed 5 ⋅ 10^{5}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "59_E. Shortest Path", "description": "Input\n\nThe first line contains three integers n, m, k (2 ≤ n ≤ 3000, 1 ≤ m ≤ 20000, 0 ≤ k ≤ 105) which are the number of cities, the number of roads and the number of the forbidden triplets correspondingly. \n\nThen follow m lines each containing two integers xi, yi (1 ≤ xi, yi ≤ n) which are the road descriptions. The road is described by the numbers of the cities it joins. No road joins a city with itself, there cannot be more than one road between a pair of cities. \n\nThen follow k lines each containing three integers ai, bi, ci (1 ≤ ai, bi, ci ≤ n) which are the forbidden triplets. Each ordered triplet is listed mo more than one time. All three cities in each triplet are distinct.\n\nCity n can be unreachable from city 1 by roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01044 Puzzle and Hexagons", "description": "Constraints\n\n* 3 ≤ H ≤ 50\n* 3 ≤ W ≤ 50\n* 0 ≤ x <W\n* 0 ≤ y <H\n* 1 ≤ Q ≤ 100\n* Fi, j (0 ≤ i <W, 0 ≤ j <H) is one of'R',' G',' B',' P',' Y',' E'.\n\nInput\n\nThe input is given in the following format.\n\n\nH W\nF0, H−1 F1, H−1… FW−1, H−1\nF0, H-2 F1, H-2 ... FW-1, H-2\n..\n..\n..\nF0,0 F1,0… FW-1,0\nQ\nx0 y0\nx1 y1\n..\n..\n..\nxQ−1 yQ−1\n\n\nThe first line is given two integers H and W that represent the vertical and horizontal sizes of the board. From the second line to the H + 1 line, a character string representing the color of the board corresponding to each subscript is given. The number Q of operations is given on the second line of H +. In the following Q line, x and y representing the coordinates of the cell at the center of rotation are given.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1335_F. Robots on a Grid", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 5 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and m (1 < nm ≤ 10^6) — the number of rows and the number of columns correspondingly.\n\nThe next n lines contain m characters each, where the j-th character of the i-th line is c_{i, j} (c_{i, j} is either '0' if the cell (i, j) is black or '1' if the cell (i, j) is white).\n\nThe next n lines also contain m characters each, where the j-th character of the i-th line is s_{i, j} (s_{i, j} is 'U', 'R', 'D' or 'L' and describes the direction of the cell (i, j)).\n\nIt is guaranteed that the sum of the sizes of fields does not exceed 10^6 (∑ nm ≤ 10^6).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00609 Amazing Graze", "description": "Constraints\n\n* Jude data includes at most 20 data sets.\n* 1 ≤ AN, BN ≤ 100000\n* 0 < R ≤ 10\n* 0 ≤ (coordinate values) < 10000\n\nInput\n\nInput file consists of a number of data sets. One data set is given in following format:\n\n\nAN BN R\nXA1 YA1\nXA2 YA2\n:\nXAAN YAAN\nXB1 YB1\nXB2 YB2\n:\nXBBN YBBN\n\n\nAN, BN, R are integers that describe the number of combat planes, energy bullets, and their radius respectively.\n\nFollowing AN lines indicate coordinates of the center of combat planes. Each line has two integers that describe x-coordinate and y-coordinate.\n\nFollowing BN lines indicate coordinates of the center of energy bullets, in the same format as that of combat planes.\n\nInput ends when AN = BN = 0. You should output nothing for this case.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00152 Bowling", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nm\nscore1\nscore2\n::\nscorem\n\n\nThe number of participants m (3 ≤ m ≤ 40) is given in the first line, and the i-th participant information scorei is given in the following m lines. Each participant information is given in the following format, one line at a time.\n\n\nid s1 s2 ... sn\n\n\nThe student ID number id (0 ≤ id ≤ 9999) is given first, followed by the number of fall pins of the jth throw sj (0 ≤ sj ≤ 10). It is assumed that the total number of pitches n is 12 or more and 21 or less, and the number of pins required for score calculation is given in just proportion.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01136 Gather the Maps!", "description": "Input\n\nThe input consists of multiple datasets.\n\nEach dataset consists of multiple rows. The first line contains the integer n (1 <n <= 50), which represents the number of people with a piece of the map. The next n lines contain the schedule for each descendant. Line i represents the schedule of the i-th descendant, with some integers separated by a single character space. The first integer fi (0 <= fi <= 30) is an integer that represents the number of days that the descendant's schedule is free. The following fi integers represent dates when the schedule is free. These dates differ from each other and are all greater than or equal to 1 and less than or equal to 30.\n\nThere is one line containing only 0 at the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1149_B. Three Religions", "description": "Input\n\nThe first line of the input contains two integers n, q (1 ≤ n ≤ 100 000, 1 ≤ q ≤ 1000) — the length of the Word of Universe and the number of religion evolutions, respectively. The following line contains the Word of Universe — a string of length n consisting of lowercase English characters.\n\nEach of the following line describes a single evolution and is in one of the following formats: \n\n  * + i c (i ∈ \\{1, 2, 3\\}, c ∈ \\{a, b, ..., z\\}: append the character c to the end of i-th religion description. \n  * - i (i ∈ \\{1, 2, 3\\}) – remove the last character from the i-th religion description. You can assume that the pattern is non-empty. \n\n\n\nYou can assume that no religion will have description longer than 250 characters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1053_C. Putting Boxes Together", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of boxes and the number of queries.\n\nThe second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^9) — the positions of the boxes. All a_i are distinct, a_{i - 1} < a_i holds for all valid i.\n\nThe third line contains n integers w_1, w_2, ... w_n (1 ≤ w_i ≤ 10^9) — the initial weights of the boxes.\n\nNext q lines describe queries, one query per line.\n\nEach query is described in a single line, containing two integers x and y. If x < 0, then this query is of the first type, where id = -x, nw = y (1 ≤ id ≤ n, 1 ≤ nw ≤ 10^9). If x > 0, then the query is of the second type, where l = x and r = y (1 ≤ l_j ≤ r_j ≤ n). x can not be equal to 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "816_B. Karen and Coffee", "description": "Input\n\nThe first line of input contains three integers, n, k (1 ≤ k ≤ n ≤ 200000), and q (1 ≤ q ≤ 200000), the number of recipes, the minimum number of recipes a certain temperature must be recommended by to be admissible, and the number of questions Karen has, respectively.\n\nThe next n lines describe the recipes. Specifically, the i-th line among these contains two integers li and ri (1 ≤ li ≤ ri ≤ 200000), describing that the i-th recipe suggests that the coffee be brewed between li and ri degrees, inclusive.\n\nThe next q lines describe the questions. Each of these lines contains a and b, (1 ≤ a ≤ b ≤ 200000), describing that she wants to know the number of admissible integer temperatures between a and b degrees, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00117 A reward for a Carpenter", "description": "Input\n\nThe input is given in the following format:\n\n\nn\nm\na1, b1, c1, d1\na2, b2, c2, d2\n::\nam, bm, cm, dm\ns, g, V, P\n\n\nThe first line gives the total number of towns n (n ≤ 20), and the second line gives the total number of roads m (m ≤ 100). The following m lines are given the i-th road information ai, bi, ci, di (1 ≤ ai, bi ≤ n, 0 ≤ ci, di ≤ 1,000). ai and bi are the numbers of the towns connected to the highway i, ci is the transportation cost from ai to bi, and di is the transportation cost from bi to ai.\n\nOn the last line, the number s of the town where the carpenter departs, the number g of the mountain village with the pillar, the money V received by the carpenter from the lord, and the price P of the pillar are given.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1111_E. Tree", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^{5}) — the number of vertices in the tree and the number of queries, respectively.\n\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge connecting vertex u and vertex v. It is guaranteed that the given graph is a tree.\n\nEach of the next q lines starts with three integers k, m and r (1 ≤ k, r ≤ n, 1 ≤ m ≤ min(300,k)) — the number of nodes, the maximum number of groups and the root of the tree for the current query, respectively. They are followed by k distinct integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n), denoting the nodes of the current query.\n\nIt is guaranteed that the sum of k over all queries does not exceed 10^{5}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1468_C. Berpizza", "description": "Input\n\nThe first line contains one integer q (2 ≤ q ≤ 5 ⋅ 10^5) — the number of queries.\n\nThen q lines follow, each describing a query in one of the following formats:\n\n  * 1 m (1 ≤ m ≤ 5 ⋅ 10^5) — a customer comes to Berpizza, and Polycarp estimates the amount of money that they will spend as m; \n  * 2 — Monocarp serves a customer which came to the pizzeria first; \n  * 3 — Polycarp serves a customer which is expected to spend the largest amount of money at the pizzeria (if there are multiple such customers, the one that came to the pizzeria first is chosen). \n\n\n\nQueries of type 2 and 3 are asked only when there exists at least one customer that hasn't been served yet. There is at least one query of type 2 or 3 in the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00744 Cards", "description": "Input\n\nThe input is a sequence of datasets. The number of the datasets is less than or equal to 100. Each dataset is formatted as follows.\n\n> m n\n>  b1 ... bk ... bm\n>  r1 ... rk ... rn\n>\n\nThe integers m and n are the number of blue cards and that of red cards, respectively. You may assume 1 ≤ m ≤ 500 and 1≤ n ≤ 500. bk (1 ≤ k ≤ m) and rk (1 ≤ k ≤ n) are numbers printed on the blue cards and the red cards respectively, that are integers greater than or equal to 2 and less than 10000000 (=107). The input integers are separated by a space or a newline. Each of bm and rn is followed by a newline. There are no other characters in the dataset.\n\nThe end of the input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00458 Crossing Black Ice", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe input is n + 2 lines. The integer m is written on the first line. The integer n is written on the second line. In each line from the 3rd line to the n + 2nd line, m 0s or 1s are written, separated by blanks, and indicates whether or not there is thin ice in each section. If we write the i-th section from the north and the j-th section from the west as (i, j) (1 ≤ i ≤ n, 1 ≤ j ≤ m), the j-th value on the second line of i + 2 is It is 1 if there is thin ice in compartment (i, j) and 0 if there is no thin ice in compartment (i, j).\n\nWhen both m and n are 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1481_C. Fence Painting", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of planks in the fence and the number of painters.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the initial colors of the fence.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — the desired colors of the fence.\n\nThe fourth line of each test case contains m integers c_1, c_2, ..., c_m (1 ≤ c_j ≤ n) — the colors painters have.\n\nIt's guaranteed that the sum of n doesn't exceed 10^5 and the sum of m doesn't exceed 10^5 over all test cases.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1054_E. Chips Puzzle", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n, m ≤ 300) — the number of rows and columns of the table, respectively.\n\nThe following n lines describe the initial state of the table in the following format: each line contains m non-empty strings consisting of zeros and ones. In the i-th of these lines, the j-th string is the string written at the cell (i, j). The rows are enumerated from 1 to n, the columns are numerated from 1 to m.\n\nThe following n lines describe the final state of the table in the same format.\n\nLet's denote the total length of strings in the initial state as s. It is guaranteed that s ≤ 100  000. It is also guaranteed that the numbers of zeros and ones coincide in the initial and final states.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01787 RLE Replacement", "description": "Input\n\nThe input consists of three lines.\n\n> $A$\n>  $B$\n>  $C$\n\nThe lines represent strings $A$, $B$, and $C$ that are encoded by RLE, respectively. Each of the lines has the following format:\n\n> $c_1$ $l_1$ $c_2$ $l_2$ $\\ldots$ $c_n$ $l_n$ \\$\n\nEach $c_i$ ($1 \\leq i \\leq n$) is an uppercase English letter (`A`-`Z`) and $l_i$ ($1 \\leq i \\leq n$, $1 \\leq l_i \\leq 10^8$) is an integer which represents the length of the repetition of $c_i$. The number $n$ of the pairs of a letter and an integer satisfies $1 \\leq n \\leq 10^3$. A terminal symbol `$` indicates the end of a string encoded by RLE. The letters and the integers are separated by a single space. It is guaranteed that $c_i \\neq c_{i+1}$ holds for any $1 \\leq i \\leq n-1$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1409_E. Two Platforms", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^9) — the number of points and the length of each platform, respectively. The second line of the test case contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^9), where x_i is x-coordinate of the i-th point. The third line of the input contains n integers y_1, y_2, ..., y_n (1 ≤ y_i ≤ 10^9), where y_i is y-coordinate of the i-th point. All points are distinct (there is no pair 1 ≤ i < j ≤ n such that x_i = x_j and y_i = y_j).\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01303 Petting Cats", "description": "Input\n\nOn the first line of input, four integers X, Y, W, H are given, separated by a space character. These represent the x-coordinate of the southwestern end of the campus, the y-coordinate of the same point, the east-west width of the campus, and the north-south length of the campus, respectively. These values ​​satisfy -10000 <= X, Y <= 10000 and 0 <W, H <= 10000.\n\nThe second line of input is given the number of cats N (0 <N <= 100).\n\nThe following N lines are given a set of integers (-50000 <= x, y <= 50000) representing the x, y coordinates of the cat's position, one per line for each cat.\n\nThe positive direction on the x-axis is east, the positive direction on the y-axis is north, and all numbers given are integers.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1244_B. Rooms and Staircases", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then test cases follow. Each test case consists of two lines.\n\nThe first line contains one integer n (1 ≤ n ≤ 1 000) — the number of rooms on each floor.\n\nThe second line contains one string consisting of n characters, each character is either a '0' or a '1'. If the i-th character is a '1', then there is a staircase between the room i on the first floor and the room i on the second floor. If the i-th character is a '0', then there is no staircase between the room i on the first floor and the room i on the second floor.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "770_C. Online Courses In BSU", "description": "Input\n\nThe first line contains n and k (1 ≤ k ≤ n ≤ 105) — the number of online-courses and the number of main courses of Polycarp's specialty. \n\nThe second line contains k distinct integers from 1 to n — numbers of main online-courses of Polycarp's specialty. \n\nThen n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer ti (0 ≤ ti ≤ n - 1) — the number of courses on which the i-th depends. Then there follows the sequence of ti distinct integers from 1 to n — numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. \n\nIt is guaranteed that the sum of all values ti doesn't exceed 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01849 The Most Powerful Bed", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> N M\n> s1 s2 ... sN\n> d1 d2 ... dM\n\nThe first line of the dataset is given an integer representing the number of futons N and the number of days M for which the temperature is predicted, separated by spaces. On the second line, N integers s1, s2, ..., sN are given separated by spaces, and si represents the warmth supply capacity of the i-th futon. On the third line, M integers d1, d2, ..., dM are given separated by spaces, and dj represents the warmth demand on day j. These integers satisfy 1 ≤ N ≤ 15, 1 ≤ M ≤ 100, 1 ≤ si, dj ≤ 1,000,000.\n\nThe end of the input is represented by a dataset of N = M = 0. Do not output for this dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "812_D. Sagheer and Kindergarten", "description": "Input\n\nThe first line contains four integers n, m, k, q (1 ≤ n, m, k, q ≤ 105) — the number of children, toys, scenario requests and queries.\n\nEach of the next k lines contains two integers a, b (1 ≤ a ≤ n and 1 ≤ b ≤ m) — a scenario request meaning child a requests toy b. The requests are given in the order they are made by children.\n\nEach of the next q lines contains two integers x, y (1 ≤ x ≤ n and 1 ≤ y ≤ m) — the request to be added to the scenario meaning child x will request toy y just after getting the toy he is waiting for (if any).\n\nIt is guaranteed that the scenario requests are consistent and no child is initially crying. All the scenario requests are distinct and no query coincides with a scenario request.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1461_C. Random Events", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^5) — the length of the permutation and the number of experiments, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — contents of the permutation.\n\nThe following m lines of each test case each contain an integer r_i and a real number p_i (1 ≤ r_i ≤ n, 0 ≤ p_i ≤ 1) — the length of the prefix and the probability of it being sorted. All probabilities are given with at most 6 decimal places.\n\nIt is guaranteed that the sum of n and the sum of m does not exceed 10^5 (∑ n, ∑ m ≤ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i < n) — the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ m ≤ 2 ⋅ 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 ⋅ 10^9.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1463_E. Plan of Lectures", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ k ≤ n - 1) — the number of topics and the number of special pairs of topics, respectively.\n\nThe second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ n), where p_i is the prerequisite topic for the topic i (or p_i = 0 if the i-th topic has no prerequisite topics). Exactly one of these integers is 0. At least one ordering of topics such that for every i the p_i-th topic is placed before the i-th topic exists.\n\nThen k lines follow, the i-th line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i) — the topics from the i-th special pair. All values of x_i are pairwise distinct; similarly, all valus of y_i are pairwise distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01460 Matrix Operation", "description": "Input\n\nFirst line of each testcase contains nine integers. First two integers in the line, N and Q, indicate the size of matrix and the number of queries, respectively (1 \\leq N,Q \\leq 40,000). Next three integers, A B, and C, are coefficients to calculate values in initial matrix (1 \\leq A,B,C \\leq 1,000,000), and they are used as follows: A_{r,c} = (r * A + c * B) mod C where r and c are row and column indices, respectively (1\\leq r,c\\leq N). Last four integers, D, E, F, and G, are coefficients to compute the final hash value mentioned in the next section (1 \\leq D \\leq E \\leq N, 1 \\leq F \\leq G \\leq N, E - D \\leq 1,000, G - F \\leq 1,000). Each of next Q lines contains one operation in the format as described above.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "361_C. Levko and Array Recovery", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the size of the array and the number of operations in Levko's records, correspondingly.\n\nNext m lines describe the operations, the i-th line describes the i-th operation. The first integer in the i-th line is integer ti (1 ≤ ti ≤ 2) that describes the operation type. If ti = 1, then it is followed by three integers li, ri and di (1 ≤ li ≤ ri ≤ n,  - 104 ≤ di ≤ 104) — the description of the operation of the first type. If ti = 2, then it is followed by three integers li, ri and mi (1 ≤ li ≤ ri ≤ n,  - 5·107 ≤ mi ≤ 5·107) — the description of the operation of the second type.\n\nThe operations are given in the order Levko performed them on his array.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "360_A. Levko and Array Recovery", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the size of the array and the number of operations in Levko's records, correspondingly.\n\nNext m lines describe the operations, the i-th line describes the i-th operation. The first integer in the i-th line is integer ti (1 ≤ ti ≤ 2) that describes the operation type. If ti = 1, then it is followed by three integers li, ri and di (1 ≤ li ≤ ri ≤ n,  - 104 ≤ di ≤ 104) — the description of the operation of the first type. If ti = 2, then it is followed by three integers li, ri and mi (1 ≤ li ≤ ri ≤ n,  - 5·107 ≤ mi ≤ 5·107) — the description of the operation of the second type.\n\nThe operations are given in the order Levko performed them on his array.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "778_B. Bitwise Formula", "description": "Input\n\nThe first line contains two integers n and m, the number of variables and bit depth, respectively (1 ≤ n ≤ 5000; 1 ≤ m ≤ 1000). \n\nThe following n lines contain descriptions of the variables. Each line describes exactly one variable. Description has the following format: name of a new variable, space, sign \":=\", space, followed by one of:\n\n  1. Binary number of exactly m bits. \n  2. The first operand, space, bitwise operation (\"AND\", \"OR\" or \"XOR\"), space, the second operand. Each operand is either the name of variable defined before or symbol '?', indicating the number chosen by Peter. \n\n\n\nVariable names are strings consisting of lowercase Latin letters with length at most 10. All variable names are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "779_E. Bitwise Formula", "description": "Input\n\nThe first line contains two integers n and m, the number of variables and bit depth, respectively (1 ≤ n ≤ 5000; 1 ≤ m ≤ 1000). \n\nThe following n lines contain descriptions of the variables. Each line describes exactly one variable. Description has the following format: name of a new variable, space, sign \":=\", space, followed by one of:\n\n  1. Binary number of exactly m bits. \n  2. The first operand, space, bitwise operation (\"AND\", \"OR\" or \"XOR\"), space, the second operand. Each operand is either the name of variable defined before or symbol '?', indicating the number chosen by Peter. \n\n\n\nVariable names are strings consisting of lowercase Latin letters with length at most 10. All variable names are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1099_F. Cookies", "description": "Input\n\nThe first line contains two integers n and T — the number of vertices in the tree and the time he has to accomplish his task (2≤ n ≤ 10^5; 1≤ T≤10^{18}).\n\nThe second line contains n integers x_1, x_2, ..., x_n — number of cookies located in the corresponding vertex (1≤ x_i≤10^6). The third line contains n integers t_1, t_2, ..., t_n — how much time it takes Mitya to eat one cookie in vertex i (1≤ t_i≤10^6).\n\nEach of the following n - 1 lines describe the tree. For every i from 2 to n, the corresponding line contains two integers p_i and l_i, where p_i denotes the parent of vertex i and l_i denotes the time it takes Mitya to move the chip along the edge from vertex i to its parent (1≤ p_i < i, 0≤ l_i ≤ 10^9).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1301_E. Nanosoft", "description": "Input\n\nThe first line of input contains three integers n, m and q (1 ≤ n , m ≤ 500, 1 ≤ q ≤ 3 ⋅ 10^{5}) — the number of row, the number columns and the number of options.\n\nFor the next n lines, every line will contain m characters. In the i-th line the j-th character will contain the color of the cell at the i-th row and j-th column of the Adhami's picture. The color of every cell will be one of these: {'G','Y','R','B'}.\n\nFor the next q lines, the input will contain four integers r_1, c_1, r_2 and c_2 (1 ≤ r_1 ≤ r_2 ≤ n, 1 ≤ c_1 ≤ c_2 ≤ m). In that option, Adhami gave to Warawreh a sub-rectangle of the picture with the upper-left corner in the cell (r_1, c_1) and with the bottom-right corner in the cell (r_2, c_2).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1179_C. Serge and Dining Room", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 300\\ 000) — number of dishes and pupils respectively. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^{6}) — elements of array a. The third line contains m integers b_1, b_2, …, b_{m} (1 ≤ b_i ≤ 10^{6}) — elements of array b. The fourth line conatins integer q (1 ≤ q ≤ 300\\ 000) — number of queries.\n\nEach of the following q lines contains as follows: \n\n  * if a query changes price of some dish, it contains 1, and two integers i and x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^{6}), what means a_i becomes x. \n  * if a query changes number of togrogs of some pupil, it contains 2, and two integers i and x (1 ≤ i ≤ m, 1 ≤ x ≤ 10^{6}), what means b_i becomes x.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00338 Programming Contest II", "description": "Input\n\nThe input is given in the following format.\n\n\nN C\ncommand1\ncommand2\n::\ncommandC\n\n\nThe number of teams N (2 ≤ N ≤ 100000) and the number of instructions C (1 ≤ C ≤ 100000) are given on the first line. Instructions are given line by line to the following C line. Each instruction is given in the following format.\n\n\n0 t p\n\n\nOr\n\n\n1 m\n\n\nWhen the first number is 0, it indicates an update command, and when it is 1, it represents a report command. The update instruction adds the integer score p (1 ≤ p ≤ 109) to the team with the specified number t (1 ≤ t ≤ N). The reporting order reports the number and score of the team with the specified rank m (1 ≤ m ≤ N). However, the reporting order shall appear at least once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_F1. Stock Trading", "description": "Input\n\nThe first line contains two integers n and k, separated by a single space, with <image>. The i-th of the following n lines contains a single integer pi (0 ≤ pi ≤ 1012), where pi represents the price at which someone can either buy or sell one share of stock on day i.\n\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem F1 (8 points), n will be between 1 and 3000, inclusive. \n  * In subproblem F2 (15 points), n will be between 1 and 100000, inclusive. \n  * In subproblem F3 (10 points), n will be between 1 and 4000000, inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00708 Building a Space Station", "description": "Input\n\nThe input consists of multiple data sets. Each data set is given in the following format.\n\n> n\n>  x1 y1 z1 r1\n>  x2 y2 z2 r2\n>  ...\n>  xn yn zn rn\n>\n\nThe first line of a data set contains an integer n, which is the number of cells. n is positive, and does not exceed 100.\n\nThe following n lines are descriptions of cells. Four values in a line are x-, y- and z-coordinates of the center, and radius (called r in the rest of the problem) of the sphere, in this order. Each value is given by a decimal fraction, with 3 digits after the decimal point. Values are separated by a space character.\n\nEach of x, y, z and r is positive and is less than 100.0.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01848 Early Morning Work at Summer Camp", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is represented in the following format.\n\n> N\n> p1 m1 a (1,1) ... a (1, m1)\n> ...\n> pN mN a (N, 1) ... a (N, mN)\n\nN is the number of participants, a positive integer not exceeding 100. pi is the probability that the i-th participant will oversleep, and is a real number between 0 and 1 within two decimal places. mi is the number of contacts known to the i-th participant, an integer greater than or equal to 0 and less than or equal to N. a (i, j) indicates that the jth contact known to the ith participant belongs to the a (i, j) th participant. a (i, j) is a positive integer that does not exceed N.\n\nThe end of the input is indicated by a single zero line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "519_A. A and B and Chess", "description": "Input\n\nThe input contains eight lines, eight characters each — the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook — as 'R', the bishop — as'B', the knight — as 'N', the pawn — as 'P', the king — as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00733 Dr. Podboq or: How We Became Asymmetric", "description": "Input\n\nThe input consists of n lines (1≤n≤100) describing n trees followed by a line only containing a single zero which represents the end of the input. Each tree includes at least 1 and at most 127 cells. Below is an example of a tree description.\n\n> `((x (x x)) x)`\n\nThis description represents the tree shown in Figure F-1. More formally, the description of a tree is in either of the following two formats.\n\n> \"`(`\" <description of a tree starting at the left child> <single space> <description of a tree starting at the right child> \")\"\n\nor\n\n> \"`x`\"\n\nThe former is the description of a tree whose starting cell has two child cells, and the latter is the description of a tree whose starting cell has no child cell.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1153_B. Serval and Toy Bricks", "description": "Input\n\nThe first line contains three positive space-separated integers n, m, h (1≤ n, m, h ≤ 100) — the length, width and height.\n\nThe second line contains m non-negative space-separated integers a_1,a_2,...,a_m, where a_i is the height in the i-th column from left to right of the front view (0≤ a_i ≤ h).\n\nThe third line contains n non-negative space-separated integers b_1,b_2,...,b_n (0≤ b_j ≤ h), where b_j is the height in the j-th column from left to right of the left view.\n\nEach of the following n lines contains m numbers, each is 0 or 1, representing the top view, where j-th number of i-th row is 1 if h_{i, j}>0, and 0 otherwise.\n\nIt is guaranteed that there is at least one structure satisfying the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00741 How Many Islands?", "description": "Input\n\nThe input consists of a series of datasets, each being in the following format.\n\n> w h\n>  c1,1 c1,2 ... c1,w\n>  c2,1 c2,2 ... c2,w\n>  ...\n>  ch,1 ch,2 ... ch,w\n>\n\nw and h are positive integers no more than 50 that represent the width and the height of the given map, respectively. In other words, the map consists of w×h squares of the same size. w and h are separated by a single space.\n\nci, j is either 0 or 1 and delimited by a single space. If ci, j = 0, the square that is the i-th from the left and j-th from the top on the map represents a sea area. Otherwise, that is, if ci, j = 1, it represents a land area.\n\nThe end of the input is indicated by a line containing two zeros separated by a single space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "549_B. Looksery Party", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees of company Looksery.\n\nNext n lines contain the description of the contact lists of the employees. The i-th of these lines contains a string of length n, consisting of digits zero and one, specifying the contact list of the i-th employee. If the j-th character of the i-th string equals 1, then the j-th employee is in the i-th employee's contact list, otherwise he isn't. It is guaranteed that the i-th character of the i-th line is always equal to 1.\n\nThe last line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ n), where ai represents the number of messages that the i-th employee should get according to Igor.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01461 Multi Ending Story", "description": "Input\n\nA data set is given in the following format.\n\nThe first line of the data set contains one integer N (2 \\leq N \\leq 500{,}000), which denotes the number of the endings in this game. The following N-1 lines describe the branching points. The i-th line describes the branching point of ID number i and contains two integers Yes_i and No_i (i + 1 \\leq Yes_i, No_i \\leq N), which denote the ID numbers of the next branching points when you select Yes or No respectively. Yes_i = N means that you can reach an ending if you select Yes, and so for No_i = N. The branching point with ID 1 is the first branching point. The branching points with ID between 2 and N-1 (inclusive) appear exactly once in Yes_i's and No_i's.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1418_D. Trash Problem", "description": "Input\n\nThe first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of piles in the room before all queries and the number of queries, respectively.\n\nThe second line of the input contains n distinct integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9), where p_i is the coordinate of the i-th pile.\n\nThe next q lines describe queries. The i-th query is described with two integers t_i and x_i (0 ≤ t_i ≤ 1; 1 ≤ x_i ≤ 10^9), where t_i is 0 if you need to remove a pile from the coordinate x_i and is 1 if you need to add a pile to the coordinate x_i. It is guaranteed that for t_i = 0 there is such pile in the current set of piles and for t_i = 1 there is no such pile in the current set of piles.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "50_D. Bombing", "description": "Input\n\nThe first line contains an integer N which represents the number of the enemy's objects (1 ≤ N ≤ 100). The second line contains two integers: K is the required number of deactivated objects, and ε is the maximally permitted probability of not completing the task, given in per mils (1 ≤ K ≤ N, 1 ≤ ε ≤ 999). The third line contains X0 and Y0 which are the coordinates of the strike impact point. The next N lines contain two numbers Xi and Yi each which are the coordinates of every strategically important object. All the coordinates are integer, their absolute values do not exceed 1000.\n\nLet us remind you that there are a thousand per mils in unity (number one).\n\nThere can be several objects in one point.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01144 Princess's Marriage", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format.\n\n> N M\n> D1 P1\n> D2 P2\n> ...\n> DN PN\n\nTwo integers are given in the first row of each dataset, representing the number of intervals N (1 ≤ N ≤ 10,000) and the budget M (0 ≤ M ≤ 1,000,000,000) of the princess difference, respectively. The next N lines show information about the path the princess takes. Each line contains two integers, and the i-th line is the expected value of the interval Di (1 ≤ Di ≤ 10,000) and the number of attacks when moving one unit distance between them Pi (0 ≤ Pi <= 10) ). The end of the input is represented by a data set with N = 0 and M = 0. Do not output the calculation result for this data set.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "138_C. Mushroom Gnomes - 2", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 104) — the number of trees and mushrooms, respectively.\n\nEach of the next n lines contain four integers — ai, hi, li, ri (|ai| ≤ 109, 1 ≤ hi ≤ 109, 0 ≤ li, ri, li + ri ≤ 100) which represent the coordinate of the i-th tree, its height, the percentage of the probabilities that the tree falls to the left and to the right, respectively (the remaining percentage is the probability that the tree will stand on).\n\nEach of next m lines contain two integers bj, zj (|bj| ≤ 109, 1 ≤ zj ≤ 103) which represent the coordinate and the magical power of the j-th mushroom, respectively.\n\nAn arbitrary number of trees and mushrooms can grow in one point.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "119_C. Education Reform", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n ≤ m ≤ 50, 1 ≤ k ≤ 100) which represent the number of days in an academic year, the number of subjects and the k parameter correspondingly. Each of the following m lines contains the description of a subject as three integers ai, bi, ci (1 ≤ ai ≤ bi ≤ 1016, bi - ai ≤ 100, 1 ≤ ci ≤ 100) — two limitations to the number of exercises on the i-th subject and the complexity of the i-th subject, correspondingly. Distinct subjects can have the same complexity. The subjects are numbered with integers from 1 to m. \n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use the cin stream or the %I64d specificator.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "869_E. The Untended Antiquity", "description": "Input\n\nThe first line of input contains three space-separated integers n, m and q (1 ≤ n, m ≤ 2 500, 1 ≤ q ≤ 100 000) — the number of rows and columns in the grid, and the total number of Oshino and Koyomi's actions, respectively.\n\nThe following q lines each describes an action, containing five space-separated integers t, r1, c1, r2, c2 (1 ≤ t ≤ 3, 1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) — the type and two coordinates of an action. Additionally, the following holds depending on the value of t: \n\n  * If t = 1: 2 ≤ r1 ≤ r2 ≤ n - 1, 2 ≤ c1 ≤ c2 ≤ m - 1; \n  * If t = 2: 2 ≤ r1 ≤ r2 ≤ n - 1, 2 ≤ c1 ≤ c2 ≤ m - 1, the specified group of barriers exist on the ground before the removal. \n  * If t = 3: no extra restrictions.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1405_D. Tree Tag", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains five integers n,a,b,da,db (2≤ n≤ 10^5, 1≤ a,b≤ n, a≠ b, 1≤ da,db≤ n-1) — the number of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and Bob's maximum jumping distance, respectively.\n\nThe following n-1 lines describe the edges of the tree. The i-th of these lines contains two integers u, v (1≤ u, v≤ n, u≠ v), denoting an edge between vertices u and v. It is guaranteed that these edges form a tree structure.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1404_B. Tree Tag", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains five integers n,a,b,da,db (2≤ n≤ 10^5, 1≤ a,b≤ n, a≠ b, 1≤ da,db≤ n-1) — the number of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and Bob's maximum jumping distance, respectively.\n\nThe following n-1 lines describe the edges of the tree. The i-th of these lines contains two integers u, v (1≤ u, v≤ n, u≠ v), denoting an edge between vertices u and v. It is guaranteed that these edges form a tree structure.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1220_E. Tourism", "description": "Input\n\nFirst line of input contains two integers n and m, (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) which are numbers of cities and roads in the country.\n\nSecond line contains n integers w_1, w_2, …, w_n (0 ≤ w_i ≤ 10^9) which are scores of all cities.\n\nThe following m lines contain description of the roads. Each of these m lines contains two integers u and v (1 ≤ u, v ≤ n) which are cities connected by this road.\n\nIt is guaranteed that there is at most one direct road between any two cities, no city is connected to itself by the road and, finally, it is possible to go from any city to any other one using only roads.\n\nThe last line contains single integer s (1 ≤ s ≤ n), which is the number of the initial city.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01055 Bomb Removal", "description": "Constraints\n\n* 2 ≤ H, W ≤ 20\n* 1 ≤ N ≤ 5\n* 1 ≤ sx ≤ W\n* 1 ≤ sy ≤ H\n* 2 ≤ Li ≤ H + W\n* 1 ≤ pxij ≤ W\n* 1 ≤ pyij ≤ H\n* The adjacent squares of pathi are adjacent to each other in the vertical and horizontal directions.\n* The fuses are independent of each other (does not affect other fuses).\n* Bombs are not placed on the squares (sx, sy).\n\nInput\n\nThe input is given in the following format.\n\n\nW H N\nsx sy\nL1 path1\nL2 path2\n...\nLN pathN\n\n\nThe first line is given three integers W, H, N separated by blanks. Two integers sx, sy are given on the second line, separated by blanks. Li and pathi are given from the 3rd line to the N + 2nd line. pathi is given in the following format.\n\n\npxi1 pyi1 pxi2 pyi2 ... pxiLi pyiLi", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1270_A. Card Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). The description of the test cases follows.\n\nThe first line of each test case contains three integers n, k_1, k_2 (2 ≤ n ≤ 100, 1 ≤ k_1 ≤ n - 1, 1 ≤ k_2 ≤ n - 1, k_1 + k_2 = n) — the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains k_1 integers a_1, ..., a_{k_1} (1 ≤ a_i ≤ n) — the values of cards of the first player.\n\nThe third line of each test case contains k_2 integers b_1, ..., b_{k_2} (1 ≤ b_i ≤ n) — the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1165_F2. Microtransactions (hard version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of types of microtransactions and the number of special offers in the game shop.\n\nThe second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 2 ⋅ 10^5), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 2 ⋅ 10^5.\n\nThe next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 2 ⋅ 10^5, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00823 Molecular Formula", "description": "Input\n\nThe input consists of two parts. The first part, the Atomic Table, is composed of a number of lines, each line including an atomic symbol, one or more spaces, and its atomic weight which is a positive integer no more than 1000. No two lines include the same atomic symbol.\n\nThe first part ends with a line containing only the string END OF FIRST PART.\n\nThe second part of the input is a sequence of lines. Each line is a molecular formula, not exceeding 80 characters, and contains no spaces. A molecule contains at most 105 atoms. Some atomic symbols in a molecular formula may not appear in the Atomic Table.\n\nThe sequence is followed by a line containing a single zero, indicating the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00573 Commuter Pass", "description": "input\n\nRead the following input from standard input.\n\n* Two integers N and M are written on the first line. These indicate that there are N stations and M railroad lines in the city where JOI lives.\n* Two integers S and T are written on the second line. These indicate that JOI purchases a commuter pass from station S to station T.\n* Two integers U and V are written on the third line. These indicate that JOI wants to minimize the fare for traveling from station U to station V.\n* Three integers A_i, B_i, and C_i are written in the i-th line (1 \\ leq i \\ leq M) of the following M lines. These indicate that the railway line i connects station A_i and station B_i in both directions, and the fare is C_i yen.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1506_F. Triangular Paths", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) is the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 2 ⋅ 10^5) is the number of points to visit.\n\nThe second line contains n numbers r_1, r_2, …, r_n (1 ≤ r_i ≤ 10^9), where r_i is the number of the layer in which i-th point is located.\n\nThe third line contains n numbers c_1, c_2, …, c_n (1 ≤ c_i ≤ r_i), where c_i is the number of the i-th point in the r_i layer.\n\nIt is guaranteed that all n points are distinct.\n\nIt is guaranteed that there is always at least one way to traverse all n points.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1139_F. Dish Shopping", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the number of dishes available in the city and the number of people living in the city.\n\nThe second line contains n integers p_i (1 ≤ p_i ≤ 10^9), the price of each dish.\n\nThe third line contains n integers s_i (1 ≤ s_i ≤ 10^9), the standard of each dish.\n\nThe fourth line contains n integers b_i (1 ≤ b_i ≤ 10^9), the beauty of each dish.\n\nThe fifth line contains m integers inc_j (1 ≤ inc_j ≤ 10^9), the income of every person.\n\nThe sixth line contains m integers pref_j (1 ≤ pref_j ≤ 10^9), the preferred beauty of every person.\n\nIt is guaranteed that for all integers i from 1 to n, the following condition holds: p_i ≤ s_i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "159_C. String Manipulation 1.0", "description": "Input\n\nThe first line contains an integer k (1 ≤ k ≤ 2000). The second line contains a non-empty string s, consisting of lowercase Latin letters, at most 100 characters long. The third line contains an integer n (0 ≤ n ≤ 20000) — the number of username changes. Each of the next n lines contains the actual changes, one per line. The changes are written as \"pi ci\" (without the quotes), where pi (1 ≤ pi ≤ 200000) is the number of occurrences of letter ci, ci is a lowercase Latin letter. It is guaranteed that the operations are correct, that is, the letter to be deleted always exists, and after all operations not all letters are deleted from the name. The letters' occurrences are numbered starting from 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "12_C. Fruits", "description": "Input\n\nThe first line of the input contains two integer number n and m (1 ≤ n, m ≤ 100) — the number of price tags (which is equal to the number of different kinds of fruits that Ashot sells) and the number of items in Valera's list. The second line contains n space-separated positive integer numbers. Each of them doesn't exceed 100 and stands for the price of one fruit of some kind. The following m lines contain names of the fruits from the list. Each name is a non-empty string of small Latin letters which length doesn't exceed 32. It is guaranteed that the number of distinct fruits from the list is less of equal to n. Also it is known that the seller has in stock all fruits that Valera wants to buy.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01425 White Bird", "description": "Input\n\nA dataset follows the format shown below:\n\nN V X Y\nL_1 B_1 R_1 T_1\n...\nL_N B_N R_N T_N\n\n\nAll inputs are integer.\n\n* N: the number of obstacles\n* V: the initial speed of the white bird\n* X, Y: the position of the pig\n\n\n\n(0 \\leq N \\leq 50, 0 \\leq V \\leq 50, 0 \\leq X, Y \\leq 300, X \\neq 0)\n\nfor 1 \\leq i \\leq N,\n\n* L_i: the x-coordinate of the left side of the i-th obstacle\n* B_i: the y-coordinate of the bottom side of the i-th obstacle\n* R_i: the x-coordinate of the right side of the i-th obstacle\n* T_i: the y-coordinate of the top side of the i-th obstacle\n\n\n\n(0 \\leq L_i, B_i, R_i, T_i \\leq 300)\n\nIt is guaranteed that the answer remains unaffected by a change of L_i, B_i, R_i and T_i in 10^{-6}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01539 A Holiday of Miss Brute Force", "description": "Constraints\n\n* All inputs are integers\n* -lx ≤ sx, gx ≤ lx\n* -ly ≤ sy, gy ≤ ly\n* (sx, sy) ≠ (gx, gy)\n* (xi, yi) ≠ (sx, sy) (1 ≤ i ≤ n)\n* (xi, yi) ≠ (gx, gy) (1 ≤ i ≤ n)\n* (xi, yi) ≠ (xj, yj) (i ≠ j)\n* 0 ≤ n ≤ 1000\n* -lx ≤ xi ≤ lx (1 ≤ i ≤ n)\n* -ly ≤ yi ≤ ly (1 ≤ i ≤ n)\n* 0 <lx, ly ≤ 100\n\nInput\n\nThe input is given in the following format.\n\n> sx sy gx gy\n> n\n> x1 y1\n> ...\n> xi yi\n> ...\n> xn yn\n> lx ly\n>\n\nhere,\n\n* sx, sy are the coordinates of the starting point\n* gx, gy are the coordinates of the destination\n* n is the number of furniture placed in the room\n* xi, yi are the coordinates of the tile with furniture\n* lx, ly are the upper limits of the absolute values ​​of the movable X and Y coordinates.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1202_A. You Are Given Two Binary Strings...", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100) — the number of queries.\n\nNext 2T lines contain a description of queries: two lines per query. The first line contains one binary string x, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nThe second line contains one binary string y, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nIt's guaranteed, that 1 ≤ f(y) ≤ f(x) (where f(x) is the integer represented by x, and f(y) is the integer represented by y), both representations don't have any leading zeroes, the total length of x over all queries doesn't exceed 10^5, and the total length of y over all queries doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1444_D. Rectangular Polyline", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 200) —the number of test cases.\n\nThe first line of each test case contains one integer h (1 ≤ h ≤ 1000) — the number of horizontal segments. The following line contains h integers l_1, l_2, ..., l_h (1 ≤ l_i ≤ 1000) — lengths of the horizontal segments of the polyline, in arbitrary order.\n\nThe following line contains an integer v (1 ≤ v ≤ 1000) — the number of vertical segments, which is followed by a line containing v integers p_1, p_2, ..., p_v (1 ≤ p_i ≤ 1000) — lengths of the vertical segments of the polyline, in arbitrary order.\n\nTest cases are separated by a blank line, and the sum of values h + v over all test cases does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1106_B. Lunar New Year and Food Ordering", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5), representing the number of different kinds of food and the number of customers, respectively.\n\nThe second line contains n positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7), where a_i denotes the initial remain of the i-th kind of dishes.\n\nThe third line contains n positive integers c_1, c_2, …, c_n (1 ≤ c_i ≤ 10^6), where c_i denotes the cost of one dish of the i-th kind.\n\nThe following m lines describe the orders of the m customers respectively. The j-th line contains two positive integers t_j and d_j (1 ≤ t_j ≤ n, 1 ≤ d_j ≤ 10^7), representing the kind of food and the number of dishes the j-th customer orders, respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00666 World Domination", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nn\np0 id0 w0\np1 id1 w1\n..\n..\n..\np1 idn-1 wn-1\n\n\npi represents the probability that the i-th combat robot will be defeated when the opponent does not have a weak weapon.\nidi represents a combat robot that has a weapon that is the weakness of the i-th combat robot.\nwi represents the probability that the i-th combat robot will be defeated when the opponent has a weak weapon.\n\n\nThe end of the input is given by n = 0.\n\nEach value meets the following conditions\n2 ≤ n ≤ 100\npi and wi are represented by numbers with three decimal places.\n0.001 ≤ pi <wi ≤ 1.000\nidi! = i\n\n\nThe number of test cases does not exceed 500.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1055_B. Alice and Hairdresser", "description": "Input\n\nThe first line contains three integers n, m and l (1 ≤ n, m ≤ 100 000, 1 ≤ l ≤ 10^9) — the number of hairlines, the number of requests and the favorite number of Alice.\n\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the initial lengths of all hairlines of Alice.\n\nEach of the following m lines contains a request in the format described in the statement.\n\nThe request description starts with an integer t_i. If t_i = 0, then you need to find the time the haircut would take. Otherwise, t_i = 1 and in this moment one hairline grows. The rest of the line than contains two more integers: p_i and d_i (1 ≤ p_i ≤ n, 1 ≤ d_i ≤ 10^9) — the number of the hairline and the length it grows by.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "749_D. Leaving Auction", "description": "Input\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 200 000) — the number of participants and bids.\n\nEach of the following n lines contains two integers ai and bi (1 ≤ ai ≤ n, 1 ≤ bi ≤ 109, bi < bi + 1) — the number of participant who made the i-th bid and the size of this bid.\n\nNext line contains an integer q (1 ≤ q ≤ 200 000) — the number of question you have in mind.\n\nEach of next q lines contains an integer k (1 ≤ k ≤ n), followed by k integers lj (1 ≤ lj ≤ n) — the number of people who are not coming in this question and their indices. It is guarenteed that lj values are different for a single question.\n\nIt's guaranteed that the sum of k over all question won't exceed 200 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "401_B. Sereja and Contests", "description": "Input\n\nThe first line contains two integers: x (1 ≤ x ≤ 4000) — the round Sereja is taking part in today, and k (0 ≤ k < 4000) — the number of rounds he took part in.\n\nNext k lines contain the descriptions of the rounds that Sereja took part in before. If Sereja took part in one of two simultaneous rounds, the corresponding line looks like: \"1 num2 num1\" (where num2 is the identifier of this Div2 round, num1 is the identifier of the Div1 round). It is guaranteed that num1 - num2 = 1. If Sereja took part in a usual Div2 round, then the corresponding line looks like: \"2 num\" (where num is the identifier of this Div2 round). It is guaranteed that the identifiers of all given rounds are less than x.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1427_G. One Billion Shades of Grey", "description": "Input\n\nThe first line contains n (3≤ n≤ 200) – the number of rows and columns.\n\nThen n lines, each containing n integers, follow. The i-th of these lines describe the i-th row of tiles. It contains the n integers a_{ij} (-1≤ a_{ij} ≤ 10^9). The value of a_{ij} described the tile on the i-th row and j-th column: \n\n  * If a_{ij}=0, then the tile is not painted and shall be painted. \n  * If a_{ij}=-1, then the tile is broken and shall not be painted. \n  * If 1≤ a_{ij}≤ 10^9, then the tile is already painted with the shade a_{ij}. \n\nIt is guaranteed that the tiles on the boundary are already painted, the tiles not on the boundary are not already painted, and the tiles on the boundary are not broken.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "596_C. Wilbur and Points", "description": "Input\n\nThe first line of the input consists of a single integer n (1 ≤ n ≤ 100 000) — the number of points in the set Wilbur is playing with.\n\nNext follow n lines with points descriptions. Each line contains two integers x and y (0 ≤ x, y ≤ 100 000), that give one point in Wilbur's set. It's guaranteed that all points are distinct. Also, it is guaranteed that if some point (x, y) is present in the input, then all points (x', y'), such that 0 ≤ x' ≤ x and 0 ≤ y' ≤ y, are also present in the input.\n\nThe last line of the input contains n integers. The i-th of them is wi ( - 100 000 ≤ wi ≤ 100 000) — the required special value of the point that gets number i in any aesthetically pleasing numbering.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1216_C. White Sheet", "description": "Input\n\nThe first line of the input contains four integers x_1, y_1, x_2, y_2 (0 ≤ x_1 < x_2 ≤ 10^{6}, 0 ≤ y_1 < y_2 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the white sheet.\n\nThe second line of the input contains four integers x_3, y_3, x_4, y_4 (0 ≤ x_3 < x_4 ≤ 10^{6}, 0 ≤ y_3 < y_4 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the first black sheet.\n\nThe third line of the input contains four integers x_5, y_5, x_6, y_6 (0 ≤ x_5 < x_6 ≤ 10^{6}, 0 ≤ y_5 < y_6 ≤ 10^{6}) — coordinates of the bottom left and the top right corners of the second black sheet.\n\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1525_C. Robot Collisions", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n ≤ 3 ⋅ 10^5; 2 ≤ m ≤ 10^8) — the number of robots and the coordinate of the right wall.\n\nThe second line of each testcase contains n integers x_1, x_2, ..., x_n (0 < x_i < m) — the starting coordinates of the robots.\n\nThe third line of each testcase contains n space-separated characters 'L' or 'R' — the starting directions of the robots ('L' stands for left and 'R' stands for right).\n\nAll coordinates x_i in the testcase are distinct.\n\nThe sum of n over all testcases doesn't exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01315 Moonlight Farm", "description": "Input\n\nThe input is a sequence of datasets, and each dataset is given in the following format.\n\n> N\n> L1 P1 A1 B1 C1 D1 E1 F1 S1 M1\n> L2 P2 A2 B2 C2 D2 E2 F2 S2 M2\n> ...\n> LN PN AN BN CN DN EN FN SN MN\n>\n\nThe first line is the number of crops N in the dataset (1 ≤ N ≤ 50).\n\nThe N lines that follow contain information about one crop in each line. The meaning of each variable is as described in the problem statement. The crop name Li is a string of up to 20 characters consisting of only lowercase letters, and 1 ≤ Pi, Ai, Bi, Ci, Di, Ei, Fi, Si ≤ 100, 1 ≤ Mi ≤ 5. It can be assumed that no crop has the same name in one case.\n\nThe end of the input is represented by a line containing only one zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "158_C. Cd and pwd commands", "description": "Input\n\nThe first line of the input data contains the single integer n (1 ≤ n ≤ 50) — the number of commands.\n\nThen follow n lines, each contains one command. Each of these lines contains either command pwd, or command cd, followed by a space-separated non-empty parameter.\n\nThe command parameter cd only contains lower case Latin letters, slashes and dots, two slashes cannot go consecutively, dots occur only as the name of a parent pseudo-directory. The command parameter cd does not end with a slash, except when it is the only symbol that points to the root directory. The command parameter has a length from 1 to 200 characters, inclusive.\n\nDirectories in the file system can have the same names.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "634_C. Factory Repairs", "description": "Input\n\nThe first line contains five integers n, k, a, b, and q (1 ≤ k ≤ n ≤ 200 000, 1 ≤ b < a ≤ 10 000, 1 ≤ q ≤ 200 000) — the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\n\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms: \n\n  * 1 di ai (1 ≤ di ≤ n, 1 ≤ ai ≤ 10 000), representing an update of ai orders on day di, or \n  * 2 pi (1 ≤ pi ≤ n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi? \n\n\n\nIt's guaranteed that the input will contain at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "580_D. Kefa and Dishes", "description": "Input\n\nThe first line of the input contains three space-separated numbers, n, m and k (1 ≤ m ≤ n ≤ 18, 0 ≤ k ≤ n * (n - 1)) — the number of dishes on the menu, the number of portions Kefa needs to eat to get full and the number of eating rules.\n\nThe second line contains n space-separated numbers ai, (0 ≤ ai ≤ 109) — the satisfaction he gets from the i-th dish.\n\nNext k lines contain the rules. The i-th rule is described by the three numbers xi, yi and ci (1 ≤ xi, yi ≤ n, 0 ≤ ci ≤ 109). That means that if you eat dish xi right before dish yi, then the Kefa's satisfaction increases by ci. It is guaranteed that there are no such pairs of indexes i and j (1 ≤ i < j ≤ k), that xi = xj and yi = yj.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "635_D. Factory Repairs", "description": "Input\n\nThe first line contains five integers n, k, a, b, and q (1 ≤ k ≤ n ≤ 200 000, 1 ≤ b < a ≤ 10 000, 1 ≤ q ≤ 200 000) — the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\n\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms: \n\n  * 1 di ai (1 ≤ di ≤ n, 1 ≤ ai ≤ 10 000), representing an update of ai orders on day di, or \n  * 2 pi (1 ≤ pi ≤ n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi? \n\n\n\nIt's guaranteed that the input will contain at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "498_A. Crazy Town", "description": "Input\n\nThe first line contains two space-separated integers x1, y1 ( - 106 ≤ x1, y1 ≤ 106) — the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 ≤ x2, y2 ≤ 106) — the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 ≤ n ≤ 300) — the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 ≤ ai, bi, ci ≤ 106; |ai| + |bi| > 0) — the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "590_B. Chip 'n Dale Rescue Rangers", "description": "Input\n\nThe first line of the input contains four integers x1, y1, x2, y2 (|x1|, |y1|, |x2|, |y2| ≤ 10 000) — the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively. \n\nThe second line contains two integers <image> and t (0 < v, t ≤ 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively. \n\nNext follow one per line two pairs of integer (vx, vy) and (wx, wy), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that <image> and <image>.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "591_D. Chip 'n Dale Rescue Rangers", "description": "Input\n\nThe first line of the input contains four integers x1, y1, x2, y2 (|x1|, |y1|, |x2|, |y2| ≤ 10 000) — the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively. \n\nThe second line contains two integers <image> and t (0 < v, t ≤ 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively. \n\nNext follow one per line two pairs of integer (vx, vy) and (wx, wy), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that <image> and <image>.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "499_C. Crazy Town", "description": "Input\n\nThe first line contains two space-separated integers x1, y1 ( - 106 ≤ x1, y1 ≤ 106) — the coordinates of your home.\n\nThe second line contains two integers separated by a space x2, y2 ( - 106 ≤ x2, y2 ≤ 106) — the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 ≤ n ≤ 300) — the number of roads in the city. The following n lines contain 3 space-separated integers ( - 106 ≤ ai, bi, ci ≤ 106; |ai| + |bi| > 0) — the coefficients of the line aix + biy + ci = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1257_D. Yet Another Monster Killing Problem", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of monsters in the dungeon.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the power of the i-th monster.\n\nThe third line contains one integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of heroes in your party.\n\nThen m lines follow, each describing a hero. Each line contains two integers p_i and s_i (1 ≤ p_i ≤ 10^9, 1 ≤ s_i ≤ n) — the power and the endurance of the i-th hero.\n\nIt is guaranteed that the sum of n + m over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "627_B. Factory Repairs", "description": "Input\n\nThe first line contains five integers n, k, a, b, and q (1 ≤ k ≤ n ≤ 200 000, 1 ≤ b < a ≤ 10 000, 1 ≤ q ≤ 200 000) — the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\n\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms: \n\n  * 1 di ai (1 ≤ di ≤ n, 1 ≤ ai ≤ 10 000), representing an update of ai orders on day di, or \n  * 2 pi (1 ≤ pi ≤ n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi? \n\n\n\nIt's guaranteed that the input will contain at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1185_F. Two Pizzas", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 2 ≤ m ≤ 10^5) — the number of friends in the company and the number of pizzas, respectively.\n\nNext, the n lines contain descriptions of favorite ingredients of the friends: the i-th of them contains the number of favorite ingredients f_i (1 ≤ f_i ≤ 9) and a sequence of distinct integers b_{i1}, b_{i2}, ..., b_{if_i} (1 ≤ b_{it} ≤ 9).\n\nNext, the m lines contain pizza descriptions: the j-th of them contains the integer price of the pizza c_j (1 ≤ c_j ≤ 10^9), the number of ingredients r_j (1 ≤ r_j ≤ 9) and the ingredients themselves as a sequence of distinct integers a_{j1}, a_{j2}, ..., a_{jr_j} (1 ≤ a_{jt} ≤ 9).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00230 Ninja Climbing", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\na1 a2 ... an\nb1 b2 ... bn\n\n\nThe first line gives the building floor n (3 ≤ n ≤ 100). The second line gives the wall information ai from the first floor to the nth floor of the first building, and the third line gives the wall information bi from the first floor to the nth floor of the second building. ai and bi represent the information of the wall on the i-th floor, 0 is the ordinary wall, 1 is the ladder (straddling the i-th floor and the i + 1-floor), and 2 is the sliding wall.\n\nThe number of datasets does not exceed 60.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00709 Square Carpets", "description": "Input\n\nThe input consists of multiple data sets. As in the following, the end of the input is indicated by a line containing two zeros.\n\n> DataSet1\n>  DataSet2\n>  ...\n>  DataSetn\n>  `0` `0`\n\nEach data set (DataSeti) represents the state of a floor. The format of a data set is as follows.\n\n> W H\n>  P11 P12 P13 ... P1W\n>  P21 P22 P23 ... P2W\n>  ...\n>  PH1 PH2 PH3 ... PHW\n>\n\nThe positive integers W and H are the numbers of panels on the living room in the x- and y- direction, respectively. The values of W and H are no more than 10. The integer Pyx represents the state of the panel. The value of Pyx means,\n\n> `0`: flawless panel (must not be covered),\n>  `1`: scratched panel (must be covered).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01957 Tournament Chart", "description": "Input\n\nThe input consists of a single test case in the format below.\n\n\n$S$\n$a_1$ $v_1$\n:\n$a_N$ $v_N$\n\n\n$S$ represents the tournament chart. $S$ satisfies the above BNF. The following $N$ lines represent the information of the number of wins. The ($i+1$)-th line consists of a lowercase letter $a_i$ and a non-negative integer $v_i$ ($v_i \\leq 26$) separated by a space, and this means that the contestant $a_i$ won $v_i$ times. Note that $N$ ($2 \\leq N \\leq 26$) means that the number of contestants and it can be identified by string $S$. You can assume that each letter $a_i$ is distinct. It is guaranteed that $S$ contains each $a_i$ exactly once and doesn't contain any other lowercase letters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00441 The Oldest Site", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format. The input ends on a line containing one zero.\n\nOn the first line, the number n of pillars found in the ruins is written.\n\nIn each of the n lines from the 2nd line to the n + 1st line, the x and y coordinates of the column are written separated by blanks.\n\nA pillar never appears more than once.\n\nn is an integer that satisfies 1 ≤ n ≤ 3000, and the x and y coordinates of the column are integers greater than or equal to 0 and less than or equal to 5000.\n\nOf the scoring data, 30% of the points satisfy 1 ≤ n ≤ 100, and 60% of the points satisfy 1 ≤ n ≤ 500.\n\nThe number of datasets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "71_E. Nuclear Fusion", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 17). The second line contains space-separated symbols of elements of n atoms, which are available from the start. The third line contains space-separated symbols of elements of k atoms which need to be the result of the fusion. The symbols of the elements coincide with the symbols from the periodic table of the chemical elements. The atomic numbers do not exceed 100 (elements possessing larger numbers are highly unstable). Some atoms can have identical numbers (that is, there can be several atoms of the same element). The sum of numbers of initial atoms is equal to the sum of numbers of the atoms that need to be synthesized.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1165_F1. Microtransactions (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.\n\nThe second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.\n\nThe next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1343_F. Restore the Permutation by Sorted Segments", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 ≤ n ≤ 200) — the length of the permutation.\n\nThe next n-1 lines describe given segments.\n\nThe i-th line contains the description of the i-th segment. The line starts with the integer k_i (2 ≤ k_i ≤ n) — the length of the i-th segment. Then k_i integers follow. All integers in a line are distinct, sorted in ascending order, between 1 and n, inclusive.\n\nIt is guaranteed that the required p exists for each test case.\n\nIt is also guaranteed that the sum of n over all test cases does not exceed 200 (∑ n ≤ 200).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "727_D. T-shirts Distribution", "description": "Input\n\nThe first line of the input contains six non-negative integers — the number of t-shirts of each size. The numbers are given for the sizes S, M, L, XL, XXL, XXXL, respectively. The total number of t-shirts doesn't exceed 100 000.\n\nThe second line contains positive integer n (1 ≤ n ≤ 100 000) — the number of participants.\n\nThe following n lines contain the sizes specified by the participants, one line per participant. The i-th line contains information provided by the i-th participant: single size or two sizes separated by comma (without any spaces). If there are two sizes, the sizes are written in increasing order. It is guaranteed that two sizes separated by comma are neighboring.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1291_E. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 3 ⋅ 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 ≤ c ≤ n) — the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, …, x_c (1 ≤ x_i ≤ n) — the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1290_C. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 3 ⋅ 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 ≤ c ≤ n) — the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, …, x_c (1 ≤ x_i ≤ n) — the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00629 Selecting Teams Advanced to Regional", "description": "Input\n\nMultiple datasets are given as input. Each dataset is given in the following format:\n\nn (number of teams: integer)\nI1 U1 A1 P1 (ID of first team, affiliation, number of correct answers, penalty: 4 integers separated by blanks)\nI2 U2 A2 P2 (ID of second team, affiliation, number of correct answers, penalty: 4 integers separated by blanks)\n..\n..\nIn Un An Pn (ID of nth team, affiliation, number of correct answers, penalty: 4 integers separated by blanks)\n\n\nn is 300 or less, and Ii and Ui are 1 or more and 1000 or less. You can assume that there are no teams with the same ID in a dataset.\n\nAi should be 10 or less and Pi should be 100,000 or less.\n\nWhen n is 0, it is the end of input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00958 Parallel Lines", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$m$\n$x_1$ $y_1$\n...\n$x_m$ $y_m$\n\n\n<image>\n\nFigure B.2. Maximizing the number of parallel line pairs for Sample Input 2\n\nThe first line contains an even integer $m$, which is the number of points ($2 \\leq m \\leq 16$). Each of the following $m$ lines gives the coordinates of a point. Integers $x_i$ and $y_i$ ($-1000 \\leq x_i \\leq 1000, -1000 \\leq y_i \\leq 1000$) in the $i$-th line of them give the $x$- and $y$-coordinates, respectively, of the $i$-th point.\n\nThe positions of points are all different, that is, $x_i \\ne x_j$ or $y_i \\ne y_j$ holds for all $i \\ne j$. Furthermore, No three points lie on a single line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "571_D. Campus", "description": "Input\n\nThe first line contains two integers, n and m (1 ≤ n, m ≤ 5·105) — the number of dormitories and the number of queries, respectively.\n\nNext m lines contain the queries, each of them is given in one of the following formats: \n\n  * «U aj bj» — merging universities; \n  * «M cj dj» — merging military offices; \n  * «A xj» — students of university xj moving in the dormitories; \n  * «Z yj» — a raid in military office yj; \n  * «Q qj» — a query asking the number of people in dormitory qj. \n\nAll the numbers in the queries are positive integers and do not exceed n. It is guaranteed that at the moment of the query the universities and military offices, that are present in the query, exist.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00607 Emacs-like Editor", "description": "Constraints\n\n* The number of lines in the text given as input ≤ 10\n* The number of characters in a line given as input ≤ 20\n* The number of commands ≤ 300\n* The maximum possible number of lines in the text during operations ≤ 100\n* The maximum possible number of characters in a line during operations ≤ 1000\n\nInput\n\nThe input consists of only one data-set which includes two parts. The first part gives a text consisting of several lines. The end of the text is indicated by a line (without quotes):\n\n\n\"END_OF_TEXT\"\n\n\nThis line should not be included in the text.\n\nNext part gives a series of commands. Each command is given in a line. The end of the commands is indicated by a character '-'.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00814 Life Line", "description": "Input\n\nThe input consists of multiple data. Each data represents the state of the board of the game still in progress.\n\nThe format of each data is as follows.\n\n\nN C\n\nS1,1\nS2,1  S2,2\nS3,1 S3,2 S3,3\n...\nSN,1    ...    SN,N\n\n\nN is the size of the board (3 ≤ N ≤ 10).\n\nC is the identification number of the player whose turn comes now (1 ≤ C ≤ 9) . That is, your program must calculate his points in this turn.\n\nSi,j is the state of the vertex on the board (0 ≤ Si,j ≤ 9) . If the value of Si,j is positive, it means that there is the stone numbered by Si,j there. If the value of Si,j is 0, it means that the vertex is ``empty''.\n\nTwo zeros in a line, i.e., 0 0, represents the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00980 Estimating the Flood Risk", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$w$ $d$ $n$\n$x_1$ $y_1$ $z_1$\n.\n.\n.\n$x_n$ $y_n$ $z_n$\n\n\nHere, $w$, $d$, and $n$ are integers between $1$ and $50$, inclusive. $w$ and $d$ are the numbers of areas in the two sides of the land. $n$ is the number of areas where altitudes are measured. The $i$-th line of the following $n$ lines contains three integers, $x_i$, $y_i$, and $z_i$ satisfying $1 \\leq x_i \\leq w$, $1 \\leq y_i \\leq d$, and $−100 \\leq z_i \\leq 100$. They mean that the altitude of the area at $(x_i , y_i)$ was measured to be $z_i$. At most one measurement result is given for the same area, i.e., for $i \\ne j$, $(x_i, y_i) \\ne (x_j , y_j)$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1234_C. Pipes", "description": "Input\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 10^4) — the number of queries. Then q queries follow.\n\nEach query consists of exactly three lines. The first line of the query contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of pipes in each row. The next two lines contain a description of the first and the second rows correspondingly. Each row description consists of n digits from 1 to 6 without any whitespaces between them, each digit corresponds to the type of pipe in the corresponding cell. See the problem statement to understand which digits correspond to which types of pipes.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "556_C. Case of Matryoshkas", "description": "Input\n\nThe first line contains integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 105) — the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number mi (1 ≤ mi ≤ n), and then mi numbers ai1, ai2, ..., aimi — the numbers of matryoshkas in the chain (matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka ai3, and so on till the matryoshka aimi that isn't nested into any other matryoshka).\n\nIt is guaranteed that m1 + m2 + ... + mk = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00448 Osenbei", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nTwo integers R and C (1 ≤ R ≤ 10, 1 ≤ C ≤ 10 000) are written on the first line of the input, separated by blanks. The following R line represents the state of the rice cracker immediately after the earthquake. In the (i + 1) line (1 ≤ i ≤ R), C integers ai, 1, ai, 2, ……, ai, C are written separated by blanks, and ai, j are i. It represents the state of the rice cracker in row j. If ai and j are 1, it means that the front side is burnt, and if it is 0, it means that the back side is burnt.\n\nWhen both C and R are 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "555_A. Case of Matryoshkas", "description": "Input\n\nThe first line contains integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 105) — the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number mi (1 ≤ mi ≤ n), and then mi numbers ai1, ai2, ..., aimi — the numbers of matryoshkas in the chain (matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka ai3, and so on till the matryoshka aimi that isn't nested into any other matryoshka).\n\nIt is guaranteed that m1 + m2 + ... + mk = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01678 Restore Calculation", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is less than 100. Each dataset is formatted as follows.\n\n> $A$\n> $B$\n> $C$\n\nEach dataset consists of three strings, $A$, $B$ and $C$. They indicate that the sum of $A$ and $B$ should be $C$. Each string consists of digits (`0`-`9`) and/or question mark (`?`). A question mark (`?`) indicates an erased digit. You may assume that the first character of each string is not `0` and each dataset has at least one `?`.\n\nIt is guaranteed that each string contains between 1 and 50 characters, inclusive. You can also assume that the lengths of three strings are equal.\n\nThe end of input is indicated by a line with a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00178 TETORIS", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\nd1 p1 q1\nd2 p2 q2\n::\ndn pn qn\n\n\nThe number of blocks n (1 ≤ n ≤ 1000) is given on the first line. The next n lines give the i-th block orientation di (1 or 2), the block length pi (1 ≤ pi ≤ 5), and the block position qi. Block orientation di is 1 for landscape orientation and 2 for portrait orientation. The block position qi is an integer from 1 to 5 from the left edge on the board, and in the case of a horizontal block, it is the position where the left edge frame falls.\n\nThe number of datasets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1458_E. Nim Shortcuts", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of shortcut positions, and the number of initial positions that need to be evaluated.\n\nThe following n lines describe shortcut positions. The i-th of these lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 10^9). It is guaranteed that all shortcut positions are distinct.\n\nThe following m lines describe initial positions. The i-th of these lines contains two integers a_i, b_i (0 ≤ a_i, b_i ≤ 10^9) — the number of stones in the first and second heap respectively. It is guaranteed that all initial positions are distinct. However, initial positions are not necessarily distinct from shortcut positions.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1244_A. Pens and Pencils", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then the test cases follow.\n\nEach test case is described by one line containing five integers a, b, c, d and k, separated by spaces (1 ≤ a, b, c, d, k ≤ 100) — the number of lectures Polycarp has to attend, the number of practical classes Polycarp has to attend, the number of lectures which can be written down using one pen, the number of practical classes for which one pencil is enough, and the number of writing implements that can fit into Polycarp's pencilcase, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00036 A Figure on Surface", "description": "Input\n\nThe input consists of multiple datasets.\n\nOne dataset is given eight strings of eight characters, with the squares occupied by the shape in the plane represented by 1 and the squares not occupied by 0 represented by 0. For example, the sequence of strings corresponding to Figure 2 is as follows:\n\n| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n--- | --- | --- | --- | --- | --- | --- | ---\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 1 | 1 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 1 | 1 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n\n\n\nThe datasets are separated by a single blank line. The number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "610_E. Alphabet Permutations", "description": "Input\n\nThe first line contains three positive integers n, m and k (1 ≤ n ≤ 200 000, 1 ≤ m ≤ 20000, 1 ≤ k ≤ 10) — the length of the string s, the number of operations and the size of the alphabet respectively. The second line contains the string s itself.\n\nEach of the following lines m contains a description of some operation: \n\n  1. Operation of the first type starts with 1 followed by a triple li, ri and ci, that denotes replacement of all characters at positions from li to ri by character ci (1 ≤ li ≤ ri ≤ n, ci is one of the first k lowercase English letters). \n  2. Operation of the second type starts with 2 followed by a permutation of the first k lowercase English letters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "377_C. Captains Mode", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 100) — the number of heroes in Dota 2.\n\nThe second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 106) — the strengths of all the heroes.\n\nThe third line contains a single integer m (2 ≤ m ≤ min(n, 20)) — the number of actions the captains of the team must perform.\n\nNext m lines look like \"action team\", where action is the needed action: a pick (represented as a \"p\") or a ban (represented as a \"b\"), and team is the number of the team that needs to perform the action (number 1 or 2).\n\nIt is guaranteed that each team makes at least one pick. Besides, each team has the same number of picks and the same number of bans.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "350_B. Resort", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of objects.\n\nThe second line contains n space-separated integers type1, type2, ..., typen — the types of the objects. If typei equals zero, then the i-th object is the mountain. If typei equals one, then the i-th object is the hotel. It is guaranteed that at least one object is a hotel.\n\nThe third line of the input contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ n) — the description of the ski tracks. If number ai equals zero, then there is no such object v, that has a ski track built from v to i. If number ai doesn't equal zero, that means that there is a track built from object ai to object i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "979_D. Kuro and GCD and XOR and SUM", "description": "Input\n\nThe first line contains one integer q (2 ≤ q ≤ 10^{5}) — the number of tasks the game wants you to perform.\n\nq lines follow, each line begins with an integer t_i — the type of the task: \n\n  * If t_i = 1, an integer u_i follow (1 ≤ u_i ≤ 10^{5}) — you have to add u_i to the array a. \n  * If t_i = 2, three integers x_i, k_i, and s_i follow (1 ≤ x_i, k_i, s_i ≤ 10^{5}) — you must find a number v existing in the array a such that k_i ∣ GCD(x_i, v), x_i + v ≤ s_i, and x_i ⊕ v is maximized, where ⊕ denotes the XOR operation, or report -1 if no such numbers are found. \n\n\n\nIt is guaranteed that the type of the first task is type 1, and there exists at least one task of type 2.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02740 AtCoder Grand Contest 043 - Jewelry Box", "description": "Constraints\n\n* 1 \\leq N \\leq 30\n* 1 \\leq K_i \\leq 30\n* 1 \\leq S_{i,j} \\leq 10^9\n* 1 \\leq P_{i,j} \\leq 30\n* 1 \\leq C_{i,j} \\leq 10^{12}\n* 0 \\leq M \\leq 50\n* 1 \\leq U_i,V_i \\leq N\n* U_i \\neq V_i\n* 0 \\leq W_i \\leq 10^9\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq A_i \\leq 3 \\times 10^{13}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nDescription of Shop 1\nDescription of Shop 2\n\\vdots\nDescription of Shop N\nM\nU_1 V_1 W_1\nU_2 V_2 W_2\n\\vdots\nU_M V_M W_M\nQ\nA_1\nA_2\n\\vdots\nA_Q\n\n\nThe description of Shop i (1 \\leq i \\leq N) is in the following format:\n\n\nK_i\nS_{i,1} P_{i,1} C_{i,1}\nS_{i,2} P_{i,2} C_{i,2}\n\\vdots\nS_{i,K_i} P_{i,K_i} C_{i,K_i}", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1398_E. Two Types of Spells", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of changes to the spell set.\n\nEach of the next n lines contains two integers tp and d (0 ≤ tp_i ≤ 1; -10^9 ≤ d ≤ 10^9; d_i ≠ 0) — the description of the change. If tp_i if equal to 0, then Polycarp learns (or forgets) a fire spell, otherwise he learns (or forgets) a lightning spell.\n\nIf d_i > 0, then Polycarp learns a spell of power d_i. Otherwise, Polycarp forgets a spell with power -d_i, and it is guaranteed that he knew that spell before the change.\n\nIt is guaranteed that the powers of all spells Polycarp knows after each change are different (Polycarp never knows two spells with the same power).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1491_A. K-th Largest Value", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the given array and the number of queries.\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_n (0 ≤ a_i ≤ 1) — elements of the initial array.\n\nEach of the following q lines contains two integers. The first integer is t (1 ≤ t ≤ 2) — the type of query. \n\n  * If t = 1 the second integer is x (1 ≤ x ≤ n) — the position of the modified number. You have to assign to a_x the value 1 - a_x.\n  * If t = 2 the second integer is k (1 ≤ k ≤ n) — you need to print the k-th largest value of the array.\n\n\n\nIt's guaranteed that there will be at least one query of the second type (satisfying t = 2).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "607_D. Power Tree", "description": "Input\n\nThe first line of the input contains two space separated integers v1 and q (1 ≤ v1 < 109, 1 ≤ q ≤ 200 000) — the value of vertex 1 and the total number of updates and queries respectively.\n\nThe next q lines contain the updates and queries. Each of them has one of the following forms: \n\n  * 1 pi vi, if these line describes an update. The index of the added vertex is equal to the smallest positive integer not yet used as an index in the tree. It is guaranteed that pi is some already existing vertex and 1 ≤ vi < 109. \n  * 2 ui, if these line describes a query. It is guaranteed ui will exist in the tree. \n\n\n\nIt is guaranteed that the input will contain at least one query.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00664 Cosmic Market", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nr c q\nA0 B0 order0\nA1 B1 order1\n..\n..\n..\nAq-1 Bq-1 orderq-1\n\n\nWhen Ai = 0, the orderi instruction is executed for the Bi line.\nWhen Ai = 1, the orderi instruction is executed for the Bi column.\nWhen orderi = 0, all people in the specified row or column are seated.\nWhen orderi = 1, make everyone stand in the specified row or column.\n\n\nThe end of the input is given by r = 0 c = 0 q = 0.\n\nThe input value satisfies the following conditions.\n1 ≤ r ≤ 50,000\n1 ≤ c ≤ 50,000\n1 ≤ q ≤ 50,000\norderi = 0 or 1\nWhen Ai = 0\n0 ≤ Bi <r\nWhen Ai = 1\n0 ≤ Bi <c\n\n\nThe number of test cases does not exceed 100", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1473_D. Program", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the description of t testcases follows.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of instructions in the program and the number of queries.\n\nThe second line of each testcase contains a program — a string of n characters: each character is either '+' or '-' — increment and decrement instruction, respectively.\n\nEach of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the description of the query.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5. The sum of m over all testcases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02122 RMQ 2", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* $ 2 \\ le N \\ le 2 \\ times 10 ^ 5 $\n* $ 2 \\ le Q \\ le 2 \\ times 10 ^ 5 $\n* $ 1 \\ le a_i \\ le 10 ^ 9 $\n* $ 1 \\ le b_i \\ le 10 ^ 9 $\n* $ 1 \\ le x_i \\ le 6 $\n* $ 1 \\ le y_i \\ le N $ (when $ 1 \\ le x_i \\ le 4 $)\n* $ y_i = -1 $ (when $ x_i = 5, 6 $)\n* $ 1 \\ le z_i \\ le 10 ^ 9 $ (when $ x_i = 1, 2 $)\n* $ y_i \\ le z_i \\ le N $ (when $ x_i = 3, 4 $)\n* $ z_i = -1 $ (when $ x_i = 5, 6 $)\n* All inputs are integers\n\nInput\n\nThe input is given in the following format.\n\n$ N $\n$ a_ {1} $ $ a_ {2} $ ... $ a_ {N} $\n$ b_ {1} $ $ b_ {2} $ ... $ b_ {N} $\n$ Q $\n$ x_1 $ $ y_1 $ $ z_1 $\n$ x_2 $ $ y_2 $ $ z_2 $\n...\n$ x_Q $ $ y_Q $ $ z_Q $", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01731 Thread Tree", "description": "Input\n\nInput contains a single dataset in the following format:\n\n\nn\nk_1\nM_1\nk_2\nM_2\n:\n:\nk_n\nM_n\n\n\nThe first line contains an integer n (1 ≤ n ≤ 1,000), which is the number of posts in the thread. Then 2n lines follow. Each post is represented by two lines: the first line contains an integer k_i (k_1 = 0, 1 ≤ k_i < i for 2 ≤ i ≤ n) and indicates the i-th post is a reply to the k_i-th post; the second line contains a string M_i and represents the message of the i-th post. k_1 is always 0, which means the first post is not replying to any other post, i.e. it is an opening post.\n\nEach message contains 1 to 50 characters, consisting of uppercase, lowercase, and numeric letters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00115 Starship UAZ Advance", "description": "Constraints\n\n* -100 ≤ x, y, z ≤ 100\n* The UAZ Advance and the enemy are never in the same position.\n\nInput\n\nThe format of the input data is as follows:\n\nThe first line is the coordinates of UAZ Advance (x, y, z) (integer, half-width space delimited)\nThe second line is the coordinates of the enemy (x, y, z) (integer, half-width space delimiter)\nThe third line is the coordinates of vertex 1 of the barrier (x, y, z) (integer, half-width space delimiter)\nThe fourth line is the coordinates (x, y, z) of the vertex 2 of the barrier (integer, half-width space delimiter)\nThe fifth line is the coordinates (x, y, z) of the vertex 3 of the barrier (integer, half-width space delimiter)", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00069 Drawing Lots II", "description": "Input\n\nGiven multiple datasets. Each dataset is as follows:\n\nThe number of vertical lines n (1 <n ≤ 10) is written on the first line.\nOn the second line, the number m (1 ≤ m ≤ n) of the selected vertical line is written.\nOn the third line, the number of the hit place (☆ in the figure) is written counting from the left.\nOn the 4th line, the number of stages d (1 ≤ d ≤ 30) of Amidakuji is written.\nFrom the 5th line onward, n-1 numbers are lined up in order from the top of the Amidakuji, with 1 being the horizontal line between each vertical line and 0 being the absence, as in the sequence of numbers corresponding to the figure. is.\n\n\nThe input ends on a line with a single 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00683 A Simple Offline Text Editor", "description": "Input\n\nThe first input line contains a positive integer, which represents the number of texts the editor will edit. For each text, the input contains the following descriptions:\n\n* The first line is an initial text whose length is at most 100.\n* The second line contains an integer M representing the number of editing commands.\n* Each of the third through the M+2nd lines contains an editing command.\n\n\n\nYou can assume that every input line is in a proper format or has no syntax errors. You can also assume that every input line has no leading or trailing spaces and that just a single blank character occurs between a command name (e.g., forward) and its argument (e.g., char).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "794_F. Leha and security system", "description": "Input\n\nThe first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105) denoting amount of cells in the bank and total amount of queries respectively. \n\nThe following line contains n integers a1, a2, ..., an (1 ≤ ai < 109) denoting the amount of money in each cell initially. These integers do not contain leading zeros.\n\nEach of the following q lines has one of the formats:\n\n  * 1 l r x y (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 9, 1 ≤ y ≤ 9), denoting Leha asks to change each digit x on digit y for each element ai of the sequence for which l ≤ i ≤ r holds; \n  * 2 l r (1 ≤ l ≤ r ≤ n), denoting you have to calculate and print the sum of elements ai for which l ≤ i ≤ r holds.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "796_D. Police Stations", "description": "Input\n\nThe first line contains three integers n, k, and d (2 ≤ n ≤ 3·105, 1 ≤ k ≤ 3·105, 0 ≤ d ≤ n - 1) — the number of cities, the number of police stations, and the distance limitation in kilometers, respectively.\n\nThe second line contains k integers p1, p2, ..., pk (1 ≤ pi ≤ n) — each denoting the city each police station is located in.\n\nThe i-th of the following n - 1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the cities directly connected by the road with index i.\n\nIt is guaranteed that it is possible to travel from one city to any other city using only the roads. Also, it is possible from any city to reach a police station within d kilometers.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "877_F. Ann and Books", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000,  - 109 ≤ k ≤ 109) — the number of books and the needed difference between the number of math problems and the number of economics problems.\n\nThe second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 2), where ti is 1 if the i-th book is on math or 2 if the i-th is on economics.\n\nThe third line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), where ai is the number of problems in the i-th book.\n\nThe fourth line contains a single integer q (1 ≤ q ≤ 100 000) — the number of assumptions.\n\nEach of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) describing the i-th Ann's assumption.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00598 Operations with Finite Sets", "description": "Input\n\nInput consists of several pairs of lines difining sets and one pair of lines defining an expression. Each pair of lines for set definition includes the following.\n\nLine 1: Set name (A, B, C, D, E), number of elements in a set.\n\nLine 2: Set elements separated by blanks.\n\nPair of lines for expression definition:\n\nLine 1: R 0\n\nLine 2: Expression consisting of set names, operators and parenthesis (no blanks).\n\nNumber of sets can vary from 1 to 5. Set names can be specified in any order. Each set consists of 1-100 elements. Pair of lines for expression definition signals the end of data set. Input file includes several data sets. The number of datasets is less than 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "848_B. Rooter's Song", "description": "Input\n\nThe first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.\n\nThe following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "849_D. Rooter's Song", "description": "Input\n\nThe first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.\n\nThe following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "201_D. Brand New Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 15) — the number of words in Lesha's problem. The second line contains n space-separated words — the short description of the problem.\n\nThe third line contains a single integer m (1 ≤ m ≤ 10) — the number of problems in the Torcoder.com archive. Next m lines contain the descriptions of the problems as \"k s1 s2 ... sk\", where k (1 ≤ k ≤ 500000) is the number of words in the problem and si is a word of the problem description.\n\nAll words from all problem descriptions contain no more than 10 lowercase English letters. It is guaranteed that the total length of words in all problem descriptions does not exceed 500015.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1547_E. Air Conditioners", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases in the input. Then test cases follow. Before each test case, there is an empty line.\n\nEach test case contains three lines. The first line contains two integers n (1 ≤ n ≤ 3 ⋅ 10^5) and k (1 ≤ k ≤ n) — the length of the strip of land and the number of air conditioners respectively.\n\nThe second line contains k integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — positions of air conditioners on the strip of land.\n\nThe third line contains k integers t_1, t_2, …, t_k (1 ≤ t_i ≤ 10^9) — temperatures of air conditioners.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "776_D. The Door Problem", "description": "Input\n\nFirst line of input contains two integers n and m (2 ≤ n ≤ 105, 2 ≤ m ≤ 105) — the number of rooms and the number of switches.\n\nNext line contains n space-separated integers r1, r2, ..., rn (0 ≤ ri ≤ 1) which tell the status of room doors. The i-th room is locked if ri = 0, otherwise it is unlocked.\n\nThe i-th of next m lines contains an integer xi (0 ≤ xi ≤ n) followed by xi distinct integers separated by space, denoting the number of rooms controlled by the i-th switch followed by the room numbers that this switch controls. It is guaranteed that the room numbers are in the range from 1 to n. It is guaranteed that each door is controlled by exactly two switches.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1260_D. A Game with Traps", "description": "Input\n\nThe first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.\n\nThe second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.\n\nThen k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1368_H1. Breadboard Capacity (easy version)", "description": "Input\n\nThe first line contains three integers n, m, q (1 ≤ n, m ≤ 10^5, \\pmb{q = 0}). n and m are the number of rows and columns of the breadboard respectively. In this version q is always zero, and is only present for consistency with the harder version.\n\nThe next four lines describe initial coloring of the ports. Each character in these lines is either R or B, depending on the coloring of the respective port. The first two of these lines contain n characters each, and describe ports on the left and right sides respectively from top to bottom. The last two lines contain m characters each, and describe ports on the top and bottom sides respectively from left to right.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00263 Kongo Type", "description": "input\n\nThe input consists of one dataset. Input data is given in the following format.\n\n\nQ\ns1\ns2\n..\n..\n..\nsQ\n\n\nThe number of bit strings Q (1 ≤ Q ≤ 10000) is given in the first row. The input bit string si is given in the following Q row. Suppose the input bit string is given in hexadecimal notation (for example, 0111 1111 1000 1000 0000 0000 0000 0000 is given as 7f880000). In other words, each of the Q lines contains eight hexadecimal numbers, which are 4-bit binary numbers, without any blanks. The table below shows the correspondence between decimal numbers, binary numbers, and hexadecimal numbers.\n\n<image>\n\n\nHexadecimal letters a through f are given in lowercase.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1178_G. The Awesomest Vertex", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 2⋅ 10^5, 1 ≤ q ≤ 10^5) — the number of vertices in the tree and the number of queries, respectively.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_n (1 ≤ p_i < i), where p_i means that there is an edge between vertices i and p_i.\n\nThe third line contains n integers a_1, a_2, ..., a_n (-5000 ≤ a_i ≤ 5000), the initial values of a_i for each vertex.\n\nThe fourth line contains n integers b_1, b_2, ..., b_n (-5000 ≤ b_i ≤ 5000), the values of b_i for each vertex.\n\nEach of the next q lines describes a query. It has one of the following forms: \n\n  * 1 v x (1 ≤ v ≤ n, 1≤ x ≤ 5000). \n  * 2 v (1 ≤ v ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "949_C. Data Center Maintenance", "description": "Input\n\nThe first line of input contains three integers n, m and h (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000, 2 ≤ h ≤ 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \n\nThe second line of input contains n integers u1, u2, ..., un (0 ≤ uj < h), j-th of these numbers is an index of a maintenance hour for data center j. \n\nEach of the next m lines contains two integers ci, 1 and ci, 2 (1 ≤ ci, 1, ci, 2 ≤ n, ci, 1 ≠ ci, 2), defining the data center indices containing the data of client i.\n\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "958_D2. Hyperspace Jump (hard)", "description": "Input\n\nThe first line of the input contains two space-separated integers m and d (2 ≤ m ≤ 30 000, 1 ≤ d ≤ 5) – the number of ships and the dimension of the full underlying vector space, respectively. Next, the m subspaces are described, one after another. The i-th subspace, which corresponds to the i-th ship, is described as follows:\n\nThe first line contains one integer ki (1 ≤ ki ≤ d). Then ki lines follow, the j-th of them describing the j-th vector sent by the i-th ship. Each of the j lines consists of d space-separated integers aj, j = 1, ..., d, that describe the vector <image>; it holds that |aj| ≤ 250. The i-th subspace is the linear span of these ki vectors.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01104 Making Lunch Boxes", "description": "Input\n\nThe input consists of at most 50 datasets, each in the following format.\n\n\nn m\nb1,1...b1,m\n...\nbn,1...bn,m\n\n\nThe first line contains n, which is the number of recipes listed in the book, and m, which is the number of ingredients. Both n and m are positive integers and satisfy 1 ≤ n ≤ 500, 1 ≤ m ≤ 500 and 1 ≤ n × m ≤ 500. The following n lines contain the information for each recipe with the string of length m consisting of 0 or 1. bi,j implies whether the i-th recipe needs the j-th ingredient. 1 means the ingredient is needed for the recipe and 0 means not. Each line contains at least one 1.\n\nThe end of the input is indicated by a line containing two zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "785_B. Anton and Classes", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of time periods when Anton can attend chess classes.\n\nEach of the following n lines of the input contains two integers l1, i and r1, i (1 ≤ l1, i ≤ r1, i ≤ 109) — the i-th variant of a period of time when Anton can attend chess classes.\n\nThe following line of the input contains a single integer m (1 ≤ m ≤ 200 000) — the number of time periods when Anton can attend programming classes.\n\nEach of the following m lines of the input contains two integers l2, i and r2, i (1 ≤ l2, i ≤ r2, i ≤ 109) — the i-th variant of a period of time when Anton can attend programming classes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00497 Nails", "description": "input\n\nRead the following data from standard input.\n\n* The integers N and M are written on the first line, separated by blanks. N represents the number of nails lined up on one side of an equilateral triangle, and M represents the number of rubber bands that JOI has.\n* The following M line shows information on how to enclose a \"good equilateral triangle\" with a rubber band. The integers Ai, Bi, Xi (1 ≤ Ai <N, 1 ≤ Bi ≤ Ai, 1 ≤ Xi ≤ N --Ai) are written on the first line (1 ≤ i ≤ M), separated by blanks. .. This means that the i-th rubber band surrounds a \"good equilateral triangle\" with three nails (Ai, Bi), (Ai + Xi, Bi), (Ai + Xi, Bi + Xi) as vertices. Represent.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1359_B. New Theatre Square", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500) — the number of testcases. Then the description of t testcases follow.\n\nThe first line of each testcase contains four integers n, m, x and y (1 ≤ n ≤ 100; 1 ≤ m ≤ 1000; 1 ≤ x, y ≤ 1000) — the size of the Theatre square, the price of the 1 × 1 tile and the price of the 1 × 2 tile.\n\nEach of the next n lines contains m characters. The j-th character in the i-th line is a_{i,j}. If a_{i,j} =  \"*\", then the j-th square in the i-th row should be black, and if a_{i,j} =  \".\", then the j-th square in the i-th row should be white.\n\nIt's guaranteed that the sum of n × m over all testcases doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "792_F. Mages and Monsters", "description": "Input\n\nThe first line contains two integer numbers q and m (2 ≤ q ≤ 105, 1 ≤ m ≤ 1012) — the number of queries and the amount of mana at the beginning of every fight.\n\ni-th of each next q lines contains three numbers ki, ai and bi (1 ≤ ki ≤ 2, 1 ≤ ai, bi ≤ 106). \n\nUsing them you can restore queries this way: let j be the index of the last query of second type with positive answer (j = 0 if there were none of these). \n\n  * If ki = 1, then character learns spell with x = (ai + j) mod 106 + 1, y = (bi + j) mod 106 + 1. \n  * If ki = 2, then you have to determine if Vova is able to win the fight against monster with t = (ai + j) mod 106 + 1, h = (bi + j) mod 106 + 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "8_A. Train and Peter", "description": "Input\n\nThe input data contains three lines. The first line contains a non-empty string, whose length does not exceed 105, the string consists of lowercase Latin letters — the flags' colours at the stations on the way from A to B. On the way from B to A the train passes the same stations, but in reverse order. \n\nThe second line contains the sequence, written by Peter during the first period of wakefulness. The third line contains the sequence, written during the second period of wakefulness. Both sequences are non-empty, consist of lowercase Latin letters, and the length of each does not exceed 100 letters. Each of the sequences is written in chronological order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1367_C. Social Distance", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow.\n\nEach test case starts with a line containing two integers n and k (1 ≤ k ≤ n ≤ 2⋅ 10^5) — the number of tables in the restaurant and the minimum allowed distance between two people.\n\nThe second line of each test case contains a binary string s of length n consisting of \"0\" and \"1\" — a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant — the difference between indices of any two \"1\" is more than k.\n\nThe sum of n for all test cases in one test does not exceed 2⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00906 One-Dimensional Cellular Automaton", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nN M A B C T\nS(0, 0) S(1, 0) ... S(N − 1, 0)\n\n\nThe first line of a dataset consists of six integers, namely N, M, A, B, C and T. N is the number of cells. M is the modulus in the equation (1). A, B and C are coefficients in the equation (1). Finally, T is the time for which you should compute the states.\n\nYou may assume that 0 < N ≤ 50, 0 < M ≤ 1000, 0 ≤ A, B, C < M and 0 ≤ T ≤ 109.\n\nThe second line consists of N integers, each of which is non-negative and less than M. They represent the states of the cells at time zero.\n\nA line containing six zeros indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1149_C. Tree Generator™", "description": "Input\n\nThe first line of the input contains two integers n, q (3 ≤ n ≤ 100 000, 1 ≤ q ≤ 100 000) — the number of vertices in the tree and the number of changes to the tree description. The following line contains a description of the initial tree — a string of length 2(n-1) consisting of opening and closing parentheses.\n\nEach of the following q lines describes a single change to the description and contains two space-separated integers a_i, b_i (2 ≤ a_i, b_i ≤ 2n-3) which identify the indices of two brackets to be swapped. You can assume that the description will change after each query, and that after each change a tree can be constructed from the description.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1399_E2. Weights Division (hard version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and S (2 ≤ n ≤ 10^5; 1 ≤ S ≤ 10^{16}) — the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n-1 lines describe edges of the tree. The edge i is described as four integers v_i, u_i, w_i and c_i (1 ≤ v_i, u_i ≤ n; 1 ≤ w_i ≤ 10^6; 1 ≤ c_i ≤ 2), where v_i and u_i are vertices the edge i connects, w_i is the weight of this edge and c_i is the cost of this edge.\n\nIt is guaranteed that the sum of n does not exceed 10^5 (∑ n ≤ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01533 Acrophobia", "description": "Input\n\nThe floor information of the ninja mansion is given.\n\nFirst, W and H, which represent the size of the room, are entered on the first line, separated by spaces (2 <= W, H <= 100). A W character string is input to each of the following H lines. There are the following types of characters that represent floor information.\n\n*'.': Walkable floor\n* '#' : hole\n*'S': Where Yayoi stands at the start\n*'G': Yayoi's place to reach\n*'M': Where the scroll is located\n\n\n\n'S',' G'and'M' are walking floors. There is exactly one'S'and one'G'in the room, respectively. You may pass the goal without all the scrolls. There are a minimum of 1'M'and a maximum of 5'M'in the room.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1385_G. Columns Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of columns in the table. The second line of the test case contains n integers a_{1, 1}, a_{1, 2}, ..., a_{1, n} (1 ≤ a_{1, i} ≤ n), where a_{1, i} is the i-th element of the first row of the table. The third line of the test case contains n integers a_{2, 1}, a_{2, 2}, ..., a_{2, n} (1 ≤ a_{2, i} ≤ n), where a_{2, i} is the i-th element of the second row of the table.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00620 Line Puzzle", "description": "Input\n\nThe input consists of multiple datasets. The format of each dataset is as follows:\n\n\nn\nn x n numbers\n\n\nIndicates a puzzle given a number of n x n, the starting number is given as a negative number.\n\nWhen n is 0, it indicates the end of input.\n\nIt can be assumed that n is 3 or more and 8 or less, numbers other than the starting point are 1 or more and 50 or less, and the starting point is -50 or more and -1 or less. You may also assume the following as the nature of the puzzle being entered:\n\n* Each row and column of a given puzzle has at least one starting point.\n* The number of starting points is about 20% to 40% of the total number of numbers (n x n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "652_E. Pursuit For Artifacts", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 3·105, 0 ≤ m ≤ 3·105) — the number of islands and bridges in the game.\n\nEach of the next m lines contains the description of the bridge — three integers xi, yi, zi (1 ≤ xi, yi ≤ n, xi ≠ yi, 0 ≤ zi ≤ 1), where xi and yi are the islands connected by the i-th bridge, zi equals to one if that bridge contains an artifact and to zero otherwise. There are no more than one bridge between any pair of islands. It is guaranteed that it's possible to travel between any pair of islands.\n\nThe last line contains two integers a and b (1 ≤ a, b ≤ n) — the islands where are Johnny and the artifact-dealer respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "711_C. Coloring Trees", "description": "Input\n\nThe first line contains three integers, n, m and k (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of trees, number of colors and beauty of the resulting coloring respectively.\n\nThe second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ m), the initial colors of the trees. ci equals to 0 if the tree number i is uncolored, otherwise the i-th tree has color ci.\n\nThen n lines follow. Each of them contains m integers. The j-th number on the i-th of them line denotes pi, j (1 ≤ pi, j ≤ 109) — the amount of litres the friends need to color i-th tree with color j. pi, j's are specified even for the initially colored trees, but such trees still can't be colored.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00726 The Genome Database of All Space Life", "description": "Input\n\nThe input consists of multiple lines, each of which contains a character string s and an integer i separated by a single space.\n\nThe character string s, in the aforementioned manner, represents a genome sequence. You may assume that the length of s is between 1 and 100, inclusive. However, of course, the genome sequence represented by s may be much, much, and much longer than 100. You may also assume that each natural number in s representing the number of repetitions is at most 1,000.\n\nThe integer i is at least zero and at most one million.\n\nA line containing two zeros separated by a space follows the last input line and indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "397_E. On Changing Tree", "description": "Input\n\nThe first line contains integer n (1 ≤ n ≤ 3·105) — the number of vertices in the tree. The second line contains n - 1 integers p2, p3, ... pn (1 ≤ pi < i), where pi is the number of the vertex that is the parent of vertex i in the tree.\n\nThe third line contains integer q (1 ≤ q ≤ 3·105) — the number of queries. Next q lines contain the queries, one per line. The first number in the line is type. It represents the type of the query. If type = 1, then next follow space-separated integers v, x, k (1 ≤ v ≤ n; 0 ≤ x < 109 + 7; 0 ≤ k < 109 + 7). If type = 2, then next follows integer v (1 ≤ v ≤ n) — the vertex where you need to find the value of the number.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00349 Ant", "description": "Input\n\nThe input is given in the following format.\n\n\nW H N\nx1 y1 d1\nx2 y2 d2\n::\nxN yN dN\n\n\nThe first line gives the number of squares in the east-west direction of the chess board W, the number of squares in the north-south direction H (2 ≤ W, H ≤ 109), and the number of ants N (1 ≤ N ≤ 200000). On the next N line, the east-west position xi (1 ≤ xi ≤ W) of the i-th ant, the north-south position yi (1 ≤ yi ≤ H), the orientation letter di (\"E\" for east, south In the case of orientation, \"S\") is given. Here, the square at the northwest corner of the chess board is (1,1), the direction in which x increases is east, and the direction in which y increases is south.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01290 Queen's Case", "description": "Input\n\nThe input consists of multiple datasets. Each dataset describes a map of the palace. The first line of the input contains two integers W (1 ≤ W ≤ 30) and H (1 ≤ H ≤ 30), which indicate the width and height of the palace. The following H lines, each of which contains W characters, denote the map of the palace. \"Q\" indicates the queen, \"A\" the army,\"E\" an exit,\"#\" a wall and \".\" a floor.\n\nThe map contains exactly one \"Q\", exactly one \"A\" and at least one \"E\". You can assume both the queen and the army can reach all the exits.\n\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02164 Satake likes straight", "description": "Constraints\n\nThe input meets the following conditions:\n\n* $ 2 \\ le N \\ le 8 $\n* $ -1000 \\ le X_ {i}, Y_ {i} \\ le 1000 \\ quad (1 \\ le i \\ le N) $\n* $ (X_ {i}, Y_ {i}) \\ ne (0, 0) \\ quad (1 \\ le i \\ le N) $\n* $ (X_ {i}, Y_ {i}) \\ ne (X_ {j}, Y_ {j}) \\ quad (i \\ ne j) $\n* All inputs are integers\n\nInput\n\nThe input is given in the following format:\n\n\n$ N $\n$ X_ {1} $ $ Y_ {1} $\n$ \\ vdots $\n$ X_ {N} $ $ Y_ {N} $\n\n\nThe input consists of $ N + 1 $ lines.\nThe $ 1 $ line is given $ N $, which represents the number of stores to shop.\nThe $ N $ line starting from the $ 2 $ line is given the coordinates $ X_ {i}, Y_ {i} $ of the store where you shop, separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00883 Infected Land", "description": "Input\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing a single zero. Each dataset is formatted as follows.\n\nn\na11 a12 ... a1n\na21 a22 ... a2n\n...\nan1 an2 ... ann\n\n\nHere, n is the size of the grid. That means that the grid is comprised of n × n areas. You may assume 1 ≤ n ≤ 5. The rest of the dataset consists of n lines of n letters. Each letter aij specifies the state of the area at the beginning: '#' for infection, '.' for free of virus, and '@' for the initial location of the vehicle. The only character that can appear in a line is '#', '.', or '@'. Among n × n areas, there exists exactly one area which has '@'.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "855_D. Rowena Ravenclaw's Diadem", "description": "Input\n\nFirst line of input contains the number n (1 ≤ n ≤ 105), the number of objects. \n\nNext n lines contain two integer parenti and typei ( - 1 ≤ parenti < i parenti ≠ 0,  - 1 ≤ typei ≤ 1), implying that the i-th object has the parent parenti. (If typei = 0, this implies that the object i is a special case of object parenti. If typei = 1, this implies that the object i is a part of object parenti). In case the i-th object has no parent, both parenti and typei are -1.\n\nNext line contains an integer q (1 ≤ q ≤ 105), the number of queries. \n\nNext q lines each represent a query having three space separated integers typei, ui, vi (1 ≤ typei ≤ 2, 1 ≤ u, v ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1093_E. Intersection of Permutations", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the number of elements in both permutations and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — permutation a. It is guaranteed that each value from 1 to n appears in a exactly once.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — permutation b. It is guaranteed that each value from 1 to n appears in b exactly once.\n\nEach of the next m lines contains the description of a certain query. These are either:\n\n  * 1~l_a~r_a~l_b~r_b (1 ≤ l_a ≤ r_a ≤ n, 1 ≤ l_b ≤ r_b ≤ n); \n  * 2~x~y (1 ≤ x, y ≤ n, x ≠ y).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01094 Look for the Winner!", "description": "Input\n\nThe input consists of at most 1500 datasets, each consisting of two lines in the following format.\n\nn\nc1 c2 … cn\n\n\nn in the first line represents the number of votes, and is a positive integer no greater than 100. The second line represents the n votes, separated by a space. Each ci (1 ≤ i ≤ n) is a single uppercase letter, i.e. one of 'A' through 'Z'. This represents the election candidate for which the i-th vote was cast. Counting shall be done in the given order from c1 to cn.\n\nYou should assume that at least two stand as candidates even when all the votes are cast for one candidate.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01106 Folding a Ribbon", "description": "Input\n\nThe input consists of at most 100 datasets, each being a line containing three integers.\n\n\nn i j\n\n\nThe three integers mean the following: The ribbon is folded n times in a certain order; then, the i-th layer of the folded ribbon, counted from the top, is marked; when the ribbon is unfolded completely restoring the original state, the marked part is the j-th part of the ribbon separated by creases, counted from the left. Both i and j are one-based, that is, the topmost layer is the layer 1 and the leftmost part is numbered 1. These integers satisfy 1 ≤ n ≤ 60, 1 ≤ i ≤ 2n, and 1 ≤ j ≤ 2n.\n\nThe end of the input is indicated by a line with three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00717 Polygonal Line Search", "description": "Input\n\nThe input consists of multiple datasets. The end of the input is indicated by a line which contains a zero.\n\nA dataset is given as follows.\n\n> n\n>  Polygonal line0\n>  Polygonal line1\n>  Polygonal line2\n>  ...\n>  Polygonal linen\n\nn is the number of polygonal lines for the object of search on xy-plane. n is an integer, and 1 <= n <= 50. Polygonal line0 indicates the template.\n\nA polygonal line is given as follows.\n\n> m\n>  x1 y1\n>  x2 y2\n>  ...\n>  xm ym\n>\n\nm is the number of the vertices of a polygonal line (3 <= m <= 10). xi and yi, separated by a space, are the x- and y-coordinates of a vertex, respectively (-10000 < xi < 10000, -10000 <yi < 10000).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "207_D1. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "207_D5. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "207_D4. The Beaver's Problem - 3", "description": "Input\n\nThe first line contains integer id (0 ≤ id ≤ 106) — the document identifier. The second line contains the name of the document. The third and the subsequent lines contain the text of the document. It is guaranteed that the size of any given document will not exceed 10 kilobytes.\n\nThe tests for this problem are divided into 10 groups. Documents of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3-rd to the 10-th are roughly sorted by the author in ascending order of difficulty (these groups contain documents which aren't present in the training set).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "245_A. System Administrator", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — the number of commands Polycarpus has fulfilled. Each of the following n lines contains three integers — the description of the commands. The i-th of these lines contains three space-separated integers ti, xi, yi (1 ≤ ti ≤ 2; xi, yi ≥ 0; xi + yi = 10). If ti = 1, then the i-th command is \"ping a\", otherwise the i-th command is \"ping b\". Numbers xi, yi represent the result of executing this command, that is, xi packets reached the corresponding server successfully and yi packets were lost.\n\nIt is guaranteed that the input has at least one \"ping a\" command and at least one \"ping b\" command.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "978_F. Mentors", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ min(2 ⋅ 10^5, (n ⋅ (n - 1))/(2))) — total number of programmers and number of pairs of programmers which are in a quarrel.\n\nThe second line contains a sequence of integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 10^{9}), where r_i equals to the skill of the i-th programmer.\n\nEach of the following k lines contains two distinct integers x, y (1 ≤ x, y ≤ n, x ≠ y) — pair of programmers in a quarrel. The pairs are unordered, it means that if x is in a quarrel with y then y is in a quarrel with x. Guaranteed, that for each pair (x, y) there are no other pairs (x, y) and (y, x) in the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00617 Simple GUI Application", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format:\n\n\nn\nTag structure\nx1 y1\nx2 y2\n..\n..\n..\nxn yn\n\n\nn is an integer indicating the number of touched points. The tag structure is a one-line character string that does not include spaces. xi and yi represent the x-coordinate and y-coordinate of the point touched at the i-th (the coordinate axes are defined in the above figure).\n\nYou can assume that n ≤ 100 and the length of the string in the tag structure ≤ 1000. Also, it may be assumed that the x-coordinate and y-coordinate given by the input are 0 or more and 10,000 or less.\n\nWhen n is 0, it is the end of input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "644_C. Hostname Aliases", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of page queries. Then follow n lines each containing exactly one address. Each address is of the form http://<hostname>[/<path>], where:\n\n  * <hostname> consists of lowercase English letters and dots, there are no two consecutive dots, <hostname> doesn't start or finish with a dot. The length of <hostname> is positive and doesn't exceed 20. \n  * <path> consists of lowercase English letters, dots and slashes. There are no two consecutive slashes, <path> doesn't start with a slash and its length doesn't exceed 20. \n\n\n\nAddresses are not guaranteed to be distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1120_F. Secret Letters", "description": "Input\n\nThe first line contains three integers n, c, d (1 ≤ n ≤ 10^5, 1 ≤ c ≤ 10^2, 1 ≤ d ≤ 10^8) — the number of letters, the cost of storing a letter for one time unit at Wise R's den and the cost of delivering a letter via Friendly O.\n\nThe next n describe the events. The i-th of them contains an integer t_i and a character p_i (0 ≤ t_i ≤ 10^6, p_i is either W or P) — the time the i-th event happens and the person the event happens to.\n\nThe last line contains a single integer t_{n + 1} (0 ≤ t_{n+1} ≤ 10^6) — the time when everybody comes to Wise R for a tea and takes all remaining letters. \n\nIt is guaranteed that t_i < t_{i + 1} for all i from 1 to n.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1369_C. RationalLee", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nNext 3t lines contain test cases — one per three lines.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ n) — the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the integers Lee has.\n\nThe third line contains k integers w_1, w_2, …, w_k (1 ≤ w_i ≤ n; w_1 + w_2 + … + w_k = n) — the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of n over test cases is less than or equal to 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1043_E. Train Hard, Win Easy", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 300 000, 0 ≤ m ≤ 300 000) — the number of participants and the number of pairs of people who will not write a contest together.\n\nEach of the next n lines contains two integers x_i and y_i (-10^9 ≤ x_i, y_i ≤ 10^9) — the scores which will the i-th competitor get on the first problem and on the second problem. It is guaranteed that there are no two people having both x_i and y_i same.\n\nEach of the next m lines contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — indices of people who don't want to write a contest in one team. Each unordered pair of indices will appear at most once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00382 Taxi", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$\n$s_1$\n$s_2$\n$...$\n$s_N$\n\n\nThe first line provides the number of taxi parking areas $N$ ($1 \\leq N \\leq 300,000$). Each of the subsequent $N$ lines provides information on the customers queueing in the $i$-th taxi parking area in the following format:\n\n\n$M$ $c_1$ $c_2$ ... $c_M$\n\n\nThe first integer $M$ ($1 \\leq M \\leq 300,000$) indicates the number of customers in the queue, and the subsequent array of integers $c_j$ ($1 \\leq c_j \\leq 10,000$) indicates the fare the $j$-th customer in the queue is willing to pay. The total number of customers in the taxi stand is equal to or less than $300,000$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01981 Change of the Era Name", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is represented in the following format.\n\n> g y m d\n\ng is a character string representing the era name, and g = HEISEI holds. y, m, and d are integers that represent the year, month, and day, respectively. 1 ≤ y ≤ 100, 1 ≤ m ≤ 12, 1 ≤ d ≤ 31 holds.\n\nDates that do not exist in the Japanese calendar, such as February 30, are not given as a dataset. When converted correctly as the Japanese calendar, the date on which the era before Heisei must be used is not given as a data set.\n\nThe end of the input is represented by a line consisting of only one'#'. The number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "767_B. The Queue", "description": "Input\n\nThe first line contains three integers: the point of time when the receptionist begins to work ts, the point of time when the receptionist stops working tf and the time the receptionist spends on each visitor t. The second line contains one integer n — the amount of visitors (0 ≤ n ≤ 100 000). The third line contains positive integers in non-decreasing order — the points of time when the visitors arrive to the passport office.\n\nAll times are set in minutes and do not exceed 1012; it is guaranteed that ts < tf. It is also guaranteed that Vasya can arrive at the passport office at such a point of time that he would be served by the receptionist.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1163_F. Indecisive Taxi Fee", "description": "Input\n\nThe first line contains three integers n, m and q (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m, q ≤ 2 ⋅ 10^5) — the number of towns, the number of roads, and the number of plans that Kuro has drafted respectively.\n\nThe i-th of the next m contains three integers u_i, v_i and w_i (1 ≤ u_i, v_i ≤ n, 1 ≤ w_i ≤ 10^9, u_i ≠ v_i) — two endpoints and the original price of the i-th road.\n\nIt is guaranteed, that there is at least one way to travel from town 1 to town n using these m bidirectional roads.\n\nEach of the next q lines contains two integers t_j and x_j (1 ≤ t_j ≤ m, 1 ≤ x_j ≤ 10^9) — the index of the road Kuro has planned to change and its new price respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00973 Fair Chocolate-Cutting", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$n$\n$x_1$ $y_1$\n...\n$x_n$ $y_n$\n\n\nThe first line has an integer $n$, which is the number of vertices of the given polygon. Here, $n$ is between 3 and 5000, inclusive. Each of the following $n$ lines has two integers $x_i$ and $y_i$, which give the coordinates ($x_i, y_i$) of the $i$-th vertex of the polygon, in counterclockwise order. Both $x_i$ and $y_i$ are between 0 and 100 000, inclusive.\n\nThe polygon is guaranteed to be simple and convex. In other words, no two edges of the polygon intersect each other and interior angles at all of its vertices are less than $180^\\circ$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "500_B. New Year Permutation", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300) — the size of the permutation p.\n\nThe second line contains n space-separated integers p1, p2, ..., pn — the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation.\n\nNext n lines describe the matrix A. The i-th line contains n characters '0' or '1' and describes the i-th row of A. The j-th character of the i-th line Ai, j is the element on the intersection of the i-th row and the j-th column of A. It is guaranteed that, for all integers i, j where 1 ≤ i < j ≤ n, Ai, j = Aj, i holds. Also, for all integers i where 1 ≤ i ≤ n, Ai, i = 0 holds.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01304 Heian-Kyo Walking", "description": "Input\n\nThe first line of input is given the coordinates of the secret location (gx, gy). All of these are integers between 1 and 15 and are given separated by a single space. The second line is given the number of sections where Actinidia polygama is falling p (0 ≤ p ≤ 100), and the following lines p are given one section for each line where Actinidia polygama is falling. The p sections are different from each other. One interval is expressed in the form of x1 y1 x2 y2 and is a line segment of length 1 parallel to the x-axis or y-axis, with (x1, y1) and (x2, y2) as endpoints. x1 and x2 are in the range [0, gx] and y1 and y2 are in the range [0, gy].", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1475_D. Cleaning the Phone", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 10^9) — the number of applications on Polycarp's phone and the number of memory units to be freed.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the number of memory units used by applications.\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 2) — the convenience points of each application.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "358_D. Dima and Hares", "description": "Input\n\nThe first line of the input contains integer n (1 ≤ n ≤ 3000) — the number of hares. Then three lines follow, each line has n integers. The first line contains integers a1 a2 ... an. The second line contains b1, b2, ..., bn. The third line contains c1, c2, ..., cn. The following limits are fulfilled: 0 ≤ ai, bi, ci ≤ 105.\n\nNumber ai in the first line shows the joy that hare number i gets if his adjacent hares are both hungry. Number bi in the second line shows the joy that hare number i radiates if he has exactly one full adjacent hare. Number сi in the third line shows the joy that hare number i radiates if both his adjacent hares are full.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01438 Butterfly", "description": "Input\n\nThe input consists of a sequence of datasets. Each dataset has the following format:\n\nN\nGuy1\n...\nGuyN\n\n\nThe first line of the input contains an integer N (1 ≤ N ≤ 100), the number of guys. Then there come the descriptions of guys. Each description is given in this format:\n\nM L\nS1 E1\n...\nSM EM\n\n\nThe first line contains two integers Mi (1 ≤ Mi ≤ 16) and Li (1 ≤ Li ≤ 100,000,000), the number of dates set for the guy and the satisfaction she would get from him respectively. Then M lines follow. The i-th line contains two integers Si and Ei (6 ≤ Si < Ei ≤ 22), the starting and ending time of the i-th date.\n\nThe end of input is indicated by N = 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00255 Salary for a Plumber", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by a single zero line. Each dataset is given in the following format.\n\n\nn\np1 ... pn\nj1 ... jn-1\n\n\nThe number of pipes n (2 ≤ n ≤ 65000) is given in the first line. The second line consists of n integers separated by a single space. pi (1 ≤ pi ≤ 1000) indicates the length of the i-th pipe. The third line consists of n-1 integers separated by one space. ji (1 ≤ ji ≤ 1000) indicates the length of the i-th joint.\n\nThe i-th joint can connect only the i-th and i + 1-th pipes. The length of the connected pipe is pi + ji + pi + 1.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1368_G. Shifting Dominoes", "description": "Input\n\nThe first line contains two positive integers n and m (nm ≤ 2 ⋅ 10^5) — height and width of the board respectively.\n\nThe next n lines describe the tiling of the board, row by row from top to bottom. Each of these lines contains m characters, describing the cells in the corresponding row left to right. Each character is one of U, D, L, or R, meaning that the cell is covered with a top, bottom, left, or right half of a domino respectively.\n\nIt is guaranteed that the described tiling is valid, that is, each half-domino has a counterpart in the relevant location. In particular, since tiling is possible, the number of cells in the board is even.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "774_L. Bars", "description": "Input\n\nThe first line contains two integers n and k (2 ≤ n ≤ 200 000, 2 ≤ k ≤ n) — the length of the workday in minutes and the number of chocolate bars, which Polycarp has in the beginning of the workday.\n\nThe second line contains the string with length n consisting of zeros and ones. If the i-th symbol in the string equals to zero, Polycarp has no important things to do in the minute i and he can eat a chocolate bar. In the other case, Polycarp is busy in the minute i and can not eat a chocolate bar. It is guaranteed, that the first and the last characters of the string are equal to zero, and Polycarp always eats chocolate bars in these minutes.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "513_D1. Constrained Tree", "description": "Input\n\nThe first line of input contains two integers n and c. The next c lines contain 2 integers ai, bi (1 ≤ ai, bi ≤ n) and either \"LEFT\" or \"RIGHT\" denoting whether b is in the subtree rooted at ai's left child or in the subtree rooted at ai's right child.\n\nThe problem consists of multiple subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem D1 (9 points), the constraints 1 ≤ n ≤ 100, 1 ≤ c ≤ 50 will hold. \n  * In subproblem D2 (8 points), the constraints 1 ≤ n ≤ 1000000, 1 ≤ c ≤ 100000 will hold.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00810 Super Star", "description": "Input\n\nThe input consists of multiple data sets. Each data set is given in the following format.\n\n\nn\nx1 y1 z1\nx2 y2 z2\n...\nxn yn zn\n\n\nThe first line of a data set contains an integer n, which is the number of points. It satisfies the condition 4 ≤ n ≤ 30.\n\nThe locations of n points are given by three-dimensional orthogonal coordinates: (xi, yi, zi) (i = 1,..., n). Three coordinates of a point appear in a line, separated by a space character.\n\nEach value is given by a decimal fraction, and is between 0.0 and 100.0 (both ends inclusive). Points are at least 0.01 distant from each other.\n\nThe end of the input is indicated by a line containing a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "60_B. Serial Time!", "description": "Input\n\nThe first line contains three numbers k, n, m (1 ≤ k, n, m ≤ 10) which are the sizes of the plate. Then follow k rectangles consisting of n lines each containing m characters '.' or '#', which represents the \"layers\" of the plate in the order from the top to the bottom. The rectangles are separated by empty lines (see the samples). The last line contains x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) which are the tap's coordinates. x is the number of the line and y is the number of the column. Lines of each layer are numbered from left to right by the integers from 1 to n, columns of each layer are numbered from top to bottom by the integers from 1 to m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "228_E. The Road to Berland is Paved With Good Intentions", "description": "Input\n\nThe first line contains two space-separated integers n, m <image> — the number of cities and roads in Berland, correspondingly. Next m lines contain the descriptions of roads in Berland: the i-th line contains three space-separated integers ai, bi, ci (1 ≤ ai, bi ≤ n; ai ≠ bi; 0 ≤ ci ≤ 1). The first two integers (ai, bi) are indexes of the cities that are connected by the i-th road, the third integer (ci) equals 1, if the road was initially asphalted, and 0 otherwise. \n\nConsider the cities in Berland indexed from 1 to n, and the roads indexed from 1 to m. It is guaranteed that between two Berlandian cities there is not more than one road.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01534 Anipero 2012", "description": "Input\n\nSatisfaction information for the expected song list of the live is input.\n\nOn the first line, the number of songs n (1 <= n <= 50) sung live and the number m (0 <= m <= 50) of new psyllium that 2D has at the start of the live are separated by spaces. Is entered in. In the following n lines, the information of one song is input line by line. The i-th (1 <= i <= n) song information is\n\n* Satisfaction level when one level 2 psyllium is shaken for song i ai\n* Satisfaction level bi when swinging one level 1 psyllium for song i\n* Satisfaction ci when no psyllium is shaken in song i\n\n\n\nAre entered separated by spaces (-100 <= ai, bi, ci <= 100).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01624 Ononokomachi's Edit War", "description": "Input\n\nThe input consists of multiple datasets. Each dataset represents the number of edits and formulas determined by the servant in one game, and the format is as follows.\n\n\nN Expression\n\n\nN is the number of edits decided by the servant, and 1 ≤ N ≤ 11 can be assumed. Expression is the formula decided by the servant, \"(\", \")\", \"*\", \"+\", It is given as a non-empty string of 7 characters or less, consisting of only 18 characters of \"-\", \"&\", \"^\", \"|\", \"0\"-\"9\". It can be assumed that only valid formulas are given, not invalid formulas.\n\nAt the end of the input,\n\n\n0 #\n\n\nRepresented by.\n\nIt can be assumed that the number of data sets is 99 or less.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1006_E. Military Problem", "description": "Input\n\nThe first line of the input contains two integers n and q (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5) — the number of officers in Berland army and the number of queries.\n\nThe second line of the input contains n - 1 integers p_2, p_3, ..., p_n (1 ≤ p_i < i), where p_i is the index of the direct superior of the officer having the index i. The commander has index 1 and doesn't have any superiors.\n\nThe next q lines describe the queries. The i-th query is given as a pair (u_i, k_i) (1 ≤ u_i, k_i ≤ n), where u_i is the index of the officer which starts spreading a command, and k_i is the index of the required officer in the command spreading sequence.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00321 Related Products", "description": "Input\n\nThe input is given in the following format.\n\n\nN F\ninfo1\ninfo2\n::\ninfoN\n\n\nThe first line gives the number of pieces of information N (1 ≤ N ≤ 100) and the reference number F (1 ≤ F ≤ 100) of the items bought together. The following N lines are given information on the products bought together. Information about the products bought together infoi is given in the following format.\n\n\nM item1 item2 ... itemM\n\n\nM (1 ≤ M ≤ 10) indicates how many products this information contains. itemj is the name of the item bought in this purchase and is a string of 1 to 30 length consisting of only lowercase letters. The same product is never given in infoi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "216_D. Spider's Web", "description": "Input\n\nThe first line contains integer n (3 ≤ n ≤ 1000) — the number of main threads.\n\nThe i-th of following n lines describe the bridges located in the i-th sector: first it contains integer ki (1 ≤ ki ≤ 105) equal to the number of bridges in the given sector. Then follow ki different integers pij (1 ≤ pij ≤ 105; 1 ≤ j ≤ ki). Number pij equals the distance from the attachment points of the j-th bridge of the i-th sector to the center of the web.\n\nIt is guaranteed that any two bridges between adjacent sectors are attached at a different distance from the center of the web. It is guaranteed that the total number of the bridges doesn't exceed 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01650 Stack Maze", "description": "Input\n\nThe input contains a sequence of datasets. The end of the input is indicated by a line containing two zeroes. Each dataset is formatted as follows.\n\n\nH W\nC_{11} C_{12} ... C_{1W}\nC_{21} C_{22} ... C_{2W}\n...\nC_{H1} C_{H2} ... C_{HW}\n\n\nHere, H and W are the height and width of the grid. You may assume 1 \\leq W, H \\leq 50. The rest of the datasets consists of H lines, each of which is composed of W letters. Each letter C_{ij} specifies the type of the cell (i, j) as described before. It is guaranteed that C_{11} and C_{WH} are never `#`.\n\nYou may also assume that each lowercase or uppercase alphabet appear at most 10 times in each dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "438_D. The Child and Sequence", "description": "Input\n\nThe first line of input contains two integer: n, m (1 ≤ n, m ≤ 105). The second line contains n integers, separated by space: a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109) — initial value of array elements.\n\nEach of the next m lines begins with a number type <image>. \n\n  * If type = 1, there will be two integers more in the line: l, r (1 ≤ l ≤ r ≤ n), which correspond the operation 1. \n  * If type = 2, there will be three integers more in the line: l, r, x (1 ≤ l ≤ r ≤ n; 1 ≤ x ≤ 109), which correspond the operation 2. \n  * If type = 3, there will be two integers more in the line: k, x (1 ≤ k ≤ n; 1 ≤ x ≤ 109), which correspond the operation 3.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "638_D. Three-dimensional Turtle Super Computer ", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n, m, k ≤ 100) — the dimensions of the Super Computer. \n\nThen n blocks follow, describing the current state of the processes. The blocks correspond to the layers of the Super Computer in the order from 1 to n. Each block consists of m lines, k characters in each — the description of a layer in the format of an m × k table. Thus, the state of the CPU (x, y, z) is corresponded to the z-th character of the y-th line of the block number x. Character \"1\" corresponds to a working CPU and character \"0\" corresponds to a malfunctioning one. The blocks are separated by exactly one empty line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1249_E. By Elevator or Stairs?", "description": "Input\n\nThe first line of the input contains two integers n and c (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ c ≤ 1000) — the number of floors in the building and the time overhead for the elevator rides.\n\nThe second line of the input contains n - 1 integers a_1, a_2, ..., a_{n-1} (1 ≤ a_i ≤ 1000), where a_i is the time required to go from the i-th floor to the (i+1)-th one (and from the (i+1)-th to the i-th as well) using the stairs.\n\nThe third line of the input contains n - 1 integers b_1, b_2, ..., b_{n-1} (1 ≤ b_i ≤ 1000), where b_i is the time required to go from the i-th floor to the (i+1)-th one (and from the (i+1)-th to the i-th as well) using the elevator.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00381 Transporter", "description": "Input\n\nThe input is given in the following format.\n\n\n$N$\n$s$\n$t$\n\n\nThe first line provides the number of the stars on which the warp machine is located $N$ ($2 \\leq N \\leq 100,000$). The second line provides a string $s$ of length $N$, each component of which represents the letter inscribed on the entrance of the machine on the star. By the same token, the third line provides a string $t$ of length $N$ consisting of the letters inscribed on the exit of the machine. Two strings $s$ and $t$ consist all of lower-case alphabetical letters, and the $i$-th letter of these strings corresponds respectively to the entrance and exit of Star $i$ machine.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00667 11224111122411", "description": "Input\n\nThe input consists of multiple cases.\nEach case is given in the following format.\n\n\nstring\n\n\nThe end of the input is given by the line where the input consists of \"#\"\n\nstring contains up to 100,000 numbers between 0 and 9.\nNo more than 50 inputs have a string length greater than 10,000.\n\n\nThe test case file size is guaranteed to be 5MB or less.\nAlso, the number of test cases does not exceed 100.\n\n\nThe characters that can be entered with each number key are as shown in the table below.\n\nNumbers | Enterable characters\n--- | ---\n1 | Aiueo\n2 | Kakikukeko\n3 |\n4 |\n5 | What is it?\n6 | Hahifuheho\n7 | Mamimumemo\n8 | Yayuyo\n9 | Larry Lero\n0 | Won", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "405_E. Graph Cutting", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 105), the number of vertices and the number of edges in the graph. The next m lines contain the description of the graph's edges. The i-th line contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi), the numbers of the vertices connected by the i-th edge. It is guaranteed that the given graph is simple (without self-loops and multi-edges) and connected.\n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "406_C. Graph Cutting", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 105), the number of vertices and the number of edges in the graph. The next m lines contain the description of the graph's edges. The i-th line contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi), the numbers of the vertices connected by the i-th edge. It is guaranteed that the given graph is simple (without self-loops and multi-edges) and connected.\n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "887_D. Ratings and Reality Shows", "description": "Input\n\nIn first line there are 7 positive integers n, a, b, c, d, start, len (1 ≤ n ≤ 3·105, 0 ≤ start ≤ 109, 1 ≤ a, b, c, d, len ≤ 109), where n is a number of fashion shows and photo shoots, a, b, c and d are rating changes described above, start is an initial rating of model and len is a duration of influence of talk show.\n\nIn next n lines descriptions of events are given. Each of those lines contains two integers ti and qi (1 ≤ ti ≤ 109, 0 ≤ q ≤ 1) — moment, in which event happens and type of this event. Type 0 corresponds to the fashion show and type 1 — to photo shoot. \n\nEvents are given in order of increasing ti, all ti are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00224 Bicycle Diet", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by four 0 lines. Each dataset is given in the following format:\n\n\nm n k d\nc1 c2 ... cm\ns1 t1 e1\ns2 t2 e2\n::\nsd td ed\n\n\nNumber of cake shops m (1 ≤ m ≤ 6), number of landmarks n (1 ≤ n ≤ 100), calories burned per unit distance k (1 ≤ k ≤ 5), distance data on the first line The total number d (5 ≤ d ≤ 256) is given.\n\nThe second line gives the calories ci (1 ≤ ci ≤ 100) of the cake you buy at each cake shop.\n\nThe following d line is given the distance data si, ti, ei (1 ≤ ei ≤ 20) between the i-th two points.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1282_E. The Cake Is a Lie", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then there are t independent sets of input data.\n\nThe first line of each set consists of a single integer n (3 ≤ n ≤ 10^5) — the number of vertices in the cake.\n\nThe following n - 2 lines describe the numbers of the pieces vertices: each line consists of three different integers a, b, c (1 ≤ a, b, c ≤ n) — the numbers of the pieces vertices of cake given in random order. The pieces are given in random order.\n\nIt is guaranteed that the answer to each of the tests exists. It is also guaranteed that the sum of n for all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1254_A. Feeding Chicken", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 ≤ T ≤ 2 ⋅ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains three integers r, c and k (1 ≤ r, c ≤ 100, 1 ≤ k ≤ 62), representing the size of Long's farm and the number of chickens Long has. \n\nEach of the next r lines contains c characters, each is either \".\" or \"R\", representing an empty cell or a cell with rice. It is guaranteed that the number of chickens is not greater than the number of cells with rice on the farm.\n\nIt is guaranteed that the sum of r ⋅ c over all test cases does not exceed 2 ⋅ 10^4.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01296 Futon", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is given in the following format:\n\nn\nx1 y1 dir1\n...\nxn yn dirn\n\n\nn is the number of futons (1 ≤ n ≤ 20,000); (xi, yi) denotes the coordinates of the left-bottom corner of the i-th futon; diri is either 'x' or 'y' and denotes the direction of the i-th futon, where 'x' means the futon is put horizontally and 'y' means vertically. All coordinate values are non-negative integers not greater than 109 .\n\nIt is guaranteed that no two futons in the input overlap each other.\n\nThe input is terminated by a line with a single zero. This is not part of any dataset and thus should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "28_A. Bender Problem", "description": "Input\n\nThe first line contains two positive integers n and m (4 ≤ n ≤ 500, 2 ≤ m ≤ 500, n is even) — the amount of nails and the amount of rods. i-th of the following n lines contains a pair of integers, denoting the coordinates of the i-th nail. Nails should be connected in the same order as they are given in the input. The last line contains m integers — the lenghts of the rods. All coordinates do not exceed 104 by absolute value. Lengths of the rods are between 1 and 200 000. No rod can be used twice. It is guaranteed that all segments of the given polyline are parallel to coordinate axes. No three consecutive nails lie on the same line.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00266 Izua Dictionary", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by a single zero line. Each dataset is given in the following format.\n\n\nN\nR\ns1 t1\ns2 t2\n::\nsR tR\n\n\nThe first line is given the number of characters that make up the alphabet N (1 ≤ N ≤ 100000), and the second line is given the number of times R (0 ≤ R ≤ 50) to have the characters replaced. The following R line is given the set of character positions to be swapped. si and ti (1 ≤ si <ti ≤ N) represent the i-th swapping of the si and ti characters counting from the beginning. si and ti are separated by a single space.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1255_D. Feeding Chicken", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 ≤ T ≤ 2 ⋅ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains three integers r, c and k (1 ≤ r, c ≤ 100, 1 ≤ k ≤ 62), representing the size of Long's farm and the number of chickens Long has. \n\nEach of the next r lines contains c characters, each is either \".\" or \"R\", representing an empty cell or a cell with rice. It is guaranteed that the number of chickens is not greater than the number of cells with rice on the farm.\n\nIt is guaranteed that the sum of r ⋅ c over all test cases does not exceed 2 ⋅ 10^4.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "534_E. Berland Local Positioning System", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 2·105) — the number of stops.\n\nThe second line contains n integers (1 ≤ ai ≤ 109) — the distance from the i-th stop to the central square. The numbers in the second line go in the increasing order.\n\nThe third line contains integer m (1 ≤ m ≤ 4·105) — the number of stops the bus visited on some segment of the path.\n\nThe fourth line contains m integers (1 ≤ bi ≤ n) — the sorted list of numbers of the stops visited by the bus on the segment of the path. The number of a stop occurs as many times as it was visited by a bus.\n\nIt is guaranteed that the query corresponds to some segment of the path.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "999_F. Cards and Joy", "description": "Input\n\nThe first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.\n\nThe second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.\n\nThe third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.\n\nThe fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1515_H. Phoenix and Bits", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ q ≤ 10^5) — the number of integers and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i < 2^{20}) — the integers that Phoenix starts with.\n\nThe next q lines contain the queries. For each query, the first integer of each line is t (1 ≤ t ≤ 4) — the type of query.\n\nIf t ∈ \\{1, 2, 3\\}, then three integers l_i, r_i, and x_i will follow (0 ≤ l_i, r_i, x_i < 2^{20}; l_i ≤ r_i).\n\nOtherwise, if t=4, two integers l_i and r_i will follow (0 ≤ l_i ≤ r_i < 2^{20}).\n\nIt is guaranteed that there is at least one query where t=4.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1328_D. Carousel", "description": "Input\n\nThe input contains one or more test cases.\n\nThe first line contains one integer q (1 ≤ q ≤ 10^4) — the number of test cases in the test. Then q test cases follow. One test case is given on two lines.\n\nThe first line of the test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of figures in the carousel. Figures are numbered from 1 to n in order of carousel moving. Assume that after the n-th figure the figure 1 goes.\n\nThe second line of the test case contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 2 ⋅ 10^5), where t_i is the type of the animal of the i-th figure.\n\nThe sum of n over all test cases does not exceed 2⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1333_B. Kind Anton", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 10000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of arrays.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-1 ≤ a_i ≤ 1) — elements of array a. There can be duplicates among elements.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (-10^9 ≤ b_i ≤ 10^9) — elements of array b. There can be duplicates among elements.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "418_B. Cunning Gena", "description": "Input\n\nThe first line contains three integers n, m and b (1 ≤ n ≤ 100; 1 ≤ m ≤ 20; 1 ≤ b ≤ 109) — the number of Gena's friends, the number of problems and the cost of a single monitor.\n\nThe following 2n lines describe the friends. Lines number 2i and (2i + 1) contain the information about the i-th friend. The 2i-th line contains three integers xi, ki and mi (1 ≤ xi ≤ 109; 1 ≤ ki ≤ 109; 1 ≤ mi ≤ m) — the desired amount of money, monitors and the number of problems the friend can solve. The (2i + 1)-th line contains mi distinct positive integers — the numbers of problems that the i-th friend can solve. The problems are numbered from 1 to m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "596_E. Wilbur and Strings", "description": "Input\n\nThe first line of the input consists of three integers n, m, and q (1 ≤ n, m, q ≤ 200) — the dimensions of the table and the number of strings to process, respectively.\n\nEach of the next n lines contains m digits from 0 and 9 giving the table itself.\n\nThen follow 10 lines. The i-th of them contains the values ai - 1 and bi - 1 ( - 200 ≤ ai, bi ≤ 200), i.e. the vector that Wilbur uses to make a move from the square with a digit i - 1 in it.\n\nThere are q lines that follow. The i-th of them will contain a string si consisting only of digits from 0 to 9. It is guaranteed that the total length of these q strings won't exceed 1 000 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "832_B. Petya and Exam", "description": "Input\n\nThe first line contains a string with length from 1 to 26 consisting of distinct lowercase English letters. These letters are good letters, all the others are bad.\n\nThe second line contains the pattern — a string s of lowercase English letters, characters \"?\" and \"*\" (1 ≤ |s| ≤ 105). It is guaranteed that character \"*\" occurs in s no more than once.\n\nThe third line contains integer n (1 ≤ n ≤ 105) — the number of query strings.\n\nn lines follow, each of them contains single non-empty string consisting of lowercase English letters — a query string.\n\nIt is guaranteed that the total length of all query strings is not greater than 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "225_A. Dice Tower", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of dice in the tower.\n\nThe second line contains an integer x (1 ≤ x ≤ 6) — the number Bob sees at the top of the tower. Next n lines contain two space-separated integers each: the i-th line contains numbers ai, bi (1 ≤ ai, bi ≤ 6; ai ≠ bi) — the numbers Bob sees on the two sidelong faces of the i-th dice in the tower.\n\nConsider the dice in the tower indexed from top to bottom from 1 to n. That is, the topmost dice has index 1 (the dice whose top face Bob can see). It is guaranteed that it is possible to make a dice tower that will look as described in the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "63_A. Sinking Ship", "description": "Input\n\nThe first line contains an integer n, which is the number of people in the crew (1 ≤ n ≤ 100). Then follow n lines. The i-th of those lines contains two words — the name of the crew member who is i-th in line, and his status on the ship. The words are separated by exactly one space. There are no other spaces in the line. The names consist of Latin letters, the first letter is uppercase, the rest are lowercase. The length of any name is from 1 to 10 characters. The status can have the following values: rat for a rat, woman for a woman, child for a child, man for a man, captain for the captain. The crew contains exactly one captain.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "325_C. Monsters and Diamonds", "description": "Input\n\nThe first line contains two integers: m and n (1 ≤ m, n ≤ 105), the number of possible splits and the number of different monster types. Each of the following m lines contains a split rule. Each split rule starts with an integer (a monster ID) mi (1 ≤ mi ≤ n), and a positive integer li indicating the number of monsters and diamonds the current monster can split into. This is followed by li integers, with positive integers representing a monster ID and -1 representing a diamond.\n\nEach monster will have at least one split rule. Each split rule will have at least one diamond. The sum of li across all split rules will be at most 105.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1485_E. Move and Swap", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line of each test case contains n-1 integers v_2, v_3, ..., v_n (1 ≤ v_i ≤ n, v_i ≠ i) — the i-th of them indicates that there is an edge between vertices i and v_i. It is guaranteed, that these edges form a tree.\n\nThe third line of each test case contains n-1 integers a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the numbers written on the vertices.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "97_E. Leaders", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of vertices and edges in the relationship graph correspondingly. Next m lines contain pairs of integers a and b which mean that there is an edge between the a-th and the b-th vertices (the vertices are numbered starting from 1, 1 ≤ a, b ≤ n). It is guaranteed that the graph has no loops or multiple edges.\n\nNext line contains number q (1 ≤ q ≤ 105) — the number of pairs the scientists are interested in. Next q lines contain these pairs (in the same format as the edges, the queries can be repeated, a query can contain a pair of the identical vertices).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1167_G. Low Budget Inception", "description": "Input\n\nThe first line contains two integer numbers n and d (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ d ≤ 7000) — the number of buildings and the maximum distance between any pair of neighbouring buildings, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (a_1 = 0, 0 < a_{i + 1} - a_i ≤ d + 1) — coordinates of left corners of corresponding buildings in ascending order.\n\nThe third line contains single integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of candidates.\n\nThe fourth line contains m integers x_1, x_2, ..., x_m (0 ≤ x_i ≤ a_n + 1, x_i < x_{i + 1}) — the coordinates of bends you need to calculate terminal angles for in ascending order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1218_F. Workout plan", "description": "Input\n\nThe first one contains two integer numbers, integers N (1 ≤ N ≤ 10^5) and K (1 ≤ K ≤ 10^5) – representing number of days in the workout plan and how many grams he can lift before starting his workout plan respectively. The second line contains N integer numbers X[i] (1 ≤ X[i] ≤ 10^9) separated by a single space representing how many grams Alan wants to lift on day i. The third line contains one integer number A (1 ≤ A ≤ 10^9) representing permanent performance gains from a single drink. The last line contains N integer numbers C[i] (1 ≤ C[i] ≤ 10^9) , representing cost of performance booster drink in the gym he visits on day i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1219_D. Workout plan", "description": "Input\n\nThe first one contains two integer numbers, integers N (1 ≤ N ≤ 10^5) and K (1 ≤ K ≤ 10^5) – representing number of days in the workout plan and how many grams he can lift before starting his workout plan respectively. The second line contains N integer numbers X[i] (1 ≤ X[i] ≤ 10^9) separated by a single space representing how many grams Alan wants to lift on day i. The third line contains one integer number A (1 ≤ A ≤ 10^9) representing permanent performance gains from a single drink. The last line contains N integer numbers C[i] (1 ≤ C[i] ≤ 10^9) , representing cost of performance booster drink in the gym he visits on day i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "731_D. 80-th Level Archeology", "description": "Input\n\nThe first line of the input contains two integers n and c (2 ≤ n ≤ 500 000, 1 ≤ c ≤ 106) — the number of words, written on the lock, and the number of different hieroglyphs.\n\nEach of the following n lines contains the description of one word. The i-th of these lines starts with integer li (1 ≤ li ≤ 500 000), that denotes the length of the i-th word, followed by li integers wi, 1, wi, 2, ..., wi, li (1 ≤ wi, j ≤ c) — the indices of hieroglyphs that make up the i-th word. Hieroglyph with index 1 is the smallest in the alphabet and with index c — the biggest.\n\nIt's guaranteed, that the total length of all words doesn't exceed 106.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "270_D. Greenhouse Effect", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 5000, n ≥ m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number si (1 ≤ si ≤ m), and one real number xi (0 ≤ xi ≤ 109), the species and position of the i-th plant. Each xi will contain no more than 6 digits after the decimal point.\n\nIt is guaranteed that all xi are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their xi coordinates (xi < xi + 1, 1 ≤ i < n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1380_E. Merging Towers", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ m ≤ n ≤ 2 ⋅ 10^5) — the number of discs and the number of towers, respectively.\n\nThe second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ m), where t_i is the index of the tower disc i belongs to. Each value from 1 to m appears in this sequence at least once.\n\nThen m - 1 lines follow, denoting the queries. Each query is represented by two integers a_i and b_i (1 ≤ a_i, b_i ≤ m, a_i ≠ b_i), meaning that, during the i-th query, the towers with indices a_i and b_i are merged (a_i and b_i are chosen in such a way that these towers exist before the i-th query).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "567_E. President and Roads", "description": "Input\n\nThe first lines contain four integers n, m, s and t (2 ≤ n ≤ 105; 1 ≤ m ≤ 105; 1 ≤ s, t ≤ n) — the number of cities and roads in Berland, the numbers of the capital and of the Presidents' home town (s ≠ t).\n\nNext m lines contain the roads. Each road is given as a group of three integers ai, bi, li (1 ≤ ai, bi ≤ n; ai ≠ bi; 1 ≤ li ≤ 106) — the cities that are connected by the i-th road and the time needed to ride along it. The road is directed from city ai to city bi.\n\nThe cities are numbered from 1 to n. Each pair of cities can have multiple roads between them. It is guaranteed that there is a path from s to t along the roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1011_F. Mars rover", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^6) — the number of vertices in the graph (both inputs and elements).\n\nThe i-th of the next n lines contains a description of i-th vertex: the first word \"AND\", \"OR\", \"XOR\", \"NOT\" or \"IN\" (means the input of the scheme) is the vertex type. If this vertex is \"IN\", then the value of this input follows (0 or 1), otherwise follow the indices of input vertices of this element: \"AND\", \"OR\", \"XOR\" have 2 inputs, whereas \"NOT\" has 1 input. The vertices are numbered from one.\n\nIt is guaranteed that input data contains a correct logical scheme with an output produced by the vertex 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "269_B. Greenhouse Effect", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 5000, n ≥ m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number si (1 ≤ si ≤ m), and one real number xi (0 ≤ xi ≤ 109), the species and position of the i-th plant. Each xi will contain no more than 6 digits after the decimal point.\n\nIt is guaranteed that all xi are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their xi coordinates (xi < xi + 1, 1 ≤ i < n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1010_D. Mars rover", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^6) — the number of vertices in the graph (both inputs and elements).\n\nThe i-th of the next n lines contains a description of i-th vertex: the first word \"AND\", \"OR\", \"XOR\", \"NOT\" or \"IN\" (means the input of the scheme) is the vertex type. If this vertex is \"IN\", then the value of this input follows (0 or 1), otherwise follow the indices of input vertices of this element: \"AND\", \"OR\", \"XOR\" have 2 inputs, whereas \"NOT\" has 1 input. The vertices are numbered from one.\n\nIt is guaranteed that input data contains a correct logical scheme with an output produced by the vertex 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1148_B. Born This Way", "description": "Input\n\nThe first line contains five integers n, m, t_a, t_b and k (1 ≤ n, m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ n + m, 1 ≤ t_a, t_b ≤ 10^9) — the number of flights from A to B, the number of flights from B to C, the flight time from A to B, the flight time from B to C and the number of flights you can cancel, respectively.\n\nThe second line contains n distinct integers in increasing order a_1, a_2, a_3, ..., a_n (1 ≤ a_1 < a_2 < … < a_n ≤ 10^9) — the times the flights from A to B depart.\n\nThe third line contains m distinct integers in increasing order b_1, b_2, b_3, ..., b_m (1 ≤ b_1 < b_2 < … < b_m ≤ 10^9) — the times the flights from B to C depart.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02128 Light", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* $ 1 \\ leq W \\ leq 500 $\n* $ 1 \\ leq H \\ leq 500 $\n* $ 1 \\ leq N \\ leq 100 $\n* $ 1 \\ leq N \\ leq W \\ times H $\n* $ 1 \\ leq $$ x_i $$ \\ leq W $\n* $ 1 \\ leq $$ y_i $$ \\ leq H $\n* There are no multiple streetlights at the same coordinates\n\nInput\n\nThe input is given in the following format.\n\n\n$ W $ $ H $ $ N $\n$ x_1 $ $ y_1 $\n...\n$ x_N $ $ y_N $\n\n\nAll inputs are given as integers.\n$ W $, $ H $, and $ N $ are given on the first line, separated by blanks.\nIn the following $ N $ line, the coordinates $ ($$ x_i $, $ y_i $$) $ of the streetlight $ i $ are given, separated by blanks.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1251_D. Salary Changing", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases.\n\nThe first line of each query contains two integers n and s (1 ≤ n < 2 ⋅ 10^5, 1 ≤ s ≤ 2 ⋅ 10^{14}) — the number of employees and the amount of money you have. The value n is not divisible by 2.\n\nThe following n lines of each query contain the information about employees. The i-th line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9).\n\nIt is guaranteed that the sum of all n over all queries does not exceed 2 ⋅ 10^5.\n\nIt is also guaranteed that you have enough money to pay the minimum salary to each employee, i. e. ∑_{i=1}^{n} l_i ≤ s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "721_E. Road to Home", "description": "Input\n\nThe first line of the input contains four integers L, n, p and t (1 ≤ L ≤ 109, 0 ≤ n ≤ 100 000, 1 ≤ p ≤ 109, 1 ≤ t ≤ 109) — the length of the Danil's path, the number of street lights at the road, the distance Danil passes while doing single performance and the minimum distance of pause respectively.\n\nThe next n lines describe segments lightened by street lights. i-th of them contains two integers li, ri (0 ≤ li < ri ≤ L) — the endpoints of the segment lightened by i-th street light. It is guaranteed that no two segments are intersecting, nesting, or touching each other. The segments are given in the order from left to right.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1481_D. AB Graph", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 1000; 1 ≤ m ≤ 10^{5}) — the number of vertices in the graph and desirable length of the palindrome.\n\nEach of the next n lines contains n characters. The j-th character of the i-th line describes the character on the edge that is going from node i to node j.\n\nEvery character is either 'a' or 'b' if i ≠ j, or '*' if i = j, since the graph doesn't contain self-loops.\n\nIt's guaranteed that the sum of n over test cases doesn't exceed 1000 and the sum of m doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "79_B. Colorful Field", "description": "Input\n\nIn the first line there are four positive integers n, m, k, t (1 ≤ n ≤ 4·104, 1 ≤ m ≤ 4·104, 1 ≤ k ≤ 103, 1 ≤ t ≤ 103), each of which represents the height of the field, the width of the field, the number of waste cells and the number of queries that ask the kind of crop plants in a certain cell.\n\nFollowing each k lines contains two integers a, b (1 ≤ a ≤ n, 1 ≤ b ≤ m), which denotes a cell (a, b) is waste. It is guaranteed that the same cell will not appear twice in this section.\n\nFollowing each t lines contains two integers i, j (1 ≤ i ≤ n, 1 ≤ j ≤ m), which is a query that asks you the kind of crop plants of a cell (i, j).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01318 Immortal Jewels", "description": "Input\n\nThe input consists of multiple datasets, one dataset is given in the following format.\n\n> N\n> x1 y1 r1 m1\n> x2 y2 r2 m2\n> ...\n> xN yN rN mN\n>\n\nThe first row of the dataset represents the number of gems N (1 ≤ N ≤ 50). Each of the following N lines contains four integers xi, yi, ri, mi (-1000 ≤ xi, yi ≤ 1000, 1 ≤ ri ≤ 100, 0 ≤ mi ≤ 100), and the position and size of the gem. And represents the magnetic force. That is, the jewel i has a circular shape with the center (xi, yi) and a radius of ri, and its magnetic force is mi. Jewels do not overlap each other.\n\nThe end of the input is represented by a line consisting of only 0s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01225 Rummy", "description": "Input\n\nThe first line of input is given the number T (0 <T ≤ 50), which represents the number of datasets. This line is followed by T datasets.\n\nEach dataset consists of two lines, the first line is given the number ni of the i-th (i = 1, 2, ..., 9) card, each separated by a space, and the second line is i. The letters ci representing the color of the second card are given, separated by spaces. The number ni on the card is an integer that satisfies 1 ≤ ni ≤ 9, and the color ci on the card is one of the letters \"` R` \",\" `G`\", and \"` B` \", respectively.\n\nNo more than 5 cards with the same color and number will appear in one dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "847_L. Berland SU Computer Network", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — the number of routers in the network.\n\nThe i-th of the following n lines contains a description of the lists for the router i.\n\nThe description of each list begins with the number of routers in it. Then the symbol ':' follows, and after that the numbers of routers from the list are given. This numbers are separated by comma. Lists are separated by symbol '-'.\n\nIt is guaranteed, that for each router i the total number of routers in its lists equals to n - 1 and all the numbers in lists of each router are distinct. For each router i lists do not contain the number i.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "567_B. Berland National Library", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of records in the system log. Next follow n events from the system journal in the order in which the were made. Each event was written on a single line and looks as \"+ ri\" or \"- ri\", where ri is an integer from 1 to 106, the registration number of the visitor (that is, distinct visitors always have distinct registration numbers).\n\nIt is guaranteed that the log is not contradictory, that is, for every visitor the types of any of his two consecutive events are distinct. Before starting the system, and after stopping the room may possibly contain visitors.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1477_B. Nezzar and Binary String", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases.\n\nThe first line of each test case contains two integers n,q (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ q ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains a binary string s of length n.\n\nThe third line of each test case contains a binary string f of length n.\n\nThen q lines follow, i-th of them contains two integers l_i,r_i (1 ≤ l_i ≤ r_i ≤ n) — bounds of the segment, that Nanako will inspect on the i-th day.\n\nIt is guaranteed that the sum of n for all test cases doesn't exceed 2 ⋅ 10^5, and the sum of q for all test cases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1279_C. Stack of Presents", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThen the test cases follow, each represented by three lines.\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 10^5) — the number of presents in the stack and the number of presents Santa wants to send, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n, all a_i are unique) — the order of presents in the stack.\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ n, all b_i are unique) — the ordered list of presents Santa has to send.\n\nThe sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1286_E. Fedya the Potter Strikes Back", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 600 000) — the number of queries.\n\nThe i-th of the following n lines contains the query i: a lowercase letter of the Latin alphabet c_i and an integer w_i (0 ≤ w_i ≤ 2^{30} - 1).\n\nAll queries are given in an encrypted form. Let ans be the answer to the previous query (for the first query we set this value equal to 0). Then, in order to get the real query, you need to do the following: perform a cyclic shift of c_i in the alphabet forward by ans, and set w_i equal to w_i ⊕ (ans \\ \\& \\ MASK), where ⊕ is the bitwise exclusive \"or\", \\& is the bitwise \"and\", and MASK = 2^{30} - 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "690_B1. Recover Polygon (easy)", "description": "Input\n\nThe first line of each test case contains one integer N, the size of the lattice grid (5 ≤ N ≤ 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N), ..., (N, N) and the last row corresponds to cells with coordinates (1, 1), ..., (N, 1).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00916 Count the Regions", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is formatted as follows.\n\n\nn\nl1 t1 r1 b1\nl2 t2 r2 b2\n:\nln tn rn bn\n\n\nA dataset starts with n (1 ≤ n ≤ 50), the number of rectangles on the plane. Each of the following n lines describes a rectangle. The i-th line contains four integers, li, ti, ri, and bi, which are the coordinates of the i-th rectangle; (li, ti) gives the x-y coordinates of the top left corner, and (ri, bi) gives that of the bottom right corner of the rectangle (0 ≤ li < ri ≤ 106, 0 ≤ bi < ti ≤ 106, for 1 ≤ i ≤ n). The four integers are separated by a space.\n\nThe input is terminated by a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1442_B. Identify the Operations", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ k < n ≤ 200 000): sizes of arrays a and b.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): elements of a. All elements of a are distinct.\n\nThe third line of each test case contains k integers b_1, b_2, …, b_k (1 ≤ b_i ≤ n): elements of b. All elements of b are distinct.\n\nThe sum of all n among all test cases is guaranteed to not exceed 200 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01132 Make Purse Light", "description": "Input\n\nThe input contains several test cases.\n\nEach test case consists of two lines. The first line contains a single integer representing Mr. Bill's payment in yen. The second line contains four integers, which in turn represent the number of 10-yen coins, 50-yen coins, 100-yen coins, and 500-yen coins in your wallet.\n\nThe payment amount is always in units of 10 yen. That is, the one-yen place of the payment amount is always 0. You can also assume that you can only have up to 20 coins of the same type in your wallet. No non-payable cases are given during input.\n\nThe end of input is represented by a line containing a single 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1443_F. Identify the Operations", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains two integers n, k (1 ≤ k < n ≤ 200 000): sizes of arrays a and b.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): elements of a. All elements of a are distinct.\n\nThe third line of each test case contains k integers b_1, b_2, …, b_k (1 ≤ b_i ≤ n): elements of b. All elements of b are distinct.\n\nThe sum of all n among all test cases is guaranteed to not exceed 200 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1393_C. Pinkie Pie Eats Patty-cakes", "description": "Input\n\nThe first line contains a single integer T (1 ≤ T ≤ 100): the number of bags for which you need to solve the problem.\n\nThe first line of each bag description contains a single integer n (2 ≤ n ≤ 10^5): the number of patty-cakes in it. The second line of the bag description contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n): the information of patty-cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty-cakes with the same filling. \n\nIt is guaranteed that the sum of n over all bags does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1133_F2. Spanning Tree with One Fixed Degree", "description": "Input\n\nThe first line contains three integers n, m and D (2 ≤ n ≤ 2 ⋅ 10^5, n - 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2)), 1 ≤ D < n) — the number of vertices, the number of edges and required degree of the first vertex, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "962_G. Visible Black Areas", "description": "Input\n\nThe first line contain four integers x_1, y_1, x_2, y_2 (x_1 < x_2, y_2 < y_1) — the coordinates of top-left and bottom-right corners of the rectangular window. \n\nThe second line contains a single integer n (4 ≤ n ≤ 15 000) — the number of vertices in Petya's polygon.\n\nEach of the following n lines contains two integers — the coordinates of vertices of the Petya's polygon in counterclockwise order. Guaranteed, that the given polygon satisfies the conditions described in the statement.\n\nAll coordinates of the rectangular window and all coordinates of the vertices of the polygon are non-negative and do not exceed 15 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "494_C. Helping People", "description": "Input\n\nIn the first line two space-separated integers n, q (1 ≤ n ≤ 105, 1 ≤ q ≤ 5000) are given.\n\nIn the second line n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 109) are given meaning that person number i initially has ai dollars. \n\nEach of the next q lines contains three space-separated numbers li, ri, pi (1 ≤ li ≤ ri ≤ n, 0 ≤ p ≤ 1) where li and ri are two integers describing the segment of recommendation and pi is a real number given with exactly three digits after decimal point which is equal to probability of Malek accepting this recommendation.\n\nNote that a segment may appear several times in recommendations.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "939_F. Cutlet", "description": "Input\n\nThe first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 100) — the number of seconds the cutlet should be cooked on each side and number of periods of time in which Arkady can flip it.\n\nThe next k lines contain descriptions of these intervals. Each line contains two integers li and ri (0 ≤ li ≤ ri ≤ 2·n), meaning that Arkady can flip the cutlet in any moment starting from li seconds after the beginning of cooking and finishing at ri seconds after beginning of cooking. In particular, if li = ri then Arkady can flip the cutlet only in the moment li = ri. It's guaranteed that li > ri - 1 for all 2 ≤ i ≤ k.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "835_C. Star sky", "description": "Input\n\nThe first line contains three integers n, q, c (1 ≤ n, q ≤ 105, 1 ≤ c ≤ 10) — the number of the stars, the number of the views and the maximum brightness of the stars.\n\nThe next n lines contain the stars description. The i-th from these lines contains three integers xi, yi, si (1 ≤ xi, yi ≤ 100, 0 ≤ si ≤ c ≤ 10) — the coordinates of i-th star and its initial brightness.\n\nThe next q lines contain the views description. The i-th from these lines contains five integers ti, x1i, y1i, x2i, y2i (0 ≤ ti ≤ 109, 1 ≤ x1i < x2i ≤ 100, 1 ≤ y1i < y2i ≤ 100) — the moment of the i-th view and the coordinates of the viewed rectangle.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1121_A. Technogoblet of Fire", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 100, 1 ≤ m, k ≤ n) — the total number of students, the number of schools and the number of the Chosen Ones.\n\nThe second line contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n), where p_i denotes the power of i-th student. The bigger the power, the stronger the student.\n\nThe third line contains n integers s_1, s_2, …, s_n (1 ≤ s_i ≤ m), where s_i denotes the school the i-th student goes to. At least one student studies in each of the schools. \n\nThe fourth line contains k different integers c_1, c_2, …, c_k (1 ≤ c_i ≤ n) — the id's of the Chosen Ones.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "506_C. Mr. Kitayuta vs. Bamboos", "description": "Input\n\nThe first line of the input contains four space-separated integers n, m, k and p (1 ≤ n ≤ 105, 1 ≤ m ≤ 5000, 1 ≤ k ≤ 10, 1 ≤ p ≤ 109). They represent the number of the bamboos in Mr. Kitayuta's garden, the duration of Mr. Kitayuta's fight in days, the maximum number of times that Mr. Kitayuta beat the bamboos during each day, and the power of Magic Hammer, respectively.\n\nThe following n lines describe the properties of the bamboos. The i-th of them (1 ≤ i ≤ n) contains two space-separated integers hi and ai (0 ≤ hi ≤ 109, 1 ≤ ai ≤ 109), denoting the initial height and the growth rate of the i-th bamboo, respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1453_E. Dog Snacks", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4).\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of intersections of the park.\n\nThe next n-1 lines contain two integers u and v (1 ≤ u,v ≤ n, u ≠ v) each, which means there is a road between intersection u and v. All roads are bidirectional and distinct.\n\nIt is guaranteed that: \n\n  * For each test case, for every a and b (1 ≤ a, b ≤ n), it is possible to get to the b-th intersection from the a-th intersection. \n  * The sum of n in all test cases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00316 Investigation of Club Activities", "description": "Input\n\nThe input is given in the following format.\n\n\nNMK\nrecord1\nrecord2\n::\nrecordK\n\n\nThe first line gives the number of students N (1 ≤ N ≤ 100000), the number of club activity types M (1 ≤ M ≤ 100000), and the number of recorded lines K (1 ≤ K ≤ 200000). Each line of record, recordi, is given in the following K lines in one of the following formats:\n\n\n1 a b\n\n\nOr\n\n\n2 c x\n\n\nWhen the first digit is \"1\", it indicates that student a (1 ≤ a ≤ N) and student b (1 ≤ b ≤ N) belong to the same club activity. However, a ≠ b.\n\nWhen the first digit is \"2\", it indicates that student c (1 ≤ c ≤ N) belongs to club activity x (1 ≤ x ≤ M).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00965 Starting a Scenic Railroad Service", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$n$\n$a_1$ $b_1$\n...\n$a_n$ $b_n$\n\n\nHere, the first line has an integer $n$, the number of the passengers in the estimated list of passengers' travel sections ($1 \\leq n \\leq 200 000$). The stations are numbered starting from 1 in their order along the route. Each of the following $n$ lines describes the travel for each passenger by two integers, the boarding and the alighting station numbers, $a_i$ and $b_i$, respectively ($1 \\leq a_i < b_i \\leq 100 000$). Note that more than one passenger in the list may have the same boarding and alighting stations.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1045_A. Last chance", "description": "Input\n\nThe first line contains two integers: the number of your weapons N (1≤ N≤ 5000) and the number of spaceships M (1≤ M≤ 5000).\n\nIn the next N lines, each line starts with one integer that represents type (either 0, 1 or 2). If the type is 0, then the weapon is SQL rocket, the rest of the line contains strictly positive number K (∑{K} ≤ 100 000) and array k_i (1≤ k_i≤ M) of K integers. If the type is 1, then the weapon is Cognition beam, the rest of the line contains integers l and r (1≤ l≤ r≤ M). If the type is 2 then the weapon is OMG bazooka, the rest of the line contains distinct numbers a, b and c  (1 ≤ a,b,c ≤ M).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01546 Sports Days 2", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* All inputs are integers\n* 2 ≤ V ≤ 150\n* 0 ≤ E ≤ V × V\n* 0 <K ≤ 106\n* 0 ≤ vi1, vi2 <V (0 <i ≤ E)\n* vi1 ≠ vi2 (0 <i ≤ E)\n* 0 <ci ≤ 100 (0 <i ≤ E)\n* Some inputs contain i, j such that vi1 = vj1 and vi2 = vj2 (i ≠ j, 0 <i, j ≤ E).\n\nInput\n\nThe input is given in the following format.\n\n\n> V E K\n> v11 v12 c1\n> ...\n> vi1 vi2 ci\n> ...\n> vE1 vE2 cE\n>\n\nhere,\n\n\n* V is the number of cones\n* E is the number of arrows\n* vi, 1 is the cone number of the starting point of the arrow i\n* vi2 is the cone number at the end of the arrow i\n* ci is an integer indicated by the arrow\n\n\n\nIs.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00880 Malfatti Circles", "description": "Input\n\nThe input is a sequence of datasets. A dataset is a line containing six integers x1, y1 , x2 , y2, x3 and y3 in this order, separated by a space. The coordinates of the vertices of the given triangle are (x1 , y1 ), (x2 , y2 ) and (x3 , y3 ), respectively. You can assume that the vertices form a triangle counterclockwise. You can also assume that the following two conditions hold.\n\n* All of the coordinate values are greater than −1000 and less than 1000.\n* None of the Malfatti circles of the triangle has a radius less than 0.1.\n\n\n\nThe end of the input is indicated by a line containing six zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "812_B. Sagheer, the Hausmeister", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 15 and 1 ≤ m ≤ 100) — the number of floors and the number of rooms in each floor, respectively.\n\nThe next n lines contains the building description. Each line contains a binary string of length m + 2 representing a floor (the left stairs, then m rooms, then the right stairs) where 0 indicates that the light is off and 1 indicates that the light is on. The floors are listed from top to bottom, so that the last line represents the ground floor.\n\nThe first and last characters of each string represent the left and the right stairs, respectively, so they are always 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 ≤ n ≤ 1000) — the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 ≤ x_i, y_i ≤ 1000) — the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "47_E. Cannon", "description": "Input\n\nThe first line contains integers n and V (1 ≤ n ≤ 104, 1 ≤ V ≤ 1000) which represent the number of shots and the initial speed of every ball. The second line contains n space-separated real numbers alphai (0 < alphai < π / 4) which represent the angles in radians at which the cannon will fire. The third line contains integer m (1 ≤ m ≤ 105) which represents the number of walls. Then follow m lines, each containing two real numbers xi and yi (1 ≤ xi ≤ 1000, 0 ≤ yi ≤ 1000) which represent the wall’s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "721_C. Journey", "description": "Input\n\nThe first line of the input contains three integers n, m and T (2 ≤ n ≤ 5000, 1 ≤ m ≤ 5000, 1 ≤ T ≤ 109) — the number of showplaces, the number of roads between them and the time of Irina's stay in Berlatov respectively.\n\nThe next m lines describes roads in Berlatov. i-th of them contains 3 integers ui, vi, ti (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ti ≤ 109), meaning that there is a road starting from showplace ui and leading to showplace vi, and Irina spends ti time units to pass it. It is guaranteed that the roads do not form cyclic routes.\n\nIt is guaranteed, that there is at most one road between each pair of showplaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1307_D. Cow and Fields", "description": "Input\n\nThe first line contains integers n, m, and k (2 ≤ n ≤ 2 ⋅ 10^5, n-1 ≤ m ≤ 2 ⋅ 10^5, 2 ≤ k ≤ n) — the number of fields on the farm, the number of roads, and the number of special fields. \n\nThe second line contains k integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — the special fields. All a_i are distinct.\n\nThe i-th of the following m lines contains integers x_i and y_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i), representing a bidirectional road between fields x_i and y_i. \n\nIt is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1385_F. Removing Leaves", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k < n) — the number of vertices in the tree and the number of leaves you remove in one move, respectively. The next n-1 lines describe edges. The i-th edge is represented as two integers x_i and y_i (1 ≤ x_i, y_i ≤ n), where x_i and y_i are vertices the i-th edge connects. It is guaranteed that the given set of edges forms a tree.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00644 Winter Bells", "description": "Constraints\n\n* 3 ≤ n ≤ 100\n* There are no parallel edges and a edge whose end points are identical.\n* 0 < weight of the edge < 10000\n\nInput\n\nInput consists of several datasets.\n\nThe first line of each dataset contains three integers n, m, p, which means the number of nodes and edges of the graph, and the number of the children. Each node are numbered 0 to n-1.\n\nFollowing m lines contains information about edges. Each line has three integers. The first two integers means nodes on two endpoints of the edge. The third one is weight of the edge.\n\nNext p lines represent c[i] respectively.\n\nInput terminates when n = m = p = 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "700_D. Huffman Coding on Segment", "description": "Input\n\nThe first line of the input contains the single integer n (1 ≤ n ≤ 100 000) — the length of the initial message. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000) — characters of the message.\n\nNext line contains the single integer q (1 ≤ q ≤ 100 000) — the number of queries.\n\nThen follow q lines with queries descriptions. The i-th of these lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the position of the left and right ends of the i-th substring respectively. Positions are numbered from 1. Substrings may overlap in any way. The same substring may appear in the input more than once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1055_D. Refactoring", "description": "Input\n\nThe first line contains the only integer n (1 ≤ n ≤ 3000) — the number of variables in Alice's program.\n\nThe following n lines contain the initial names of variables w_1, w_2, …, w_n, one per line. After that, n more lines go, the i-th of them contains the target name w'_i for the i-th variable. It is guaranteed that 1 ≤ |w_i| = |w'_i| ≤ 3000.\n\nIt is guaranteed that there is at least one variable having its target name different from the initial name. Both initial and target names consist of lowercase English letters only. For each variable the length of its initial name is equal to the length of its target name.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1354_D. Multiset", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^6) — the number of elements in the initial multiset and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_1 ≤ a_2 ≤ ... ≤ a_n ≤ n) — the elements of the multiset.\n\nThe third line contains q integers k_1, k_2, ..., k_q, each representing a query: \n\n  * if 1 ≤ k_i ≤ n, then the i-th query is \"insert k_i into the multiset\"; \n  * if k_i < 0, then the i-th query is \"remove the |k_i|-th order statistics from the multiset\". For this query, it is guaranteed that |k_i| is not greater than the size of the multiset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00663 SAT-EN-3", "description": "Input\n\nThe input consists of multiple cases. Each case is given in the following format.\n\n\nexpression\n\n\nThe end of input is given by a line of \"#\"\n\nexpression follows the following BNF.\nHere, the string literal is enclosed by \"\". The actual input does not include \"\". Also, the input does not contain extra blanks.\n\n\n<expression> :: = \"(\" <clause> \")\" | \"(\" <clause> \") | (\"<expression> \")\"\n<clause> :: = <literal> \"&\" <literal> \"&\" <literal>\n<literal> :: = <variable> | \"~\" <variable>\n<variable> :: = [a-z] | [A-z]\n\n\n\nThe length of the expression does not exceed 500 characters.\n\nThe number of test cases does not exceed 1100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1240_C. Paint the Tree", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 5 ⋅ 10^5) – the number of queries.\n\nThe first line of each query contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5) — the number of vertices in the tree and the number of colors to assign to each vertex, respectively.\n\nEach of the next n - 1 lines describes an edge of the tree. Edge i is denoted by three integers u_i, v_i and w_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i, 1 ≤ w_i ≤ 10^5) — the labels of vertices it connects and the weight of the edge. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that sum of all n over all queries does not exceed 5 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1307_B. Cow and Friend", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Next 2t lines contain test cases — two lines per test case.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of favorite numbers and the distance Rabbit wants to travel, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — Rabbit's favorite numbers. It is guaranteed that the favorite numbers are distinct.\n\nIt is guaranteed that the sum of n over all the test cases will not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_C1. The Tournament", "description": "Input\n\nThe first line contains a pair of integers n and k (1 ≤ k ≤ n + 1). The i-th of the following n lines contains two integers separated by a single space — pi and ei (0 ≤ pi, ei ≤ 200000).\n\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem C1 (4 points), the constraint 1 ≤ n ≤ 15 will hold. \n  * In subproblem C2 (4 points), the constraint 1 ≤ n ≤ 100 will hold. \n  * In subproblem C3 (8 points), the constraint 1 ≤ n ≤ 200000 will hold.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_C2. The Tournament", "description": "Input\n\nThe first line contains a pair of integers n and k (1 ≤ k ≤ n + 1). The i-th of the following n lines contains two integers separated by a single space — pi and ei (0 ≤ pi, ei ≤ 200000).\n\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem C1 (4 points), the constraint 1 ≤ n ≤ 15 will hold. \n  * In subproblem C2 (4 points), the constraint 1 ≤ n ≤ 100 will hold. \n  * In subproblem C3 (8 points), the constraint 1 ≤ n ≤ 200000 will hold.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1472_F. New Year's Puzzle", "description": "Input\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case is preceded by an empty line.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10^9, 1 ≤ m ≤ 2 ⋅ 10^5) — the length of the strip and the number of blocked cells on it.\n\nEach of the next m lines contains two integers r_i, c_i (1 ≤ r_i ≤ 2, 1 ≤ c_i ≤ n) — numbers of rows and columns of blocked cells. It is guaranteed that all blocked cells are different, i.e. (r_i, c_i) ≠ (r_j, c_j), i ≠ j.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "391_C3. The Tournament", "description": "Input\n\nThe first line contains a pair of integers n and k (1 ≤ k ≤ n + 1). The i-th of the following n lines contains two integers separated by a single space — pi and ei (0 ≤ pi, ei ≤ 200000).\n\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n\n  * In subproblem C1 (4 points), the constraint 1 ≤ n ≤ 15 will hold. \n  * In subproblem C2 (4 points), the constraint 1 ≤ n ≤ 100 will hold. \n  * In subproblem C3 (8 points), the constraint 1 ≤ n ≤ 200000 will hold.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "222_D. Olympiad", "description": "Input\n\nThe first line contains two space-separated integers n, x (1 ≤ n ≤ 105; 0 ≤ x ≤ 2·105) — the number of Olympiad participants and the minimum number of points Vasya earned.\n\nThe second line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ 105) — the participants' points in the first tour.\n\nThe third line contains n space-separated integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) — the participants' points in the second tour.\n\nThe participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad — there are two integers i, j (1 ≤ i, j ≤ n) such, that ai + bj ≥ x.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00653 School of Killifish", "description": "Input\n\nInput consists of multiple datasets.\nEach dataset is given in the following format.\n\n\nr c q\ngrid0,0 grid0,1 ... grid0,c-1\n...\ngridr-1,0 ... gridr-1,c-1\nr1 c1 r2 c2\n...\nr1 c1 r2 c2\n\n\nThe first line consists of 3 integers, r ,c , and q . Next r lines have c integers. gridi,j means a dangerousness of the grid. And you can assume 0 ≤ gridi,j ≤ 231-1. After that, q queries, r1, c1, r2 and c2, are given.\n\nThe dataset satisfies following constraints.\nr*c ≤ 106\nq ≤ 104\nFor each query, you can assume that r1≤ r2 and c1 ≤ c2 . If  r * c  ≤ 250000, q ≤ 100 is assured. If  r * c  > 250000, Input consists of only that case.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "200_A. Cinema", "description": "Input\n\nThe first input line contains three integers n, m, k (1 ≤ n, m ≤ 2000, 1 ≤ k ≤ min(n·m, 105) — the number of rows in the room, the number of seats in each row and the number of people in the line, correspondingly. Each of the next k lines contains two integers xi, yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) — the coordinates of the seat each person has chosen. Numbers on the same line are separated by a space. The pairs of coordinates are located in the order, in which people stand in the line, starting from the head (the first person in the line who stands in front of the box office) to the tail (the last person in the line).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00611 Building Water Ways", "description": "Constraints\n\n* Judge data contains at most 60 data sets.\n* 3 ≤ H, W ≤ 10\n* 1 ≤ the number of sources, the number of cities ≤ 8\n* The map is surrounded by obstacles.\n* Sources are not adjacent each other(on the left, right, top and bottom)\n* There is a solution.\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of:\n\n\nH W\nH × W characters\n\n\nThe integers H and W are the numbers of rows and columns of the map. H × W characters denote the cells which contain:\n\n* 'P': source\n* '*': city\n* '.': flatland\n* '#': obstacle\n\n\n\nThe end of input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1461_D. Divide and Summarize", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100).\n\nThe first line of each test case contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array a and the total number of prettiness tests.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the contents of the array a.\n\nNext q lines of each test case contain a single integer s_i (1 ≤ s_i ≤ 10^9) — the sum of elements which Mike wants to get in the i-th test.\n\nIt is guaranteed that the sum of n and the sum of q does not exceed 10^5 (∑ n, ∑ q ≤ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00239 Calorie Counting", "description": "input\n\nGiven a sequence of multiple datasets. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\ns1 p1 q1 r1\ns2 p2 q2 r2\n::\nsn pn qn rn\nP Q R C\n\n\nThe first line gives the number of sweets n (1 ≤ n ≤ 1000). The next n lines are given the number si (1 ≤ si ≤ 1000) of the i-th candy and the integers pi, qi, ri (0 ≤ pi, qi, ri ≤ 100) representing the weight of each nutrient.\n\nThe following lines are given the integers P, Q, R (0 ≤ P, Q, R ≤ 100), C (0 ≤ C ≤ 1700) representing the limits for each nutrient and calorie.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "85_B. Embassy Queue", "description": "Input\n\nThe first line contains three space-separated integers k1, k2, k3 (1 ≤ ki ≤ 109), they are the number of windows of the first, second and third type correspondingly.\n\nThe second line contains three space-separated integers t1, t2, t3 (1 ≤ ti ≤ 105), they are the periods of time needed to serve one person in the window of the first, second and third type correspondingly. \n\nThe third line contains an integer n (1 ≤ n ≤ 105), it is the number of people.\n\nThe fourth line contains n space-separated integers ci (1 ≤ ci ≤ 109) in the non-decreasing order; ci is the time when the person number i comes to the embassy.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "742_D. Arpa's weak amphitheater and Mehrdad's valuable Hoses", "description": "Input\n\nThe first line contains integers n, m and w (1 ≤ n ≤ 1000, <image>, 1 ≤ w ≤ 1000) — the number of Hoses, the number of pair of friends and the maximum total weight of those who are invited.\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the Hoses.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 106) — the beauties of the Hoses.\n\nThe next m lines contain pairs of friends, the i-th of them contains two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), meaning that Hoses xi and yi are friends. Note that friendship is bidirectional. All pairs (xi, yi) are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "856_E. Satellites", "description": "Input\n\nThe first line of input data contains integers r and n — radius of the planet and the number of events (1 ≤ r ≤ 109, 1 ≤ n ≤ 5·105).\n\nEach of the following n lines describe events in the specified format.\n\nSatellite coordinates are integer, the satisfy the following constraints |x| ≤ 109, 0 < y ≤ 109. No two satellites that simultaneously exist can occupy the same point. Distance from each satellite to the center of the planet is strictly greater than r.\n\nIt is guaranteed that events of types 2 and 3 only refer to satellites that exist at the moment. For all events of type 3 the inequality i ≠ j is satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "741_B. Arpa's weak amphitheater and Mehrdad's valuable Hoses", "description": "Input\n\nThe first line contains integers n, m and w (1 ≤ n ≤ 1000, <image>, 1 ≤ w ≤ 1000) — the number of Hoses, the number of pair of friends and the maximum total weight of those who are invited.\n\nThe second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the Hoses.\n\nThe third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 106) — the beauties of the Hoses.\n\nThe next m lines contain pairs of friends, the i-th of them contains two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), meaning that Hoses xi and yi are friends. Note that friendship is bidirectional. All pairs (xi, yi) are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "700_B. Connecting Universities", "description": "Input\n\nThe first line of the input contains two integers n and k (2 ≤ n ≤ 200 000, 1 ≤ k ≤ n / 2) — the number of towns in Treeland and the number of university pairs. Consider that towns are numbered from 1 to n. \n\nThe second line contains 2k distinct integers u1, u2, ..., u2k (1 ≤ ui ≤ n) — indices of towns in which universities are located. \n\nThe next n - 1 line contains the description of roads. Each line contains the pair of integers xj and yj (1 ≤ xj, yj ≤ n), which means that the j-th road connects towns xj and yj. All of them are two-way roads. You can move from any town to any other using only these roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "653_D. Delivery Bears", "description": "Input\n\nThe first line contains three integers n, m and x (2 ≤ n ≤ 50, 1 ≤ m ≤ 500, 1 ≤ x ≤ 100 000) — the number of nodes, the number of directed edges and the number of bears, respectively.\n\nEach of the following m lines contains three integers ai, bi and ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 1 000 000). This represents a directed edge from node ai to bi with weight capacity ci. There are no self loops and no multiple edges from one city to the other city. More formally, for each i and j that i ≠ j it's guaranteed that ai ≠ aj or bi ≠ bj. It is also guaranteed that there is at least one path from node 1 to node n.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1399_E1. Weights Division (easy version)", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and S (2 ≤ n ≤ 10^5; 1 ≤ S ≤ 10^{16}) — the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n-1 lines describe edges of the tree. The edge i is described as three integers v_i, u_i and w_i (1 ≤ v_i, u_i ≤ n; 1 ≤ w_i ≤ 10^6), where v_i and u_i are vertices the edge i connects and w_i is the weight of this edge.\n\nIt is guaranteed that the sum of n does not exceed 10^5 (∑ n ≤ 10^5).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "698_A. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00072 Carden Lantern", "description": "Input\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nn\nm\na1, b1, d1\na2, b2, d2\n::\nam, bm, dm\n\n\nThe first line of each dataset is given the number of historic sites n. It is then given a few meters of streets connecting the historic sites. The following m lines are given the three comma-separated numbers ai, bi, and di. ai and bi are historic site numbers. Historic sites are numbered from 0 to n-1. ai bi indicates that there is a street connecting them, and di represents the distance of the road between ai bi.\n\nWhen n is 0, it is the last input. The number of datasets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00999 Rental DVD Shop NEO", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* All values ​​contained in the input are integers\n* 0 <a <b <e <c ≤ 1000\n* 0 <d ≤ 100000\n* 0 ≤ na, nb, nc ≤ 100000\n* 0 <na + nb + nc\n* No more than 100 datasets\n\nInput\n\nThe input consists of multiple datasets. Each dataset is represented below. The first line is given five integers a, b, c, d, e separated by spaces. The number of rentals is given on the second line. The three integers na, nb, nc are given separated by spaces. Represents the number of old, semi-new, and new DVDs, respectively. The end of the input consists of 5 zeros.\n\n\na b c d e\nna nb nc", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1070_B. Berkomnadzor", "description": "Input\n\nThe first line of the input contains single integer n (1 ≤ n ≤ 2⋅10^5) — total number of IPv4 subnets in the input.\n\nThe following n lines contain IPv4 subnets. Each line starts with either '-' or '+' sign, which indicates if the subnet belongs to the blacklist or to the whitelist correspondingly. It is followed, without any spaces, by the IPv4 subnet in a.b.c.d or a.b.c.d/x format (0 ≤ x ≤ 32). The blacklist always contains at least one subnet.\n\nAll of the IPv4 subnets given in the input are valid. Integer numbers do not start with extra leading zeroes. The provided IPv4 subnets can intersect arbitrarily.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1020_A. New Building for SIS", "description": "Input\n\nThe first line of the input contains following integers:\n\n  * n: the number of towers in the building (1 ≤ n ≤ 108), \n  * h: the number of floors in each tower (1 ≤ h ≤ 108), \n  * a and b: the lowest and highest floor where it's possible to move between adjacent towers (1 ≤ a ≤ b ≤ h), \n  * k: total number of queries (1 ≤ k ≤ 104). \n\n\n\nNext k lines contain description of the queries. Each description consists of four integers ta, fa, tb, fb (1 ≤ ta, tb ≤ n, 1 ≤ fa, fb ≤ h). This corresponds to a query to find the minimum travel time between fa-th floor of the ta-th tower and fb-th floor of the tb-th tower.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00887 Awkward Lights", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nm n d\nS11 S12 S13 ... S1m\nS21 S22 S23 ... S2m\n...\nSn1 Sn2 Sn3 ... Snm\n\n\nThe first line of a dataset contains three integers. m and n (1 ≤ m ≤ 25, 1 ≤ n ≤ 25) are the numbers of columns and rows of the grid, respectively. d (1 ≤ d ≤ m + n) indicates the Manhattan distance. Subsequent n lines of m integers are the initial ON/OFF states. Each Sij (1 ≤ i ≤ n, 1 ≤ j ≤ m) indicates the initial ON/OFF state of the light of the room at (i, j): '0' for OFF and '1' for ON.\n\nThe end of the input is indicated by a line containing three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "416_A. Guess a number!", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 10000) — the number of questions (and answers). Next n lines each contain one question and one answer to it. The format of each line is like that: \"sign x answer\", where the sign is:\n\n  * \">\" (for the first type queries), \n  * \"<\" (for the second type queries), \n  * \">=\" (for the third type queries), \n  * \"<=\" (for the fourth type queries). \n\n\n\nAll values of x are integer and meet the inequation  - 109 ≤ x ≤ 109. The answer is an English letter \"Y\" (for \"yes\") or \"N\" (for \"no\").\n\nConsequtive elements in lines are separated by a single space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1379_C. Choosing flowers", "description": "Input\n\nThe first line contains the only integer t (1 ≤ t ≤ 10 000), the number of test cases. It is followed by t descriptions of the test cases.\n\nEach test case description starts with two integers n and m (1 ≤ n ≤ 10^9, 1 ≤ m ≤ 100 000), the number of flowers Vladimir needs to choose and the number of types of available flowers.\n\nThe following m lines describe the types of flowers: each line contains integers a_i and b_i (0 ≤ a_i, b_i ≤ 10^9) for i-th available type of flowers.\n\nThe test cases are separated by a blank line. It is guaranteed that the sum of values m among all test cases does not exceed 100 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "753_B. Interactive Bulls and Cows (Easy)", "description": "Input\n\nTo read answers to the queries, the program must use the standard input.\n\nThe program will receive pairs of non-negative integers in the input, one pair per line. The first number in a pair is a number of bulls and the second one is a number of cows of the string s and the string xi printed by your program. If the system response equals \"4 0\", then your solution should terminate.\n\nThe testing system will let your program read the i-th pair of integers from the input only after your program displays the corresponding system query in the output: prints value xi in a single line and executes operation flush.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1185_B. Email from Polycarp", "description": "Input\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of pairs to check. Further input contains n descriptions of pairs.\n\nThe first line of each description contains a single non-empty word s consisting of lowercase Latin letters. The second line of the description contains a single non-empty word t consisting of lowercase Latin letters. The lengths of both strings are not greater than 10^6.\n\nIt is guaranteed that the total length of all words s in the input is not greater than 10^6. Also, it is guaranteed that the total length of all words t in the input is not greater than 10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "832_C. Strange Radiation", "description": "Input\n\nThe first line contains two integers n and s (2 ≤ n ≤ 105, 2 ≤ s ≤ 106) — the number of people and the rays' speed.\n\nThe next n lines contain the description of people. The i-th of these lines contains three integers xi, vi and ti (0 < xi < 106, 1 ≤ vi < s, 1 ≤ ti ≤ 2) — the coordinate of the i-th person on the line, his maximum speed and the direction he will run to (1 is to the left, i.e. in the direction of coordinate decrease, 2 is to the right, i.e. in the direction of coordinate increase), respectively.\n\nIt is guaranteed that the points 0 and 106 will be reached independently of the bomb's position.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00223 Stray Twins", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nW H\ntx ty\nkx ky\nd11 d21 ... dW1\nd12 d22 ... dW2\n::\nd1H d2H ... dWH\n\n\nThe first line gives the department store sizes W, H (1 ≤ W, H ≤ 50). The second line gives Takayuki's initial position tx, ty, and the third line gives Kazuyuki's initial position kx, ky.\n\nThe H line that follows gives the department store information. di, j represents the type of square (i, j), 0 for movable squares and 1 for obstacles.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01134 Area Separation", "description": "Input\n\nThe input consists of multiple test cases.\n\nThe first line of each test case is given the integer n representing the number of straight lines (1 <= n <= 100). Subsequent n lines contain four integers x1, y1, x2, and y2, respectively. These integers represent two different points (x1, y1) and (x2, y2) on a straight line. The two points given are always guaranteed to be points on the sides of the square. The n straight lines given are different from each other, and the straight lines do not overlap. Also, the straight line does not overlap the sides of the square.\n\nThe end of input is represented by n = 0.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "981_G. Magic multisets", "description": "Input\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^{5}) — the number of magic multisets in the array and the number of queries, respectively.\n\nThe next q lines describe queries, one per line. Each line starts with an integer t (1 ≤ t ≤ 2) — the type of the query. If t equals 1, it is followed by three integers l, r, x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ n) meaning that you should add x to all multisets with indices from l to r inclusive. If t equals 2, it is followed by two integers l, r (1 ≤ l ≤ r ≤ n) meaning that you should compute the sum of sizes of all multisets with indices from l to r inclusive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1154_F. Shovels Shop", "description": "Input\n\nThe first line of the input contains three integers n, m and k (1 ≤ n, m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ min(n, 2000)) — the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the cost of the i-th shovel.\n\nThe next m lines contain special offers. The j-th of them is given as a pair of integers (x_i, y_i) (1 ≤ y_i ≤ x_i ≤ n) and means that if Misha buys exactly x_i shovels during some purchase, then he can take y_i most cheapest of them for free.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1277_D. Let's Play the Words?", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains one integer n (1 ≤ n ≤ 2⋅10^5) — the number of words in the Polycarp's set. Next n lines contain these words. All of n words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed 4⋅10^6. All words are different.\n\nGuaranteed, that the sum of n for all test cases in the input doesn't exceed 2⋅10^5. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed 4⋅10^6.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1400_B. RPG Protagonist", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers p and f (1 ≤ p, f ≤ 10^9) — yours and your follower's capacities.\n\nThe second line of each test case contains two integers cnt_s and cnt_w (1 ≤ cnt_s, cnt_w ≤ 2 ⋅ 10^5) — the number of swords and war axes in the shop.\n\nThe third line of each test case contains two integers s and w (1 ≤ s, w ≤ 10^9) — the weights of each sword and each war axe.\n\nIt's guaranteed that the total number of swords and the total number of war axes in all test cases don't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "988_F. Rain and Umbrellas", "description": "Input\n\nThe first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.\n\nEach of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.\n\nEach of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "926_D. Choose Place", "description": "Input\n\nThe input consists of 6 lines. Each line describes one row of desks, starting from the closest to the blackboard. Each line is given in the following format: two characters, each is '*' or '.' — the description of the left desk in the current row; a character '-' — the aisle; two characters, each is '*' or '.' — the description of the center desk in the current row; a character '-' — the aisle; two characters, each is '*' or '.' — the description of the right desk in the current row. So, the length of each of the six lines is 8.\n\nIt is guaranteed that there is at least one vacant place in the classroom.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01442 Mysterious Maze", "description": "Input\n\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n\nH W N\ns1 ... sN\nc1,1c1,2...c1,W\n...\ncH,1cH,2...cH,W\n\n\nThe first line of a dataset contains three integers H, W and N (1 ≤ H, W ≤ 1,000, 1 ≤ N ≤ 1,000,000).\n\nThe second line contains a program of N commands.\n\nEach of the following H lines contains exactly W characters. Each of these characters represents a cell of the maze. \".\" indicates empty, \"#\" indicates a wall, \"S\" indicates an entrance, and \"G\" indicates an exit. There is exactly one entrance cell and one exit cell.\n\nThe end of input is indicated by a line with three zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "690_E2. Photographs (II)", "description": "Input\n\nThe input format is the same as in the previous version, except that the first line of every question now contains three space-separated numbers h, w and k (1 ≤ h, w ≤ 600, 2 ≤ k ≤ 16) – the height (number of rows) and width (number of columns) of the photograph and the number of pieces, respectively. The number of pieces evenly divides the height, and each piece is of the same height h / k.\n\nAgain, there is only one input file to be processed, and the same resources are provided to you as in the previous version (except that now you are given all input images in .bmp format, rather than the first 50).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "38_D. Vasya the Architect", "description": "Input\n\nThe first input file contains an integer n (1 ≤ n ≤ 100) which is the number of bricks. Each of the next n lines contains four numbers xi, 1, yi, 1, xi, 2, yi, 2 (xi, 1 ≠ xi, 2, |xi, 1 - xi, 2| = |yi, 1 - yi, 2|) which are the coordinates of the opposite angles of the base of the brick number i. The coordinates are integers and their absolute value does not exceed 50. \n\nThe cubes are given in the order Vasya puts them. It is guaranteed that the area of intersection of the upper side of the brick number i - 1 and the lower side of the brick number i is strictly strictly greater than zero for all i ≥ 2.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00450 Setting Go Stones", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nA positive integer n (1 ≤ n ≤ 100000) is written on the first line. In the second and subsequent lines i + 1 (1 ≤ i ≤ n), the color of the go stone placed in the i-th position is written. The integer ci is written, and if ci is 0, it means that the color of the i-th go stone is white, and if it is 1, it means that the color of the i-th go stone is black.\n\nOf the scoring data, 50% of the points are given by satisfying n ≤ 10000.\n\nWhen n is 0, it indicates the end of input. The number of datasets does not exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "799_E. Aquarium decoration", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 200000, 1 ≤ m ≤ n, 1 ≤ k ≤ n) — the number of decorations, how many decorations the friends should choose, how many decorations each of them should like among the chosen.\n\nThe second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109) — decorations costs.\n\nThe third line contains single integer a (1 ≤ a ≤ n) — the number of decorations liked by Masha. The fourth line contains a distinct integers x1, x2, ..., xa (1 ≤ xi ≤ n) — the ids of decorations liked by Masha.\n\nThe next two lines describe decorations liked by Arkady in the same format.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01708 Points and Lines", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is a single line which contains an expression denoting the position of treasure.\n\nIt is guaranteed that each dataset satisfies the following conditions:\n\n* The length of the string never exceeds $10^2$.\n* If both operands of \"@\" are points, their distance is greater than $1$.\n* If both operands of \"@\" are lines, they are never parallel.\n* The absolute values of points' coordinates never exceed $10^2$ at any point of evaluation.\n\n\n\nYou can also assume that there are at most $100$ datasets.\n\nThe input ends with a line that contains only a single \"#\".", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1217_E. Sum Queries?", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i < 10^9).\n\nEach of the following m lines contains a query of one of two types:\n\n  * 1~i~x (1 ≤ i ≤ n, 1 ≤ x < 10^9) — replace a_i with the value x; \n  * 2~l~r (1 ≤ l ≤ r ≤ n) — find the unbalanced subset of the multiset of the numbers a_l, a_{l + 1}, ..., a_r with the lowest sum, or report that no unbalanced subset exists. \n\n\n\nIt is guaranteed that there is at least one query of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1392_D. Omkar and Bed Wars", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). The descriptions of the test cases follows.\n\nThe first line of each test case contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the amount of players (and therefore beds) in this game of Bed Wars.\n\nThe second line of each test case contains a string s of length n. The j-th character of s is equal to L if the j-th player is attacking the player to their left, and R if the j-th player is attacking the player to their right.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01101 Taro's Shopping", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n\nn m\na1 a2 ... an\n\n\nA dataset consists of two lines. In the first line, the number of items n and the maximum payment allowed m are given. n is an integer satisfying 2 ≤ n ≤ 1000. m is an integer satisfying 2 ≤ m ≤ 2,000,000. In the second line, prices of n items are given. ai (1 ≤ i ≤ n) is the price of the i-th item. This value is an integer greater than or equal to 1 and less than or equal to 1,000,000.\n\nThe end of the input is indicated by a line containing two zeros. The sum of n's of all the datasets does not exceed 50,000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1528_C. Trees of Tranquillity", "description": "Input\n\nThe first line contains an integer t (1≤ t≤ 3 ⋅ 10^5) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (2≤ n≤ 3 ⋅ 10^5).\n\nThe second line of each test case contains n-1 integers a_2, …, a_n (1 ≤ a_i < i), a_i being the parent of the vertex i in Soroush's tree.\n\nThe third line of each test case contains n-1 integers b_2, …, b_n (1 ≤ b_i < i), b_i being the parent of the vertex i in Keshi's tree.\n\nIt is guaranteed that the given graphs are trees.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1468_D. Firecrackers", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of two lines. The first line contains four integers n, m, a and b (2 ≤ n ≤ 10^9; 1 ≤ m ≤ 2 ⋅ 10^5; 1 ≤ a, b ≤ n; a ≠ b) — the size of the corridor, the number of firecrackers, the initial location of the hooligan and the initial location of the guard, respectively.\n\nThe second line contains m integers s_1, s_2, ..., s_m (1 ≤ s_i ≤ 10^9), where s_i is the time it takes the i-th firecracker to explode after it is lit.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1237_F. Balanced Domino Placements", "description": "Input\n\nThe first line contains three integers h, w, and n (1 ≤ h, w ≤ 3600; 0 ≤ n ≤ 2400), denoting the dimensions of the grid and the number of already placed dominoes. The rows are numbered from 1 to h, and the columns are numbered from 1 to w.\n\nEach of the next n lines contains four integers r_{i, 1}, c_{i, 1}, r_{i, 2}, c_{i, 2} (1 ≤ r_{i, 1} ≤ r_{i, 2} ≤ h; 1 ≤ c_{i, 1} ≤ c_{i, 2} ≤ w), denoting the row id and the column id of the cells covered by the i-th domino. Cells (r_{i, 1}, c_{i, 1}) and (r_{i, 2}, c_{i, 2}) are distinct and share a common side.\n\nThe given domino placement is perfectly balanced.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01133 Dragon Fantasy", "description": "Input\n\nThe input consists of multiple test cases. The first line of each test case gives the five integers n (0 <n <= 20), hx, hy, dx, and dy. n is the number of crystals, (hx, hy) is the position of the hero at the moment the Demon King was resurrected, and (dx, dy) is the position where the Demon King was resurrected. The n lines that follow are given the two integers cx, cy, that represent the position of each crystal. Input ends when n = hx = hy = dx = dy = 0, which is not included in the test case.\n\nAll coordinates given in the input are guaranteed to be integers with an absolute value of 1000 or less.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1293_A. ConneR and the A.R.C. Markland-N", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases in the test. Then the descriptions of t test cases follow.\n\nThe first line of a test case contains three integers n, s and k (2 ≤ n ≤ 10^9, 1 ≤ s ≤ n, 1 ≤ k ≤ min(n-1, 1000)) — respectively the number of floors of A.R.C. Markland-N, the floor where ConneR is in, and the number of closed restaurants.\n\nThe second line of a test case contains k distinct integers a_1, a_2, …, a_k (1 ≤ a_i ≤ n) — the floor numbers of the currently closed restaurants.\n\nIt is guaranteed that the sum of k over all test cases does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1290_A. Mind Control", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers n, m and k (1 ≤ m ≤ n ≤ 3500, 0 ≤ k ≤ n - 1) — the number of elements in the array, your position in line and the number of people whose choices you can fix.\n\nThe second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3500.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "773_B. Dynamic Problem Scoring", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.\n\nEach of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.\n\nIt is guaranteed that each participant has made at least one successful submission.\n\nVasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "32_E. Hide-and-Seek", "description": "Input\n\nThe first line contains two numbers xv and yv — coordinates of Victor.\n\nThe second line contains two numbers xp and yp — coordinates of Peter.\n\nThe third line contains 4 numbers xw, 1, yw, 1, xw, 2, yw, 2 — coordinates of the wall.\n\nThe forth line contains 4 numbers xm, 1, ym, 1, xm, 2, ym, 2 — coordinates of the mirror.\n\nAll the coordinates are integer numbers, and don't exceed 104 in absolute value. It's guaranteed, that the segments don't have common points, Victor and Peter are not on any of the segments, coordinates of Victor and Peter aren't the same, the segments don't degenerate into points.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "516_E. Drazil and His Happy Friends", "description": "Input\n\nThe first line contains two integer n and m (1 ≤ n, m ≤ 109).\n\nThe second line contains integer b (0 ≤ b ≤ min(n, 105)), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.\n\nThe third line conatins integer g (0 ≤ g ≤ min(m, 105)), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.\n\nIt is guaranteed that there is at least one person that is unhappy among his friends.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1291_C. Mind Control", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers n, m and k (1 ≤ m ≤ n ≤ 3500, 0 ≤ k ≤ n - 1) — the number of elements in the array, your position in line and the number of people whose choices you can fix.\n\nThe second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3500.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "876_E. National Property", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format li, si, 1, si, 2, ..., si, li (1 ≤ li ≤ 100 000, 1 ≤ si, j ≤ m), where li is the length of the word, and si, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "895_E. Eyes Closed", "description": "Input\n\nThe first line contains two integers n, q (2 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of elements in the array and the number of queries you need to handle.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 109) — elements of the array.\n\nThe next q lines contain Petya's actions of type 1 or 2.\n\nIf it is a type 1 action then the line contains 5 integers 1, l1, r1, l2, r2 (1 ≤ l1 ≤ r1 ≤ n, 1 ≤ l2 ≤ r2 ≤ n).\n\nIf it is a type 2 query then the line contains 3 integers 2, l, r (1 ≤ l ≤ r ≤ n).\n\nIt is guaranteed that there is at least one type 2 query and segments [l1, r1], [l2, r2] don't have common elements.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "237_E. Build String", "description": "Input\n\nThe first line of the input contains string t — the string that you need to build.\n\nThe second line contains a single integer n (1 ≤ n ≤ 100) — the number of strings to which you are allowed to apply the described operation. Each of the next n lines contains a string and an integer. The i-th line contains space-separated string si and integer ai (0 ≤ ai ≤ 100). Number ai represents the maximum number of characters that can be deleted from string si.\n\nAll strings in the input only consist of lowercase English letters. All strings are non-empty. The lengths of all strings do not exceed 100 characters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "131_D. Subway", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 3000), n is the number of stations (and trains at the same time) in the subway scheme. Then n lines contain descriptions of the trains, one per line. Each line contains a pair of integers xi, yi (1 ≤ xi, yi ≤ n) and represents the presence of a passage from station xi to station yi. The stations are numbered from 1 to n in an arbitrary order. It is guaranteed that xi ≠ yi and that no pair of stations contain more than one passage. The passages can be used to travel both ways. It is guaranteed that the given description represents a classic subway scheme.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "807_D. Dynamic Problem Scoring", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.\n\nEach of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.\n\nIt is guaranteed that each participant has made at least one successful submission.\n\nVasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "875_C. National Property", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format li, si, 1, si, 2, ..., si, li (1 ≤ li ≤ 100 000, 1 ≤ si, j ≤ m), where li is the length of the word, and si, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "159_A. Friends or Not", "description": "Input\n\nThe first line of the input contains two integers n and d (1 ≤ n, d ≤ 1000). The next n lines contain the messages log. The i-th line contains one line of the log formatted as \"Ai Bi ti\" (without the quotes), which means that user Ai sent a message to user Bi at time ti (1 ≤ i ≤ n). Ai and Bi are non-empty strings at most 20 characters long, consisting of lowercase letters ('a' ... 'z'), and ti is an integer (0 ≤ ti ≤ 10000). It is guaranteed that the lines are given in non-decreasing order of ti's and that no user sent a message to himself. The elements in the lines are separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1285_E. Delete a Segment", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then the descriptions of t test cases follow.\n\nThe first of each test case contains a single integer n (2 ≤ n ≤ 2⋅10^5) — the number of segments in the given set. Then n lines follow, each contains a description of a segment — a pair of integers l_i, r_i (-10^9 ≤ l_i ≤ r_i ≤ 10^9), where l_i and r_i are the coordinates of the left and right borders of the i-th segment, respectively.\n\nThe segments are given in an arbitrary order.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1155_C. Alarm Clocks Everywhere", "description": "Input\n\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ m ≤ 3 ⋅ 10^5) — the number of events and the number of possible settings for the interval between signals.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^{18}), where x_i is the minute when i-th event starts. It is guaranteed that all x_i are given in increasing order (i. e. the condition x_1 < x_2 < ... < x_n holds).\n\nThe third line of the input contains m integers p_1, p_2, ..., p_m (1 ≤ p_j ≤ 10^{18}), where p_j is the j-th option for the interval between two consecutive signals.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1219_F. Guarding warehouses", "description": "Input\n\nThe first line contains one integer N (1 ≤ N ≤ 10^4) – the number of warehouses.\n\nThe next N lines describe the warehouses.\n\nThe first number of the line is integer c_i (3 ≤ c_i ≤ 10^4) – the number corners in the i^{th} warehouse, followed by c_i pairs of integers. The j^{th} pair is (x_j, y_j) – the coordinates of the j^{th} corner (|x_j|, |y_j| ≤ 3 * 10^4). The corners are listed in the clockwise order. The total number of corners in all the warehouses is at most 5 * 10^4.\n\nBob's office is positioned at the point with coordinates (0, 0). The office is not contained within any of the warehouses.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "883_G. Orientation of Edges", "description": "Input\n\nThe first line contains three integers n, m and s (2 ≤ n ≤ 3·105, 1 ≤ m ≤ 3·105, 1 ≤ s ≤ n) — number of vertices and edges in the graph, and the vertex Vasya has picked.\n\nThe following m lines contain information about the graph edges. Each line contains three integers ti, ui and vi (1 ≤ ti ≤ 2, 1 ≤ ui, vi ≤ n, ui ≠ vi) — edge type and vertices connected by the edge. If ti = 1 then the edge is directed and goes from the vertex ui to the vertex vi. If ti = 2 then the edge is undirected and it connects the vertices ui and vi.\n\nIt is guaranteed that there is at least one undirected edge in the graph.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1027_C. Minimum Value Rectangle", "description": "Input\n\nThe first line contains a single integer T (T ≥ 1) — the number of lists of sticks in the testcase.\n\nThen 2T lines follow — lines (2i - 1) and 2i of them describe the i-th list. The first line of the pair contains a single integer n (4 ≤ n ≤ 10^6) — the number of sticks in the i-th list. The second line of the pair contains n integers a_1, a_2, ..., a_n (1 ≤ a_j ≤ 10^4) — lengths of the sticks in the i-th list.\n\nIt is guaranteed that for each list there exists a way to choose four sticks so that they form a rectangle.\n\nThe total number of sticks in all T lists doesn't exceed 10^6 in each testcase.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1443_C. The Delivery Dilemma", "description": "Input\n\nThe first line contains one positive integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of dishes that Petya wants to order.\n\nThe second line of each test case contains n integers a_1 … a_n (1 ≤ a_i ≤ 10^9) — the time of courier delivery of the dish with the number i.\n\nThe third line of each test case contains n integers b_1 … b_n (1 ≤ b_i ≤ 10^9) — the time during which Petya will pick up the dish with the number i.\n\nThe sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "681_A. A Good Contest", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of participants Anton has outscored in this contest .\n\nThe next n lines describe participants results: the i-th of them consists of a participant handle namei and two integers beforei and afteri ( - 4000 ≤ beforei, afteri ≤ 4000) — participant's rating before and after the contest, respectively. Each handle is a non-empty string, consisting of no more than 10 characters, which might be lowercase and uppercase English letters, digits, characters «_» and «-» characters.\n\nIt is guaranteed that all handles are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01841 Rooted Tree for Misawa-san", "description": "Input\n\nThe input is expressed in the following format.\n\n$ A $\n$ B $\n\n$ A $ and $ B $ are character strings that represent the information of the rooted binary tree that you bought, and the length is $ 7 $ or more and $ 1000 $ or less. The information given follows the format described above and does not include extra whitespace. Also, rooted trees that do not have nodes are not input. You can assume that the integers written at each node are greater than or equal to $ 0 $ and less than or equal to $ 1000 $. However, note that the integers written at each node of the output may not fall within this range.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1005_F. Berland and the Shortest Paths", "description": "Input\n\nThe first line of the input contains integers n, m and k (2 ≤ n ≤ 2⋅10^5, n-1 ≤ m ≤ 2⋅10^5, 1 ≤ k ≤ 2⋅10^5), where n is the number of cities in the country, m is the number of roads and k is the number of options to choose a set of roads for repair. It is guaranteed that m ⋅ k ≤ 10^6.\n\nThe following m lines describe the roads, one road per line. Each line contains two integers a_i, b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) — the numbers of the cities that the i-th road connects. There is at most one road between a pair of cities. The given set of roads is such that you can reach any city from the capital.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1389_D. Segment Intersections", "description": "Input\n\nThe first line contains the single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^9) — the length of lists and the minimum required total intersection.\n\nThe second line of each test case contains two integers l_1 and r_1 (1 ≤ l_1 ≤ r_1 ≤ 10^9) — the segment all [al_i, ar_i] are equal to initially.\n\nThe third line of each test case contains two integers l_2 and r_2 (1 ≤ l_2 ≤ r_2 ≤ 10^9) — the segment all [bl_i, br_i] are equal to initially.\n\nIt's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01459 Light Road", "description": "Input\n\nEach test case consists of several lines.\n\nThe first line contains three integers, N, M, and A. Each of the following N lines contains M characters, and represents the grid information. '#', '.', 'S', 'G' indicates obstacle, empty square, the location of the laser generator, and the location of the evil creature, respectively. The first line shows the information in northernmost squares and the last line shows the information in southernmost squares. You can assume that there is exactly one laser generator and exactly one creature, and the laser generator emits laser beam always toward the south.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1267_D. DevOps Best Practices", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 256) — the number of servers in your company.\n\nNext n lines contain three integers each. The j-th integer in the i-th line is 1 if Daisy wants the j-th feature to be deployed to the i-th server, or 0 otherwise.\n\nNext n lines contain three integers each. The j-th integer in the i-th line is 1 if tests pass for the j-th feature on the i-th server, or 0 otherwise.\n\nDemid's development server has index 1. It is guaranteed that Daisy wants all three features to be deployed to the server number 1, and all three features pass their tests on the server number 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "540_B. School Marks", "description": "Input\n\nThe first line contains 5 space-separated integers: n, k, p, x and y (1 ≤ n ≤ 999, n is odd, 0 ≤ k < n, 1 ≤ p ≤ 1000, n ≤ x ≤ n·p, 1 ≤ y ≤ p). Here n is the number of tests that Vova is planned to write, k is the number of tests he has already written, p is the maximum possible mark for a test, x is the maximum total number of points so that the classmates don't yet disturb Vova, y is the minimum median point so that mom still lets him play computer games.\n\nThe second line contains k space-separated integers: a1, ..., ak (1 ≤ ai ≤ p) — the marks that Vova got for the tests he has already written.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00157 Russian Dolls", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\nh1 r1\nh2 r2\n::\nhn rn\nm\nh1 r1\nh2 r2\n::\nhm rm\n\n\nThe first line gives the number of matryoshka dolls of Ichiro n (n ≤ 100), and the following n lines give the height hi and radius ri (hi, ri <1000) of the ith doll of Ichiro. ..\n\nThe following line gives the number of Jiro's matryoshka dolls m (m ≤ 100), and the following m lines give the height hi and radius ri (hi, ri <1000) of Jiro's i-th doll.\n\nThe number of datasets does not exceed 20.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01230 Can I go there?", "description": "Input\n\nThe input consists of multiple datasets.\n\nEach dataset is given in the following format.\n\nN M Z\ns1 d1\ns2 d2\n...\nsM dM\n\nN is the total number of stations, M is the total number of sections, and Z is the number of steps written on the ticket. si and di (1 ≤ i ≤ M) are integers representing station numbers, indicating that there is an interval between station si and station di, respectively.\n\nN, M, Z are positive integers and satisfy the following conditions: 2 ≤ N ≤ 50, 1 ≤ M ≤ 50, 0 <Z <231.\n\nAfter the last dataset, there is a line that says \"` 0 0 0 `\".\n\nThe number of datasets does not exceed 30.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01103 A Garden with Ponds", "description": "Input\n\nThe input consists of at most 100 datasets, each in the following format.\n\n\nd w\ne1, 1 ... e1, w\n...\ned, 1 ... ed, w\n\n\nThe first line contains d and w, representing the depth and the width, respectively, of the garden site described in the map. They are positive integers between 3 and 10, inclusive. Each of the following d lines contains w integers between 0 and 9, inclusive, separated by a space. The x-th integer in the y-th line of the d lines is the elevation of the unit square cell with coordinates (x, y).\n\nThe end of the input is indicated by a line containing two zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01839 A-un Breathing", "description": "Input\n\nThe input is given in the following format.\n\n$ N $\n$ S_1 $\n$ S_2 $\n$… $\n$ S_N $\n\nThe first line consists of an integer. $ N $ represents the total number of times Maeda-san said `A` and Goto-san replied` Un` in the record, and satisfies $ 1 \\ leq N \\ leq 100 $. Then the $ N $ line is followed by the string $ S_i $, and each $ S_i (1 \\ leq i \\ leq N) $ matches either `A` or` Un`. Here, `A` represents Mr. Maeda's remark, and` Un` represents Mr. Goto's reply. It is assumed that $ S_i $ is recorded in ascending order of $ i $. It is assumed that Mr. Maeda and Mr. Goto did not speak at the same time.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "24_B. F1 Champions", "description": "Input\n\nThe first line contain integer t (1 ≤ t ≤ 20), where t is the number of races. After that all races are described one by one. Every race description start with an integer n (1 ≤ n ≤ 50) on a line of itself, where n is the number of clasified drivers in the given race. After that n lines follow with the classification for the race, each containing the name of a driver. The names of drivers are given in order from the first to the last place. The name of the driver consists of lowercase and uppercase English letters and has length at most 50 characters. Comparing of names should be case-sensetive.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "411_B. Multi-core Processor", "description": "Input\n\nThe first line contains three integers n, m, k (1 ≤ n, m, k ≤ 100). Then follow n lines describing instructions. The i-th line contains m integers: xi1, xi2, ..., xim (0 ≤ xij ≤ k), where xij is the instruction that must be executed by the i-th core at the j-th cycle. If xij equals 0, then the corresponding instruction is «do nothing». But if xij is a number from 1 to k, then the corresponding instruction is «write information to the memory cell number xij».\n\nWe assume that the cores are numbered from 1 to n, the work cycles are numbered from 1 to m and the memory cells are numbered from 1 to k.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1442_E. Black, White and Grey Tree", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 200 000): the number of vertices in the tree.\n\nThe second line of each test case contains n integers a_v (0 ≤ a_v ≤ 2): colours of vertices. Gray vertices have a_v=0, white have a_v=1, black have a_v=2.\n\nEach of the next n-1 lines contains two integers u, v (1 ≤ u, v ≤ n): tree edges.\n\nThe sum of all n throughout the test is guaranteed to not exceed 200 000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1118_F1. Tree Cutting (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of vertices in the tree.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2) — the colors of the vertices. a_i = 1 means that vertex i is colored red, a_i = 2 means that vertex i is colored blue and a_i = 0 means that vertex i is uncolored.\n\nThe i-th of the next n - 1 lines contains two integers v_i and u_i (1 ≤ v_i, u_i ≤ n, v_i ≠ u_i) — the edges of the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the tree contains at least one red vertex and at least one blue vertex.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "580_C. Kefa and Park", "description": "Input\n\nThe first line contains two integers, n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ n) — the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\n\nThe second line contains n integers a1, a2, ..., an, where each ai either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\n\nNext n - 1 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1 ≤ xi, yi ≤ n, xi ≠ yi), where xi and yi are the vertices of the tree, connected by an edge. \n\nIt is guaranteed that the given set of edges specifies a tree.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "566_D. Restructuring Company", "description": "Input\n\nThe first line of the input contains two integers n and q (1 ≤ n ≤ 200 000, 1 ≤ q ≤ 500 000) — the number of the employees of the company and the number of queries the crisis manager has.\n\nNext q lines contain the queries of the crisis manager. Each query looks like type x y, where <image>. If type = 1 or type = 2, then the query represents the decision of a crisis manager about merging departments of the first and second types respectively. If type = 3, then your task is to determine whether employees x and y work at the same department. Note that x can be equal to y in the query of any type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "156_B. Suspects", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ n) — the total number of suspects and the number of suspects who told the truth. Next n lines contain the suspects' answers. The i-th line contains either \"+ai\" (without the quotes), if the suspect number i says that the crime was committed by suspect number ai, or \"-ai\" (without the quotes), if the suspect number i says that the suspect number ai didn't commit the crime (ai is an integer, 1 ≤ ai ≤ n).\n\nIt is guaranteed that at least one suspect exists, such that if he committed the crime, then exactly m people told the truth.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01336 THE BYDOLM@STER", "description": "Input\n\nThe input consists of multiple test cases.\nThe first line of each test case is given the number N of bid dollars and the available cost M. (1 <= N, M <= 300) The next 2 * N lines contain information about each bidle.\nThe name of the bidle is on the first line of the bidle information. Biddle names consist of alphabets and spaces, with 30 characters or less. Also, there is no bidle with the same name.\nThe second line is given the integers C, V, D, L. C is the cost of hiring one Biddle, V is the vocal, D is the dance, and L is the stat of the looks. (1 <= C, V, D, L <= 300)\nInput ends with EOF.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01414 Rectangular Stamps", "description": "Input\n\n\nN\nH1 W1\n...\nHN WN\nC1,1C1,2C1,3C1,4\nC2,1C2,2C2,3C2,4\nC3,1C3,2C3,3C3,4\nC4,1C4,2C4,3C4,4\n\n\nN is the number of stamps, and Hi and Wi (1 ≤ i ≤ N) are integers representing the vertical and horizontal lengths of the i-th stamp, respectively. Ci, j (1 ≤ i ≤ 4, 1 ≤ j ≤ 4) is a character that represents the color of the picture specified for the cells in the i-th row from the top and the j-th column from the left. Red is represented by `R`, green is represented by` G`, and blue is represented by `B`.\n\nSatisfy 1 ≤ N ≤ 16, 1 ≤ Hi ≤ 4, 1 ≤ Wi ≤ 4. The same set as (Hi, Wi) does not appear multiple times.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "157_D. Suspects", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ n) — the total number of suspects and the number of suspects who told the truth. Next n lines contain the suspects' answers. The i-th line contains either \"+ai\" (without the quotes), if the suspect number i says that the crime was committed by suspect number ai, or \"-ai\" (without the quotes), if the suspect number i says that the suspect number ai didn't commit the crime (ai is an integer, 1 ≤ ai ≤ n).\n\nIt is guaranteed that at least one suspect exists, such that if he committed the crime, then exactly m people told the truth.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1458_C. Latin Square", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — number of test cases. t test case descriptions follow.\n\nThe first line of each test case description contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5) — size of the matrix and number of operations.\n\nEach of the next n lines contains n integers separated by single spaces — description of the matrix a (1 ≤ a_{i, j} ≤ n).\n\nThe last line of the description contains a string of m characters describing the operations in order, according to the format above.\n\nThe sum of n does not exceed 1000, and the sum of m does not exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1009_G. Allowed Letters", "description": "Input\n\nThe first line is the string s (1 ≤ |s| ≤ 10^5) — the name Polycarp has came up with. The string consists only of lowercase Latin letters from \"a\" to \"f\".\n\nThe second line contains a single integer m (0 ≤ m ≤ |s|) — the number of investors.\n\nThe i-th of the next m lines contain an integer number pos_i and a non-empty string of allowed characters for pos_i (1 ≤ pos_i ≤ |s|). Each string contains pairwise distinct letters from \"a\" to \"f\". pos_1, pos_2, ..., pos_m are pairwise distinct. If any position of the string doesn't appear in the investors demands then any letter can go in this position.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1408_E. Avoid Rainbow Cycles", "description": "Input\n\nThe first line contains two integers m and n (1 ≤ m, n ≤ 10^5), the number of sets and the number of vertices in the graph.\n\nThe second line contains m integers a_1, a_2, …, a_m (1 ≤ a_i ≤ 10^9).\n\nThe third line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 10^9).\n\nIn the each of the next of m lines there are descriptions of sets. In the i-th line the first integer s_i (1 ≤ s_i ≤ n) is equal to the size of A_i. Then s_i integers follow: the elements of the set A_i. These integers are from 1 to n and distinct.\n\nIt is guaranteed that the sum of s_i for all 1 ≤ i ≤ m does not exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1468_H. K and Medians", "description": "Input\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains three integers n, k, and m (3 ≤ n ≤ 2 ⋅ 10^5; 3 ≤ k ≤ n; k is odd; 1 ≤ m < n) — the length of the sequence you have, the number of elements you choose in each step and the length of the sequence you'd like to get.\n\nThe second line of each test case contains m integers b_1, b_2, ..., b_m (1 ≤ b_1 < b_2 < ... < b_m ≤ n) — the sequence you'd like to get, given in the ascending order.\n\nIt's guaranteed that the total sum of n over all test cases doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "33_D. Knights", "description": "Input\n\nThe first input line contains three integers n, m, k (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 100000). Then follow n lines, each containing two integers Kxi, Kyi ( - 109 ≤ Kxi, Kyi ≤ 109) — coordinates of control point with index i. Control points can coincide.\n\nEach of the following m lines describes fence with index i with three integers ri, Cxi, Cyi (1 ≤ ri ≤ 109,  - 109 ≤ Cxi, Cyi ≤ 109) — radius and center of the circle where the corresponding fence is situated.\n\nThen follow k pairs of integers ai, bi (1 ≤ ai, bi ≤ n), each in a separate line — requests that you have to answer. ai and bi can coincide.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "48_B. Land Lot", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 50) which represent the garden location. The next n lines contain m numbers 0 or 1, which describe the garden on the scheme. The zero means that a tree doesn’t grow on this square and the 1 means that there is a growing tree. The last line contains two integers a and b (1 ≤ a, b ≤ 50). Note that Vasya can choose for building an a × b rectangle as well a b × a one, i.e. the side of the lot with the length of a can be located as parallel to the garden side with the length of n, as well as parallel to the garden side with the length of m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "756_C. Nikita and stack", "description": "Input\n\nThe first line contains the integer m (1 ≤ m ≤ 105) — the number of operations Nikita made.\n\nThe next m lines contain the operations Nikita remembers. The i-th line starts with two integers pi and ti (1 ≤ pi ≤ m, ti = 0 or ti = 1) — the index of operation he remembers on the step i, and the type of the operation. ti equals 0, if the operation is pop(), and 1, is the operation is push(x). If the operation is push(x), the line also contains the integer xi (1 ≤ xi ≤ 106) — the integer added to the stack.\n\nIt is guaranteed that each integer from 1 to m is present exactly once among integers pi.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "637_D. Running with Obstacles", "description": "Input\n\nThe first line of the input containsd four integers n, m, s and d (1 ≤ n ≤ 200 000, 2 ≤ m ≤ 109, 1 ≤ s, d ≤ 109) — the number of obstacles on the runner's way, the coordinate of the finishing point, the length of running before the jump and the maximum length of the jump, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ m - 1) — the coordinates of the obstacles. It is guaranteed that the starting and finishing point have no obstacles, also no point can have more than one obstacle, The coordinates of the obstacles are given in an arbitrary order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "43_E. Race", "description": "Input\n\nThe first line contains two integers n and s (2 ≤ n ≤ 100, 1 ≤ s ≤ 106) — the number of cars and the length of the track in kilometers. Then follow n lines — the description of the system of segments for each car. Every description starts with integer k (1 ≤ k ≤ 100) — the number of segments in the system. Then k space-separated pairs of integers are written. Each pair is the speed and time of the segment. These integers are positive and don't exceed 1000. It is guaranteed, that the sum of lengths of all segments (in kilometers) for each car equals to s; and all the leads happen instantly.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00831 Confusing Login Names", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n\nn\nd\nname1\nname2\n...\nnamen\n\n\nThe first integer n is the number of login names. Then comes a positive integer d. Two login names whose distance is less than or equal to d are deemed to be confusing. You may assume that 0 < n ≤ 200 and 0 < d ≤ 2. The i-th student’s login name is given by namei, which is composed of only lowercase letters. Its length is less than 16. You can assume that there are no duplicates in namei (1 ≤ i ≤ n).\n\nThe end of the input is indicated by a line that solely contains a zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "40_E. Number Table", "description": "Input\n\nThe first line contains integers n and m (1 ≤ n, m ≤ 1000). The second line contains the integer k (0 ≤ k < max(n, m)) — the number of cells in which the data had been preserved. The next k lines contain the data on the state of the table in the preserved cells. Each line is of the form \"a b c\", where a (1 ≤ a ≤ n) — the number of the table row, b (1 ≤ b ≤ m) — the number of the column, c — the value containing in the cell (1 or -1). They are numbered starting from 1. It is guaranteed that no two lines with same a and b values exist. The last line contains an integer p (2 ≤ p ≤ 109 + 7).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1106_E. Lunar New Year and Red Envelopes", "description": "Input\n\nThe first line contains three non-negative integers n, m and k (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 200, 1 ≤ k ≤ 10^5), denoting the length of the timeline, the number of times Alice can disturb Bob and the total number of red envelopes, respectively.\n\nThe following k lines describe those k red envelopes. The i-th line contains four positive integers s_i, t_i, d_i and w_i (1 ≤ s_i ≤ t_i ≤ d_i ≤ n, 1 ≤ w_i ≤ 10^9) — the time segment when the i-th envelope is available, the time moment Bob can continue collecting after collecting the i-th envelope, and the number of coins in this envelope, respectively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "362_D. Fools and Foolproof Roads", "description": "Input\n\nThe first line contains four integers n (1 ≤ n ≤ 105), m (0 ≤ m ≤ 105), p (0 ≤ p ≤ 105), q (1 ≤ q ≤ n) — the number of cities in the Foolland, the number of existing roads, the number of roads that are planned to construct and the required number of regions.\n\nNext m lines describe the roads that exist by the moment upgrading of the roads begun. Each of these lines contains three integers xi, yi, li: xi, yi — the numbers of the cities connected by this road (1 ≤ xi, yi ≤ n, xi ≠ yi), li — length of the road (1 ≤ li ≤ 109). Note that one pair of cities can be connected with multiple roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00277 Programming Contest", "description": "input\n\nThe input consists of one dataset. The input is given in the following format.\n\n\nN R L\nd1 t1 x1\nd2 t2 x2\n::\ndR tR xR\n\n\nThe first line consists of three integers. N (2 ≤ N ≤ 100000) is the number of teams and R (0 ≤ R ≤ 1000000) is the number of records in the log. L (1 ≤ L ≤ 1000000) represents the time (length) of the contest. The information of each record is given in the following R line. Each record shows that team di (1 ≤ di ≤ N) has scored or deducted xi (-1000 ≤ xi ≤ 1000) points ti (0 <ti <L) seconds after the start of the contest. However, ti and xi are integers, and ti-1 ≤ ti.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00242 Input Candidates", "description": "input\n\nGiven multiple datasets. The end of the input is represented by a single zero. Each dataset is given in the following format:\n\n\nn\nline1\nline2\n::\nlinen\nk\n\n\nThe first line is given the number of lines of text n (1 ≤ n ≤ 10). The text is given on the next n lines. The text consists of half-width lowercase letters and half-width spaces, and the number of characters in one line is 1 to 1024 characters. Words separated by spaces are between 1 and 20 characters.\n\nThe first letter k is given in the following line as a half-width alphabetic character.\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1423_G. Growing flowers", "description": "Input\n\nFirst line contains two integers N and Q \\;(1 ≤ N, Q ≤ 10^5)  — number of flowers and the number of queries, respectively.\n\nThe second line contains N integers A_1, A_2, ..., A_N\\;(1 ≤ A_i ≤ 10^9)  — where A_i represents type of the i-th flower.\n\nEach of the next Q lines describe queries and start with integer T∈\\{1, 2\\}. \n\n  * If T = 1, there will be three more integers in the line L, R, X\\;(1 ≤ L, R ≤ N;\\; 1 ≤ X ≤ 10^9)  — L and R describing boundaries and X describing the flower type \n  * If T = 2, there will be one more integer in the line K\\;(1 ≤ K ≤ N)  — resident's width of view", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "63_C. Bulls and Cows", "description": "Input\n\nThe first input line contains an integer n (1 ≤ n ≤ 10) which represents the number of already made guesses. Then follow n lines in the form of \"ai bi ci\", where ai is the i-th experimental number, bi is the number of bulls, ci is the number of cows (1 ≤ i ≤ n, 0 ≤ bi, ci, bi + ci ≤ 4). The experimental numbers are correct, i.e., each of them contains exactly four digits, in each of them all the four digits are different, and there can be a leading zero. All the experimental numbers are different. As the guesser hasn't guessed the number yet, the answer \"4 bulls 0 cows\" is not present.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "568_E. Longest Increasing Subsequence", "description": "Input\n\nThe first line contains a single integer n — the length of the array (1 ≤ n ≤ 105).\n\nThe second line contains n space-separated integers — the elements of the sequence. A gap is marked as \"-1\". The elements that are not gaps are positive integers not exceeding 109. It is guaranteed that the sequence contains 0 ≤ k ≤ 1000 gaps.\n\nThe third line contains a single positive integer m — the number of elements to fill the gaps (k ≤ m ≤ 105).\n\nThe fourth line contains m positive integers — the numbers to fill gaps. Each number is a positive integer not exceeding 109. Some numbers may be equal.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1315_B. Homecoming", "description": "Input\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4).\n\nThe first line of each test case consists of three integers a, b, p (1 ≤ a, b, p ≤ 10^5) — the cost of bus ticket, the cost of tram ticket and the amount of money Petya has.\n\nThe second line of each test case consists of one string s, where s_i = A, if there is a bus station at i-th crossroad, and s_i = B, if there is a tram station at i-th crossroad (2 ≤ |s| ≤ 10^5).\n\nIt is guaranteed, that the sum of the length of strings s by all test cases in one test doesn't exceed 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "242_D. Dispute", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105), that denote the number of counters Valera has and the number of pairs of counters connected by wires.\n\nEach of the following m lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), that mean that counters with numbers ui and vi are connected by a wire. It is guaranteed that each pair of connected counters occurs exactly once in the input.\n\nThe last line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 105), where ai is the value that Ignat choose for the i-th counter.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1523_A. Game of Life", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^9), which are the total number of cells in the array and the number of iterations.\n\nThe second line of each test case contains a string of length n made up of characters \"0\" and \"1\" and defines the initial state of the array. \"1\" means a cell is alive and \"0\" means it is dead.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01120 Tally Counters", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n m\n>  a1 a2 ... an\n>  b1 b2 ... bn\n>\n\nEach dataset consists of 3 lines. The first line contains n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), the number of counters and the maximum value displayed on counters, respectively. The second line contains the initial values on counters, ai (1 ≤ ai ≤ m), separated by spaces. The third line contains the target values on counters, bi (1 ≤ bi ≤ m), separated by spaces.\n\nThe end of the input is indicated by a line containing two zeros. The number of datasets does not exceed 100.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "918_B. Radio Station", "description": "Input\n\nThe first line of input contains two integers n and m (1 ≤ n, m ≤ 1000).\n\nThe next n lines contain the names and ips of the servers. Each line contains a string name, name of the server and a string ip, ip of the server, separated by space (1 ≤ |name| ≤ 10, name only consists of English lowercase letters). It is guaranteed that all ip are distinct.\n\nThe next m lines contain the commands in the configuration file. Each line is of form \"command ip;\" (1 ≤ |command| ≤ 10, command only consists of English lowercase letters). It is guaranteed that ip belongs to one of the n school servers.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00203 A New Plan of Aizu Ski Resort", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nX Y\nc11 c21 ... cX1\nc12 c22 ... cX2\n::\nc1Y c2Y ... cXY\n\n\nThe first line gives the course size X, Y (1 ≤ X, Y ≤ 15). Course information is given in the Y line that follows. cij (one of 0, 1, or 2) is an integer that represents the information of the squares of x = i, y = j, where 0 is a movable square, 1 is a square with an obstacle, and 2 is a square with a jumping platform. Represents.\n\nThe number of datasets does not exceed 50.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00259 Finite Field Calculator", "description": "input\n\nThe input consists of multiple datasets. The end of the input is indicated by a line 0: with only 0 followed by a colon. Each dataset is given in the following format.\n\n\np: exp\n\n\nThe dataset is one row, where p (2 ≤ p ≤ 46000) is a prime number and exp is an arithmetic expression. exp consists of addition, subtraction, multiplication and division (+,-, *, /, respectively), parentheses, and numbers from 0 to p-1. One or more spaces can appear before and after operators, numbers, parentheses, etc. The length of exp does not exceed 100,000.\n\nThe number of datasets does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "813_A. The Contest", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 1000) — the number of problems. The second line contains n integers ai (1 ≤ ai ≤ 105) — the time Pasha needs to solve ith problem.\n\nThe third line contains one integer m (0 ≤ m ≤ 1000) — the number of periods of time when the website is working. Next m lines represent these periods. jth line contains two numbers lj and rj (1 ≤ lj < rj ≤ 105) — the starting and the ending moment of jth period.\n\nIt is guaranteed that the periods are not intersecting and are given in chronological order, so for every j > 1 the condition lj > rj - 1 is met.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1399_F. Yet Another Segments Subset", "description": "Input\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 3000) — the number of segments. The next n lines describe segments. The i-th segment is given as two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 2 ⋅ 10^5), where l_i is the left border of the i-th segment and r_i is the right border of the i-th segment.\n\nAdditional constraint on the input: there are no duplicates in the list of segments.\n\nIt is guaranteed that the sum of n does not exceed 3000 (∑ n ≤ 3000).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "765_A. Neverending competitions", "description": "Input\n\nIn the first line of input there is a single integer n: the number of Jinotega's flights (1 ≤ n ≤ 100). In the second line there is a string of 3 capital Latin letters: the name of Jinotega's home airport. In the next n lines there is flight information, one flight per line, in form \"XXX->YYY\", where \"XXX\" is the name of departure airport \"YYY\" is the name of arrival airport. Exactly one of these airports is Jinotega's home airport.\n\nIt is guaranteed that flights information is consistent with the knowledge of Jinotega's friends, which is described in the main part of the statement.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "922_E. Birds", "description": "Input\n\nThe first line contains four integers n, W, B, X (1 ≤ n ≤ 103, 0 ≤ W, B, X ≤ 109) — the number of trees, the initial points of mana, the number of points the mana capacity increases after a bird is summoned, and the number of points restored when Imp moves from a tree to the next one.\n\nThe second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 104) — where ci is the number of birds living in the i-th nest. It is guaranteed that <image>.\n\nThe third line contains n integers cost1, cost2, ..., costn (0 ≤ costi ≤ 109), where costi is the mana cost to summon a bird from the i-th nest.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "87_B. Vasya and Types", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of operators. Then follow n lines with operators. Each operator is of one of two types: either \"typedef A B\", or \"typeof A\". In the first case the B type differs from void and errtype types, and besides, doesn't have any asterisks and ampersands.\n\nAll the data type names are non-empty lines of no more than 20 lowercase Latin letters. The number of asterisks and ampersands separately in one type in any operator does not exceed 10, however if we bring some types to void with several asterisks, their number may exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "756_E. Byteland coins", "description": "Input\n\nThe first line contains single integer n (1 ≤ n ≤ 3·105) — the number of coin types.\n\nThe second line contains n - 1 integers a1, a2, ..., an - 1 (1 ≤ ak ≤ 109) — the ratios between the coin types denominations. It is guaranteed that for each x there are at most 20 coin types of denomination x.\n\nThe third line contains n non-negative integers b1, b2, ..., bn — the number of coins of each type Byteasar has. It is guaranteed that the sum of these integers doesn't exceed 3·105.\n\nThe fourth line contains single integer m (0 ≤ m < 1010000) — the amount in tugricks Byteasar needs to pay.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "88_D. Vasya and Types", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of operators. Then follow n lines with operators. Each operator is of one of two types: either \"typedef A B\", or \"typeof A\". In the first case the B type differs from void and errtype types, and besides, doesn't have any asterisks and ampersands.\n\nAll the data type names are non-empty lines of no more than 20 lowercase Latin letters. The number of asterisks and ampersands separately in one type in any operator does not exceed 10, however if we bring some types to void with several asterisks, their number may exceed 10.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1389_G. Directing Edges", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 3 ⋅ 10^5, n - 1 ≤ m ≤ min(3 ⋅ 10^5, (n(n-1))/(2)), 1 ≤ k ≤ n).\n\nThe second line contains k pairwise distinct integers v_1, v_2, ..., v_k (1 ≤ v_i ≤ n) — the indices of the special vertices.\n\nThe third line contains n integers c_1, c_2, ..., c_n (0 ≤ c_i ≤ 10^9).\n\nThe fourth line contains m integers w_1, w_2, ..., w_m (0 ≤ w_i ≤ 10^9).\n\nThen m lines follow, the i-th line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i) — the endpoints of the i-th edge.\n\nThere is at most one edge between each pair of vertices.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1470_D. Strange Housing", "description": "Input\n\nThe first input line contains a single integer t — the number of test cases (1 ≤ t ≤ 10^5). \n\nEach test case starts with two integers n and m (2 ≤ n ≤ 3 ⋅ 10^5, 0 ≤ m ≤ 3 ⋅ 10^5) — the number of houses and the number of passages.\n\nThen m lines follow, each of them contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), describing a passage between the houses u and v. It is guaranteed that there are no two passages connecting the same pair of houses.\n\nThe sum of values n over all test cases does not exceed 3 ⋅ 10^5, and the sum of values m over all test cases does not exceed 3 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1528_D. It's a bird! No, it's a plane! No, it's AaParsa!", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 600 , n ≤ m ≤ n^2) — the number of cities and cannons correspondingly.\n\nThe i-th line of the following m lines contains three integers a_i, b_i and c_i ( 0 ≤ a_i , b_i ≤ n-1 , 1 ≤ c_i ≤ 10^9), denoting the cannon in the city a_i, which is initially pointing to b_i and travelling by which takes c_i seconds.\n\nIt is guaranteed that each of the n cities has at least one transport cannon planted inside it, and that no two cannons from the same city are initially pointing at the same city (that is, all pairs (a_i, b_i) are distinct).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1227_C. Messy", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains two integers n and k (1 ≤ k ≤ n/2, 2 ≤ n ≤ 2000, n is even) — length of s and required number of regular prefixes.\n\nThe second line of a test case contains s of length n — the given bracket sequence. It contains only '(' and ')'.\n\nIt is guaranteed that there are exactly n/2 characters '(' and exactly n/2 characters ')' in the given string.\n\nThe sum of all values n over all the test cases in the input doesn't exceed 2000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1261_A. Messy", "description": "Input\n\nThe first line contains integer number t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains two integers n and k (1 ≤ k ≤ n/2, 2 ≤ n ≤ 2000, n is even) — length of s and required number of regular prefixes.\n\nThe second line of a test case contains s of length n — the given bracket sequence. It contains only '(' and ')'.\n\nIt is guaranteed that there are exactly n/2 characters '(' and exactly n/2 characters ')' in the given string.\n\nThe sum of all values n over all the test cases in the input doesn't exceed 2000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "515_B. Drazil and His Happy Friends", "description": "Input\n\nThe first line contains two integer n and m (1 ≤ n, m ≤ 100).\n\nThe second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.\n\nThe third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.\n\nIt is guaranteed that there is at least one person that is unhappy among his friends.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "920_B. Tea Queue", "description": "Input\n\nThe first line contains one integer t — the number of test cases to solve (1 ≤ t ≤ 1000).\n\nThen t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 1000) — the number of students.\n\nThen n lines follow. Each line contains two integer li, ri (1 ≤ li ≤ ri ≤ 5000) — the second i-th student comes to the end of the queue, and the second he leaves the queue if he still cannot get his tea.\n\nIt is guaranteed that for every <image> condition li - 1 ≤ li holds.\n\nThe sum of n over all test cases doesn't exceed 1000.\n\nNote that in hacks you have to set t = 1.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "932_D. Tree", "description": "Input\n\nFirst line containing the number of queries Q (1 ≤ Q ≤ 400000).\n\nLet last be the answer for previous query of type 2 (initially last equals 0).\n\nEach of the next Q lines contains a query of following form: \n\n  * 1 p q (1 ≤ p, q ≤ 1018): This is query of first type where <image> and <image>. It is guaranteed that 1 ≤ R ≤ cnt and 0 ≤ W ≤ 109. \n  * 2 p q (1 ≤ p, q ≤ 1018): This is query of second type where <image> and <image>. It is guaranteed that 1 ≤ R ≤ cnt and 0 ≤ X ≤ 1015. \n\n\n\n<image> denotes bitwise XOR of a and b.\n\nIt is guaranteed that at least one query of type 2 exists.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1322_D. Reality Show", "description": "Input\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2000) — the number of candidates and an upper bound for initial aggressiveness levels.\n\nThe second line contains n integers l_i (1 ≤ l_i ≤ m) — initial aggressiveness levels of all candidates.\n\nThe third line contains n integers s_i (0 ≤ s_i ≤ 5000) — the costs (in roubles) to recruit each of the candidates.\n\nThe fourth line contains n + m integers c_i (|c_i| ≤ 5000) — profitability for each aggrressiveness level.\n\nIt is guaranteed that aggressiveness level of any participant can never exceed n + m under given conditions.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00908 Sliding Block Puzzle", "description": "Input\n\nThe input is a sequence of datasets. The first line of a dataset consists of two integers H and W separated by a space, where H and W are the height and the width of the frame. The following H lines, each consisting of W characters, denote the initial placement of pieces. In those H lines, 'X', 'o', '*', and '.' denote a part of the king piece, a pawn piece, an obstacle, and an open square, respectively. There are no other characters in those H lines. You may assume that 3 ≤ H ≤ 50 and 3 ≤ W ≤ 50.\n\nA line containing two zeros separated by a space indicates the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01280 Galaxy Wide Web Service", "description": "Input\n\nThe input consists of multiple datasets. Each dataset has the following format:\n\nN\nd1 t1 q1,0 ... q1,d1-1\n...\ndN tN qN,0 ... qN,dN-1\n\n\nN is the number of planets. di (1 ≤ i ≤ N) is the length of a day in the planet i.  ti (0 ≤ ti ≤ di - 1) is the current time of the planet i. qi, j is the volume of access on the planet i during from the j-th hour to the (j+1)-th hour.\n\nYou may assume that N ≤ 100, di ≤ 24, qi, j ≤ 1000000 (1 ≤ i ≤ N, 0 ≤ j ≤ di - 1).\n\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "641_C. Little Artem and Dance", "description": "Input\n\nThe first line of the input contains two integers n and q (2 ≤ n ≤ 1 000 000, 1 ≤ q ≤ 2 000 000) — the number of couples in the rueda and the number of commands to perform, respectively. It's guaranteed that n is even.\n\nNext q lines contain the descriptions of the commands. Each command has type as the integer 1 or 2 first. Command of the first type is given as x ( - n ≤ x ≤ n), where 0 ≤ x ≤ n means all boys moves x girls in clockwise direction, while  - x means all boys move x positions in counter-clockwise direction. There is no other input for commands of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00544 Russian Flag", "description": "input\n\nThe input consists of 1 + N lines.\n\nOn the first line, two integers N and M (3 ≤ N ≤ 50, 3 ≤ M ≤ 50) are written separated by a blank. This means that the flags are separated by N rows and M columns.\n\nThe following N lines each contain a string of M characters, which represents the color information painted in the squares of the old flag. The jth character (1 ≤ i ≤ N, 1 ≤ j ≤ M) on the i-th line of the N-line represents the color of the cell on the i-th line and j-th column of the old flag. It is either B'or'R'. 'W' stands for white,'B' stands for blue, and'R' stands for red.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "669_D. Little Artem and Dance", "description": "Input\n\nThe first line of the input contains two integers n and q (2 ≤ n ≤ 1 000 000, 1 ≤ q ≤ 2 000 000) — the number of couples in the rueda and the number of commands to perform, respectively. It's guaranteed that n is even.\n\nNext q lines contain the descriptions of the commands. Each command has type as the integer 1 or 2 first. Command of the first type is given as x ( - n ≤ x ≤ n), where 0 ≤ x ≤ n means all boys moves x girls in clockwise direction, while  - x means all boys move x positions in counter-clockwise direction. There is no other input for commands of the second type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1427_B. Chess Cheater", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1≤ t ≤ 20,000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers n, k (1≤ n≤ 100,000, 0≤ k≤ n) – the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string s of length n containing only the characters W and L. If you have won the i-th game then s_i= W, if you have lost the i-th game then s_i= L.\n\nIt is guaranteed that the sum of n over all testcases does not exceed 200,000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "912_C. Perun, Ult!", "description": "Input\n\nIn the first line, two integers are given (separated by spaces) — n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105).\n\nIn the second line, there are three integers: <image>, <image> and <image> (<image>, <image>).\n\nEach of the following n lines has three integers — <image>, <image>, <image> (<image>, <image>).\n\nThe next m lines contain three integers each — <image>, <image>, <image> (<image>, <image>, <image>). It is guaranteed that there is no more than one hearth change per second for each enemy: more formally, for each a, b so that 1 ≤ a, b ≤ m, a ≠ b holds that if <image>, then <image>.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "898_C. Phone Numbers", "description": "Input\n\nFirst line contains the integer n (1 ≤ n ≤ 20) — number of entries in Vasya's phone books. \n\nThe following n lines are followed by descriptions of the records in the format described in statement. Names of Vasya's friends are non-empty strings whose length does not exceed 10. They consists only of lowercase English letters. Number of phone numbers in one entry is not less than 1 is not more than 10. The telephone numbers consist of digits only. If you represent a phone number as a string, then its length will be in range from 1 to 10. Phone numbers can contain leading zeros.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "834_A. The Useless Toy", "description": "Input\n\nThere are two characters in the first string – the starting and the ending position of a spinner. The position is encoded with one of the following characters: v (ASCII code 118, lowercase v), < (ASCII code 60), ^ (ASCII code 94) or > (ASCII code 62) (see the picture above for reference). Characters are separated by a single space.\n\nIn the second strings, a single number n is given (0 ≤ n ≤ 109) – the duration of the rotation.\n\nIt is guaranteed that the ending position of a spinner is a result of a n second spin in any of the directions, assuming the given starting position.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "200_C. Football Championship", "description": "Input\n\nThe input has five lines.\n\nEach line describes a game as \"team1 team2 goals1:goals2\" (without the quotes), what means that team team1 played a game with team team2, besides, team1 scored goals1 goals and team2 scored goals2 goals. The names of teams team1 and team2 are non-empty strings, consisting of uppercase English letters, with length of no more than 20 characters; goals1, goals2 are integers from 0 to 9. \n\nThe Berland team is called \"BERLAND\". It is guaranteed that the Berland team and one more team played exactly 2 games and the the other teams played exactly 3 games.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "665_A. Buses Between Cities", "description": "Input\n\nThe first line contains two integers a, ta (1 ≤ a, ta ≤ 120) — the frequency of the buses from the city A to the city B and the travel time. Both values are given in minutes.\n\nThe second line contains two integers b, tb (1 ≤ b, tb ≤ 120) — the frequency of the buses from the city B to the city A and the travel time. Both values are given in minutes.\n\nThe last line contains the departure time of Simion from the city A in the format hh:mm. It is guaranteed that there are a bus from the city A at that time. Note that the hours and the minutes are given with exactly two digits.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "608_E. Marbles", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 1 000 000) — the length of the paths.\n\nThe second line of the input contains a string consisting of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string \"NNESWW\".\n\nThe third line of the input contains a string of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the second grid path.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "607_C. Marbles", "description": "Input\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 1 000 000) — the length of the paths.\n\nThe second line of the input contains a string consisting of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string \"NNESWW\".\n\nThe third line of the input contains a string of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') — the second grid path.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1081_D. Maximum Distance", "description": "Input\n\nThe first line contains three integers n, m and k (2 ≤ k ≤ n ≤ 10^5, n-1 ≤ m ≤ 10^5) — the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains k distinct integers x_1, x_2, …, x_k (1 ≤ x_i ≤ n).\n\nEach of the following m lines contains three integers u, v and w (1 ≤ u,v ≤ n, 1 ≤ w ≤ 10^9), denoting there is an edge between u and v of weight w. The given graph is undirected, so an edge (u, v) can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "705_D. Ant Man", "description": "Input\n\nThe first line of the input contains three integers n, s and e (2 ≤ n ≤ 5000, 1 ≤ s, e ≤ n, s ≠ e) — the total number of chairs, starting and ending positions of Scott.\n\nThe second line contains n integers x1, x2, ..., xn (1 ≤ x1 < x2 < ... < xn ≤ 109).\n\nThe third line contains n integers a1, a2, ..., an (1 ≤ a1, a2, ..., an ≤ 109).\n\nThe fourth line contains n integers b1, b2, ..., bn (1 ≤ b1, b2, ..., bn ≤ 109).\n\nThe fifth line contains n integers c1, c2, ..., cn (1 ≤ c1, c2, ..., cn ≤ 109).\n\nThe sixth line contains n integers d1, d2, ..., dn (1 ≤ d1, d2, ..., dn ≤ 109).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "631_C. Report", "description": "Input\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 200 000) — the number of commodities in the report and the number of managers, respectively.\n\nThe second line contains n integers ai (|ai| ≤ 109) — the initial report before it gets to the first manager.\n\nThen follow m lines with the descriptions of the operations managers are going to perform. The i-th of these lines contains two integers ti and ri (<image>, 1 ≤ ri ≤ n), meaning that the i-th manager sorts the first ri numbers either in the non-descending (if ti = 1) or non-ascending (if ti = 2) order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00774 Chain Disappearance Puzzle", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is formed as follows.\n\n> Board height H\n>  Stone placement of the row 1\n>  Stone placement of the row 2\n>  ...\n>  Stone placement of the row H\n>\n\nThe first line specifies the height ( H  ) of the puzzle board (1 ≤ H ≤ 10). The remaining H lines give placement of stones on each of the rows from top to bottom. The placements are given by five digits (1 through 9), separated by a space. These digits are engraved on the five stones in the corresponding row, in the same order.\n\nThe input ends with a line with a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "776_A. A Serial Killer", "description": "Input\n\nFirst line of input contains two names (length of each of them doesn't exceed 10), the two initials potential victims. Next line contains integer n (1 ≤ n ≤ 1000), the number of days.\n\nNext n lines contains two names (length of each of them doesn't exceed 10), first being the person murdered on this day and the second being the one who replaced that person.\n\nThe input format is consistent, that is, a person murdered is guaranteed to be from the two potential victims at that time. Also, all the names are guaranteed to be distinct and consists of lowercase English letters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "80_C. Heroes", "description": "Input\n\nThe first line contains a single non-negative integer n (0 ≤ n ≤ 42) — amount of liking between the heroes. Next n lines describe liking in the form \"p likes q\", meaning that the hero p likes the hero q (p ≠  q). Every liking is described in the input exactly once, no hero likes himself.\n\nIn the last line are given three integers a, b and c (1 ≤ a, b, c ≤ 2·109), separated by spaces: the experience for Mephisto, the experience for Diablo and experience for Baal.\n\nIn all the pretests, except for examples from the statement, the following condition is satisfied: a = b = c.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01139 Surrounding Area", "description": "Input\n\nThe input consists of multiple datasets. Each data set has the following structure.\n\n> w h\n> a1,1 a2,1 a3,1 ... aw,1\n> a1,2 a2,2 a3,2 ... aw, 2\n> ...\n> a1, h a2, h a3, h ... aw, h\n\nw is the width of the land and h is the height of the land. These satisfy 1 ≤ w and h ≤ 50. Each ai, j is one half-width character representing the state of the grid (i, j), \"` B` \"is struck with a black stake, and\" `W`\" is struck with a white stake. \"`.` \"(Period) indicates that none of the stakes have been struck.\n\nw = h = 0 represents the end of the input and is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "53_D. Physical Education", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 300) which is the number of students. The second line contains n space-separated integers ai (1 ≤ ai ≤ 109) which represent the height of the student occupying the i-th place must possess. The third line contains n space-separated integers bi (1 ≤ bi ≤ 109) which represent the height of the student occupying the i-th place in the initial arrangement. It is possible that some students possess similar heights. It is guaranteed that it is possible to arrange the children in the required order, i.e. a and b coincide as multisets.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "246_D. Colorful Graph", "description": "Input\n\nThe first line contains two space-separated integers n, m (1 ≤ n, m ≤ 105) — the number of vertices end edges of the graph, correspondingly. The second line contains a sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 105) — the colors of the graph vertices. The numbers on the line are separated by spaces.\n\nNext m lines contain the description of the edges: the i-th line contains two space-separated integers ai, bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — the numbers of the vertices, connected by the i-th edge. \n\nIt is guaranteed that the given graph has no self-loops or multiple edges.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "77_A. Heroes", "description": "Input\n\nThe first line contains a single non-negative integer n (0 ≤ n ≤ 42) — amount of liking between the heroes. Next n lines describe liking in the form \"p likes q\", meaning that the hero p likes the hero q (p ≠  q). Every liking is described in the input exactly once, no hero likes himself.\n\nIn the last line are given three integers a, b and c (1 ≤ a, b, c ≤ 2·109), separated by spaces: the experience for Mephisto, the experience for Diablo and experience for Baal.\n\nIn all the pretests, except for examples from the statement, the following condition is satisfied: a = b = c.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1468_N. Waste Sorting", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 3 ⋅ 10^4) — the number of test cases. \n\nEach test case consists of two lines. The first line of each test case contains three integers c_1, c_2, c_3 (0 ≤ c_1, c_2, c_3 ≤ 10^8) — the capacities of the containers. \n\nThe second line of each test case contains five integers a_1, a_2, a_3, a_4, a_5 (0 ≤ a_i ≤ 10^8), where a_i is the number of items of the i-th category Monocarp has to throw out (i = 1 is paper waste, i = 2 is plastic waste, i = 3 is general waste, i = 4 is partially-paper waste, i = 5 is partially-plastic waste).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "167_B. Wizards and Huge Prize", "description": "Input\n\nThe first line contains three integers n, l, k (1 ≤ n ≤ 200, 0 ≤ l, k ≤ 200) — the number of tours, the minimum number of tours to win, and the number of prizes that you can fit in the bags brought from home, correspondingly.\n\nThe second line contains n space-separated integers, pi (0 ≤ pi ≤ 100) — the probability to win the i-th tour, in percents.\n\nThe third line contains n space-separated integers, ai (1 ≤ ai ≤ 200) — the capacity of the bag that will be awarded to you for winning the i-th tour, or else -1, if the prize for the i-th tour is a huge prize and not a bag.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00459 Shuffle", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe input consists of m + 3 lines. The number of cards n is written on the first line (3 ≤ n ≤ 1000000000 = 109). The second line contains the integer m, which represents the number of shuffles (1 ≤ m ≤ 5000). The integers p, q, r are written on the third line (1 ≤ p ≤ q ≤ n, 1 ≤ r ≤ n). On the third line of i + (1 ≤ i ≤ m), two integers xi and yi (1 ≤ xi <yi <n) are written separated by a blank.\n\nWhen n is 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "685_C. Optimal Point", "description": "Input\n\nThe first line of the input contains an integer t t (1 ≤ t ≤ 100 000) — the number of test cases. Then follow exactly t blocks, each containing the description of exactly one test.\n\nThe first line of each block contains an integer ni (1 ≤ ni ≤ 100 000) — the number of roses in the test. Then follow ni lines, containing three integers each — the coordinates of the corresponding rose. Note that two or more roses may share the same position.\n\nIt's guaranteed that the sum of all ni doesn't exceed 100 000 and all coordinates are not greater than 1018 by their absolute value.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1130_C. Connect", "description": "Input\n\nThe first line contains one integer n (1 ≤ n ≤ 50) — the width of the square grid.\n\nThe second line contains two space-separated integers r_1 and c_1 (1 ≤ r_1, c_1 ≤ n) — denoting the cell where Alice resides.\n\nThe third line contains two space-separated integers r_2 and c_2 (1 ≤ r_2, c_2 ≤ n) — denoting the cell to which Alice wishes to travel.\n\nEach of the following n lines contains a string of n characters. The j-th character of the i-th such line (1 ≤ i, j ≤ n) is 0 if (i, j) is land or 1 if (i, j) is water.\n\nIt is guaranteed that (r_1, c_1) and (r_2, c_2) are land.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1264_A. Beautiful Regional Contest", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 4⋅10^5) — the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 ≥ p_2 ≥ ... ≥ p_n.\n\nThe sum of n over all test cases in the input does not exceed 4⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1304_E. 1-Trees and Queries", "description": "Input\n\nThe first line contains an integer n (3 ≤ n ≤ 10^5), the number of vertices of the tree.\n\nNext n-1 lines contain two integers u and v (1 ≤ u,v ≤ n, u ≠ v) each, which means there is an edge between vertex u and v. All edges are bidirectional and distinct.\n\nNext line contains an integer q (1 ≤ q ≤ 10^5), the number of queries Gildong wants to ask.\n\nNext q lines contain five integers x, y, a, b, and k each (1 ≤ x,y,a,b ≤ n, x ≠ y, 1 ≤ k ≤ 10^9) – the integers explained in the description. It is guaranteed that the edge between x and y does not exist in the original tree.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00736 How can I satisfy thee? Let me count the ways...", "description": "Input\n\nThe input consists of one or more lines. Each line contains a formula. A formula is a string which consists of 0, 1, 2, P, Q, R, -, *, +, (, ). Other characters such as spaces are not contained. The grammar of formulas is given by the following BNF.\n\n\n<formula> ::= 0 | 1 | 2 | P | Q | R |\n-<formula> | (<formula>*<formula>) | (<formula>+<formula>)\n\n\nAll the formulas obey this syntax and thus you do not have to care about grammatical errors. Input lines never exceed 80 characters.\n\nFinally, a line which contains only a \".\" (period) comes, indicating the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1265_C. Beautiful Regional Contest", "description": "Input\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 ≤ n ≤ 4⋅10^5) — the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 ≥ p_2 ≥ ... ≥ p_n.\n\nThe sum of n over all test cases in the input does not exceed 4⋅10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00491 Pasta", "description": "input\n\nThe input consists of K + 1 lines.\n\nOn the first line, two integers N and K (3 ≤ N ≤ 100, 1 ≤ K ≤ N) are written with a blank as a delimiter.\n\nOn the 1 + i line (1 ≤ i ≤ K), two integers Ai and Bi (1 ≤ Ai ≤ N, 1 ≤ Bi ≤ 3) are written with a blank as a delimiter. This means that the pasta on the Ai day has already been decided, and when Bi = 1, it is a tomato sauce, when Bi = 2, it is a cream sauce, and when Bi = 3, it is a basil sauce. Ai (1 ≤ i ≤ K) are all different. It is guaranteed that there will be at least one plan to meet the conditions in the given input data.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00207 Block", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by two lines of zeros. Each dataset is given in the following format:\n\n\nw h\nxs ys ys\nxg yg\nn\nc1 d1 x1 y1\nc2 d2 x2 y2\n::\ncn dn xn yn\n\n\nThe board size w, h (4 ≤ w, h ≤ 100) is given on the first line. The second line gives the start coordinates xs, ys, and the third line gives the goal coordinates xg, yg.\n\nThe number of blocks n is given on the 4th line. The next n lines are given the color ci, orientation di, position xi, yi of the i-th block.\n\nThe number of datasets does not exceed 30.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1301_B. Motarack's Birthday", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 10^{5}) — the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-1 ≤ a_i ≤ 10 ^ {9}). If a_i = -1, then the i-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 4 ⋅ 10 ^ {5}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "343_C. Read Time", "description": "Input\n\nThe first line of the input contains two space-separated integers n, m (1 ≤ n, m ≤ 105) — the number of disk heads and the number of tracks to read, accordingly. The second line contains n distinct integers hi in ascending order (1 ≤ hi ≤ 1010, hi < hi + 1) — the initial positions of the heads. The third line contains m distinct integers pi in ascending order (1 ≤ pi ≤ 1010, pi < pi + 1) - the numbers of tracks to read.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is recommended to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01087 ICPC Calculator", "description": "Input\n\nThe input consists of multiple datasets. Each dataset starts with a line containing a positive integer n, followed by n lines denoting a single expression in Dr. Tsukuba's notation.\n\nYou may assume that, in the expressions given in the input, every integer comprises a single digit and that every expression has no more than nine integers. You may also assume that all the input expressions are valid in the Dr. Tsukuba's notation. The input contains no extra characters, such as spaces or empty lines.\n\nThe last dataset is immediately followed by a line with a single zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01680 Everlasting -One-", "description": "Input\n\nThe input is a sequence of datasets. The number of datasets is not more than $50$ and the total size of input is less than $5$ MB.\n\nEach dataset is formatted as follows.\n\n> $N$ $M$\n> $a_1$ $b_1$\n> :\n> :\n> $a_M$ $b_M$\n\nThe first line of each dataset contains two integers $N$ and $M$ ($1 \\le N \\le 10^5$ and $0 \\le M \\le 10^5$). Then $M$ lines follow. The $i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i \\lt b_i \\le N$) which denote the $i$-th special pair. The input is terminated by two zeroes.\n\nIt is guaranteed that $(a_i, b_i) \\ne (a_j, b_j)$ if $i \\ne j$.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01622 Twin book report", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n\nN\nr1 w1\nr2 w2\n...\nrN wN\n\n\nN is an integer representing the number of task books, and can be assumed to be 1 or more and 1,000 or less.\n\nThe following N lines represent information about the task book. Each line contains two integers separated by spaces, ri (1 ≤ ri ≤ 1,000) is the time it takes to read the i-th book, and wi (1 ≤ wi ≤ 1,000) is the impression of the i-th book. Represents the time it takes to write.\n\nN = 0 indicates the end of input. This is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00773 Tax Rate Changed", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is in one line, which consists of three integers x, y, and s separated by a space. x is the VAT rate in percent before the VAT-rate change, y is the VAT rate in percent after the VAT-rate change, and s is the sum of after-tax prices of two items before the VAT-rate change. For these integers, 0 < x < 100, 0 < y < 100, 10 < s < 1000, and x ≠ y hold. For before-tax prices of items, all possibilities of 1 yen through s-1 yen should be considered.\n\nThe end of the input is specified by three zeros separated by a space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "739_E. Gosha is hunting", "description": "Input\n\nThe first line contains three integers n, a and b (2 ≤ n ≤ 2000, 0 ≤ a, b ≤ n) — the number of Pokemons, the number of Poke Balls and the number of Ultra Balls.\n\nThe second line contains n real values p1, p2, ..., pn (0 ≤ pi ≤ 1), where pi is the probability of catching the i-th Pokemon if Gosha throws a Poke Ball to it.\n\nThe third line contains n real values u1, u2, ..., un (0 ≤ ui ≤ 1), where ui is the probability of catching the i-th Pokemon if Gosha throws an Ultra Ball to it.\n\nAll the probabilities are given with exactly three digits after the decimal separator.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "277_A. Learning Languages", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of employees and the number of languages.\n\nThen n lines follow — each employee's language list. At the beginning of the i-th line is integer ki (0 ≤ ki ≤ m) — the number of languages the i-th employee knows. Next, the i-th line contains ki integers — aij (1 ≤ aij ≤ m) — the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "53_E. Dead Ends", "description": "Input\n\nThe first line contains three integers n, m and k (3 ≤ n ≤ 10, n - 1 ≤ m ≤ n·(n - 1) / 2, 2 ≤ k ≤ n - 1) which represent the number of junctions, roads and dead ends correspondingly. Then follow m lines each containing two different integers v1 and v2 (1 ≤ v1, v2 ≤ n, v1 ≠ v2) which represent the number of junctions connected by another road. There can be no more than one road between every pair of junctions. The junctions are numbered with integers from 1 to n. It is guaranteed that it is possible to get from each junction to any other one along the original roads.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01102 Almost Identical Programs", "description": "Input\n\nThe input consists of at most 100 datasets, each in the following format.\n\n\ns1\ns2\n\n\nEach of s1 and s2 is a string written in a line, with the length between 1 and 200, inclusive. They are the first and the second submitted programs respectively. A program consists of lowercase letters (`a`, `b`, ..., `z`), uppercase letters (`A`, `B`, ..., `Z`), digits (`0`, `1`, ..., `9`), double quotes (`\"`), and semicolons (`;`). When double quotes occur in a program, there are always even number of them.\n\nThe end of the input is indicated by a line containing one '`.`' (period).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00528 Modern Mansion", "description": "input\n\nRead the following data from standard input.\n\n* On the first line, the integers M, N, and K are written with blanks as delimiters. M is the number of rooms in the east-west direction of the mansion, N is the number of rooms in the north-south direction of the mansion, and K is the number of rooms with switches.\n* On the i-th line (1 ≤ i ≤ K) of the following K lines, the integers Xi and Yi are written separated by blanks. This means that there is a switch in the center of the room (Xi, Yi). The K pairs (X1, Y1), (X2, Y2), ..., (XK, YK) are different from each other.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00843 Bingo", "description": "Input\n\nThe input consists of multiple datasets. The format of each dataset is as follows.\n\n<image>\n\nAll data items are integers. P is the number of the cards, namely the number of the players. M is the number of rows and the number of columns of the matrix on each card. Nkij means the number written at the position (i, j) on the k-th card. If (i, j) ≠ (p, q), then Nkij ≠ Nkpq. The parameters P, M, and N satisfy the conditions 2 ≤ P ≤ 4, 3 ≤ M ≤ 4, and 0 ≤ Nkij ≤ 99.\n\nThe end of the input is indicated by a line containing two zeros separated by a space. It is not a dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "278_C. Learning Languages", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of employees and the number of languages.\n\nThen n lines follow — each employee's language list. At the beginning of the i-th line is integer ki (0 ≤ ki ≤ m) — the number of languages the i-th employee knows. Next, the i-th line contains ki integers — aij (1 ≤ aij ≤ m) — the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1450_C1. Errich-Tac-Toe (Easy Version)", "description": "Input\n\nThe first line contains a single integer t (1≤ t≤ 100) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 300) — the size of the grid.\n\nThe following n lines each contain a string of n characters, denoting the initial grid. The character in the i-th row and j-th column is '.' if the cell is empty, or it is the type of token in the cell: 'X' or 'O'.\n\nIt is guaranteed that not all cells are empty.\n\nIn the easy version, the character 'O' does not appear in the input.\n\nThe sum of n across all test cases does not exceed 300.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00669 K Cards", "description": "Constraints\n\n* All inputs are integers\n* 2 ≤ n ≤ 100\n* 1 ≤ k ≤ 5\n* k ≤ n\n* 1 ≤ ci ≤ 10 (1 ≤ i ≤ n)\n* The number of test cases does not exceed 100.\n\nInput\n\nThe input consists of multiple test cases. One test case follows the format below.\n\n\nn k\nc1\nc2\nc3\n...\ncn\n\n\nn is the number of cards the teacher arranges, and k is the integer to declare. Also, ci (1 ≤ i ≤ n) indicates the number written on the card. Also, suppose that the teacher pastes it on the blackboard sideways in this order. The end of the input is indicated by a line where two 0s are separated by a single space.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00622 Monster Factory", "description": "Input\n\nThe input consists of multiple datasets. The end of the input is indicated by a- (hyphen) line.\n\nOne input consists of a three-line alphabetic string containing only uppercase and lowercase letters. These represent the Red package, the Green package, and the package that reaches the bottom, respectively. Represent. Note that it is case sensitive.\n\nThe same character never appears more than once on any line. No character is commonly included on the first and second lines.\n\nThe case described in the problem statement corresponds to the first example of Sample Input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1444_C. Team-Building", "description": "Input\n\nThe first line contains three integers n, m and k (1 ≤ n ≤ 500 000; 0 ≤ m ≤ 500 000; 2 ≤ k ≤ 500 000) — the number of students, the number of pairs of acquaintances and the number of groups respectively.\n\nThe second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ k), where c_i equals to the group number of the i-th student.\n\nNext m lines follow. The i-th of them contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n), denoting that students a_i and b_i are acquaintances. It's guaranteed, that a_i ≠ b_i, and that no (unordered) pair is mentioned more than once.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1041_F. Ray in the tube", "description": "Input\n\nThe first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.\n\nThe third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. \n\nThe fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02889 AtCoder Beginner Contest 143 - Travel by Car", "description": "Constraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 300\n* 0 \\leq M \\leq \\frac{N(N-1)}{2}\n* 1 \\leq L \\leq 10^9\n* 1 \\leq A_i, B_i \\leq N\n* A_i \\neq B_i\n* \\left(A_i, B_i\\right) \\neq \\left(A_j, B_j\\right) (if i \\neq j)\n* \\left(A_i, B_i\\right) \\neq \\left(B_j, A_j\\right) (if i \\neq j)\n* 1 \\leq C_i \\leq 10^9\n* 1 \\leq Q \\leq N\\left(N-1\\right)\n* 1 \\leq s_i, t_i \\leq N\n* s_i \\neq t_i\n* \\left(s_i, t_i\\right) \\neq \\left(s_j, t_j\\right) (if i \\neq j)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M L\nA_1 B_1 C_1\n:\nA_M B_M C_M\nQ\ns_1 t_1\n:\ns_Q t_Q", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00812 Equals are Equals", "description": "Input\n\nThe input to your program is a sequence of blocks of lines. A block consists of lines, each containing an expression, and a terminating line. After the last block, there is another terminating line. A terminating line is a line solely consisting of a period symbol.\n\nThe first expression of a block is one prepared by Mr. Simpson; all that follow in a block are answers by the students. An expression consists of lowercase letters, digits, operators `+', `-' and `^', parentheses `(' and `)', and spaces. A line containing an expression has no more than 80 characters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "151_B. Phone Numbers", "description": "Input\n\nThe first line contains an integer n (1 ≤ n ≤ 100) — the number of friends. \n\nThen follow n data blocks that describe each friend's phone books. Each block is presented in the following form: first goes the line that contains integer si and string namei (0 ≤ si ≤ 100) — the number of phone numbers in the phone book of the i-th friend and the name of the i-th friend. The name is a non-empty sequence of uppercase and lowercase Latin letters, containing no more than 20 characters. Next si lines contain numbers as \"XX-XX-XX\", where X is arbitrary digits from 0 to 9.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "690_F2. Tree of Life (medium)", "description": "Input\n\nThe first line of the input contains Z ≤ 20 – the number of test cases. Z descriptions of single test cases follow.\n\nIn each test case, the first line of input contains numbers n (2 ≤ n ≤ 100) and k (where k is the number of drawings; we have k = n). In the following lines, the descriptions of the k drawings are given. The description of the i-th drawing is a line containing mi – the number of edges in this drawing, followed by mi lines describing edges, each of which contains two space-separated integers –- the numbers of the two vertices connected by the edge.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p02044 Equal Split", "description": "Input\n\nThe input consists of up to 50 datasets. Each dataset is represented in the following format.\n\n> N M A1 A2 ... AN\n\nThe dataset consists of two lines. The first line gives the number of participants N in the party and the cost M incurred. N and M are integers, and 2 ≤ N ≤ 100 and N ≤ M ≤ 10 000, respectively. Also, M is a multiple of N. The second line gives each of the N participants their own money. Ai is an integer representing the possession of the i-th participant, and 1 ≤ Ai ≤ 10 000.\n\nThe end of the input is represented by a line consisting of only two 0s.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1172_C2. Nauuo and Pictures (hard version)", "description": "Input\n\nThe first line contains two integers n and m (1≤ n≤ 2⋅ 10^5, 1≤ m≤ 3000) — the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,…,a_n (a_i is either 0 or 1) — if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n positive integers w_1,w_2,…,w_n (w_i ≥ 1) — the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed 998244352-m.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "202_B. Brand New Easy Problem", "description": "Input\n\nThe first line contains a single integer n (1 ≤ n ≤ 4) — the number of words in Lesha's problem. The second line contains n space-separated words — the short description of the problem.\n\nThe third line contains a single integer m (1 ≤ m ≤ 10) — the number of problems in the Torcoder.com archive. Next m lines contain the descriptions of the problems as \"k s1 s2 ... sk\", where k (1 ≤ k ≤ 20) is the number of words in the problem and si is a word of the problem description.\n\nAll words from all problem descriptions contain no more than 10 lowercase English letters.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "490_B. Queue", "description": "Input\n\nThe first line contains integer n (2 ≤ n ≤ 2·105) — the number of students in the queue. \n\nThen n lines follow, i-th line contains the pair of integers ai, bi (0 ≤ ai, bi ≤ 106), where ai is the ID number of a person in front of a student and bi is the ID number of a person behind a student. The lines are given in the arbitrary order. Value 0 is given instead of a neighbor's ID number if the neighbor doesn't exist.\n\nThe ID numbers of all students are distinct. It is guaranteed that the records correspond too the queue where all the students stand in some order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00460 Bingo", "description": "input\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe input consists of one line, which contains the size of the bingo card N (1 ≤ N ≤ 7), the upper limit of the integers written in the square M (1 ≤ M ≤ 2000), and the bingo card. Three positive integers representing the sum of integers S (1 ≤ S ≤ 3000) are written separated by blanks. However, you can make one or more bingo cards that meet the conditions for any given input data.\n\nWhen N, M, S is 0, it indicates the end of input. The number of data sets does not exceed 5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "712_E. Memory and Casinos", "description": "Input\n\nThe first line of the input contains two integers n and q(1 ≤ n, q ≤ 100 000), — number of casinos and number of requests respectively.\n\nThe next n lines each contain integers ai and bi (1 ≤ ai < bi ≤ 109) — <image> is the probability pi of winning in casino i.\n\nThe next q lines each contain queries of one of the types specified above (1 ≤ a < b ≤ 109, 1 ≤ i ≤ n, 1 ≤ l ≤ r ≤ n).\n\nIt's guaranteed that there will be at least one query of type 2, i.e. the output will be non-empty. Additionally, it is guaranteed that p forms a non-decreasing sequence at all times.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "978_G. Petya's Exams", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ n) — the number of days and the number of exams.\n\nEach of the following m lines contains three integers s_i, d_i, c_i (1 ≤ s_i < d_i ≤ n, 1 ≤ c_i ≤ n) — the day, when questions for the i-th exam will be given, the day of the i-th exam, number of days Petya needs to prepare for the i-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "734_E. Anton and Tree", "description": "Input\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of vertices in the tree.\n\nThe second line contains n integers colori (0 ≤ colori ≤ 1) — colors of the vertices. colori = 0 means that the i-th vertex is initially painted white, while colori = 1 means it's initially painted black.\n\nThen follow n - 1 line, each of them contains a pair of integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — indices of vertices connected by the corresponding edge. It's guaranteed that all pairs (ui, vi) are distinct, i.e. there are no multiple edges.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "102_A. Clothes", "description": "Input\n\nThe first input file line contains integers n and m — the total number of clothing items in the shop and the total number of matching pairs of clothing items (<image>).\n\nNext line contains n integers ai (1 ≤ ai ≤ 106) — the prices of the clothing items in rubles.\n\nNext m lines each contain a pair of space-separated integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi). Each such pair of numbers means that the ui-th and the vi-th clothing items match each other. It is guaranteed that in each pair ui and vi are distinct and all the unordered pairs (ui, vi) are different.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "814_C. An impassioned circulation of affection", "description": "Input\n\nThe first line of input contains a positive integer n (1 ≤ n ≤ 1 500) — the length of the garland.\n\nThe second line contains n lowercase English letters s1s2... sn as a string — the initial colours of paper pieces on the garland.\n\nThe third line contains a positive integer q (1 ≤ q ≤ 200 000) — the number of plans Nadeko has.\n\nThe next q lines describe one plan each: the i-th among them contains an integer mi (1 ≤ mi ≤ n) — the maximum amount of pieces to repaint, followed by a space, then by a lowercase English letter ci — Koyomi's possible favourite colour.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p03585 Tenka1 Programmer Contest - CARtesian Coodinate", "description": "Constraints\n\n* 2 \\leq N \\leq 4 × 10^4\n* 1 \\leq |A_i|,|B_i| \\leq 10^4(1 \\leq i \\leq N)\n* 0 \\leq |C_i| \\leq 10^4(1 \\leq i \\leq N)\n* No two given lines are parallel.\n* All input values are integers.\n\nInputs\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1 C_1\n:\nA_N B_N C_N\n\n\nOutputs\n\nPrint the x-coordinate and y-coordinate of the place of the exhibition that will be selected, in this order, with a space in between. The output will be judged as correct when the absolute or relative error is at most 10^{-9}.\n\nExamples\n\nInput\n\n3\n1 1 1\n2 -1 2\n-1 2 2", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1221_D. Make The Fence Great Again", "description": "Input\n\nThe first line contains one integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of queries.\n\nThe first line of each query contains one integers n (1 ≤ n ≤ 3 ⋅ 10^5) — the number of boards in the fence.\n\nThe following n lines of each query contain the descriptions of the boards. The i-th line contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 10^9) — the length of the i-th board and the price for increasing it by 1, respectively.\n\nIt is guaranteed that sum of all n over all queries not exceed 3 ⋅ 10^5.\n\nIt is guaranteed that answer to each query will not exceed 10^{18}.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1475_F. Unusual Matrix", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 1000) — the size of the matrices.\n\nThe following n lines contain strings of length n, consisting of the characters '0' and '1' — the description of the matrix a.\n\nAn empty line follows.\n\nThe following n lines contain strings of length n, consisting of the characters '0' and '1' — the description of the matrix b.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1361_E. James and the Chase", "description": "Input\n\nThe first line contains one integer t (1 ≤ t ≤ 2 000) — the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of cities and roads between them. Each of the following m lines contains two integers u, v (u ≠ v; 1 ≤ u, v ≤ n), which denote that there is a directed road from u to v.\n\nYou can assume that between each ordered pair of cities there is at most one road. The sum of n over all test cases doesn't exceed 10^5, and the sum of m doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "818_C. Sofa Thief", "description": "Input\n\nThe first line contains one integer number d (1 ≤ d ≤ 105) — the number of sofas in the storehouse.\n\nThe second line contains two integer numbers n, m (1 ≤ n, m ≤ 105) — the size of the storehouse.\n\nNext d lines contains four integer numbers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — coordinates of the i-th sofa. It is guaranteed that cells (x1, y1) and (x2, y2) have common side, (x1, y1)  ≠  (x2, y2) and no cell is covered by more than one sofa.\n\nThe last line contains four integer numbers cntl, cntr, cntt, cntb (0 ≤ cntl, cntr, cntt, cntb ≤ d - 1).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00816 Shredding Company", "description": "Input\n\nThe input consists of several test cases, each on one line, as follows:\n\n\nt1 num1\nt2 num2\n...\ntn numn\n0 0\n\n\nEach test case consists of the following two positive integers, which are separated by one space: (1) the first integer (ti above) is the target number; (2) the second integer (numi above) is the number that is on the paper to be shredded.\n\nNeither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01620 King's Inspection", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n\nn\nk1 k2 ... kn\ns\n\n\nn is an integer representing the number of keys and can be assumed to be between 1 and 100. The following line contains a list of keys. ki indicates the i-th key. It can be assumed that it is 1 or more and 52 or less. s is a character string consisting of uppercase and lowercase letters, and indicates a list of stations to visit. It may be assumed that it is 1 or more and 100 or less. n = 0 indicates the end of input. This is not included in the dataset.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "699_A. Launch of Collider", "description": "Input\n\nThe first line contains the positive integer n (1 ≤ n ≤ 200 000) — the number of particles. \n\nThe second line contains n symbols \"L\" and \"R\". If the i-th symbol equals \"L\", then the i-th particle will move to the left, otherwise the i-th symbol equals \"R\" and the i-th particle will move to the right.\n\nThe third line contains the sequence of pairwise distinct even integers x1, x2, ..., xn (0 ≤ xi ≤ 109) — the coordinates of particles in the order from the left to the right. It is guaranteed that the coordinates of particles are given in the increasing order.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "505_D. Mr. Kitayuta's Technology", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105), denoting the number of the cities in Shuseki Kingdom and the number of the important pairs, respectively.\n\nThe following m lines describe the important pairs. The i-th of them (1 ≤ i ≤ m) contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), denoting that it must be possible to travel from city ai to city bi by using one or more teleportation pipes (but not necessarily from city bi to city ai). It is guaranteed that all pairs (ai, bi) are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1086_D. Rock-Paper-Scissors Champion", "description": "Input\n\nThe first line contains two integers n and q — the number of players and requests respectively (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ q ≤ 2 ⋅ 10^5).\n\nThe second line contains a string of n characters. The i-th of these characters is \"R\", \"P\", or \"S\" if the player i was going to play \"rock\", \"paper\", or \"scissors\" before all requests respectively.\n\nThe following q lines describe the requests. The j-th of these lines contain an integer p_j and a character c_j meaning that the player p_j is going to use the shape described by the character c_j from this moment (1 ≤ p_j ≤ n).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "926_F. Mobile Communications", "description": "Input\n\nThe first line contains three integers n, p and m (1 ≤ n ≤ 100 000, 1 ≤ p ≤ 109, 1 ≤ m ≤ 109, n ≤ m) — the number of days Arkady will top up the account, the amount of the daily payment, and the number of days you should check.\n\nThe i-th of the following n lines contains two integers di and ti (1 ≤ di ≤ m, 1 ≤ ti ≤ 109) — the index of the day when Arkady will make the i-th top up, and the amount he will deposit on this day. It is guaranteed that the indices of the days are distinct and are given in increasing order, i. e. di > di - 1 for all i from 2 to n.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "506_B. Mr. Kitayuta's Technology", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105), denoting the number of the cities in Shuseki Kingdom and the number of the important pairs, respectively.\n\nThe following m lines describe the important pairs. The i-th of them (1 ≤ i ≤ m) contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), denoting that it must be possible to travel from city ai to city bi by using one or more teleportation pipes (but not necessarily from city bi to city ai). It is guaranteed that all pairs (ai, bi) are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "61_B. Hard Work", "description": "Input\n\nThe first three lines contain a string each. These are the initial strings. They consists only of lowercase and uppercase Latin letters and signs (\"-\", \";\" and \"_\"). All the initial strings have length from 1 to 100, inclusively.\n\nIn the fourth line there is a single integer n (0 ≤ n ≤ 1000), the number of students.\n\nNext n lines contain a student's answer each. It is guaranteed that the answer meets what the teacher said. Each answer iconsists only of lowercase and uppercase Latin letters and signs (\"-\", \";\" and \"_\"). Length is from 1 to 600, inclusively.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01725 Unordered Operators", "description": "Input\n\nThe input is given in the following format.\nA formula consisting of numbers from 0 to 9 and the operators'+','-','*' and parentheses'(',')'\n\n\n* To be precise, the input is in the format shown in BNF below.\n\n\n\n> <expr> :: = (<expr>) | <number> | <expr> <op> <expr>\n> <op> :: = + |-| *\n\n<number> represents a non-negative integer.\n\nConstraints\n\nThe input satisfies the following constraints.\n\n* The formula is 200 characters or less.\n* No matter what priority is set, it will not overflow as a result of calculation or in the middle of it as a 64-bit integer type.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1045_J. Moonwalk challenge", "description": "Input\n\nIn the first line, integer N (2 ≤ N ≤ 10^5) — number of craters on the Moon. Craters are numerated with numbers 1 to N.\n\nIn next N-1 lines, three values u, v, L (1 ≤ u, v ≤ N, L ∈ \\\\{a, ..., z\\}) — denoting that there is a direct path with color L between craters u and v.\n\nNext line contains integer Q (1 ≤ Q ≤ 10^5) — number of queries.\n\nNext Q lines contain three values u, v (1 ≤ u, v ≤ N) and S (|S| ≤ 100), where u and v are the two cratersfor which you should find how many times array of colors S (represented as string) appears on the path from u to v.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1421_D. Hexagons", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^{4}). Description of the test cases follows.\n\nThe first line of each test case contains two integers x and y (-10^{9} ≤ x, y ≤ 10^{9}) representing the coordinates of the target hexagon.\n\nThe second line of each test case contains six integers c_1, c_2, c_3, c_4, c_5, c_6 (1 ≤ c_1, c_2, c_3, c_4, c_5, c_6 ≤ 10^{9}) representing the six costs of the making one step in a particular direction (refer to the picture above to see which edge is for each value).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p00534 Silk Road", "description": "input\n\nThe input consists of 1 + N + M lines.\n\nOn the first line, two integers N and M (1 ≤ N ≤ M ≤ 1000) are written separated by a blank. This means that the Silk Road consists of N + 1 cities and JOI must carry the silk from city 0 to city N within M days.\n\nThe integer Di (1 ≤ Di ≤ 1000) is written on the i-th line (1 ≤ i ≤ N) of the following N lines. This means that the distance between city i -1 and city i is Di.\n\nThe integer Cj (1 ≤ Cj ≤ 1000) is written on the jth line (1 ≤ j ≤ M) of the following M lines. This means that the bad weather on day j is Cj.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "529_D. Social Network", "description": "Input\n\nThe first line contains three integers n, M and T (1 ≤ n, M ≤ 20 000, 1 ≤ T ≤ 86400) — the number of queries, the record number of online users and the time when the user was online after a query was sent. Next n lines contain the times of the queries in the format \"hh:mm:ss\", where hh are hours, mm are minutes, ss are seconds. The times of the queries follow in the non-decreasing order, some of them can coincide. It is guaranteed that all the times and even all the segments of type [s, s + T - 1] are within one 24-hour range (from 00:00:00 to 23:59:59).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "524_D. Social Network", "description": "Input\n\nThe first line contains three integers n, M and T (1 ≤ n, M ≤ 20 000, 1 ≤ T ≤ 86400) — the number of queries, the record number of online users and the time when the user was online after a query was sent. Next n lines contain the times of the queries in the format \"hh:mm:ss\", where hh are hours, mm are minutes, ss are seconds. The times of the queries follow in the non-decreasing order, some of them can coincide. It is guaranteed that all the times and even all the segments of type [s, s + T - 1] are within one 24-hour range (from 00:00:00 to 23:59:59).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "p01803 Airport Codes", "description": "Input\n\nThe input consists of 100 or less datasets. Each dataset is given in the following format.\n\n> n\n> s1\n> ...\n> sn\n\nThe number of airports n (2 ≤ n ≤ 50) is given as an integer on the first line, and the name si of the airport is given as a string on each of the following n lines. Airport names consist only of lowercase English alphabets from'a'to'z', all with 1 to 50 characters. Also, the names of the airports given are all different. That is, when 1 ≤ i <j ≤ n, si ≠ sj is satisfied.\n\nThe end of the input is indicated by a line consisting of only one zero.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "748_F. Santa Clauses and a Soccer Championship", "description": "Input\n\nThe first line of input contains two integers n and k (2 ≤ n ≤ 2·105, 2 ≤ 2k ≤ n) — the number of cities in Treeland and the number of pairs of teams, respectively.\n\nThe following n - 1 lines describe roads in Treeland: each of these lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) which mean that there is a road between cities a and b. It's guaranteed that there is a path between any two cities.\n\nThe last line contains 2k distinct integers c1, c2, ..., c2k (1 ≤ ci ≤ n), where ci is the hometown of the i-th team. All these numbers are distinct.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1133_F1. Spanning Tree with Maximum Degree", "description": "Input\n\nThe first line contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, n - 1 ≤ m ≤ min(2 ⋅ 10^5, (n(n-1))/(2))) — the number of vertices and edges, respectively.\n\nThe following m lines denote edges: edge i is represented by a pair of integers v_i, u_i (1 ≤ v_i, u_i ≤ n, u_i ≠ v_i), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair (v_i, u_i) there are no other pairs (v_i, u_i) or (u_i, v_i) in the list of edges, and for each pair (v_i, u_i) the condition v_i ≠ u_i is satisfied.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1013_A. Piles With Stones", "description": "Input\n\nThe first line of the input file contains a single integer n, the number of piles with stones in the garden (1 ≤ n ≤ 50).\n\nThe second line contains n integers separated by spaces x_1, x_2, …, x_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time (0 ≤ x_i ≤ 1000).\n\nThe third line contains n integers separated by spaces y_1, y_2, …, y_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time (0 ≤ y_i ≤ 1000).", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "177_F1. Script Generation", "description": "Input\n\nThe first input line contains integers n, k and t (1 ≤ k ≤ min(100, n2), 1 ≤ t ≤ 2·105), separated by single spaces. Next k lines contain triples of integers (h, w, r) (1 ≤ h, w ≤ n; 1 ≤ r ≤ 1000), separated by single spaces, which describe the possible marriages. It is guaranteed that the input data is correct: t doesn't exceed the total number of acceptable sets, and each pair (h, w) is present in at most one triple.\n\nThe input limitations for getting 30 points are: \n\n  * 1 ≤ n ≤ 5\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 ≤ n ≤ 20", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "175_B. Plane of Tanks: Pro", "description": "Input\n\nThe first line contains the only integer number n (1 ≤ n ≤ 1000) — a number of records with the players' results.\n\nEach of the next n lines contains a player's name and the amount of points, obtained by the player for the round, separated with a space. The name contains not less than 1 and no more than 10 characters. The name consists of lowercase Latin letters only. It is guaranteed that any two different players have different names. The amount of points, obtained by the player for the round, is a non-negative integer number and does not exceed 1000.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1011_C. Fly", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — number of planets.\n\nThe second line contains the only integer m (1 ≤ m ≤ 1000) — weight of the payload.\n\nThe third line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000), where a_i is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000), where b_i is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than 10^9 tons of fuel.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "1010_A. Fly", "description": "Input\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — number of planets.\n\nThe second line contains the only integer m (1 ≤ m ≤ 1000) — weight of the payload.\n\nThe third line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000), where a_i is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000), where b_i is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than 10^9 tons of fuel.", "grammar": {"productions": [""], "constraints": [""]}}
{"name": "164_A. Variable, or There and Back Again", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the numbers of states and transitions, correspondingly.\n\nThe second line contains space-separated n integers f1, f2, ..., fn (0 ≤ fi ≤ 2), fi described actions performed upon Vasya in state i: 0 represents ignoring, 1 — assigning a value, 2 — using.\n\nNext m lines contain space-separated pairs of integers ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi), each pair represents the transition from the state number ai to the state number bi. Between two states can be any number of transitions.", "grammar": {"productions": [""], "constraints": [""]}}
